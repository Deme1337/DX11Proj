# 1 "d:\\graphics-programming\\d3d_template\\d3d_template\\terrainshader.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 341 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "d:\\graphics-programming\\d3d_template\\d3d_template\\terrainshader.cpp" 2
# 1 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 1







# 1 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/targetver.h" 1







# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\SDKDDKVer.h" 1
# 20 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\SDKDDKVer.h"
#pragma warning(push)

#pragma warning(disable: 4001)
# 279 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\SDKDDKVer.h"
#pragma warning(pop)
# 8 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/targetver.h" 2
# 8 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 2




# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 1
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\winapifamily.h" 1
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2
# 149 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h"
#pragma warning(disable: 4514)

#pragma warning(disable: 4103)


#pragma warning(push)

#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)


# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\excpt.h" 1 3
# 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\excpt.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\sal.h" 1 3
# 2381 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\sal.h" 3
extern "C" {
# 2987 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\sal.h" 3
}



# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\ConcurrencySal.h" 1 3
# 22 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\ConcurrencySal.h" 3
extern "C" {
# 354 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\ConcurrencySal.h" 3
}
# 2990 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\sal.h" 2 3
# 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h" 1 3
# 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h" 3
#pragma pack(push, 8)


extern "C" {
# 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h" 3
        typedef unsigned __int64 uintptr_t;
# 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h" 3
        typedef char* va_list;
# 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h" 3
    void __cdecl __va_start(va_list* , ...);
# 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h" 3
}



    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        void __vcrt_va_start_verify_argument_type() throw()
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
        }
    }
# 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h" 3
#pragma pack(pop)
# 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 2 3
# 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 3
#pragma pack(push, 8)
# 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 3
 extern "C" {
# 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 3
    typedef unsigned __int64 size_t;
    typedef __int64 ptrdiff_t;
    typedef __int64 intptr_t;







    typedef bool __vcrt_bool;
# 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 3
    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper(__unaligned _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];


    }
# 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 3
    void __cdecl __security_init_cookie(void);





        void __cdecl __security_check_cookie( uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure( uintptr_t _StackCookie);



extern uintptr_t __security_cookie;







}
# 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 3
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\excpt.h" 2 3


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\excpt.h" 3
 extern "C" {




typedef enum _EXCEPTION_DISPOSITION
{
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;
# 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\excpt.h" 3
        struct _EXCEPTION_RECORD;
        struct _CONTEXT;
        struct _DISPATCHER_CONTEXT;

        __declspec(dllimport) EXCEPTION_DISPOSITION __C_specific_handler(
                    struct _EXCEPTION_RECORD* ExceptionRecord,
                    void* EstablisherFrame,
                    struct _CONTEXT* ContextRecord,
                    struct _DISPATCHER_CONTEXT* DispatcherContext
            );
# 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\excpt.h" 3
unsigned long __cdecl _exception_code(void);
void * __cdecl _exception_info(void);
int __cdecl _abnormal_termination(void);
# 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\excpt.h" 3
}
# 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\excpt.h" 3
#pragma pack(pop)
# 160 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h" 2 3


#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h" 3
 extern "C" {
# 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h" 3
}
# 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h" 3
#pragma pack(pop)
# 161 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2



# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\windef.h" 1
# 17 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\windef.h"
extern "C" {







# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\minwindef.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\minwindef.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\specstrings.h" 1
# 63 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\specstrings.h"
extern "C" {
# 484 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\specstrings.h"
}
# 513 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\specstrings.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\specstrings_strict.h" 1
# 188 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\specstrings_strict.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\specstrings_undef.h" 1
# 188 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\specstrings_strict.h" 2
# 513 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\specstrings.h" 2
# 534 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\specstrings.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\driverspecs.h" 1
# 125 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\driverspecs.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/sdv_driverspecs.h" 1
# 125 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\driverspecs.h" 2








extern "C" {
# 863 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\driverspecs.h"
}
# 534 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\specstrings.h" 2
# 14 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\minwindef.h" 2
# 42 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\minwindef.h"
extern "C" {
# 51 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\minwindef.h"
typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef char *PSZ;
# 156 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\minwindef.h"
typedef unsigned long DWORD;
typedef int BOOL;
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef float FLOAT;
typedef FLOAT *PFLOAT;
typedef BOOL *PBOOL;
typedef BOOL *LPBOOL;
typedef BYTE *PBYTE;
typedef BYTE *LPBYTE;
typedef int *PINT;
typedef int *LPINT;
typedef WORD *PWORD;
typedef WORD *LPWORD;
typedef long *LPLONG;
typedef DWORD *PDWORD;
typedef DWORD *LPDWORD;
typedef void *LPVOID;
typedef const void *LPCVOID;

typedef int INT;
typedef unsigned int UINT;
typedef unsigned int *PUINT;




# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 1
# 22 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
#pragma warning(push)

#pragma warning(disable: 4201)
#pragma warning(disable: 4214)


extern "C" {



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h" 1
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h" 1
# 10 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 10 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h" 2


#pragma pack(push, 8)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
 extern "C" {
# 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}



    typedef bool __crt_bool;
# 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    __declspec(dllimport) void __cdecl _invalid_parameter(
                   wchar_t const*,
                   wchar_t const*,
                   wchar_t const*,
                   unsigned int,
                   uintptr_t
        );


__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(void);
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
__declspec(dllimport) void __cdecl _invoke_watson(
               wchar_t const*,
               wchar_t const*,
               wchar_t const*,
               unsigned int,
               uintptr_t);
# 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef int errno_t;
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
typedef long __time32_t;
typedef __int64 __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
                        int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data* locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t;

typedef struct _Mbstatet
{
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;
# 489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
        typedef __time64_t time_t;
# 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    typedef size_t rsize_t;
# 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
}
# 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#pragma pack(pop)
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
 extern "C" {
# 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
    __declspec(dllimport) const unsigned short* __cdecl __pctype_func(void);
    __declspec(dllimport) const wctype_t* __cdecl __pwctype_func(void);
# 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
               __declspec(dllimport) int __cdecl iswalnum ( wint_t _C);
               __declspec(dllimport) int __cdecl iswalpha ( wint_t _C);
               __declspec(dllimport) int __cdecl iswascii ( wint_t _C);
               __declspec(dllimport) int __cdecl iswblank ( wint_t _C);
               __declspec(dllimport) int __cdecl iswcntrl ( wint_t _C);


               __declspec(dllimport) int __cdecl iswdigit ( wint_t _C);

               __declspec(dllimport) int __cdecl iswgraph ( wint_t _C);
               __declspec(dllimport) int __cdecl iswlower ( wint_t _C);
               __declspec(dllimport) int __cdecl iswprint ( wint_t _C);
               __declspec(dllimport) int __cdecl iswpunct ( wint_t _C);
               __declspec(dllimport) int __cdecl iswspace ( wint_t _C);
               __declspec(dllimport) int __cdecl iswupper ( wint_t _C);
               __declspec(dllimport) int __cdecl iswxdigit ( wint_t _C);
               __declspec(dllimport) int __cdecl __iswcsymf( wint_t _C);
               __declspec(dllimport) int __cdecl __iswcsym ( wint_t _C);

               __declspec(dllimport) int __cdecl _iswalnum_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswalpha_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswblank_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcntrl_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswdigit_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswgraph_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswlower_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswprint_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswpunct_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswspace_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswupper_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswxdigit_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcsymf_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcsym_l ( wint_t _C, _locale_t _Locale);


               __declspec(dllimport) wint_t __cdecl towupper( wint_t _C);
               __declspec(dllimport) wint_t __cdecl towlower( wint_t _C);
               __declspec(dllimport) int __cdecl iswctype( wint_t _C, wctype_t _Type);

               __declspec(dllimport) wint_t __cdecl _towupper_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) wint_t __cdecl _towlower_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswctype_l( wint_t _C, wctype_t _Type, _locale_t _Locale);



                   __declspec(dllimport) int __cdecl isleadbyte( int _C);
                   __declspec(dllimport) int __cdecl _isleadbyte_l( int _C, _locale_t _Locale);

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "iswctype" " " "instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype( wint_t _C, wctype_t _Type);
# 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
}
# 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h" 2


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
 extern "C" {
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
               __declspec(dllimport) int __cdecl _isctype( int _C, int _Type);
               __declspec(dllimport) int __cdecl _isctype_l( int _C, int _Type, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalpha( int _C);
               __declspec(dllimport) int __cdecl _isalpha_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isupper( int _C);
               __declspec(dllimport) int __cdecl _isupper_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl islower( int _C);
               __declspec(dllimport) int __cdecl _islower_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl isdigit( int _C);

               __declspec(dllimport) int __cdecl _isdigit_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isxdigit( int _C);
               __declspec(dllimport) int __cdecl _isxdigit_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl isspace( int _C);

               __declspec(dllimport) int __cdecl _isspace_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl ispunct( int _C);
               __declspec(dllimport) int __cdecl _ispunct_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isblank( int _C);
               __declspec(dllimport) int __cdecl _isblank_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalnum( int _C);
               __declspec(dllimport) int __cdecl _isalnum_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isprint( int _C);
               __declspec(dllimport) int __cdecl _isprint_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isgraph( int _C);
               __declspec(dllimport) int __cdecl _isgraph_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iscntrl( int _C);
               __declspec(dllimport) int __cdecl _iscntrl_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl toupper( int _C);


                                  __declspec(dllimport) int __cdecl tolower( int _C);

                                  __declspec(dllimport) int __cdecl _tolower( int _C);
               __declspec(dllimport) int __cdecl _tolower_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl _toupper( int _C);
               __declspec(dllimport) int __cdecl _toupper_l( int _C, _locale_t _Locale);

               __declspec(dllimport) int __cdecl __isascii( int _C);
               __declspec(dllimport) int __cdecl __toascii( int _C);
               __declspec(dllimport) int __cdecl __iscsymf( int _C);
               __declspec(dllimport) int __cdecl __iscsym( int _C);
# 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
        __declspec(dllimport) int __cdecl ___mb_cur_max_func(void);

        __declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t);







        __declspec(dllimport) int __cdecl _chvalidator( int _Ch, int _Mask);
# 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
    __inline __crt_locale_data_public* __cdecl __acrt_get_locale_data_prefix(void const volatile* const _LocalePointers)
    {
        _locale_t const _TypedLocalePointers = (_locale_t)_LocalePointers;
        return (__crt_locale_data_public*)_TypedLocalePointers->locinfo;
    }


    __declspec(dllimport) int __cdecl _chvalidator_l( _locale_t, int _Ch, int _Mask);


    __inline int __cdecl _chvalidchk_l(
                 int const _C,
                 int const _Mask,
                 _locale_t const _Locale
        )
    {

        return _chvalidator_l(_Locale, _C, _Mask);
# 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
    }




    __inline int __cdecl _ischartype_l(
                 int const _C,
                 int const _Mask,
                 _locale_t const _Locale
        )
    {
        if (_Locale && __acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max > 1)
        {
            return _isctype_l(_C, _Mask, _Locale);
        }

        return _chvalidchk_l(_C, _Mask, _Locale);
    }
# 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
}
# 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h"
#pragma pack(pop)
# 31 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2
# 83 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\kernelspecs.h" 1
# 43 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\kernelspecs.h"
extern "C" {
# 249 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\kernelspecs.h"
}
# 83 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2
# 171 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\basetsd.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\basetsd.h"
 typedef unsigned __int64 POINTER_64_INT;
# 67 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\basetsd.h"
extern "C" {


typedef signed char INT8, *PINT8;
typedef signed short INT16, *PINT16;
typedef signed int INT32, *PINT32;
typedef signed __int64 INT64, *PINT64;
typedef unsigned char UINT8, *PUINT8;
typedef unsigned short UINT16, *PUINT16;
typedef unsigned int UINT32, *PUINT32;
typedef unsigned __int64 UINT64, *PUINT64;





typedef signed int LONG32, *PLONG32;





typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;
# 120 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\basetsd.h"
    typedef __int64 INT_PTR, *PINT_PTR;
    typedef unsigned __int64 UINT_PTR, *PUINT_PTR;

    typedef __int64 LONG_PTR, *PLONG_PTR;
    typedef unsigned __int64 ULONG_PTR, *PULONG_PTR;
# 150 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\basetsd.h"
typedef __int64 SHANDLE_PTR;
typedef unsigned __int64 HANDLE_PTR;
typedef unsigned int UHALF_PTR, *PUHALF_PTR;
typedef int HALF_PTR, *PHALF_PTR;


__inline
unsigned long
HandleToULong(
    const void *h
    )
{
    return((unsigned long) (ULONG_PTR) h );
}

__inline
long
HandleToLong(
    const void *h
    )
{
    return((long) (LONG_PTR) h );
}

__inline
void *
ULongToHandle(
    const unsigned long h
    )
{
    return((void *) (UINT_PTR) h );
}


__inline
void *
LongToHandle(
    const long h
    )
{
    return((void *) (INT_PTR) h );
}


__inline
unsigned long
PtrToUlong(
    const void *p
    )
{
    return((unsigned long) (ULONG_PTR) p );
}

__inline
unsigned int
PtrToUint(
    const void *p
    )
{
    return((unsigned int) (UINT_PTR) p );
}

__inline
unsigned short
PtrToUshort(
    const void *p
    )
{
    return((unsigned short) (unsigned long) (ULONG_PTR) p );
}

__inline
long
PtrToLong(
    const void *p
    )
{
    return((long) (LONG_PTR) p );
}

__inline
int
PtrToInt(
    const void *p
    )
{
    return((int) (INT_PTR) p );
}

__inline
short
PtrToShort(
    const void *p
    )
{
    return((short) (long) (LONG_PTR) p );
}

__inline
void *
IntToPtr(
    const int i
    )

{
    return( (void *)(INT_PTR)i );
}

__inline
void *
UIntToPtr(
    const unsigned int ui
    )

{
    return( (void *)(UINT_PTR)ui );
}

__inline
void *
LongToPtr(
    const long l
    )

{
    return( (void *)(LONG_PTR)l );
}

__inline
void *
ULongToPtr(
    const unsigned long ul
    )

{
    return( (void *)(ULONG_PTR)ul );
}






__inline
void *
Ptr32ToPtr(
    const void * __ptr32 p
    )
{
    return((void *) (ULONG_PTR) (unsigned long) p);
}

__inline
void *
Handle32ToHandle(
    const void * __ptr32 h
    )
{
    return((void *) (LONG_PTR) (long) h);
}

__inline
void * __ptr32
PtrToPtr32(
    const void *p
    )
{
    return((void * __ptr32) (unsigned long) (ULONG_PTR) p);
}
# 415 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\basetsd.h"
typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;
# 464 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\basetsd.h"
typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;





typedef __int64 LONG64, *PLONG64;






typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;







typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY *PKAFFINITY;




}
# 171 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2
# 341 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef void *PVOID;
typedef void * __ptr64 PVOID64;
# 383 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef char CHAR;
typedef short SHORT;
typedef long LONG;

typedef int INT;
# 396 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef wchar_t WCHAR;





typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;

typedef WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef PWSTR *PZPWSTR;
typedef const PWSTR *PCZPWSTR;
typedef WCHAR __unaligned *LPUWSTR, *PUWSTR;
typedef const WCHAR *LPCWSTR, *PCWSTR;
typedef PCWSTR *PZPCWSTR;
typedef const PCWSTR *PCZPCWSTR;
typedef const WCHAR __unaligned *LPCUWSTR, *PCUWSTR;

typedef WCHAR *PZZWSTR;
typedef const WCHAR *PCZZWSTR;
typedef WCHAR __unaligned *PUZZWSTR;
typedef const WCHAR __unaligned *PCUZZWSTR;

typedef WCHAR *PNZWCH;
typedef const WCHAR *PCNZWCH;
typedef WCHAR __unaligned *PUNZWCH;
typedef const WCHAR __unaligned *PCUNZWCH;



typedef const WCHAR *LPCWCHAR, *PCWCHAR;
typedef const WCHAR __unaligned *LPCUWCHAR, *PCUWCHAR;





typedef unsigned long UCSCHAR;
# 453 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef UCSCHAR *PUCSCHAR;
typedef const UCSCHAR *PCUCSCHAR;

typedef UCSCHAR *PUCSSTR;
typedef UCSCHAR __unaligned *PUUCSSTR;

typedef const UCSCHAR *PCUCSSTR;
typedef const UCSCHAR __unaligned *PCUUCSSTR;

typedef UCSCHAR __unaligned *PUUCSCHAR;
typedef const UCSCHAR __unaligned *PCUUCSCHAR;







typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;

typedef CHAR *NPSTR, *LPSTR, *PSTR;
typedef PSTR *PZPSTR;
typedef const PSTR *PCZPSTR;
typedef const CHAR *LPCSTR, *PCSTR;
typedef PCSTR *PZPCSTR;
typedef const PCSTR *PCZPCSTR;

typedef CHAR *PZZSTR;
typedef const CHAR *PCZZSTR;

typedef CHAR *PNZCH;
typedef const CHAR *PCNZCH;







typedef WCHAR TCHAR, *PTCHAR;
typedef WCHAR TBYTE , *PTBYTE ;



typedef LPWCH LPTCH, PTCH;
typedef LPCWCH LPCTCH, PCTCH;
typedef LPWSTR PTSTR, LPTSTR;
typedef LPCWSTR PCTSTR, LPCTSTR;
typedef LPUWSTR PUTSTR, LPUTSTR;
typedef LPCUWSTR PCUTSTR, LPCUTSTR;
typedef LPWSTR LP;
typedef PZZWSTR PZZTSTR;
typedef PCZZWSTR PCZZTSTR;
typedef PUZZWSTR PUZZTSTR;
typedef PCUZZWSTR PCUZZTSTR;
typedef PZPWSTR PZPTSTR;
typedef PNZWCH PNZTCH;
typedef PCNZWCH PCNZTCH;
typedef PUNZWCH PUNZTCH;
typedef PCUNZWCH PCUNZTCH;
# 539 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef SHORT *PSHORT;
typedef LONG *PLONG;
# 549 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _PROCESSOR_NUMBER {
    WORD Group;
    BYTE Number;
    BYTE Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;






typedef struct _GROUP_AFFINITY {
    KAFFINITY Mask;
    WORD Group;
    WORD Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;
# 573 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef void *HANDLE;
# 583 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef HANDLE *PHANDLE;







typedef BYTE FCHAR;
typedef WORD FSHORT;
typedef DWORD FLONG;
# 604 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef long HRESULT;
# 667 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef char CCHAR;
typedef DWORD LCID;
typedef PDWORD PLCID;
typedef WORD LANGID;
# 679 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID, *PCOMPARTMENT_ID;
# 710 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;
# 725 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;
# 747 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;




typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    } ;
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;

    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;




typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } ;
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;

    ULONGLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;





typedef LONG_PTR RTL_REFERENCE_COUNT, *PRTL_REFERENCE_COUNT;
# 804 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;


typedef ULONGLONG DWORDLONG;
typedef DWORDLONG *PDWORDLONG;
# 947 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" {
# 957 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
unsigned char
__cdecl
_rotl8 (
         unsigned char Value,
         unsigned char Shift
    );

unsigned short
__cdecl
_rotl16 (
         unsigned short Value,
         unsigned char Shift
    );

unsigned char
__cdecl
_rotr8 (
         unsigned char Value,
         unsigned char Shift
    );

unsigned short
__cdecl
_rotr16 (
         unsigned short Value,
         unsigned char Shift
    );

#pragma intrinsic(_rotl8)
#pragma intrinsic(_rotl16)
#pragma intrinsic(_rotr8)
#pragma intrinsic(_rotr16)
# 999 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
unsigned int
__cdecl
_rotl (
         unsigned int Value,
         int Shift
    );

unsigned __int64
__cdecl
_rotl64 (
         unsigned __int64 Value,
         int Shift
    );

unsigned int
__cdecl
_rotr (
         unsigned int Value,
         int Shift
    );

unsigned __int64
__cdecl
_rotr64 (
         unsigned __int64 Value,
         int Shift
    );

#pragma intrinsic(_rotl)
#pragma intrinsic(_rotl64)
#pragma intrinsic(_rotr)
#pragma intrinsic(_rotr64)




}






typedef BYTE BOOLEAN;
typedef BOOLEAN *PBOOLEAN;





typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;
# 1070 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;

typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;



# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\guiddef.h" 1
# 22 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\guiddef.h"
typedef struct _GUID {
    unsigned long Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char Data4[ 8 ];
} GUID;
# 75 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\guiddef.h"
typedef GUID *LPGUID;




typedef const GUID *LPCGUID;





typedef GUID IID;
typedef IID *LPIID;


typedef GUID CLSID;
typedef CLSID *LPCLSID;


typedef GUID FMTID;
typedef FMTID *LPFMTID;
# 146 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\guiddef.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 1
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h" 1
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
 extern "C" {



__declspec(dllimport) extern int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);



__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


__declspec(dllimport) errno_t __cdecl _set_doserrno( unsigned long _Value);
__declspec(dllimport) errno_t __cdecl _get_doserrno( unsigned long * _Value);
# 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
}
# 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
#pragma pack(pop)
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h" 2

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h" 2 3




#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h" 3
 extern "C" {




__declspec(dllimport) void const* __cdecl memchr(
                                    void const* _Buf,
                                    int _Val,
                                    size_t _MaxCount
    );


int __cdecl memcmp(
                            void const* _Buf1,
                            void const* _Buf2,
                            size_t _Size
    );
# 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h" 3
void* __cdecl memcpy(
                                  void* _Dst,
                                  void const* _Src,
                                  size_t _Size
    );


__declspec(dllimport) void* __cdecl memmove(
                                      void* _Dst,
                                      void const* _Src,
                                      size_t _Size
    );
# 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h" 3
void* __cdecl memset(
                                  void* _Dst,
                                  int _Val,
                                  size_t _Size
    );


__declspec(dllimport) char const* __cdecl strchr(
           char const* _Str,
           int _Val
    );


__declspec(dllimport) char const* __cdecl strrchr(
           char const* _Str,
           int _Ch
    );


__declspec(dllimport) char const* __cdecl strstr(
           char const* _Str,
           char const* _SubStr
    );



__declspec(dllimport) wchar_t const* __cdecl wcschr(
           wchar_t const* _Str,
           wchar_t _Ch
    );


__declspec(dllimport) wchar_t const* __cdecl wcsrchr(
           wchar_t const* _Str,
           wchar_t _Ch
    );



__declspec(dllimport) wchar_t const* __cdecl wcsstr(
           wchar_t const* _Str,
           wchar_t const* _SubStr
    );



}
# 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h" 3
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h" 2


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
 extern "C" {
# 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
    static __inline errno_t __cdecl memcpy_s(
                                                                 void* const _Destination,
                                                                 rsize_t const _DestinationSize,
                                                                 void const* const _Source,
                                                                 rsize_t const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };


            return 22;
        }

        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }


    static __inline errno_t __cdecl memmove_s(
                                                                 void* const _Destination,
                                                                 rsize_t const _DestinationSize,
                                                                 void const* const _Source,
                                                                 rsize_t const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }





}
# 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
#pragma pack(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h" 2





#pragma pack(push, 8)
# 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
 extern "C" {




__declspec(dllimport) int __cdecl _memicmp(
                                void const* _Buf1,
                                void const* _Buf2,
                                size_t _Size
    );


__declspec(dllimport) int __cdecl _memicmp_l(
                                void const* _Buf1,
                                void const* _Buf2,
                                size_t _Size,
                                _locale_t _Locale
    );
# 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memccpy" ". See online help for details."))
    __declspec(dllimport) void* __cdecl memccpy(
                                      void* _Dst,
                                      void const* _Src,
                                      int _Val,
                                      size_t _Size
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl memicmp(
                                    void const* _Buf1,
                                    void const* _Buf2,
                                    size_t _Size
        );





    extern "C++"
    inline void* __cdecl memchr(
                                 void* _Pv,
                                 int _C,
                                 size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }




}
# 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h" 1
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#pragma pack(push, 8)
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
 extern "C" {
# 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
    __declspec(dllimport) errno_t __cdecl wcscat_s(
                                        wchar_t* _Destination,
             rsize_t _SizeInWords,
               wchar_t const* _Source
        );


    __declspec(dllimport) errno_t __cdecl wcscpy_s(
                                     wchar_t* _Destination,
             rsize_t _SizeInWords,
               wchar_t const* _Source
        );


    __declspec(dllimport) errno_t __cdecl wcsncat_s(
                                        wchar_t* _Destination,
                                        rsize_t _SizeInWords,
                                        wchar_t const* _Source,
                                        rsize_t _MaxCount
        );


    __declspec(dllimport) errno_t __cdecl wcsncpy_s(
                                     wchar_t* _Destination,
                                     rsize_t _SizeInWords,
                                     wchar_t const* _Source,
                                     rsize_t _MaxCount
        );


    __declspec(dllimport) wchar_t* __cdecl wcstok_s(
                                      wchar_t* _String,
                                      wchar_t const* _Delimiter,
                                      wchar_t** _Context
        );
# 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup(
           wchar_t const* _String
    );







extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }







    __declspec(dllimport) wchar_t* __cdecl wcscat( wchar_t *_Destination, wchar_t const* _Source);
# 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcscmp(
           wchar_t const* _String1,
           wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }





 __declspec(dllimport) wchar_t* __cdecl wcscpy( wchar_t *_Destination, wchar_t const* _Source);






__declspec(dllimport) size_t __cdecl wcscspn(
           wchar_t const* _String,
           wchar_t const* _Control
    );


__declspec(dllimport) size_t __cdecl wcslen(
           wchar_t const* _String
    );
# 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsnlen(
                               wchar_t const* _Source,
                               size_t _MaxCount
    );
# 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
    static __inline size_t __cdecl wcsnlen_s(
                                   wchar_t const* _Source,
                                   size_t _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source, size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }






 __declspec(dllimport) wchar_t* __cdecl wcsncat( wchar_t *_Destination, wchar_t const* _Source, size_t _Count);
# 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsncmp(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source, size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }






 __declspec(dllimport) wchar_t* __cdecl wcsncpy( wchar_t *_Destination, wchar_t const* _Source, size_t _Count);
# 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) wchar_t const* __cdecl wcspbrk(
           wchar_t const* _String,
           wchar_t const* _Control
    );


__declspec(dllimport) size_t __cdecl wcsspn(
           wchar_t const* _String,
           wchar_t const* _Control
    );


__declspec(dllimport) wchar_t* __cdecl wcstok(
                                      wchar_t* _String,
                                      wchar_t const* _Delimiter,
                                      wchar_t** _Context
    );
# 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#pragma warning(push)
#pragma warning(disable: 4141 4996)


 static __inline wchar_t* __cdecl _wcstok(
                      wchar_t* const _String,
                      wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }






        extern "C++" __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK."))
        inline wchar_t* __cdecl wcstok(
                          wchar_t* _String,
                          wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }


#pragma warning(pop)







__declspec(dllimport) wchar_t* __cdecl _wcserror(
         int _ErrorNumber
    );


__declspec(dllimport) errno_t __cdecl _wcserror_s(
                                     wchar_t* _Buffer,
                                     size_t _SizeInWords,
                                     int _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size], int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
# 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) wchar_t* __cdecl __wcserror(
               wchar_t const* _String
    );

                   __declspec(dllimport) errno_t __cdecl __wcserror_s(
                                     wchar_t* _Buffer,
                                     size_t _SizeInWords,
                                     wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size], wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }





               __declspec(dllimport) int __cdecl _wcsicmp(
           wchar_t const* _String1,
           wchar_t const* _String2
    );

               __declspec(dllimport) int __cdecl _wcsicmp_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );

               __declspec(dllimport) int __cdecl _wcsnicmp(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );

               __declspec(dllimport) int __cdecl _wcsnicmp_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );

                   __declspec(dllimport) errno_t __cdecl _wcsnset_s(
                                    wchar_t* _Destination,
                                    size_t _SizeInWords,
                                    wchar_t _Value,
                                    size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(wchar_t (&_Destination)[_Size], wchar_t _Value, size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }






 __declspec(dllimport) wchar_t* __cdecl _wcsnset( wchar_t *_String, wchar_t _Value, size_t _MaxCount);







__declspec(dllimport) wchar_t* __cdecl _wcsrev(
              wchar_t* _String
    );

                   __declspec(dllimport) errno_t __cdecl _wcsset_s(
                                    wchar_t* _Destination,
                                    size_t _SizeInWords,
                                    wchar_t _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(wchar_t (&_String)[_Size], wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }





 __declspec(dllimport) wchar_t* __cdecl _wcsset( wchar_t *_String, wchar_t _Value);






                   __declspec(dllimport) errno_t __cdecl _wcslwr_s(
                                    wchar_t* _String,
                                    size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }




 __declspec(dllimport) wchar_t* __cdecl _wcslwr( wchar_t *_String);





__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(
                                    wchar_t* _String,
                                    size_t _SizeInWords,
                                    _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }





 __declspec(dllimport) wchar_t* __cdecl _wcslwr_l( wchar_t *_String, _locale_t _Locale);







__declspec(dllimport) errno_t __cdecl _wcsupr_s(
                             wchar_t* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }




 __declspec(dllimport) wchar_t* __cdecl _wcsupr( wchar_t *_String);





__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(
                             wchar_t* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }





 __declspec(dllimport) wchar_t* __cdecl _wcsupr_l( wchar_t *_String, _locale_t _Locale);
# 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsxfrm(
                                              wchar_t* _Destination,
                                              wchar_t const* _Source,
                                              size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _wcsxfrm_l(
                                              wchar_t* _Destination,
                                              wchar_t const* _Source,
                                              size_t _MaxCount,
                                              _locale_t _Locale
    );


__declspec(dllimport) int __cdecl wcscoll(
           wchar_t const* _String1,
           wchar_t const* _String2
    );


__declspec(dllimport) int __cdecl _wcscoll_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsicoll(
           wchar_t const* _String1,
           wchar_t const* _String2
    );


__declspec(dllimport) int __cdecl _wcsicoll_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsncoll(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _wcsncoll_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsnicoll(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _wcsnicoll_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );
# 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {



    inline wchar_t* __cdecl wcschr( wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }


    inline wchar_t* __cdecl wcspbrk( wchar_t* _String, wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }


    inline wchar_t* __cdecl wcsrchr( wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }



    inline wchar_t* __cdecl wcsstr( wchar_t* _String, wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}
# 572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsdup" ". See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl wcsdup(
               wchar_t const* _String
        );
# 584 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicmp(
               wchar_t const* _String1,
               wchar_t const* _String2
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsnicmp(
                                   wchar_t const* _String1,
                                   wchar_t const* _String2,
                                   size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnset" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsnset(
                                     wchar_t* _String,
                                     wchar_t _Value,
                                     size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsrev" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsrev(
                  wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsset" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsset(
                  wchar_t* _String,
                  wchar_t _Value
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcslwr" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcslwr(
                  wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsupr" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsupr(
                  wchar_t* _String
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicoll" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicoll(
               wchar_t const* _String1,
               wchar_t const* _String2
        );





}
# 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#pragma pack(pop)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 2





#pragma pack(push, 8)
# 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
 extern "C" {
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
    __declspec(dllimport) errno_t __cdecl strcpy_s(
                                     char* _Destination,
                                     rsize_t _SizeInBytes,
                                     char const* _Source
        );


    __declspec(dllimport) errno_t __cdecl strcat_s(
                                        char* _Destination,
                                        rsize_t _SizeInBytes,
                                        char const* _Source
        );


    __declspec(dllimport) errno_t __cdecl strerror_s(
                                     char* _Buffer,
                                     size_t _SizeInBytes,
                                     int _ErrorNumber);


    __declspec(dllimport) errno_t __cdecl strncat_s(
                                        char* _Destination,
                                        rsize_t _SizeInBytes,
                                        char const* _Source,
                                        rsize_t _MaxCount
        );


    __declspec(dllimport) errno_t __cdecl strncpy_s(
                                     char* _Destination,
                                     rsize_t _SizeInBytes,
                                     char const* _Source,
                                     rsize_t _MaxCount
        );


    __declspec(dllimport) char* __cdecl strtok_s(
                                      char* _String,
                                      char const* _Delimiter,
                                      char** _Context
        );



__declspec(dllimport) void* __cdecl _memccpy(
                                      void* _Dst,
                                      void const* _Src,
                                      int _Val,
                                      size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size], char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }







    char* __cdecl strcat( char *_Destination, char const* _Source);
# 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
int __cdecl strcmp(
           char const* _Str1,
           char const* _Str2
    );


__declspec(dllimport) int __cdecl _strcmpi(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl strcoll(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _strcoll_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );

char* __cdecl strcpy(
                                                 char* _Dest,
                                                 char const* _Source
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(char (&_Destination)[_Size], char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }





 char* __cdecl strcpy( char *_Destination, char const* _Source);






__declspec(dllimport) size_t __cdecl strcspn(
           char const* _Str,
           char const* _Control
    );







__declspec(dllimport) __declspec(allocator) char* __cdecl _strdup(
               char const* _Source
    );
# 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char* __cdecl _strerror(
               char const* _ErrorMessage
    );


__declspec(dllimport) errno_t __cdecl _strerror_s(
                                 char* _Buffer,
                                 size_t _SizeInBytes,
                                 char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size], char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }







__declspec(dllimport) char* __cdecl strerror(
         int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size], int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }






__declspec(dllimport) int __cdecl _stricmp(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _stricoll(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _stricoll_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _stricmp_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );


size_t __cdecl strlen(
           char const* _Str
    );


__declspec(dllimport) errno_t __cdecl _strlwr_s(
                             char* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }




 __declspec(dllimport) char* __cdecl _strlwr( char *_String);





__declspec(dllimport) errno_t __cdecl _strlwr_s_l(
                             char* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }





 __declspec(dllimport) char* __cdecl _strlwr_l( char *_String, _locale_t _Locale);






__declspec(dllimport) char* __cdecl strncat(
                              char* _Dest,
                              char const* _Source,
                              size_t _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(char (&_Destination)[_Size], char const* _Source, size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }






 __declspec(dllimport) char* __cdecl strncat( char *_Destination, char const* _Source, size_t _Count);
# 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strncmp(
                               char const* _Str1,
                               char const* _Str2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicmp(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicmp_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _strnicoll(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicoll_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _strncoll(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strncoll_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );

__declspec(dllimport) size_t __cdecl __strncnt(
                            char const* _String,
                            size_t _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size], char const* _Source, size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }






 __declspec(dllimport) char* __cdecl strncpy( char *_Destination, char const* _Source, size_t _Count);
# 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strnlen(
                               char const* _String,
                               size_t _MaxCount
    );
# 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
    static __inline size_t __cdecl strnlen_s(
                                   char const* _String,
                                   size_t _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }



__declspec(dllimport) char* __cdecl _strnset(
                              char* _Dest,
                              int _Val,
                              size_t _Count
    );


__declspec(dllimport) errno_t __cdecl _strnset_s(
                                    char* _String,
                                    size_t _SizeInBytes,
                                    int _Value,
                                    size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(char (&_Destination)[_Size], int _Value, size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }






 __declspec(dllimport) char* __cdecl _strnset( char *_Destination, int _Value, size_t _Count);
# 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char const* __cdecl strpbrk(
           char const* _Str,
           char const* _Control
    );

__declspec(dllimport) char* __cdecl _strrev(
              char* _Str
    );


__declspec(dllimport) errno_t __cdecl _strset_s(
                                        char* _Destination,
                                        size_t _DestinationSize,
                                        int _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(char (&_Destination)[_Size], int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }





 char* __cdecl _strset( char *_Destination, int _Value);





char* __cdecl _strset(
              char* _Dest,
              int _Value
    );


__declspec(dllimport) size_t __cdecl strspn(
           char const* _Str,
           char const* _Control
    );


__declspec(dllimport) char* __cdecl strtok(
                  char* _String,
                  char const* _Delimiter
    );


__declspec(dllimport) errno_t __cdecl _strupr_s(
                             char* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }




 __declspec(dllimport) char* __cdecl _strupr( char *_String);





__declspec(dllimport) errno_t __cdecl _strupr_s_l(
                             char* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }





 __declspec(dllimport) char* __cdecl _strupr_l( char *_String, _locale_t _Locale);
# 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strxfrm(
                                              char* _Destination,
                                              char const* _Source,
                                              size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _strxfrm_l(
                                              char* _Destination,
                                              char const* _Source,
                                              size_t _MaxCount,
                                              _locale_t _Locale
    );




extern "C++"
{

    inline char* __cdecl strchr( char* const _String, int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }


    inline char* __cdecl strpbrk( char* const _String, char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }


    inline char* __cdecl strrchr( char* const _String, int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }


    inline char* __cdecl strstr( char* const _String, char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}
# 551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strdup" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strdup(
                   char const* _String
        );






                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strcmpi" ". See online help for details."))
    __declspec(dllimport) int __cdecl strcmpi(
               char const* _String1,
               char const* _String2
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_stricmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl stricmp(
               char const* _String1,
               char const* _String2
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strlwr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strlwr(
                  char* _String
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl strnicmp(
                                   char const* _String1,
                                   char const* _String2,
                                   size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnset" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strnset(
                                     char* _String,
                                     int _Value,
                                     size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strrev" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strrev(
                  char* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strset" ". See online help for details."))
    char* __cdecl strset(
                  char* _String,
                  int _Value);

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strupr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strupr(
                  char* _String
        );





}
# 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
#pragma pack(pop)
# 146 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\guiddef.h" 2




__inline int InlineIsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
   return (
      ((unsigned long *) &rguid1)[0] == ((unsigned long *) &rguid2)[0] &&
      ((unsigned long *) &rguid1)[1] == ((unsigned long *) &rguid2)[1] &&
      ((unsigned long *) &rguid1)[2] == ((unsigned long *) &rguid2)[2] &&
      ((unsigned long *) &rguid1)[3] == ((unsigned long *) &rguid2)[3]);
}

__inline int IsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
    return !memcmp(&rguid1, &rguid2, sizeof(GUID));
}
# 192 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\guiddef.h"
__inline bool operator==(const GUID & guidOne, const GUID & guidOther)
{
    return !!IsEqualGUID(guidOne,guidOther);
}

__inline bool operator!=(const GUID & guidOne, const GUID & guidOther)
{
    return !(guidOne == guidOther);
}
# 1083 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2





typedef struct _OBJECTID {
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
# 1178 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C++"
template <typename T, size_t N>
char (*RtlpNumberOf( __unaligned T (&)[N] ))[N];
# 1306 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef


EXCEPTION_DISPOSITION
__stdcall
EXCEPTION_ROUTINE (
            struct _EXCEPTION_RECORD *ExceptionRecord,
         PVOID EstablisherFrame,
            struct _CONTEXT *ContextRecord,
         PVOID DispatcherContext
    );

typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;
# 2149 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C++" {

    template <size_t S>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE;

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<1>
    {
        typedef INT8 type;
    };

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<2>
    {
        typedef INT16 type;
    };

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<4>
    {
        typedef INT32 type;
    };


    template <class T>
    struct _ENUM_FLAG_SIZED_INTEGER
    {
        typedef typename _ENUM_FLAG_INTEGER_FOR_SIZE<sizeof(T)>::type type;
    };

}
# 2277 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;







typedef struct __declspec(align(16)) _M128A {
    ULONGLONG Low;
    LONGLONG High;
} M128A, *PM128A;





typedef struct __declspec(align(16)) _XSAVE_FORMAT {
    WORD ControlWord;
    WORD StatusWord;
    BYTE TagWord;
    BYTE Reserved1;
    WORD ErrorOpcode;
    DWORD ErrorOffset;
    WORD ErrorSelector;
    WORD Reserved2;
    DWORD DataOffset;
    WORD DataSelector;
    WORD Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];



    M128A XmmRegisters[16];
    BYTE Reserved4[96];
# 2323 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
} XSAVE_FORMAT, *PXSAVE_FORMAT;



typedef struct __declspec(align(8)) _XSAVE_AREA_HEADER {
    DWORD64 Mask;
    DWORD64 Reserved[7];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;

typedef struct __declspec(align(16)) _XSAVE_AREA {
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA;

typedef struct _XSTATE_CONTEXT {
    DWORD64 Mask;
    DWORD Length;
    DWORD Reserved1;
                                   PXSAVE_AREA Area;





    PVOID Buffer;





} XSTATE_CONTEXT, *PXSTATE_CONTEXT;





typedef struct _SCOPE_TABLE_AMD64 {
    DWORD Count;
    struct {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_AMD64, *PSCOPE_TABLE_AMD64;
# 2381 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" {
# 2411 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
BOOLEAN
_bittest (
                                   LONG const *Base,
         LONG Offset
    );

BOOLEAN
_bittestandcomplement (
                                        LONG *Base,
         LONG Offset
    );

BOOLEAN
_bittestandset (
                                        LONG *Base,
         LONG Offset
    );

BOOLEAN
_bittestandreset (
                                        LONG *Base,
         LONG Offset
    );

BOOLEAN
_interlockedbittestandset (
                                                              LONG volatile *Base,
         LONG Offset
    );

BOOLEAN
_interlockedbittestandreset (
                                                              LONG volatile *Base,
         LONG Offset
    );

BOOLEAN
_bittest64 (
                                   LONG64 const *Base,
         LONG64 Offset
    );

BOOLEAN
_bittestandcomplement64 (
                                        LONG64 *Base,
         LONG64 Offset
    );

BOOLEAN
_bittestandset64 (
                                        LONG64 *Base,
         LONG64 Offset
    );

BOOLEAN
_bittestandreset64 (
                                        LONG64 *Base,
         LONG64 Offset
    );

BOOLEAN
_interlockedbittestandset64 (
                                                              LONG64 volatile *Base,
         LONG64 Offset
    );

BOOLEAN
_interlockedbittestandreset64 (
                                                              LONG64 volatile *Base,
         LONG64 Offset
    );

#pragma intrinsic(_bittest)
#pragma intrinsic(_bittestandcomplement)
#pragma intrinsic(_bittestandset)
#pragma intrinsic(_bittestandreset)
#pragma intrinsic(_interlockedbittestandset)
#pragma intrinsic(_interlockedbittestandreset)

#pragma intrinsic(_bittest64)
#pragma intrinsic(_bittestandcomplement64)
#pragma intrinsic(_bittestandset64)
#pragma intrinsic(_bittestandreset64)
#pragma intrinsic(_interlockedbittestandset64)
#pragma intrinsic(_interlockedbittestandreset64)
# 2507 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
BOOLEAN
_BitScanForward (
          DWORD *Index,
         DWORD Mask
    );


BOOLEAN
_BitScanReverse (
          DWORD *Index,
         DWORD Mask
    );


BOOLEAN
_BitScanForward64 (
          DWORD *Index,
         DWORD64 Mask
    );


BOOLEAN
_BitScanReverse64 (
          DWORD *Index,
         DWORD64 Mask
    );

#pragma intrinsic(_BitScanForward)
#pragma intrinsic(_BitScanReverse)
#pragma intrinsic(_BitScanForward64)
#pragma intrinsic(_BitScanReverse64)
# 2647 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
SHORT
_InterlockedIncrement16 (
                                  SHORT volatile *Addend
    );

SHORT
_InterlockedDecrement16 (
                                  SHORT volatile *Addend
    );

SHORT
_InterlockedCompareExchange16 (
                                  SHORT volatile *Destination,
         SHORT ExChange,
         SHORT Comperand
    );

LONG
_InterlockedAnd (
                                  LONG volatile *Destination,
         LONG Value
    );

LONG
_InterlockedOr (
                                  LONG volatile *Destination,
         LONG Value
    );

LONG
_InterlockedXor (
                                  LONG volatile *Destination,
         LONG Value
    );

LONG64
_InterlockedAnd64 (
                                  LONG64 volatile *Destination,
         LONG64 Value
    );

LONG64
_InterlockedOr64 (
                                  LONG64 volatile *Destination,
         LONG64 Value
    );

LONG64
_InterlockedXor64 (
                                  LONG64 volatile *Destination,
         LONG64 Value
    );

LONG
_InterlockedIncrement (
                                  LONG volatile *Addend
    );

LONG
_InterlockedDecrement (
                                  LONG volatile *Addend
    );

LONG
_InterlockedExchange (
                                  LONG volatile *Target,
         LONG Value
    );

LONG
_InterlockedExchangeAdd (
                                  LONG volatile *Addend,
         LONG Value
    );



__forceinline
LONG
_InterlockedAdd (
                                  LONG volatile *Addend,
         LONG Value
    )

{
    return _InterlockedExchangeAdd(Addend, Value) + Value;
}



LONG
_InterlockedCompareExchange (
                                  LONG volatile *Destination,
         LONG ExChange,
         LONG Comperand
    );

LONG64
_InterlockedIncrement64 (
                                  LONG64 volatile *Addend
    );

LONG64
_InterlockedDecrement64 (
                                  LONG64 volatile *Addend
    );

LONG64
_InterlockedExchange64 (
                                  LONG64 volatile *Target,
         LONG64 Value
    );

LONG64
_InterlockedExchangeAdd64 (
                                  LONG64 volatile *Addend,
         LONG64 Value
    );



__forceinline
LONG64
_InterlockedAdd64 (
                                  LONG64 volatile *Addend,
         LONG64 Value
    )

{
    return _InterlockedExchangeAdd64(Addend, Value) + Value;
}



LONG64
_InterlockedCompareExchange64 (
                                  LONG64 volatile *Destination,
         LONG64 ExChange,
         LONG64 Comperand
    );

BOOLEAN
_InterlockedCompareExchange128 (
                                  LONG64 volatile *Destination,
         LONG64 ExchangeHigh,
         LONG64 ExchangeLow,
            LONG64 *ComparandResult
    );

                                       PVOID
_InterlockedCompareExchangePointer (



                          PVOID volatile *Destination,
             PVOID Exchange,
             PVOID Comperand
    );

                                       PVOID
_InterlockedExchangePointer(



                          PVOID volatile *Target,
             PVOID Value
    );

#pragma intrinsic(_InterlockedIncrement16)
#pragma intrinsic(_InterlockedDecrement16)
#pragma intrinsic(_InterlockedCompareExchange16)
#pragma intrinsic(_InterlockedAnd)
#pragma intrinsic(_InterlockedOr)
#pragma intrinsic(_InterlockedXor)
#pragma intrinsic(_InterlockedIncrement)
#pragma intrinsic(_InterlockedDecrement)
#pragma intrinsic(_InterlockedExchange)
#pragma intrinsic(_InterlockedExchangeAdd)
#pragma intrinsic(_InterlockedCompareExchange)
#pragma intrinsic(_InterlockedAnd64)
#pragma intrinsic(_InterlockedOr64)
#pragma intrinsic(_InterlockedXor64)
#pragma intrinsic(_InterlockedIncrement64)
#pragma intrinsic(_InterlockedDecrement64)
#pragma intrinsic(_InterlockedExchange64)
#pragma intrinsic(_InterlockedExchangeAdd64)
#pragma intrinsic(_InterlockedCompareExchange64)



#pragma intrinsic(_InterlockedCompareExchange128)



#pragma intrinsic(_InterlockedExchangePointer)
#pragma intrinsic(_InterlockedCompareExchangePointer)






CHAR
_InterlockedExchange8 (
                                  CHAR volatile *Target,
         CHAR Value
    );

SHORT
_InterlockedExchange16 (
                                  SHORT volatile *Destination,
         SHORT ExChange
    );

#pragma intrinsic(_InterlockedExchange8)
#pragma intrinsic(_InterlockedExchange16)
# 2875 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
char
_InterlockedAnd8 (
                                  char volatile *Destination,
         char Value
    );

char
_InterlockedOr8 (
                                  char volatile *Destination,
         char Value
    );

char
_InterlockedXor8 (
                                  char volatile *Destination,
         char Value
    );

SHORT
_InterlockedAnd16(
                                  SHORT volatile *Destination,
         SHORT Value
    );

SHORT
_InterlockedOr16(
                                  SHORT volatile *Destination,
         SHORT Value
    );

SHORT
_InterlockedXor16(
                                  SHORT volatile *Destination,
         SHORT Value
    );

#pragma intrinsic (_InterlockedAnd8)
#pragma intrinsic (_InterlockedOr8)
#pragma intrinsic (_InterlockedXor8)
#pragma intrinsic (_InterlockedAnd16)
#pragma intrinsic (_InterlockedOr16)
#pragma intrinsic (_InterlockedXor16)
# 2928 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
void
__cpuidex (
    int CPUInfo[4],
    int Function,
    int SubLeaf
    );

#pragma intrinsic(__cpuidex)
# 2945 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
void
_mm_clflush (
         void const *Address
    );

#pragma intrinsic(_mm_clflush)



void
_ReadWriteBarrier (
    void
    );

#pragma intrinsic(_ReadWriteBarrier)
# 2975 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
void
__faststorefence (
    void
    );



void
_mm_lfence (
    void
    );

void
_mm_mfence (
    void
    );

void
_mm_sfence (
    void
    );

void
_mm_pause (
    void
    );

void
_mm_prefetch (
         CHAR const *a,
         int sel
    );

void
_m_prefetchw (
         volatile const void *Source
    );
# 3024 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
#pragma intrinsic(__faststorefence)



#pragma intrinsic(_mm_pause)
#pragma intrinsic(_mm_prefetch)
#pragma intrinsic(_mm_lfence)
#pragma intrinsic(_mm_mfence)
#pragma intrinsic(_mm_sfence)
#pragma intrinsic(_m_prefetchw)
# 3057 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
unsigned int
_mm_getcsr (
    void
    );

void
_mm_setcsr (
         unsigned int MxCsr
    );

#pragma intrinsic(_mm_getcsr)
#pragma intrinsic(_mm_setcsr)







unsigned __int32
__getcallerseflags (
    void
    );

#pragma intrinsic(__getcallerseflags)







DWORD
__segmentlimit (
         DWORD Selector
    );

#pragma intrinsic(__segmentlimit)







DWORD64
__readpmc (
         DWORD Counter
    );

#pragma intrinsic(__readpmc)







DWORD64
__rdtsc (
    void
    );

#pragma intrinsic(__rdtsc)





void
__movsb (
                            PBYTE Destination,
                      BYTE const *Source,
         SIZE_T Count
    );

void
__movsw (
                            PWORD Destination,
                      WORD const *Source,
         SIZE_T Count
    );

void
__movsd (
                            PDWORD Destination,
                      DWORD const *Source,
         SIZE_T Count
    );

void
__movsq (
                            PDWORD64 Destination,
                      DWORD64 const *Source,
         SIZE_T Count
    );

#pragma intrinsic(__movsb)
#pragma intrinsic(__movsw)
#pragma intrinsic(__movsd)
#pragma intrinsic(__movsq)





void
__stosb (
                            PBYTE Destination,
         BYTE Value,
         SIZE_T Count
    );

void
__stosw (
                            PWORD Destination,
         WORD Value,
         SIZE_T Count
    );

void
__stosd (
                            PDWORD Destination,
         DWORD Value,
         SIZE_T Count
    );

void
__stosq (
                            PDWORD64 Destination,
         DWORD64 Value,
         SIZE_T Count
    );

#pragma intrinsic(__stosb)
#pragma intrinsic(__stosw)
#pragma intrinsic(__stosd)
#pragma intrinsic(__stosq)








LONGLONG
__mulh (
         LONG64 Multiplier,
         LONG64 Multiplicand
    );

ULONGLONG
__umulh (
         DWORD64 Multiplier,
         DWORD64 Multiplicand
    );

#pragma intrinsic(__mulh)
#pragma intrinsic(__umulh)







DWORD64
__popcnt64 (
         DWORD64 operand
    );



#pragma intrinsic(__popcnt64)
# 3242 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
DWORD64
__shiftleft128 (
         DWORD64 LowPart,
         DWORD64 HighPart,
         BYTE Shift
    );

DWORD64
__shiftright128 (
         DWORD64 LowPart,
         DWORD64 HighPart,
         BYTE Shift
    );

#pragma intrinsic(__shiftleft128)
#pragma intrinsic(__shiftright128)







LONG64
_mul128 (
         LONG64 Multiplier,
         LONG64 Multiplicand,
          LONG64 *HighProduct
    );

#pragma intrinsic(_mul128)





DWORD64
_umul128 (
         DWORD64 Multiplier,
         DWORD64 Multiplicand,
          DWORD64 *HighProduct
    );

#pragma intrinsic(_umul128)



__forceinline
LONG64
MultiplyExtract128 (
         LONG64 Multiplier,
         LONG64 Multiplicand,
         BYTE Shift
    )

{

    LONG64 extractedProduct;
    LONG64 highProduct;
    LONG64 lowProduct;
    BOOLEAN negate;
    DWORD64 uhighProduct;
    DWORD64 ulowProduct;

    lowProduct = _mul128(Multiplier, Multiplicand, &highProduct);
    negate = 0;
    uhighProduct = (DWORD64)highProduct;
    ulowProduct = (DWORD64)lowProduct;
    if (highProduct < 0) {
        negate = 1;
        uhighProduct = (DWORD64)(-highProduct);
        ulowProduct = (DWORD64)(-lowProduct);
        if (ulowProduct != 0) {
            uhighProduct -= 1;
        }
    }

    extractedProduct = (LONG64)__shiftright128(ulowProduct, uhighProduct, Shift);
    if (negate != 0) {
        extractedProduct = -extractedProduct;
    }

    return extractedProduct;
}

__forceinline
DWORD64
UnsignedMultiplyExtract128 (
         DWORD64 Multiplier,
         DWORD64 Multiplicand,
         BYTE Shift
    )

{

    DWORD64 extractedProduct;
    DWORD64 highProduct;
    DWORD64 lowProduct;

    lowProduct = _umul128(Multiplier, Multiplicand, &highProduct);
    extractedProduct = __shiftright128(lowProduct, highProduct, Shift);
    return extractedProduct;
}





BYTE
__readgsbyte (
         DWORD Offset
    );

WORD
__readgsword (
         DWORD Offset
    );

DWORD
__readgsdword (
         DWORD Offset
    );

DWORD64
__readgsqword (
         DWORD Offset
    );

void
__writegsbyte (
         DWORD Offset,
         BYTE Data
    );

void
__writegsword (
         DWORD Offset,
         WORD Data
    );

void
__writegsdword (
         DWORD Offset,
         DWORD Data
    );

void
__writegsqword (
         DWORD Offset,
         DWORD64 Data
    );

#pragma intrinsic(__readgsbyte)
#pragma intrinsic(__readgsword)
#pragma intrinsic(__readgsdword)
#pragma intrinsic(__readgsqword)
#pragma intrinsic(__writegsbyte)
#pragma intrinsic(__writegsword)
#pragma intrinsic(__writegsdword)
#pragma intrinsic(__writegsqword)



void
__incgsbyte (
         DWORD Offset
    );

void
__addgsbyte (
         DWORD Offset,
         BYTE Value
    );

void
__incgsword (
         DWORD Offset
    );

void
__addgsword (
         DWORD Offset,
         WORD Value
    );

void
__incgsdword (
         DWORD Offset
    );

void
__addgsdword (
         DWORD Offset,
         DWORD Value
    );

void
__incgsqword (
         DWORD Offset
    );

void
__addgsqword (
         DWORD Offset,
         DWORD64 Value
    );
# 3464 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
}
# 3526 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef XSAVE_FORMAT XMM_SAVE_AREA32, *PXMM_SAVE_AREA32;
# 3563 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct __declspec(align(16)) _CONTEXT {
# 3572 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
    DWORD64 P1Home;
    DWORD64 P2Home;
    DWORD64 P3Home;
    DWORD64 P4Home;
    DWORD64 P5Home;
    DWORD64 P6Home;





    DWORD ContextFlags;
    DWORD MxCsr;





    WORD SegCs;
    WORD SegDs;
    WORD SegEs;
    WORD SegFs;
    WORD SegGs;
    WORD SegSs;
    DWORD EFlags;





    DWORD64 Dr0;
    DWORD64 Dr1;
    DWORD64 Dr2;
    DWORD64 Dr3;
    DWORD64 Dr6;
    DWORD64 Dr7;





    DWORD64 Rax;
    DWORD64 Rcx;
    DWORD64 Rdx;
    DWORD64 Rbx;
    DWORD64 Rsp;
    DWORD64 Rbp;
    DWORD64 Rsi;
    DWORD64 Rdi;
    DWORD64 R8;
    DWORD64 R9;
    DWORD64 R10;
    DWORD64 R11;
    DWORD64 R12;
    DWORD64 R13;
    DWORD64 R14;
    DWORD64 R15;





    DWORD64 Rip;





    union {
        XMM_SAVE_AREA32 FltSave;
        struct {
            M128A Header[2];
            M128A Legacy[8];
            M128A Xmm0;
            M128A Xmm1;
            M128A Xmm2;
            M128A Xmm3;
            M128A Xmm4;
            M128A Xmm5;
            M128A Xmm6;
            M128A Xmm7;
            M128A Xmm8;
            M128A Xmm9;
            M128A Xmm10;
            M128A Xmm11;
            M128A Xmm12;
            M128A Xmm13;
            M128A Xmm14;
            M128A Xmm15;
        } ;
    } ;





    M128A VectorRegister[26];
    DWORD64 VectorControl;





    DWORD64 DebugControl;
    DWORD64 LastBranchToRip;
    DWORD64 LastBranchFromRip;
    DWORD64 LastExceptionToRip;
    DWORD64 LastExceptionFromRip;
} CONTEXT, *PCONTEXT;






typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY RUNTIME_FUNCTION, *PRUNTIME_FUNCTION;
typedef SCOPE_TABLE_AMD64 SCOPE_TABLE, *PSCOPE_TABLE;
# 3709 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _UNWIND_HISTORY_TABLE_ENTRY {
    DWORD64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
} UNWIND_HISTORY_TABLE_ENTRY, *PUNWIND_HISTORY_TABLE_ENTRY;

typedef struct _UNWIND_HISTORY_TABLE {
    DWORD Count;
    BYTE LocalHint;
    BYTE GlobalHint;
    BYTE Search;
    BYTE Once;
    DWORD64 LowAddress;
    DWORD64 HighAddress;
    UNWIND_HISTORY_TABLE_ENTRY Entry[12];
} UNWIND_HISTORY_TABLE, *PUNWIND_HISTORY_TABLE;





typedef

PRUNTIME_FUNCTION
GET_RUNTIME_FUNCTION_CALLBACK (
         DWORD64 ControlPc,
             PVOID Context
    );
typedef GET_RUNTIME_FUNCTION_CALLBACK *PGET_RUNTIME_FUNCTION_CALLBACK;

typedef

DWORD
OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK (
         HANDLE Process,
         PVOID TableAddress,
          PDWORD Entries,
          PRUNTIME_FUNCTION* Functions
    );
typedef OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK *POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK;
# 3756 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _DISPATCHER_CONTEXT {
    DWORD64 ControlPc;
    DWORD64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
    DWORD64 EstablisherFrame;
    DWORD64 TargetIp;
    PCONTEXT ContextRecord;
    PEXCEPTION_ROUTINE LanguageHandler;
    PVOID HandlerData;
    PUNWIND_HISTORY_TABLE HistoryTable;
    DWORD ScopeIndex;
    DWORD Fill0;
} DISPATCHER_CONTEXT, *PDISPATCHER_CONTEXT;





struct _EXCEPTION_POINTERS;
typedef
LONG
(*PEXCEPTION_FILTER) (
    struct _EXCEPTION_POINTERS *ExceptionPointers,
    PVOID EstablisherFrame
    );

typedef
void
(*PTERMINATION_HANDLER) (
    BOOLEAN _abnormal_termination,
    PVOID EstablisherFrame
    );






typedef struct _KNONVOLATILE_CONTEXT_POINTERS {
    union {
        PM128A FloatingContext[16];
        struct {
            PM128A Xmm0;
            PM128A Xmm1;
            PM128A Xmm2;
            PM128A Xmm3;
            PM128A Xmm4;
            PM128A Xmm5;
            PM128A Xmm6;
            PM128A Xmm7;
            PM128A Xmm8;
            PM128A Xmm9;
            PM128A Xmm10;
            PM128A Xmm11;
            PM128A Xmm12;
            PM128A Xmm13;
            PM128A Xmm14;
            PM128A Xmm15;
        } ;
    } ;

    union {
        PDWORD64 IntegerContext[16];
        struct {
            PDWORD64 Rax;
            PDWORD64 Rcx;
            PDWORD64 Rdx;
            PDWORD64 Rbx;
            PDWORD64 Rsp;
            PDWORD64 Rbp;
            PDWORD64 Rsi;
            PDWORD64 Rdi;
            PDWORD64 R8;
            PDWORD64 R9;
            PDWORD64 R10;
            PDWORD64 R11;
            PDWORD64 R12;
            PDWORD64 R13;
            PDWORD64 R14;
            PDWORD64 R15;
        } ;
    } ;

} KNONVOLATILE_CONTEXT_POINTERS, *PKNONVOLATILE_CONTEXT_POINTERS;







typedef struct _SCOPE_TABLE_ARM {
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM, *PSCOPE_TABLE_ARM;
# 4807 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" {
# 4833 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
void
__int2c (
    void
    );

#pragma intrinsic(__int2c)
# 4938 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
}
# 6047 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;
# 7942 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" {


__forceinline
CHAR
ReadAcquire8 (
                               CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
CHAR
ReadNoFence8 (
                               CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease8 (
                                CHAR volatile *Destination,
         CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence8 (
                                CHAR volatile *Destination,
         CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
SHORT
ReadAcquire16 (
                               SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
SHORT
ReadNoFence16 (
                               SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease16 (
                                SHORT volatile *Destination,
         SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence16 (
                                SHORT volatile *Destination,
         SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG
ReadAcquire (
                               LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG
ReadNoFence (
                               LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease (
                                LONG volatile *Destination,
         LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence (
                                LONG volatile *Destination,
         LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG64
ReadAcquire64 (
                               LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG64
ReadNoFence64 (
                               LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease64 (
                                LONG64 volatile *Destination,
         LONG64 Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence64 (
                                LONG64 volatile *Destination,
         LONG64 Value
    )

{

    *Destination = Value;
    return;
}


}
# 8171 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__forceinline
CHAR
ReadRaw8 (
                               CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *(CHAR *)Source;
    return Value;
}

__forceinline
void
WriteRaw8 (
                                CHAR volatile *Destination,
         CHAR Value
    )

{

    *(CHAR *)Destination = Value;
    return;
}

__forceinline
SHORT
ReadRaw16 (
                               SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *(SHORT *)Source;
    return Value;
}

__forceinline
void
WriteRaw16 (
                                SHORT volatile *Destination,
         SHORT Value
    )

{

    *(SHORT *)Destination = Value;
    return;
}

__forceinline
LONG
ReadRaw (
                               LONG const volatile *Source
    )

{

    LONG Value;

    Value = *(LONG *)Source;
    return Value;
}

__forceinline
void
WriteRaw (
                                LONG volatile *Destination,
         LONG Value
    )

{

    *(LONG *)Destination = Value;
    return;
}

__forceinline
LONG64
ReadRaw64 (
                               LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *(LONG64 *)Source;
    return Value;
}

__forceinline
void
WriteRaw64 (
                                LONG64 volatile *Destination,
         LONG64 Value
    )

{

    *(LONG64 *)Destination = Value;
    return;
}





__forceinline
BYTE
ReadUCharAcquire (
                               BYTE const volatile *Source
    )

{

    return (BYTE )ReadAcquire8((PCHAR)Source);
}

__forceinline
BYTE
ReadUCharNoFence (
                               BYTE const volatile *Source
    )

{

    return (BYTE )ReadNoFence8((PCHAR)Source);
}

__forceinline
BYTE
ReadUCharRaw (
                               BYTE const volatile *Source
    )

{

    return (BYTE )ReadRaw8((PCHAR)Source);
}

__forceinline
void
WriteUCharRelease (
                                BYTE volatile *Destination,
         BYTE Value
    )

{

    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharNoFence (
                                BYTE volatile *Destination,
         BYTE Value
    )

{

    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharRaw (
                                BYTE volatile *Destination,
         BYTE Value
    )

{

    WriteRaw8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
WORD
ReadUShortAcquire (
                               WORD const volatile *Source
    )

{

    return (WORD )ReadAcquire16((PSHORT)Source);
}

__forceinline
WORD
ReadUShortNoFence (
                               WORD const volatile *Source
    )

{

    return (WORD )ReadNoFence16((PSHORT)Source);
}

__forceinline
WORD
ReadUShortRaw (
                               WORD const volatile *Source
    )

{

    return (WORD )ReadRaw16((PSHORT)Source);
}

__forceinline
void
WriteUShortRelease (
                                WORD volatile *Destination,
         WORD Value
    )

{

    WriteRelease16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortNoFence (
                                WORD volatile *Destination,
         WORD Value
    )

{

    WriteNoFence16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortRaw (
                                WORD volatile *Destination,
         WORD Value
    )

{

    WriteRaw16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
DWORD
ReadULongAcquire (
                               DWORD const volatile *Source
    )

{

    return (DWORD)ReadAcquire((PLONG)Source);
}

__forceinline
DWORD
ReadULongNoFence (
                               DWORD const volatile *Source
    )

{

    return (DWORD)ReadNoFence((PLONG)Source);
}

__forceinline
DWORD
ReadULongRaw (
                               DWORD const volatile *Source
    )

{

    return (DWORD)ReadRaw((PLONG)Source);
}

__forceinline
void
WriteULongRelease (
                                DWORD volatile *Destination,
         DWORD Value
    )

{

    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongNoFence (
                                DWORD volatile *Destination,
         DWORD Value
    )

{

    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongRaw (
                                DWORD volatile *Destination,
         DWORD Value
    )

{

    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
DWORD64
ReadULong64Acquire (
                               DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadAcquire64((PLONG64)Source);
}

__forceinline
DWORD64
ReadULong64NoFence (
                               DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadNoFence64((PLONG64)Source);
}

__forceinline
DWORD64
ReadULong64Raw (
                               DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadRaw64((PLONG64)Source);
}

__forceinline
void
WriteULong64Release (
                                DWORD64 volatile *Destination,
         DWORD64 Value
    )

{

    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64NoFence (
                                DWORD64 volatile *Destination,
         DWORD64 Value
    )

{

    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64Raw (
                                DWORD64 volatile *Destination,
         DWORD64 Value
    )

{

    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}
# 8683 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__forceinline
PVOID
ReadPointerAcquire (
                               PVOID const volatile *Source
    )

{

    return (PVOID)ReadAcquire64((PLONG64)Source);
}

__forceinline
PVOID
ReadPointerNoFence (
                               PVOID const volatile *Source
    )

{

    return (PVOID)ReadNoFence64((PLONG64)Source);
}

__forceinline
PVOID
ReadPointerRaw (
                               PVOID const volatile *Source
    )

{

    return (PVOID)ReadRaw64((PLONG64)Source);
}

__forceinline
void
WritePointerRelease (
                                PVOID volatile *Destination,
         PVOID Value
    )

{

    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WritePointerNoFence (
                                PVOID volatile *Destination,
         PVOID Value
    )

{

    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WritePointerRaw (
                                PVOID volatile *Destination,
         PVOID Value
    )

{

    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}
# 8821 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _WOW64_FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA;

typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/pshpack4.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/pshpack4.h"
#pragma warning(disable: 4103)

#pragma pack(push,4)
# 8835 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2
# 8847 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _WOW64_CONTEXT {
# 8867 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
    DWORD ContextFlags;







    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;






    WOW64_FLOATING_SAVE_AREA FloatSave;






    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;






    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;






    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;







    BYTE ExtendedRegisters[512];

} WOW64_CONTEXT;

typedef WOW64_CONTEXT *PWOW64_CONTEXT;


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 8935 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2



typedef struct _WOW64_LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
    DWORD Selector;
    WOW64_LDT_ENTRY Descriptor;
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY;
# 8989 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _EXCEPTION_RECORD {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32 {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64 {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
# 9047 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef PVOID PACCESS_TOKEN;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef PVOID PSID;
typedef PVOID PCLAIMS_BLOB;
# 9091 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
# 9149 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;
# 9168 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack4.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack4.h"
#pragma warning(disable: 4103)

#pragma pack(push,4)
# 9168 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2


typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 9177 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2
# 9212 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;





typedef struct _SID {
   BYTE Revision;
   BYTE SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   DWORD SubAuthority[1];

} SID, *PISID;
# 9243 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer,
    SidTypeLabel
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {



    PSID Sid;

    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;


typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

typedef struct _SID_AND_ATTRIBUTES_HASH {
    DWORD SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;
# 9638 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum {

    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
    WinApplicationPackageAuthoritySid = 83,
    WinBuiltinAnyPackageSid = 84,
    WinCapabilityInternetClientSid = 85,
    WinCapabilityInternetClientServerSid = 86,
    WinCapabilityPrivateNetworkClientServerSid = 87,
    WinCapabilityPicturesLibrarySid = 88,
    WinCapabilityVideosLibrarySid = 89,
    WinCapabilityMusicLibrarySid = 90,
    WinCapabilityDocumentsLibrarySid = 91,
    WinCapabilitySharedUserCertificatesSid = 92,
    WinCapabilityEnterpriseAuthenticationSid = 93,
    WinCapabilityRemovableStorageSid = 94,
    WinBuiltinRDSRemoteAccessServersSid = 95,
    WinBuiltinRDSEndpointServersSid = 96,
    WinBuiltinRDSManagementServersSid = 97,
    WinUserModeDriversSid = 98,
    WinBuiltinHyperVAdminsSid = 99,
    WinAccountCloneableControllersSid = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid = 102,
    WinAuthenticationAuthorityAssertedSid = 103,
    WinAuthenticationServiceAssertedSid = 104,
    WinLocalAccountSid = 105,
    WinLocalAccountAndAdministratorSid = 106,
    WinAccountProtectedUsersSid = 107,
} WELL_KNOWN_SID_TYPE;
# 9845 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _ACL {
    BYTE AclRevision;
    BYTE Sbz1;
    WORD AclSize;
    WORD AceCount;
    WORD Sbz2;
} ACL;
typedef ACL *PACL;
# 9875 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _ACE_HEADER {
    BYTE AceType;
    BYTE AceFlags;
    WORD AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;
# 9989 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_RESOURCE_ATTRIBUTE_ACE, *PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_SCOPED_POLICY_ID_ACE, *PSYSTEM_SCOPED_POLICY_ID_ACE;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;

typedef struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_PROCESS_TRUST_LABEL_ACE, *PSYSTEM_PROCESS_TRUST_LABEL_ACE;
# 10057 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;






typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
# 10180 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
# 10231 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef WORD SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;
# 10321 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
   BYTE Revision;
   BYTE Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;

   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;


typedef struct _SECURITY_OBJECT_AI_PARAMS {
    DWORD Size;
    DWORD ConstraintMask;
} SECURITY_OBJECT_AI_PARAMS, *PSECURITY_OBJECT_AI_PARAMS;
# 10398 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _OBJECT_TYPE_LIST {
    WORD Level;
    WORD Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;
# 10418 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;
# 10472 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;
# 10493 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum _ACCESS_REASON_TYPE{

    AccessReasonNone = 0x00000000,






    AccessReasonAllowedAce = 0x00010000,
    AccessReasonDeniedAce = 0x00020000,

    AccessReasonAllowedParentAce = 0x00030000,
    AccessReasonDeniedParentAce = 0x00040000,

    AccessReasonNotGrantedByCape = 0x00050000,
    AccessReasonNotGrantedByParentCape = 0x00060000,

    AccessReasonNotGrantedToAppContainer = 0x00070000,

    AccessReasonMissingPrivilege = 0x00100000,
    AccessReasonFromPrivilege = 0x00200000,


    AccessReasonIntegrityLevel = 0x00300000,

    AccessReasonOwnership = 0x00400000,

    AccessReasonNullDacl = 0x00500000,
    AccessReasonEmptyDacl = 0x00600000,

    AccessReasonNoSD = 0x00700000,
    AccessReasonNoGrant = 0x00800000,

    AccessReasonTrustLabel = 0x00900000
}
ACCESS_REASON_TYPE;
# 10544 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef DWORD ACCESS_REASON;

typedef struct _ACCESS_REASONS{
        ACCESS_REASON Data[32];
} ACCESS_REASONS, *PACCESS_REASONS;
# 10573 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _SE_SECURITY_DESCRIPTOR
{
    DWORD Size;
    DWORD Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR;

typedef struct _SE_ACCESS_REQUEST
{
    DWORD Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid;
    PGENERIC_MAPPING GenericMapping;
    DWORD ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST;


typedef struct _SE_ACCESS_REPLY
{
    DWORD Size;
    DWORD ResultListCount;
    PACCESS_MASK GrantedAccess;
    PDWORD AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET* Privileges;
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY;
# 10664 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;
# 10736 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_ELEVATION_TYPE {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull,
    TokenElevationTypeLimited,
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;






typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    TokenIsAppContainer,
    TokenCapabilities,
    TokenAppContainerSid,
    TokenAppContainerNumber,
    TokenUserClaimAttributes,
    TokenDeviceClaimAttributes,
    TokenRestrictedUserClaimAttributes,
    TokenRestrictedDeviceClaimAttributes,
    TokenDeviceGroups,
    TokenRestrictedDeviceGroups,
    TokenSecurityAttributes,
    TokenIsRestricted,
    TokenProcessTrustLevel,
    MaxTokenInfoClass
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;






typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;

typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;



    SID_AND_ATTRIBUTES Groups[1];

} TOKEN_GROUPS, *PTOKEN_GROUPS;


typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;


typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;


typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_USER_CLAIMS {
    PCLAIMS_BLOB UserClaims;
} TOKEN_USER_CLAIMS, *PTOKEN_USER_CLAIMS;

typedef struct _TOKEN_DEVICE_CLAIMS {
    PCLAIMS_BLOB DeviceClaims;
} TOKEN_DEVICE_CLAIMS, *PTOKEN_DEVICE_CLAIMS;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;

typedef struct _TOKEN_LINKED_TOKEN {
    HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN;

typedef struct _TOKEN_ELEVATION {
    DWORD TokenIsElevated;
} TOKEN_ELEVATION, *PTOKEN_ELEVATION;

typedef struct _TOKEN_MANDATORY_LABEL {
    SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL;
# 10883 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _TOKEN_MANDATORY_POLICY {
    DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;

typedef struct _TOKEN_ACCESS_INFORMATION {
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    DWORD Flags;
    DWORD AppContainerNumber;
    PSID PackageSid;
    PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    PSID TrustLevelSid;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;







typedef struct _TOKEN_AUDIT_POLICY {
    BYTE PerUserPolicy[(((56)) >> 1) + 1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;



typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;


typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;



typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;

typedef struct _TOKEN_ORIGIN {
    LUID OriginatingLogonSession ;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN ;


typedef enum _MANDATORY_LEVEL {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow,
    MandatoryLevelMedium,
    MandatoryLevelHigh,
    MandatoryLevelSystem,
    MandatoryLevelSecureProcess,
    MandatoryLevelCount
} MANDATORY_LEVEL, *PMANDATORY_LEVEL;

typedef struct _TOKEN_APPCONTAINER_INFORMATION {
    PSID TokenAppContainer;
} TOKEN_APPCONTAINER_INFORMATION, *PTOKEN_APPCONTAINER_INFORMATION;

typedef struct _TOKEN_SID_INFORMATION {
    PSID Sid;
} TOKEN_SID_INFORMATION, *PTOKEN_SID_INFORMATION;
# 10994 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
    DWORD64 Version;
    PWSTR Name;
} CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
# 11006 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
    PVOID pValue;
    DWORD ValueLength;
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
    *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
# 11078 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {






    PWSTR Name;





    WORD ValueType;






    WORD Reserved;





    DWORD Flags;





    DWORD ValueCount;





    union {
        PLONG64 pInt64;
        PDWORD64 pUint64;
        PWSTR *ppString;
        PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE pFqbn;
        PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString;
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_V1, *PCLAIM_SECURITY_ATTRIBUTE_V1;






typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {






    DWORD Name;





    WORD ValueType;






    WORD Reserved;





    DWORD Flags;





    DWORD ValueCount;





    union {
        DWORD pInt64[1];
        DWORD pUint64[1];
        DWORD ppString[1];
        DWORD pFqbn[1];
        DWORD pOctetString[1];
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, *PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
# 11197 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {





    WORD Version;





    WORD Reserved;

    DWORD AttributeCount;
    union {
        PCLAIM_SECURITY_ATTRIBUTE_V1 pAttributeV1;
    } Attribute;
} CLAIM_SECURITY_ATTRIBUTES_INFORMATION, *PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;
# 11224 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;






typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;
# 11279 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum _SE_LEARNING_MODE_DATA_TYPE {
    SeLearningModeInvalidType = 0,
    SeLearningModeSettings,
    SeLearningModeMax
} SE_LEARNING_MODE_DATA_TYPE;



typedef struct _SECURITY_CAPABILITIES {
    PSID AppContainerSid;
    PSID_AND_ATTRIBUTES Capabilities;
    DWORD CapabilityCount;
    DWORD Reserved;
} SECURITY_CAPABILITIES, *PSECURITY_CAPABILITIES, *LPSECURITY_CAPABILITIES;
# 11356 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _JOB_SET_ARRAY {
    HANDLE JobHandle;
    DWORD MemberLevel;
    DWORD Flags;
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;




typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    PEXCEPTION_ROUTINE Handler;
} EXCEPTION_REGISTRATION_RECORD;

typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;

    union {
        PVOID FiberData;
        DWORD Version;
    };



    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;




typedef struct _NT_TIB32 {
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;


    union {
        DWORD FiberData;
        DWORD Version;
    };




    DWORD ArbitraryUserPointer;
    DWORD Self;
} NT_TIB32, *PNT_TIB32;

typedef struct _NT_TIB64 {
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;


    union {
        DWORD64 FiberData;
        DWORD Version;
    };





    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
} NT_TIB64, *PNT_TIB64;
# 11439 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {
    DWORD UmsVersion;
        PVOID UmsContext;
        PVOID UmsCompletionList;
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES;

typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;







typedef union _RATE_QUOTA_LIMIT {
    DWORD RateData;
    struct {
        DWORD RatePercent : 7;
        DWORD Reserved0 : 25;
    } ;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;

typedef struct _IO_COUNTERS {
    ULONGLONG ReadOperationCount;
    ULONGLONG WriteOperationCount;
    ULONGLONG OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;




typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter,
    MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;
typedef enum _PROCESS_MITIGATION_POLICY {
    ProcessDEPPolicy,
    ProcessASLRPolicy,
    ProcessDynamicCodePolicy,
    ProcessStrictHandleCheckPolicy,
    ProcessSystemCallDisablePolicy,
    ProcessMitigationOptionsMask,
    ProcessExtensionPointDisablePolicy,
    ProcessReserved1Policy,
    ProcessSignaturePolicy,
    MaxProcessMitigationPolicy
} PROCESS_MITIGATION_POLICY, *PPROCESS_MITIGATION_POLICY;






typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableBottomUpRandomization : 1;
            DWORD EnableForceRelocateImages : 1;
            DWORD EnableHighEntropy : 1;
            DWORD DisallowStrippedImages : 1;
            DWORD ReservedFlags : 28;
        };
    };
} PROCESS_MITIGATION_ASLR_POLICY, *PPROCESS_MITIGATION_ASLR_POLICY;

typedef struct _PROCESS_MITIGATION_DEP_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD Enable : 1;
            DWORD DisableAtlThunkEmulation : 1;
            DWORD ReservedFlags : 30;
        };
    };
    BOOLEAN Permanent;
} PROCESS_MITIGATION_DEP_POLICY, *PPROCESS_MITIGATION_DEP_POLICY;

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD RaiseExceptionOnInvalidHandleReference : 1;
            DWORD HandleExceptionsPermanentlyEnabled : 1;
            DWORD ReservedFlags : 30;
        };
    };
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisallowWin32kSystemCalls : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisableExtensionPoints : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, *PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD ProhibitDynamicCode : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_DYNAMIC_CODE_POLICY, *PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY;


typedef struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD MicrosoftSignedOnly : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY, *PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;


typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;





typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags ;
    HANDLE JobToken ;
    PTOKEN_GROUPS SidsToDisable ;
    PTOKEN_PRIVILEGES PrivilegesToDelete ;
    PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_JOBSET_INFORMATION {
    DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
    ToleranceLow = 1,
    ToleranceMedium,
    ToleranceHigh
} JOBOBJECT_RATE_CONTROL_TOLERANCE;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
    ToleranceIntervalShort = 1,
    ToleranceIntervalMedium,
    ToleranceIntervalLong
} JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    DWORD LimitFlags;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, *PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION, *PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;

typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
    DWORD ControlFlags;
    union {
        DWORD CpuRate;
        DWORD Weight;
    };
} JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, *PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
# 11828 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    JobObjectGroupInformation,
    JobObjectNotificationLimitInformation,
    JobObjectLimitViolationInformation,
    JobObjectGroupInformationEx,
    JobObjectCpuRateControlInformation,
    JobObjectCompletionFilter,
    JobObjectCompletionCounter,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information,
    JobObjectReserved3Information,
    JobObjectReserved4Information,
    JobObjectReserved5Information,
    JobObjectReserved6Information,
    JobObjectReserved7Information,
    JobObjectReserved8Information,
    JobObjectReserved9Information,
    MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;


typedef enum _FIRMWARE_TYPE {
    FirmwareTypeUnknown,
    FirmwareTypeBios,
    FirmwareTypeUefi,
    FirmwareTypeMax
} FIRMWARE_TYPE, *PFIRMWARE_TYPE;
# 11895 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache,
    RelationProcessorPackage,
    RelationGroup,
    RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;



typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;



typedef struct _CACHE_DESCRIPTOR {
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG_PTR ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union {
        struct {
            BYTE Flags;
        } ProcessorCore;
        struct {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG Reserved[2];
    } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

typedef struct _PROCESSOR_RELATIONSHIP {
    BYTE Flags;
    BYTE Reserved[21];
    WORD GroupCount;
                             GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;

typedef struct _NUMA_NODE_RELATIONSHIP {
    DWORD NodeNumber;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;

typedef struct _CACHE_RELATIONSHIP {
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;

typedef struct _PROCESSOR_GROUP_INFO {
    BYTE MaximumProcessorCount;
    BYTE ActiveProcessorCount;
    BYTE Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;

typedef struct _GROUP_RELATIONSHIP {
    WORD MaximumGroupCount;
    WORD ActiveGroupCount;
    BYTE Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;

                          struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } ;
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;



typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
    DWORD64 CycleTime;
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
# 12085 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _XSTATE_FEATURE {
    DWORD Offset;
    DWORD Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;

typedef struct _XSTATE_CONFIGURATION {

    DWORD64 EnabledFeatures;


    DWORD64 EnabledVolatileFeatures;


    DWORD Size;

    DWORD OptimizedSave : 1;


    XSTATE_FEATURE Features[(64)];

} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;


typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

typedef struct _MEMORY_BASIC_INFORMATION32 {
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;

typedef struct __declspec(align(16)) _MEMORY_BASIC_INFORMATION64 {
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD AllocationProtect;
    DWORD __alignment1;
    ULONGLONG RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
    DWORD __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;
# 12321 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _FILE_ID_128 {
    BYTE Identifier[16];
} FILE_ID_128, *PFILE_ID_128;





typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;






typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;
# 12401 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD ReparseTag;
    WORD ReparseDataLength;
    WORD Reserved;
    GUID ReparseGuid;
    struct {
        BYTE DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;
# 12505 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _SCRUB_DATA_INPUT {





    DWORD Size;
# 12520 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
    DWORD Flags;







    DWORD MaximumIos;





    DWORD Reserved[17];







    BYTE ResumeContext[816];

} SCRUB_DATA_INPUT, *PSCRUB_DATA_INPUT;



typedef struct _SCRUB_PARITY_EXTENT {

    LONGLONG Offset;

    ULONGLONG Length;

} SCRUB_PARITY_EXTENT, *PSCRUB_PARITY_EXTENT;

typedef struct _SCRUB_PARITY_EXTENT_DATA {





    WORD Size;





    WORD Flags;





    WORD NumberOfParityExtents;





    WORD MaximumNumberOfParityExtents;





    SCRUB_PARITY_EXTENT ParityExtents[1];

} SCRUB_PARITY_EXTENT_DATA, *PSCRUB_PARITY_EXTENT_DATA;



typedef struct _SCRUB_DATA_OUTPUT {





    DWORD Size;
# 12608 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
    DWORD Flags;





    DWORD Status;






    ULONGLONG ErrorFileOffset;






    ULONGLONG ErrorLength;





    ULONGLONG NumberOfBytesRepaired;





    ULONGLONG NumberOfBytesFailed;





    ULONGLONG InternalFileReference;
# 12657 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
    WORD ResumeContextLength;







    WORD ParityExtentDataOffset;





    DWORD Reserved[5];
# 12696 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
    BYTE ResumeContext[816];

} SCRUB_DATA_OUTPUT, *PSCRUB_DATA_OUTPUT;
# 12713 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum _SharedVirtualDiskSupportType
{



    SharedVirtualDisksUnsupported = 0,




    SharedVirtualDisksSupported = 1
} SharedVirtualDiskSupportType;

typedef enum _SharedVirtualDiskHandleState
{



    SharedVirtualDiskHandleStateNone = 0,





    SharedVirtualDiskHandleStateFileShared = 1,





    SharedVirtualDiskHandleStateHandleShared = 3
} SharedVirtualDiskHandleState;





typedef struct _SHARED_VIRTUAL_DISK_SUPPORT {




    SharedVirtualDiskSupportType SharedVirtualDiskSupport;





    SharedVirtualDiskHandleState HandleState;
} SHARED_VIRTUAL_DISK_SUPPORT, *PSHARED_VIRTUAL_DISK_SUPPORT;
# 12803 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_MAX_POWER_SAVINGS;






extern "C" const GUID GUID_MIN_POWER_SAVINGS;






extern "C" const GUID GUID_TYPICAL_POWER_SAVINGS;







extern "C" const GUID NO_SUBGROUP_GUID;







extern "C" const GUID ALL_POWERSCHEMES_GUID;
# 12870 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_POWERSCHEME_PERSONALITY;
# 12879 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_ACTIVE_POWERSCHEME;
# 12894 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_IDLE_RESILIENCY_SUBGROUP;





extern "C" const GUID GUID_IDLE_RESILIENCY_PERIOD;






extern "C" const GUID GUID_IDLE_RESILIENCY_PLATFORM_STATE;






extern "C" const GUID GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
# 12927 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
# 12936 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_VIDEO_SUBGROUP;





extern "C" const GUID GUID_VIDEO_POWERDOWN_TIMEOUT;





extern "C" const GUID GUID_VIDEO_ANNOYANCE_TIMEOUT;





extern "C" const GUID GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;





extern "C" const GUID GUID_VIDEO_DIM_TIMEOUT;





extern "C" const GUID GUID_VIDEO_ADAPTIVE_POWERDOWN;





extern "C" const GUID GUID_MONITOR_POWER_ON;




extern "C" const GUID GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;





extern "C" const GUID GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;




extern "C" const GUID GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;






extern "C" const GUID GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;





extern "C" const GUID GUID_CONSOLE_DISPLAY_STATE;







extern "C" const GUID GUID_ALLOW_DISPLAY_REQUIRED;







extern "C" const GUID GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;






extern "C" const GUID GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;






extern "C" const GUID GUID_NON_ADAPTIVE_INPUT_TIMEOUT;







extern "C" const GUID GUID_DISK_SUBGROUP;





extern "C" const GUID GUID_DISK_POWERDOWN_TIMEOUT;






extern "C" const GUID GUID_DISK_IDLE_TIMEOUT;
# 13061 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_DISK_BURST_IGNORE_THRESHOLD;





extern "C" const GUID GUID_DISK_ADAPTIVE_POWERDOWN;
# 13076 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_SLEEP_SUBGROUP;







extern "C" const GUID GUID_SLEEP_IDLE_THRESHOLD;





extern "C" const GUID GUID_STANDBY_TIMEOUT;
# 13099 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_UNATTEND_SLEEP_TIMEOUT;





extern "C" const GUID GUID_HIBERNATE_TIMEOUT;





extern "C" const GUID GUID_HIBERNATE_FASTS4_POLICY;
# 13120 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_CRITICAL_POWER_TRANSITION;





extern "C" const GUID GUID_SYSTEM_AWAYMODE;





extern "C" const GUID GUID_ALLOW_AWAYMODE;





extern "C" const GUID GUID_VIDEO_FULLSCREEN_PLAYBACK;






extern "C" const GUID GUID_AUDIO_PLAYBACK;







extern "C" const GUID GUID_ALLOW_STANDBY_STATES;






extern "C" const GUID GUID_ALLOW_RTC_WAKE;







extern "C" const GUID GUID_ALLOW_SYSTEM_REQUIRED;
# 13177 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_SYSTEM_BUTTON_SUBGROUP;
# 13196 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_POWERBUTTON_ACTION;





extern "C" const GUID GUID_SLEEPBUTTON_ACTION;






extern "C" const GUID GUID_USERINTERFACEBUTTON_ACTION;





extern "C" const GUID GUID_LIDCLOSE_ACTION;
extern "C" const GUID GUID_LIDOPEN_POWERSTATE;
# 13225 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_BATTERY_SUBGROUP;
# 13237 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_0;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_0;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_0;

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_1;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_1;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_1;

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_2;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_2;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_2;

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_3;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_3;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_3;

extern "C" const GUID GUID_CS_BATTERY_SAVER_THRESHOLD;
extern "C" const GUID GUID_CS_BATTERY_SAVER_ACTION;
extern "C" const GUID GUID_CS_BATTERY_SAVER_TIMEOUT;
# 13264 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_SETTINGS_SUBGROUP;





extern "C" const GUID GUID_PROCESSOR_THROTTLE_POLICY;
# 13286 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM;







extern "C" const GUID GUID_PROCESSOR_THROTTLE_MINIMUM;







extern "C" const GUID GUID_PROCESSOR_ALLOW_THROTTLING;





extern "C" const GUID GUID_PROCESSOR_IDLESTATE_POLICY;





extern "C" const GUID GUID_PROCESSOR_PERFSTATE_POLICY;







extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY;







extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY;
# 13355 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_TIME;
# 13364 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_TIME;







extern "C" const GUID GUID_PROCESSOR_PERF_TIME_CHECK;







extern "C" const GUID GUID_PROCESSOR_PERF_BOOST_POLICY;
# 13392 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_PERF_BOOST_MODE;
# 13408 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING;






extern "C" const GUID GUID_PROCESSOR_IDLE_DISABLE;
# 13424 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
# 13433 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_IDLE_TIME_CHECK;
# 13442 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
# 13484 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE;







extern "C" const GUID GUID_PROCESSOR_PARKING_PERF_STATE;







extern "C" const GUID GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;
# 13602 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_PERF_HISTORY;







extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_HISTORY;







extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_HISTORY;







extern "C" const GUID GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;
# 13636 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_PERF_LATENCY_HINT;






extern "C" const GUID GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;







extern "C" const GUID GUID_PROCESSOR_DISTRIBUTE_UTILITY;







extern "C" const GUID GUID_SYSTEM_COOLING_POLICY;
# 13669 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_LOCK_CONSOLE_ON_WAKE;
# 13679 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_DEVICE_IDLE_POLICY;
# 13700 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_ACDC_POWER_SOURCE;
# 13716 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_LIDSWITCH_STATE_CHANGE;
# 13733 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_BATTERY_PERCENTAGE_REMAINING;






extern "C" const GUID GUID_GLOBAL_USER_PRESENCE;
# 13751 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_SESSION_DISPLAY_STATUS;
# 13761 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_SESSION_USER_PRESENCE;






extern "C" const GUID GUID_IDLE_BACKGROUND_TASK;






extern "C" const GUID GUID_BACKGROUND_TASK_NOTIFICATION;







extern "C" const GUID GUID_APPLAUNCH_BUTTON;
# 13794 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP;





extern "C" const GUID GUID_PCIEXPRESS_ASPM_POLICY;
# 13812 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;






extern "C" const GUID GUID_INTSTEER_SUBGROUP;



extern "C" const GUID GUID_INTSTEER_MODE;



extern "C" const GUID GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;



extern "C" const GUID GUID_INTSTEER_TIME_UNPARK_TRIGGER;



typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;



typedef enum {
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject
} POWER_ACTION, *PPOWER_ACTION;

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0,
    PowerMonitorOn,
    PowerMonitorDim
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent,
    PowerUserInactive,
    PowerUserMaximum,
    PowerUserInvalid = PowerUserMaximum
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;
# 13890 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;
# 13913 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;
# 13939 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct CM_Power_Data_s {
    DWORD PD_Size;
    DEVICE_POWER_STATE PD_MostRecentPowerState;
    DWORD PD_Capabilities;
    DWORD PD_D1Latency;
    DWORD PD_D2Latency;
    DWORD PD_D3Latency;
    DEVICE_POWER_STATE PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;





typedef enum {
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,
    LastSleepTime,
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry,
    SetPowerSettingValue,
    NotifyUserPowerSetting,
    PowerInformationLevelUnused0,
    SystemMonitorHiberBootPowerOff,
    SystemVideoState,
    TraceApplicationPowerMessage,
    TraceApplicationPowerMessageEnd,
    ProcessorPerfStates,
    ProcessorIdleStates,
    ProcessorCap,
    SystemWakeSource,
    SystemHiberFileInformation,
    TraceServicePowerMessage,
    ProcessorLoad,
    PowerShutdownNotification,
    MonitorCapabilities,
    SessionPowerInit,
    SessionDisplayState,
    PowerRequestCreate,
    PowerRequestAction,
    GetPowerRequestList,
    ProcessorInformationEx,
    NotifyUserModeLegacyPowerEvent,
    GroupPark,
    ProcessorIdleDomains,
    WakeTimerList,
    SystemHiberFileSize,
    ProcessorIdleStatesHv,
    ProcessorPerfStatesHv,
    ProcessorPerfCapHv,
    ProcessorSetIdle,
    LogicalProcessorIdling,
    UserPresence,
    PowerSettingNotificationName,
    GetPowerSettingValue,
    IdleResiliency,
    SessionRITState,
    SessionConnectNotification,
    SessionPowerCleanup,
    SessionLockState,
    SystemHiberbootState,
    PlatformInformation,
    PdcInvocation,
    MonitorInvocation,
    FirmwareTableInformationRegistered,
    SetShutdownSelectedTime,
    SuspendResumeInvocation,
    PlmPowerRequestCreate,
    ScreenOff,
    CsDeviceNotification,
    PlatformRole,
    LastResumePerformance,
    DisplayBurst,
    ExitLatencySamplingPercentage,
    RegisterSpmPowerSettings,
    PlatformIdleStates,
    ProcessorIdleVeto,
    PlatformIdleVeto,
    SystemBatteryStatePrecise,
    ThermalEvent,
    PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;





typedef enum {
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 0xff
} POWER_USER_PRESENCE_TYPE, *PPOWER_USER_PRESENCE_TYPE;

typedef struct _POWER_USER_PRESENCE {
 POWER_USER_PRESENCE_TYPE UserPresence;
} POWER_USER_PRESENCE, *PPOWER_USER_PRESENCE;




typedef struct _POWER_SESSION_CONNECT {
    BOOLEAN Connected;
    BOOLEAN Console;
} POWER_SESSION_CONNECT, *PPOWER_SESSION_CONNECT;

typedef struct _POWER_SESSION_TIMEOUTS {
    DWORD InputTimeout;
    DWORD DisplayTimeout;
} POWER_SESSION_TIMEOUTS, *PPOWER_SESSION_TIMEOUTS;




typedef struct _POWER_SESSION_RIT_STATE {
    BOOLEAN Active;
    DWORD LastInputTime;
} POWER_SESSION_RIT_STATE, *PPOWER_SESSION_RIT_STATE;




typedef struct _POWER_SESSION_WINLOGON {
    DWORD SessionId;
    BOOLEAN Console;
    BOOLEAN Locked;
} POWER_SESSION_WINLOGON, *PPOWER_SESSION_WINLOGON;




typedef struct _POWER_IDLE_RESILIENCY {
    DWORD CoalescingTimeout;
    DWORD IdleResiliencyPeriod;
} POWER_IDLE_RESILIENCY, *PPOWER_IDLE_RESILIENCY;




typedef enum {
    MonitorRequestReasonUnknown,
    MonitorRequestReasonPowerButton,
    MonitorRequestReasonRemoteConnection,
    MonitorRequestReasonScMonitorpower,
    MonitorRequestReasonUserInput,
    MonitorRequestReasonAcDcDisplayBurst,
    MonitorRequestReasonUserDisplayBurst,
    MonitorRequestReasonPoSetSystemState,
    MonitorRequestReasonSetThreadExecutionState,
    MonitorRequestReasonFullWake,
    MonitorRequestReasonSessionUnlock,
    MonitorRequestReasonScreenOffRequest,
    MonitorRequestReasonIdleTimeout,
    MonitorRequestReasonPolicyChange,
    MonitorRequestReasonSleepButton,
    MonitorRequestReasonLid,
    MonitorRequestReasonBatteryCountChange,
    MonitorRequestReasonMax
} POWER_MONITOR_REQUEST_REASON;




typedef struct _POWER_MONITOR_INVOCATION {
    BOOLEAN On;
    BOOLEAN Console;
    POWER_MONITOR_REQUEST_REASON RequestReason;
} POWER_MONITOR_INVOCATION, *PPOWER_MONITOR_INVOCATION;





typedef struct _RESUME_PERFORMANCE {
    DWORD PostTimeMs;
    ULONGLONG TotalResumeTimeMs;
    ULONGLONG ResumeCompleteTimestamp;
} RESUME_PERFORMANCE, *PRESUME_PERFORMANCE;





typedef enum {
    PoAc,
    PoDc,
    PoHot,
    PoConditionMaximum
} SYSTEM_POWER_CONDITION;

typedef struct {





    DWORD Version;





    GUID Guid;






    SYSTEM_POWER_CONDITION PowerCondition;




    DWORD DataLength;




    BYTE Data[1];
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;



typedef struct {
    GUID Guid;
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;






typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {





    LARGE_INTEGER ActivationTime;




    DWORD Flags;




    DWORD ButtonInstanceID;


} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;





typedef enum _POWER_PLATFORM_ROLE {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop,
    PlatformRoleMobile,
    PlatformRoleWorkstation,
    PlatformRoleEnterpriseServer,
    PlatformRoleSOHOServer,
    PlatformRoleAppliancePC,
    PlatformRolePerformanceServer,
    PlatformRoleSlate,
    PlatformRoleMaximum
} POWER_PLATFORM_ROLE, *PPOWER_PLATFORM_ROLE;
# 14248 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _POWER_PLATFORM_INFORMATION {
    BOOLEAN AoAc;
} POWER_PLATFORM_INFORMATION, *PPOWER_PLATFORM_INFORMATION;






typedef struct {
    DWORD Granularity;
    DWORD Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;




typedef struct {
    DWORD Frequency;
    DWORD Flags;
    DWORD PercentFrequency;
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE;

typedef struct {
    DWORD Latency;
    DWORD Power;
    DWORD TimeCheck;
    BYTE PromotePercent;
    BYTE DemotePercent;
    BYTE StateType;
    BYTE Reserved;
    DWORD StateFlags;
    DWORD Context;
    DWORD IdleHandler;
    DWORD Reserved1;
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    DWORD64 TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    PVOID TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES_EX, *PPPM_WMI_IDLE_STATES_EX;

typedef struct {
    DWORD Frequency;
    DWORD Power;
    BYTE PercentFrequency;
    BYTE IncreaseLevel;
    BYTE DecreaseLevel;
    BYTE Type;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD64 Control;
    DWORD64 Status;
    DWORD HitCount;
    DWORD Reserved1;
    DWORD64 Reserved2;
    DWORD64 Reserved3;
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    DWORD64 TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    PVOID TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES_EX, *PPPM_WMI_PERF_STATES_EX;







typedef struct {
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD64 TotalTime;
    DWORD IdleTimeBuckets[6];
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING State[1];
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;







typedef struct {
    DWORD64 TotalTimeUs;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD Count;
} PPM_IDLE_STATE_BUCKET_EX, *PPPM_IDLE_STATE_BUCKET_EX;

typedef struct {
    DWORD64 TotalTime;
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD CancelledTransitions;
    PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
} PPM_IDLE_STATE_ACCOUNTING_EX, *PPPM_IDLE_STATE_ACCOUNTING_EX;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD AbortCount;
    DWORD64 StartTime;
                             PPM_IDLE_STATE_ACCOUNTING_EX State[1];
} PPM_IDLE_ACCOUNTING_EX, *PPPM_IDLE_ACCOUNTING_EX;
# 14482 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
extern "C" const GUID PPM_PERFSTATE_CHANGE_GUID;



extern "C" const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID;



extern "C" const GUID PPM_IDLESTATE_CHANGE_GUID;



extern "C" const GUID PPM_PERFSTATES_DATA_GUID;



extern "C" const GUID PPM_IDLESTATES_DATA_GUID;



extern "C" const GUID PPM_IDLE_ACCOUNTING_GUID;



extern "C" const GUID PPM_IDLE_ACCOUNTING_EX_GUID;



extern "C" const GUID PPM_THERMALCONSTRAINT_GUID;



extern "C" const GUID PPM_PERFMON_PERFSTATE_GUID;



extern "C" const GUID PPM_THERMAL_POLICY_CHANGE_GUID;



typedef struct {
    DWORD State;
    DWORD Status;
    DWORD Latency;
    DWORD Speed;
    DWORD Processor;
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT;

typedef struct {
    DWORD State;
    DWORD Latency;
    DWORD Speed;
    DWORD64 Processors;
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT;

typedef struct {
    DWORD NewState;
    DWORD OldState;
    DWORD64 Processors;
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT;

typedef struct {
    DWORD ThermalConstraint;
    DWORD64 Processors;
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT;

#pragma warning(push)
#pragma warning(disable: 4121)

typedef struct {
    BYTE Mode;
    DWORD64 Processors;
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT;

#pragma warning(pop)




typedef struct {
    POWER_ACTION Action;
    DWORD Flags;
    DWORD EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;
# 14598 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct {
    BOOLEAN Enable;
    BYTE Spare[3];
    DWORD BatteryLevel;
    POWER_ACTION_POLICY PowerPolicy;
    SYSTEM_POWER_STATE MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;
# 14613 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _SYSTEM_POWER_POLICY {
    DWORD Revision;


    POWER_ACTION_POLICY PowerButton;
    POWER_ACTION_POLICY SleepButton;
    POWER_ACTION_POLICY LidClose;
    SYSTEM_POWER_STATE LidOpenWake;
    DWORD Reserved;


    POWER_ACTION_POLICY Idle;
    DWORD IdleTimeout;
    BYTE IdleSensitivity;

    BYTE DynamicThrottle;
    BYTE Spare2[2];


    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    SYSTEM_POWER_STATE ReducedLatencySleep;
    DWORD WinLogonFlags;

    DWORD Spare3;



    DWORD DozeS4Timeout;


    DWORD BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL DischargePolicy[4];


    DWORD VideoTimeout;
    BOOLEAN VideoDimDisplay;
    DWORD VideoReserved[3];


    DWORD SpindownTimeout;


    BOOLEAN OptimizeForPower;
    BYTE FanThrottleTolerance;
    BYTE ForcedThrottle;
    BYTE MinThrottle;
    POWER_ACTION_POLICY OverThrottled;

} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;
# 14673 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct {
    DWORD TimeCheck;
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;

typedef struct {
    WORD Revision;
    union {
        WORD AsWORD ;
        struct {
            WORD AllowScaling : 1;
            WORD Disabled : 1;
            WORD Reserved : 14;
        } ;
    } Flags;

    DWORD PolicyCount;
    PROCESSOR_IDLESTATE_INFO Policy[0x3];
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;
# 14708 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _PROCESSOR_POWER_POLICY_INFO {


    DWORD TimeCheck;
    DWORD DemoteLimit;
    DWORD PromoteLimit;


    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];


    DWORD AllowDemotion:1;
    DWORD AllowPromotion:1;
    DWORD Reserved:30;

} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;


typedef struct _PROCESSOR_POWER_POLICY {
    DWORD Revision;


    BYTE DynamicThrottle;
    BYTE Spare[3];


    DWORD DisableCStates:1;
    DWORD Reserved:31;




    DWORD PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];

} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;





typedef struct {
    DWORD Revision;
    BYTE MaxThrottle;
    BYTE MinThrottle;
    BYTE BusyAdjThreshold;
    union {
        BYTE Spare;
        union {
            BYTE AsBYTE ;
            struct {
                BYTE NoDomainAccounting : 1;
                BYTE IncreasePolicy: 2;
                BYTE DecreasePolicy: 2;
                BYTE Reserved : 3;
            } ;
        } Flags;
    } ;

    DWORD TimeCheck;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD IncreasePercent;
    DWORD DecreasePercent;
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;


typedef struct _ADMINISTRATOR_POWER_POLICY {


    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;


    DWORD MinVideoTimeout;
    DWORD MaxVideoTimeout;


    DWORD MinSpindownTimeout;
    DWORD MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;


typedef struct {

    BOOLEAN PowerButtonPresent;
    BOOLEAN SleepButtonPresent;
    BOOLEAN LidPresent;
    BOOLEAN SystemS1;
    BOOLEAN SystemS2;
    BOOLEAN SystemS3;
    BOOLEAN SystemS4;
    BOOLEAN SystemS5;
    BOOLEAN HiberFilePresent;
    BOOLEAN FullWake;
    BOOLEAN VideoDimPresent;
    BOOLEAN ApmPresent;
    BOOLEAN UpsPresent;


    BOOLEAN ThermalControl;
    BOOLEAN ProcessorThrottle;
    BYTE ProcessorMinThrottle;





    BYTE ProcessorMaxThrottle;
    BOOLEAN FastSystemS4;
    BOOLEAN Hiberboot;
    BOOLEAN WakeAlarmPresent;
    BOOLEAN AoAc;



    BOOLEAN DiskSpinDown;
    BYTE spare3[8];


    BOOLEAN SystemBatteriesPresent;
    BOOLEAN BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];


    SYSTEM_POWER_STATE AcOnLineWake;
    SYSTEM_POWER_STATE SoftLidWake;
    SYSTEM_POWER_STATE RtcWake;
    SYSTEM_POWER_STATE MinDeviceWakeState;
    SYSTEM_POWER_STATE DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;

typedef struct {
    BOOLEAN AcOnLine;
    BOOLEAN BatteryPresent;
    BOOLEAN Charging;
    BOOLEAN Discharging;
    BOOLEAN Spare1[3];

    BYTE Tag;

    DWORD MaxCapacity;
    DWORD RemainingCapacity;
    DWORD Rate;
    DWORD EstimatedTime;

    DWORD DefaultAlert1;
    DWORD DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;
# 14869 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack4.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack4.h"
#pragma warning(disable: 4103)

#pragma pack(push,4)
# 14869 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2








# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/pshpack2.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/pshpack2.h"
#pragma warning(disable: 4103)

#pragma pack(push,2)
# 14877 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2
# 14889 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_DOS_HEADER {
    WORD e_magic;
    WORD e_cblp;
    WORD e_cp;
    WORD e_crlc;
    WORD e_cparhdr;
    WORD e_minalloc;
    WORD e_maxalloc;
    WORD e_ss;
    WORD e_sp;
    WORD e_csum;
    WORD e_ip;
    WORD e_cs;
    WORD e_lfarlc;
    WORD e_ovno;
    WORD e_res[4];
    WORD e_oemid;
    WORD e_oeminfo;
    WORD e_res2[10];
    LONG e_lfanew;
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {
    WORD ne_magic;
    CHAR ne_ver;
    CHAR ne_rev;
    WORD ne_enttab;
    WORD ne_cbenttab;
    LONG ne_crc;
    WORD ne_flags;
    WORD ne_autodata;
    WORD ne_heap;
    WORD ne_stack;
    LONG ne_csip;
    LONG ne_sssp;
    WORD ne_cseg;
    WORD ne_cmod;
    WORD ne_cbnrestab;
    WORD ne_segtab;
    WORD ne_rsrctab;
    WORD ne_restab;
    WORD ne_modtab;
    WORD ne_imptab;
    LONG ne_nrestab;
    WORD ne_cmovent;
    WORD ne_align;
    WORD ne_cres;
    BYTE ne_exetyp;
    BYTE ne_flagsothers;
    WORD ne_pretthunks;
    WORD ne_psegrefbytes;
    WORD ne_swaparea;
    WORD ne_expver;
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {
    WORD e32_magic;
    BYTE e32_border;
    BYTE e32_worder;
    DWORD e32_level;
    WORD e32_cpu;
    WORD e32_os;
    DWORD e32_ver;
    DWORD e32_mflags;
    DWORD e32_mpages;
    DWORD e32_startobj;
    DWORD e32_eip;
    DWORD e32_stackobj;
    DWORD e32_esp;
    DWORD e32_pagesize;
    DWORD e32_lastpagesize;
    DWORD e32_fixupsize;
    DWORD e32_fixupsum;
    DWORD e32_ldrsize;
    DWORD e32_ldrsum;
    DWORD e32_objtab;
    DWORD e32_objcnt;
    DWORD e32_objmap;
    DWORD e32_itermap;
    DWORD e32_rsrctab;
    DWORD e32_rsrccnt;
    DWORD e32_restab;
    DWORD e32_enttab;
    DWORD e32_dirtab;
    DWORD e32_dircnt;
    DWORD e32_fpagetab;
    DWORD e32_frectab;
    DWORD e32_impmod;
    DWORD e32_impmodcnt;
    DWORD e32_impproc;
    DWORD e32_pagesum;
    DWORD e32_datapage;
    DWORD e32_preload;
    DWORD e32_nrestab;
    DWORD e32_cbnrestab;
    DWORD e32_nressum;
    DWORD e32_autodata;
    DWORD e32_debuginfo;
    DWORD e32_debuglen;
    DWORD e32_instpreload;
    DWORD e32_instdemand;
    DWORD e32_heapsize;
    BYTE e32_res3[12];
    DWORD e32_winresoff;
    DWORD e32_winreslen;
    WORD e32_devid;
    WORD e32_ddkver;
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;



# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 14999 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2







typedef struct _IMAGE_FILE_HEADER {
    WORD Machine;
    WORD NumberOfSections;
    DWORD TimeDateStamp;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
    WORD SizeOfOptionalHeader;
    WORD Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
# 15069 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD VirtualAddress;
    DWORD Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {




    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;





    DWORD ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    DWORD SizeOfStackReserve;
    DWORD SizeOfStackCommit;
    DWORD SizeOfHeapReserve;
    DWORD SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD BaseOfBss;
    DWORD GprMask;
    DWORD CprMask[4];
    DWORD GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    ULONGLONG ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    ULONGLONG SizeOfStackReserve;
    ULONGLONG SizeOfStackCommit;
    ULONGLONG SizeOfHeapReserve;
    ULONGLONG SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;






typedef IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER64 PIMAGE_OPTIONAL_HEADER;







typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;


typedef IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS64 PIMAGE_NT_HEADERS;
# 15277 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct ANON_OBJECT_HEADER {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
} ANON_OBJECT_HEADER;

typedef struct ANON_OBJECT_HEADER_V2 {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;
} ANON_OBJECT_HEADER_V2;

typedef struct ANON_OBJECT_HEADER_BIGOBJ {

    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;


    DWORD NumberOfSections;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
} ANON_OBJECT_HEADER_BIGOBJ;







typedef struct _IMAGE_SECTION_HEADER {
    BYTE Name[8];
    union {
            DWORD PhysicalAddress;
            DWORD VirtualSize;
    } Misc;
    DWORD VirtualAddress;
    DWORD SizeOfRawData;
    DWORD PointerToRawData;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
# 15405 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/pshpack2.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/pshpack2.h"
#pragma warning(disable: 4103)

#pragma pack(push,2)
# 15405 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2







typedef struct _IMAGE_SYMBOL {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    SHORT SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL __unaligned *PIMAGE_SYMBOL;



typedef struct _IMAGE_SYMBOL_EX {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    LONG SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX;
typedef IMAGE_SYMBOL_EX __unaligned *PIMAGE_SYMBOL_EX;
# 15568 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack2.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack2.h"
#pragma warning(disable: 4103)

#pragma pack(push,2)
# 15568 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2


typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    BYTE bAuxType;
    BYTE bReserved;
    DWORD SymbolTableIndex;
    BYTE rgbReserved[12];
} IMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef IMAGE_AUX_SYMBOL_TOKEN_DEF __unaligned *PIMAGE_AUX_SYMBOL_TOKEN_DEF;


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 15579 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2






typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD TagIndex;
        union {
            struct {
                WORD Linenumber;
                WORD Size;
            } LnSz;
           DWORD TotalSize;
        } Misc;
        union {
            struct {
                DWORD PointerToLinenumber;
                DWORD PointerToNextFunction;
            } Function;
            struct {
                WORD Dimension[4];
            } Array;
        } FcnAry;
        WORD TvIndex;
    } Sym;
    struct {
        BYTE Name[18];
    } File;
    struct {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
 BYTE bReserved;
 SHORT HighNumber;
    } Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct {
        DWORD crc;
        BYTE rgbReserved[14];
    } CRC;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL __unaligned *PIMAGE_AUX_SYMBOL;

typedef union _IMAGE_AUX_SYMBOL_EX {
    struct {
        DWORD WeakDefaultSymIndex;
        DWORD WeakSearchType;
        BYTE rgbReserved[12];
    } Sym;
    struct {
        BYTE Name[sizeof(IMAGE_SYMBOL_EX)];
    } File;
    struct {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
        BYTE bReserved;
        SHORT HighNumber;
        BYTE rgbReserved[2];
    } Section;
    struct{
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        BYTE rgbReserved[2];
    };
    struct {
        DWORD crc;
        BYTE rgbReserved[16];
    } CRC;
} IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX __unaligned *PIMAGE_AUX_SYMBOL_EX;

typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;
# 15683 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_RELOCATION {
    union {
        DWORD VirtualAddress;
        DWORD RelocCount;
    } ;
    DWORD SymbolTableIndex;
    WORD Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION __unaligned *PIMAGE_RELOCATION;
# 16064 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD SymbolTableIndex;
        DWORD VirtualAddress;
    } Type;
    WORD Linenumber;
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER __unaligned *PIMAGE_LINENUMBER;



# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 16074 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2







typedef struct _IMAGE_BASE_RELOCATION {
    DWORD VirtualAddress;
    DWORD SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION __unaligned * PIMAGE_BASE_RELOCATION;
# 16128 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE Name[16];
    BYTE Date[12];
    BYTE UserID[6];
    BYTE GroupID[6];
    BYTE Mode[8];
    BYTE Size[10];
    BYTE EndHeader[2];
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;
# 16148 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Name;
    DWORD Base;
    DWORD NumberOfFunctions;
    DWORD NumberOfNames;
    DWORD AddressOfFunctions;
    DWORD AddressOfNames;
    DWORD AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD Hint;
    CHAR Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/pshpack8.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 16171 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2


typedef struct _IMAGE_THUNK_DATA64 {
    union {
        ULONGLONG ForwarderString;
        ULONGLONG Function;
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 16183 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2


typedef struct _IMAGE_THUNK_DATA32 {
    union {
        DWORD ForwarderString;
        DWORD Function;
        DWORD Ordinal;
        DWORD AddressOfData;
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;
# 16206 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;
    ULONGLONG AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY64;

typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD StartAddressOfRawData;
    DWORD EndAddressOfRawData;
    DWORD AddressOfIndex;
    DWORD AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;




typedef IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA64 PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY64 PIMAGE_TLS_DIRECTORY;
# 16268 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD Characteristics;
        DWORD OriginalFirstThunk;
    } ;
    DWORD TimeDateStamp;




    DWORD ForwarderChain;
    DWORD Name;
    DWORD FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR __unaligned *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;

typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
    union {
        DWORD AllAttributes;
        struct {
            DWORD RvaBased : 1;
            DWORD ReservedAttributes : 31;
        };
    } Attributes;

    DWORD DllNameRVA;
    DWORD ModuleHandleRVA;
    DWORD ImportAddressTableRVA;
    DWORD ImportNameTableRVA;
    DWORD BoundImportAddressTableRVA;
    DWORD UnloadInformationTableRVA;
    DWORD TimeDateStamp;


} IMAGE_DELAYLOAD_DESCRIPTOR, *PIMAGE_DELAYLOAD_DESCRIPTOR;

typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;
# 16341 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    WORD NumberOfNamedEntries;
    WORD NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;
# 16368 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        } ;
        DWORD Name;
        WORD Id;
    } ;
    union {
        DWORD OffsetToData;
        struct {
            DWORD OffsetToDirectory:31;
            DWORD DataIsDirectory:1;
        } ;
    } ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
# 16395 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD Length;
    CHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD Length;
    WCHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;
# 16416 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD OffsetToData;
    DWORD Size;
    DWORD CodePage;
    DWORD Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;





typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    DWORD DeCommitFreeBlockThreshold;
    DWORD DeCommitTotalFreeThreshold;
    DWORD LockPrefixTable;
    DWORD MaximumAllocationSize;
    DWORD VirtualMemoryThreshold;
    DWORD ProcessHeapFlags;
    DWORD ProcessAffinityMask;
    WORD CSDVersion;
    WORD Reserved1;
    DWORD EditList;
    DWORD SecurityCookie;
    DWORD SEHandlerTable;
    DWORD SEHandlerCount;
    DWORD GuardCFCheckFunctionPointer;
    DWORD Reserved2;
    DWORD GuardCFFunctionTable;
    DWORD GuardCFFunctionCount;
    DWORD GuardFlags;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    ULONGLONG DeCommitFreeBlockThreshold;
    ULONGLONG DeCommitTotalFreeThreshold;
    ULONGLONG LockPrefixTable;
    ULONGLONG MaximumAllocationSize;
    ULONGLONG VirtualMemoryThreshold;
    ULONGLONG ProcessAffinityMask;
    DWORD ProcessHeapFlags;
    WORD CSDVersion;
    WORD Reserved1;
    ULONGLONG EditList;
    ULONGLONG SecurityCookie;
    ULONGLONG SEHandlerTable;
    ULONGLONG SEHandlerCount;
    ULONGLONG GuardCFCheckFunctionPointer;
    ULONGLONG Reserved2;
    ULONGLONG GuardCFFunctionTable;
    ULONGLONG GuardCFFunctionCount;
    DWORD GuardFlags;
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;


typedef IMAGE_LOAD_CONFIG_DIRECTORY64 IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY64 PIMAGE_LOAD_CONFIG_DIRECTORY;
# 16509 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    union {
        DWORD UnwindData;
        struct {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD Ret : 2;
            DWORD H : 1;
            DWORD Reg : 3;
            DWORD R : 1;
            DWORD L : 1;
            DWORD C : 1;
            DWORD StackAdjust : 10;
        } ;
    } ;
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    union {
        DWORD UnwindInfoAddress;
        DWORD UnwindData;
    } ;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
# 16582 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;







typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Type;
    DWORD SizeOfData;
    DWORD AddressOfRawData;
    DWORD PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;
# 16616 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD NumberOfSymbols;
    DWORD LvaToFirstSymbol;
    DWORD NumberOfLinenumbers;
    DWORD LvaToFirstLinenumber;
    DWORD RvaToFirstByteOfCode;
    DWORD RvaToLastByteOfCode;
    DWORD RvaToFirstByteOfData;
    DWORD RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    DWORD ulOffStart;
    DWORD cbProcSize;
    DWORD cdwLocals;
    WORD cdwParams;
    WORD cbProlog : 8;
    WORD cbRegs : 3;
    WORD fHasSEH : 1;
    WORD fUseBP : 1;
    WORD reserved : 1;
    WORD cbFrame : 2;
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    DWORD DataType;
    DWORD Length;

    BOOLEAN Unicode;
    BYTE Reserved[ 3 ];
    BYTE Data[ 1 ];
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;
# 16665 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD StartingAddress;
    DWORD EndingAddress;
    DWORD EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG StartingAddress;
    ULONGLONG EndingAddress;
    union {
        ULONGLONG EndOfPrologue;
        ULONGLONG UnwindInfoAddress;
    } ;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;
# 16700 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD Signature;
    WORD Flags;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;
    DWORD NumberOfSections;
    DWORD ExportedNamesSize;
    DWORD DebugDirectorySize;
    DWORD SectionAlignment;
    DWORD Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;

typedef struct _NON_PAGED_DEBUG_INFO {
    WORD Signature;
    WORD Flags;
    DWORD Size;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD SizeOfImage;
    ULONGLONG ImageBase;


} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;
# 16750 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1;

    int :7;
    unsigned int AmaskShift: 8;
    int :16;
    DWORD FirstEntryRVA;
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA;
    DWORD NewInst;
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 16764 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2
# 16773 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct IMPORT_OBJECT_HEADER {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    DWORD SizeOfData;

    union {
        WORD Ordinal;
        WORD Hint;
    } ;

    WORD Type : 2;
    WORD NameType : 3;
    WORD Reserved : 11;
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,
    IMPORT_OBJECT_NAME = 1,
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,
    IMPORT_OBJECT_NAME_UNDECORATE = 3,

} IMPORT_OBJECT_NAME_TYPE;





typedef enum ReplacesCorHdrNumericDefines
{

    COMIMAGE_FLAGS_ILONLY =0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED =0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY =0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED =0x00000008,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT =0x00000010,
    COMIMAGE_FLAGS_TRACKDEBUGDATA =0x00010000,


    COR_VERSION_MAJOR_V2 =2,
    COR_VERSION_MAJOR =COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR =5,
    COR_DELETED_NAME_LENGTH =8,
    COR_VTABLEGAP_NAME_LENGTH =8,


    NATIVE_TYPE_MAX_CB =1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,


    IMAGE_COR_MIH_METHODRVA =0x01,
    IMAGE_COR_MIH_EHRVA =0x02,
    IMAGE_COR_MIH_BASICBLOCK =0x08,


    COR_VTABLE_32BIT =0x01,
    COR_VTABLE_64BIT =0x02,
    COR_VTABLE_FROM_UNMANAGED =0x04,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN =0x08,
    COR_VTABLE_CALL_MOST_DERIVED =0x10,


    IMAGE_COR_EATJ_THUNK_SIZE =32,



    MAX_CLASS_NAME =1024,
    MAX_PACKAGE_NAME =1024,
} ReplacesCorHdrNumericDefines;


typedef struct IMAGE_COR20_HEADER
{

    DWORD cb;
    WORD MajorRuntimeVersion;
    WORD MinorRuntimeVersion;


    IMAGE_DATA_DIRECTORY MetaData;
    DWORD Flags;



    union {
        DWORD EntryPointToken;
        DWORD EntryPointRVA;
    } ;


    IMAGE_DATA_DIRECTORY Resources;
    IMAGE_DATA_DIRECTORY StrongNameSignature;


    IMAGE_DATA_DIRECTORY CodeManagerTable;
    IMAGE_DATA_DIRECTORY VTableFixups;
    IMAGE_DATA_DIRECTORY ExportAddressTableJumps;


    IMAGE_DATA_DIRECTORY ManagedNativeHeader;

} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;








# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\apiset.h" 1
# 16892 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2
# 16907 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(dllimport)

WORD
__stdcall
RtlCaptureStackBackTrace(
         DWORD FramesToSkip,
         DWORD FramesToCapture,
                                             PVOID * BackTrace,
              PDWORD BackTraceHash
    );
# 16931 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(dllimport)
void
__stdcall
RtlCaptureContext(
          PCONTEXT ContextRecord
    );
# 16950 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(dllimport)
void
__stdcall
RtlUnwind(
             PVOID TargetFrame,
             PVOID TargetIp,
             PEXCEPTION_RECORD ExceptionRecord,
         PVOID ReturnValue
    );
# 16971 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(dllimport)
BOOLEAN
__cdecl
RtlAddFunctionTable(
                           PRUNTIME_FUNCTION FunctionTable,
         DWORD EntryCount,
         DWORD64 BaseAddress
    );


__declspec(dllimport)
BOOLEAN
__cdecl
RtlDeleteFunctionTable(
         PRUNTIME_FUNCTION FunctionTable
    );


__declspec(dllimport)
BOOLEAN
__cdecl
RtlInstallFunctionTableCallback(
         DWORD64 TableIdentifier,
         DWORD64 BaseAddress,
         DWORD Length,
         PGET_RUNTIME_FUNCTION_CALLBACK Callback,
             PVOID Context,
             PCWSTR OutOfProcessCallbackDll
    );







__declspec(dllimport)
DWORD
__stdcall
RtlAddGrowableFunctionTable(
          PVOID * DynamicTable,
                                  PRUNTIME_FUNCTION FunctionTable,
         DWORD EntryCount,
         DWORD MaximumEntryCount,
         ULONG_PTR RangeBase,
         ULONG_PTR RangeEnd
    );


__declspec(dllimport)
void
__stdcall
RtlGrowFunctionTable(
            PVOID DynamicTable,
         DWORD NewEntryCount
    );


__declspec(dllimport)
void
__stdcall
RtlDeleteGrowableFunctionTable(
         PVOID DynamicTable
    );
# 17048 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(dllimport)
PRUNTIME_FUNCTION
__stdcall
RtlLookupFunctionEntry(
         DWORD64 ControlPc,
          PDWORD64 ImageBase,
                PUNWIND_HISTORY_TABLE HistoryTable
    );
# 17065 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(dllimport)
void
__cdecl
RtlRestoreContext(
         PCONTEXT ContextRecord,
             struct _EXCEPTION_RECORD * ExceptionRecord
    );
# 17081 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(dllimport)
void
__stdcall
RtlUnwindEx(
             PVOID TargetFrame,
             PVOID TargetIp,
             PEXCEPTION_RECORD ExceptionRecord,
         PVOID ReturnValue,
         PCONTEXT ContextRecord,
             PUNWIND_HISTORY_TABLE HistoryTable
    );
# 17101 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(dllimport)
PEXCEPTION_ROUTINE
__stdcall
RtlVirtualUnwind(
         DWORD HandlerType,
         DWORD64 ImageBase,
         DWORD64 ControlPc,
         PRUNTIME_FUNCTION FunctionEntry,
            PCONTEXT ContextRecord,
          PVOID * HandlerData,
          PDWORD64 EstablisherFrame,
                PKNONVOLATILE_CONTEXT_POINTERS ContextPointers
    );
# 17414 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(dllimport)
PVOID
__stdcall
RtlPcToFileHeader(
         PVOID PcValue,
          PVOID * BaseOfImage
    );
# 17439 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(dllimport)
SIZE_T
__stdcall
RtlCompareMemory(
         const void * Source1,
         const void * Source2,
         SIZE_T Length
    );
# 17482 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
#pragma warning(push)
#pragma warning(disable: 4324)

typedef struct __declspec(align(16)) _SLIST_ENTRY {
    struct _SLIST_ENTRY *Next;
} SLIST_ENTRY, *PSLIST_ENTRY;

#pragma warning(pop)
# 17499 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef union __declspec(align(16)) _SLIST_HEADER {
    struct {
        ULONGLONG Alignment;
        ULONGLONG Region;
    } ;
    struct {
        ULONGLONG Depth:16;
        ULONGLONG Sequence:48;
        ULONGLONG Reserved:4;
        ULONGLONG NextEntry:60;
    } HeaderX64;
} SLIST_HEADER, *PSLIST_HEADER;
# 17542 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(dllimport)
void
__stdcall
RtlInitializeSListHead (
          PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlFirstEntrySList (
         const SLIST_HEADER *ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPopEntrySList (
            PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPushEntrySList (
            PSLIST_HEADER ListHead,
                             PSLIST_ENTRY ListEntry
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPushListSListEx (
            PSLIST_HEADER ListHead,
                             PSLIST_ENTRY List,
            PSLIST_ENTRY ListEnd,
         DWORD Count
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedFlushSList (
            PSLIST_HEADER ListHead
    );

__declspec(dllimport)
WORD
__stdcall
RtlQueryDepthSList (
         PSLIST_HEADER ListHead
    );
# 17624 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef union _RTL_RUN_ONCE {
    PVOID Ptr;
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;



typedef struct _RTL_BARRIER {
            DWORD Reserved1;
            DWORD Reserved2;
            ULONG_PTR Reserved3[2];
            DWORD Reserved4;
            DWORD Reserved5;
} RTL_BARRIER, *PRTL_BARRIER;
# 17675 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(noreturn)
void
__fastfail(
         unsigned int Code
    );

#pragma intrinsic(__fastfail)
# 17702 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__forceinline
DWORD
HEAP_MAKE_TAG_FLAGS (
         DWORD TagBase,
         DWORD Tag
    )

{
    return ((DWORD)((TagBase) + ((Tag) << 18)));
}
# 17781 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__forceinline
PVOID
RtlSecureZeroMemory(
                                PVOID ptr,
         SIZE_T cnt
    )
{
    volatile char *vptr = (volatile char *)ptr;



    __stosb((PBYTE )((DWORD64)vptr), 0, cnt);
# 17814 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
    return ptr;
}
# 17838 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD Length;
    WORD Flags;
    BYTE Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[ 128 ];
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[ 128 ];
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;

typedef OSVERSIONINFOW OSVERSIONINFO;
typedef POSVERSIONINFOW POSVERSIONINFO;
typedef LPOSVERSIONINFOW LPOSVERSIONINFO;






typedef struct _OSVERSIONINFOEXA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[ 128 ];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[ 128 ];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;

typedef OSVERSIONINFOEXW OSVERSIONINFOEX;
typedef POSVERSIONINFOEXW POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXW LPOSVERSIONINFOEX;
# 17983 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
         ULONGLONG ConditionMask,
         DWORD TypeMask,
         BYTE Condition
    );
# 18008 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(dllimport)
BOOLEAN
__stdcall
RtlGetProductInfo(
          DWORD OSMajorVersion,
          DWORD OSMinorVersion,
          DWORD SpMajorVersion,
          DWORD SpMinorVersion,
          PDWORD ReturnedProductType
    );
# 18028 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum _RTL_UMS_THREAD_INFO_CLASS {
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext,
    UmsThreadPriority,
    UmsThreadAffinity,
    UmsThreadTeb,
    UmsThreadIsSuspended,
    UmsThreadIsTerminated,
    UmsThreadMaxInfoClass
} RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON {
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked,
    UmsSchedulerThreadYield,
} RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON;

typedef

void
__stdcall
RTL_UMS_SCHEDULER_ENTRY_POINT(
         RTL_UMS_SCHEDULER_REASON Reason,
         ULONG_PTR ActivationPayload,
         PVOID SchedulerParam
    );

typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;
# 18117 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__declspec(dllimport)
DWORD
__stdcall
RtlCrc32(
                           const void *Buffer,
         size_t Size,
         DWORD InitialCrc
    );

__declspec(dllimport)
ULONGLONG
__stdcall
RtlCrc64(
                           const void *Buffer,
         size_t Size,
         ULONGLONG InitialCrc
    );
# 18145 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD Type;
    WORD CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD CreatorBackTraceIndexHigh;
    WORD SpareWORD ;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;
# 18176 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
#pragma pack(push, 8)

typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;






    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

#pragma pack(pop)

typedef struct _RTL_SRWLOCK {
        PVOID Ptr;
} RTL_SRWLOCK, *PRTL_SRWLOCK;

typedef struct _RTL_CONDITION_VARIABLE {
        PVOID Ptr;
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;


typedef
void
(__stdcall *PAPCFUNC)(
         ULONG_PTR Parameter
    );
typedef LONG (__stdcall *PVECTORED_EXCEPTION_HANDLER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef enum _HEAP_INFORMATION_CLASS {

    HeapCompatibilityInformation = 0,
    HeapEnableTerminationOnCorruption = 1
# 18228 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
} HEAP_INFORMATION_CLASS;
# 18254 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef void (__stdcall * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );
typedef void (__stdcall * WORKERCALLBACKFUNC) (PVOID );
typedef void (__stdcall * APC_CALLBACK_FUNCTION) (DWORD , PVOID, PVOID);
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
typedef
void
(__stdcall *PFLS_CALLBACK_FUNCTION) (
       PVOID lpFlsData
    );

typedef
BOOLEAN
(__stdcall *PSECURE_MEMORY_CACHE_CALLBACK) (
                            PVOID Addr,
         SIZE_T Range
    );




typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation = 1,
    ActivationContextDetailedInformation = 2,
    AssemblyDetailedInformationInActivationContext = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext = 4,
    RunlevelInformationInActivationContext = 5,
    CompatibilityInformationInActivationContext = 6,
    ActivationContextManifestResourceName = 7,
    MaxActivationContextInfoClass,




    AssemblyDetailedInformationInActivationContxt = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt = 4
} ACTIVATION_CONTEXT_INFO_CLASS;




typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, * PACTIVATION_CONTEXT_QUERY_INDEX;

typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX * PCACTIVATION_CONTEXT_QUERY_INDEX;







typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;

    PCWSTR lpFileName;
    PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;
# 18326 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;
    DWORD ulManifestPathType;
    DWORD ulManifestPathLength;
    LARGE_INTEGER liManifestLastWriteTime;
    DWORD ulPolicyPathType;
    DWORD ulPolicyPathLength;
    LARGE_INTEGER liPolicyLastWriteTime;
    DWORD ulMetadataSatelliteRosterIndex;

    DWORD ulManifestVersionMajor;
    DWORD ulManifestVersionMinor;
    DWORD ulPolicyVersionMajor;
    DWORD ulPolicyVersionMinor;
    DWORD ulAssemblyDirectoryNameLength;

    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;

    DWORD ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION * PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ;

typedef enum
{
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
    ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL;

typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
    DWORD UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, * PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION * PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ;

typedef enum
{
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT;

typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;

#pragma warning(push)
#pragma warning(disable: 4200)

typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
    DWORD ElementCount;
    COMPATIBILITY_CONTEXT_ELEMENT Elements[];
} ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, * PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

#pragma warning(pop)

typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION * PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;




typedef struct _SUPPORTED_OS_INFO {
    WORD OsCount;
    WORD MitigationExist;
    WORD OsList[(4)];
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO;

typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;




typedef struct _HARDWARE_COUNTER_DATA {
    HARDWARE_COUNTER_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA;



typedef struct _PERFORMANCE_DATA {
    WORD Size;
    BYTE Version;
    BYTE HwCountersCount;
    DWORD ContextSwitchCount;
    DWORD64 WaitReasonBitMap;
    DWORD64 CycleTime;
    DWORD RetryCount;
    DWORD Reserved;
    HARDWARE_COUNTER_DATA HwCounters[16];
} PERFORMANCE_DATA, *PPERFORMANCE_DATA;
# 18490 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _EVENTLOGRECORD {
    DWORD Length;
    DWORD Reserved;
    DWORD RecordNumber;
    DWORD TimeGenerated;
    DWORD TimeWritten;
    DWORD EventID;
    WORD EventType;
    WORD NumStrings;
    WORD EventCategory;
    WORD ReservedFlags;
    DWORD ClosingRecordNumber;
    DWORD StringOffset;
    DWORD UserSidLength;
    DWORD UserSidOffset;
    DWORD DataLength;
    DWORD DataOffset;
# 18518 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
} EVENTLOGRECORD, *PEVENTLOGRECORD;






#pragma warning(push)

#pragma warning(disable: 4200)

struct _EVENTSFORLOGFILE;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

struct _PACKEDEVENTINFO;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO, *PPACKEDEVENTINFO;



struct _EVENTSFORLOGFILE
{
    DWORD ulSize;
    WCHAR szLogicalLogFile[256];
    DWORD ulNumRecords;
    EVENTLOGRECORD pEventLogRecords[];
};

struct _PACKEDEVENTINFO
{
    DWORD ulSize;
    DWORD ulNumEventsForLogFile;
    DWORD ulOffsets[];
};




#pragma warning(pop)
# 18767 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType = 0x00000001,
    FileSystemType = 0x00000002,
    Win32ServiceOwnProcess = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType = 0x00000004,
    RecognizerType = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad = 0x00000000,
    SystemLoad = 0x00000001,
    AutoLoad = 0x00000002,
    DemandLoad = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError = 0x00000000,
    NormalError = 0x00000001,
    SevereError = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;
# 18855 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;
# 18871 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;
# 18885 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;
# 18899 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
# 18920 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;
# 19013 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;





typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;





typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;





typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;
# 19067 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;
# 19083 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _TAPE_WMI_OPERATIONS {
   DWORD Method;
   DWORD DataBufferSize;
   PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;




typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
   TapeDriveProblemNone, TapeDriveReadWriteWarning,
   TapeDriveReadWriteError, TapeDriveReadWarning,
   TapeDriveWriteWarning, TapeDriveReadError,
   TapeDriveWriteError, TapeDriveHardwareError,
   TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
   TapeDriveTimetoClean, TapeDriveCleanDriveNow,
   TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;







extern "C" {




# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\ktmtypes.h" 1
# 23 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\ktmtypes.h"
extern "C" {



typedef GUID UOW, *PUOW;
typedef GUID CRM_PROTOCOL_ID, *PCRM_PROTOCOL_ID;
# 78 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\ktmtypes.h"
typedef ULONG NOTIFICATION_MASK;
# 133 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\ktmtypes.h"
typedef struct _TRANSACTION_NOTIFICATION {
    PVOID TransactionKey;
    ULONG TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION;

typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID EnlistmentId;
    UOW UOW;
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;



typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

typedef ULONG SAVEPOINT_ID, *PSAVEPOINT_ID;

typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID UOW;
    GUID TmIdentity;
    ULONG BufferLength;

} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID UOW;
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;







typedef struct _KCRM_MARSHAL_HEADER {
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused;
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, * PRKCRM_MARSHAL_HEADER;

typedef struct _KCRM_TRANSACTION_BLOB {
    UOW UOW;
    GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR Description[64];
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, * PRKCRM_TRANSACTION_BLOB;

typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID ProtocolId;
                                  ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength;
    ULONG Unused1;
    ULONG Unused2;
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, * PRKCRM_PROTOCOL_BLOB;


}
# 19112 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h" 2
# 19281 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef enum _TRANSACTION_OUTCOME {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted,
    TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;


typedef enum _TRANSACTION_STATE {
    TransactionStateNormal = 1,
    TransactionStateIndoubt,
    TransactionStateCommittedNotify,
} TRANSACTION_STATE;


typedef struct _TRANSACTION_BASIC_INFORMATION {
    GUID TransactionId;
    DWORD State;
    DWORD Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    GUID TmIdentity;
    LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    GUID LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    DWORD LogPathLength;
                                WCHAR LogPath[1];

} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    ULONGLONG LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;



typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
    GUID OldestTransactionGuid;
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION;



typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
    DWORD IsolationLevel;
    DWORD IsolationFlags;
    LARGE_INTEGER Timeout;
    DWORD Outcome;
    DWORD DescriptionLength;
    WCHAR Description[1];

} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;



typedef struct _TRANSACTION_BIND_INFORMATION {
    HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;

typedef struct _TRANSACTION_ENLISTMENT_PAIR {
    GUID EnlistmentId;
    GUID ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    DWORD NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;


typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
    GUID ResourceManagerId;
    DWORD DescriptionLength;
    WCHAR Description[1];
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    HANDLE IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;




typedef enum _TRANSACTION_INFORMATION_CLASS {
    TransactionBasicInformation,
    TransactionPropertiesInformation,
    TransactionEnlistmentInformation,
    TransactionSuperiorEnlistmentInformation

    ,


    TransactionBindInformation,
    TransactionDTCPrivateInformation
    ,

} TRANSACTION_INFORMATION_CLASS;


typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
    TransactionManagerBasicInformation,
    TransactionManagerLogInformation,
    TransactionManagerLogPathInformation,
    TransactionManagerRecoveryInformation = 4

    ,



    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5



} TRANSACTIONMANAGER_INFORMATION_CLASS;



typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
    ResourceManagerBasicInformation,
    ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;


typedef struct _ENLISTMENT_BASIC_INFORMATION {
    GUID EnlistmentId;
    GUID TransactionId;
    GUID ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;

typedef struct _ENLISTMENT_CRM_INFORMATION {
    GUID CrmTransactionManagerId;
    GUID CrmResourceManagerId;
    GUID CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;



typedef enum _ENLISTMENT_INFORMATION_CLASS {
    EnlistmentBasicInformation,
    EnlistmentRecoveryInformation,
    EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;

typedef struct _TRANSACTION_LIST_ENTRY {
    UOW UOW;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;

typedef struct _TRANSACTION_LIST_INFORMATION {
    DWORD NumberOfTransactions;
    TRANSACTION_LIST_ENTRY TransactionInformation[1];
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;






typedef enum _KTMOBJECT_TYPE {

    KTMOBJECT_TRANSACTION,
    KTMOBJECT_TRANSACTION_MANAGER,
    KTMOBJECT_RESOURCE_MANAGER,
    KTMOBJECT_ENLISTMENT,
    KTMOBJECT_INVALID

} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;
# 19466 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _KTMOBJECT_CURSOR {





    GUID LastQuery;





    DWORD ObjectIdCount;





    GUID ObjectIds[1];

} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;




}



typedef DWORD TP_VERSION, *PTP_VERSION;

typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;

typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context
    );

typedef struct _TP_POOL TP_POOL, *PTP_POOL;

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID,
    TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
} TP_CALLBACK_PRIORITY;

typedef struct _TP_POOL_STACK_INFORMATION {
    SIZE_T StackReserve;
    SIZE_T StackCommit;
}TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;

typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP;

typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(
                PVOID ObjectContext,
                PVOID CleanupContext
    );
# 19533 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
typedef struct _TP_CALLBACK_ENVIRON_V3 {
    TP_VERSION Version;
    PTP_POOL Pool;
    PTP_CLEANUP_GROUP CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PTP_SIMPLE_CALLBACK FinalizationCallback;
    union {
        DWORD Flags;
        struct {
            DWORD LongFunction : 1;
            DWORD Persistent : 1;
            DWORD Private : 30;
        } s;
    } u;
    TP_CALLBACK_PRIORITY CallbackPriority;
    DWORD Size;
} TP_CALLBACK_ENVIRON_V3;

typedef TP_CALLBACK_ENVIRON_V3 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;
# 19581 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
__forceinline
void
TpInitializeCallbackEnviron(
          PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{



    CallbackEnviron->Version = 3;







    CallbackEnviron->Pool = 0;
    CallbackEnviron->CleanupGroup = 0;
    CallbackEnviron->CleanupGroupCancelCallback = 0;
    CallbackEnviron->RaceDll = 0;
    CallbackEnviron->ActivationContext = 0;
    CallbackEnviron->FinalizationCallback = 0;
    CallbackEnviron->u.Flags = 0;



    CallbackEnviron->CallbackPriority = TP_CALLBACK_PRIORITY_NORMAL;
    CallbackEnviron->Size = sizeof(TP_CALLBACK_ENVIRON);



}

__forceinline
void
TpSetCallbackThreadpool(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PTP_POOL Pool
    )
{
    CallbackEnviron->Pool = Pool;
}

__forceinline
void
TpSetCallbackCleanupGroup(
             PTP_CALLBACK_ENVIRON CallbackEnviron,
             PTP_CLEANUP_GROUP CleanupGroup,
             PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback
    )
{
    CallbackEnviron->CleanupGroup = CleanupGroup;
    CallbackEnviron->CleanupGroupCancelCallback = CleanupGroupCancelCallback;
}

__forceinline
void
TpSetCallbackActivationContext(
             PTP_CALLBACK_ENVIRON CallbackEnviron,
             struct _ACTIVATION_CONTEXT *ActivationContext
    )
{
    CallbackEnviron->ActivationContext = ActivationContext;
}

__forceinline
void
TpSetCallbackNoActivationContext(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->ActivationContext = (struct _ACTIVATION_CONTEXT *)(LONG_PTR) -1;
}

__forceinline
void
TpSetCallbackLongFunction(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.LongFunction = 1;
}

__forceinline
void
TpSetCallbackRaceWithDll(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PVOID DllHandle
    )
{
    CallbackEnviron->RaceDll = DllHandle;
}

__forceinline
void
TpSetCallbackFinalizationCallback(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PTP_SIMPLE_CALLBACK FinalizationCallback
    )
{
    CallbackEnviron->FinalizationCallback = FinalizationCallback;
}



__forceinline
void
TpSetCallbackPriority(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            TP_CALLBACK_PRIORITY Priority
    )
{
    CallbackEnviron->CallbackPriority = Priority;
}



__forceinline
void
TpSetCallbackPersistent(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.Persistent = 1;
}


__forceinline
void
TpDestroyCallbackEnviron(
         PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{






    (CallbackEnviron);
}




typedef struct _TP_WORK TP_WORK, *PTP_WORK;

typedef void (__stdcall *PTP_WORK_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_WORK Work
    );

typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER;

typedef void (__stdcall *PTP_TIMER_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_TIMER Timer
    );

typedef DWORD TP_WAIT_RESULT;

typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT;

typedef void (__stdcall *PTP_WAIT_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_WAIT Wait,
                TP_WAIT_RESULT WaitResult
    );

typedef struct _TP_IO TP_IO, *PTP_IO;



__forceinline
struct _TEB *
NtCurrentTeb (
    void
    )

{
    return (struct _TEB *)__readgsqword(((LONG)(LONG_PTR)&(((NT_TIB *)0)->Self)));
}

__forceinline
PVOID
GetCurrentFiber (
    void
    )

{

    return (PVOID)__readgsqword(((LONG)(LONG_PTR)&(((NT_TIB *)0)->FiberData)));
}

__forceinline
PVOID
GetFiberData (
    void
    )

{

    return *(PVOID *)GetCurrentFiber();
}
# 19853 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnt.h"
}



#pragma warning(pop)
# 182 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\minwindef.h" 2




typedef UINT_PTR WPARAM;
typedef LONG_PTR LPARAM;
typedef LONG_PTR LRESULT;
# 209 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\minwindef.h"
typedef HANDLE *SPHANDLE;
typedef HANDLE *LPHANDLE;
typedef HANDLE HGLOBAL;
typedef HANDLE HLOCAL;
typedef HANDLE GLOBALHANDLE;
typedef HANDLE LOCALHANDLE;



typedef INT_PTR ( __stdcall *FARPROC)();
typedef INT_PTR ( __stdcall *NEARPROC)();
typedef INT_PTR (__stdcall *PROC)();
# 237 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\minwindef.h"
typedef WORD ATOM;

struct HKEY__{int unused;}; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;
struct HMETAFILE__{int unused;}; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__{int unused;}; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;
struct HRGN__{int unused;}; typedef struct HRGN__ *HRGN;
struct HRSRC__{int unused;}; typedef struct HRSRC__ *HRSRC;
struct HSPRITE__{int unused;}; typedef struct HSPRITE__ *HSPRITE;
struct HLSURF__{int unused;}; typedef struct HLSURF__ *HLSURF;
struct HSTR__{int unused;}; typedef struct HSTR__ *HSTR;
struct HTASK__{int unused;}; typedef struct HTASK__ *HTASK;
struct HWINSTA__{int unused;}; typedef struct HWINSTA__ *HWINSTA;
struct HKL__{int unused;}; typedef struct HKL__ *HKL;


typedef int HFILE;
# 263 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\minwindef.h"
typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;



}
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\windef.h" 2
# 39 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\windef.h"
struct HWND__{int unused;}; typedef struct HWND__ *HWND;
struct HHOOK__{int unused;}; typedef struct HHOOK__ *HHOOK;
# 63 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\windef.h"
typedef void * HGDIOBJ;






struct HACCEL__{int unused;}; typedef struct HACCEL__ *HACCEL;


struct HBITMAP__{int unused;}; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__{int unused;}; typedef struct HBRUSH__ *HBRUSH;


struct HCOLORSPACE__{int unused;}; typedef struct HCOLORSPACE__ *HCOLORSPACE;


struct HDC__{int unused;}; typedef struct HDC__ *HDC;

struct HGLRC__{int unused;}; typedef struct HGLRC__ *HGLRC;
struct HDESK__{int unused;}; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__{int unused;}; typedef struct HENHMETAFILE__ *HENHMETAFILE;

struct HFONT__{int unused;}; typedef struct HFONT__ *HFONT;

struct HICON__{int unused;}; typedef struct HICON__ *HICON;

struct HMENU__{int unused;}; typedef struct HMENU__ *HMENU;


struct HPALETTE__{int unused;}; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__{int unused;}; typedef struct HPEN__ *HPEN;



struct HWINEVENTHOOK__{int unused;}; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
# 110 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\windef.h"
struct HMONITOR__{int unused;}; typedef struct HMONITOR__ *HMONITOR;
# 120 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\windef.h"
struct HUMPD__{int unused;}; typedef struct HUMPD__ *HUMPD;
# 131 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\windef.h"
typedef HICON HCURSOR;




typedef DWORD COLORREF;







typedef DWORD *LPCOLORREF;
# 154 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\windef.h"
typedef struct tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECT, *PRECT, *NPRECT, *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG x;
    LONG y;
} POINT, *PPOINT, *NPPOINT, *LPPOINT;

typedef struct _POINTL
{
    LONG x;
    LONG y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG cx;
    LONG cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE SIZEL;
typedef SIZE *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{

    SHORT x;
    SHORT y;




} POINTS, *PPOINTS, *LPPOINTS;
# 241 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\windef.h"
}
# 164 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 1
# 19 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
#pragma warning(push)

#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)







# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\apisetcconv.h" 1
# 30 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\minwinbase.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\minwinbase.h"
#pragma warning(disable: 4514)

#pragma warning(disable: 4103)


#pragma warning(push)

#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)






extern "C" {
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\minwinbase.h"
typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union {
        struct {
            DWORD Offset;
            DWORD OffsetHigh;
        } ;
        PVOID Pointer;
    } ;

    HANDLE hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;
# 89 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\minwinbase.h"
typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;


typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
              CHAR cFileName[ 260 ];
              CHAR cAlternateFileName[ 14 ];





} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
              WCHAR cFileName[ 260 ];
              WCHAR cAlternateFileName[ 14 ];





} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;

typedef WIN32_FIND_DATAW WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAW PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAW LPWIN32_FIND_DATA;
# 147 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\minwinbase.h"
typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;




typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;


typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;


typedef enum _FILE_INFO_BY_HANDLE_CLASS {
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    FileRemoteProtocolInfo,
    FileFullDirectoryInfo,
    FileFullDirectoryRestartInfo,

    FileStorageInfo,
    FileAlignmentInfo,
    FileIdInfo,
    FileIdExtdDirectoryInfo,
    FileIdExtdDirectoryRestartInfo,

    MaximumFileInfoByHandleClass
} FILE_INFO_BY_HANDLE_CLASS, *PFILE_INFO_BY_HANDLE_CLASS;


typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;

typedef
void
(__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
            DWORD dwErrorCode,
            DWORD dwNumberOfBytesTransfered,
            LPOVERLAPPED lpOverlapped
    );




typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    } ;
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;
# 244 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\minwinbase.h"
typedef struct _REASON_CONTEXT {
    ULONG Version;
    DWORD Flags;
    union {
        struct {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR *ReasonStrings;

        } Detailed;

        LPWSTR SimpleReasonString;
    } Reason;
} REASON_CONTEXT, *PREASON_CONTEXT;
# 273 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\minwinbase.h"
typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;


typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;







typedef PCONTEXT LPCONTEXT;
# 417 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\minwinbase.h"
}






#pragma warning(pop)
# 31 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2






# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processenv.h" 1
# 38 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processenv.h"
extern "C" {
# 50 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processenv.h"
__declspec(dllimport)

LPCH
__stdcall
GetEnvironmentStrings(
    void
    );


__declspec(dllimport)

LPWCH
__stdcall
GetEnvironmentStringsW(
    void
    );
# 74 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processenv.h"
__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsW(
                                     LPWCH NewEnvironment
    );





__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsA(
                                     LPCH penv
    );

__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsW(
                                     LPWCH penv
    );







__declspec(dllimport)
HANDLE
__stdcall
GetStdHandle(
         DWORD nStdHandle
    );


__declspec(dllimport)
BOOL
__stdcall
SetStdHandle(
         DWORD nStdHandle,
         HANDLE hHandle
    );





__declspec(dllimport)
BOOL
__stdcall
SetStdHandleEx(
         DWORD nStdHandle,
         HANDLE hHandle,
              PHANDLE phPrevValue
    );
# 148 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processenv.h"
__declspec(dllimport)
LPSTR
__stdcall
GetCommandLineA(
    void
    );

__declspec(dllimport)
LPWSTR
__stdcall
GetCommandLineW(
    void
    );
# 179 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processenv.h"
__declspec(dllimport)

DWORD
__stdcall
GetEnvironmentVariableA(
             LPCSTR lpName,
                                           LPSTR lpBuffer,
         DWORD nSize
    );

__declspec(dllimport)

DWORD
__stdcall
GetEnvironmentVariableW(
             LPCWSTR lpName,
                                           LPWSTR lpBuffer,
         DWORD nSize
    );







__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableA(
         LPCSTR lpName,
             LPCSTR lpValue
    );

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableW(
         LPCWSTR lpName,
             LPCWSTR lpValue
    );







__declspec(dllimport)

DWORD
__stdcall
ExpandEnvironmentStringsA(
         LPCSTR lpSrc,
                                       LPSTR lpDst,
         DWORD nSize
    );

__declspec(dllimport)

DWORD
__stdcall
ExpandEnvironmentStringsW(
         LPCWSTR lpSrc,
                                       LPWSTR lpDst,
         DWORD nSize
    );







__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryA(
         LPCSTR lpPathName
    );

__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryW(
         LPCWSTR lpPathName
    );







__declspec(dllimport)

DWORD
__stdcall
GetCurrentDirectoryA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );

__declspec(dllimport)

DWORD
__stdcall
GetCurrentDirectoryW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );







__declspec(dllimport)
DWORD
__stdcall
SearchPathW(
             LPCWSTR lpPath,
         LPCWSTR lpFileName,
             LPCWSTR lpExtension,
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer,
              LPWSTR * lpFilePart
    );
# 323 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processenv.h"
__declspec(dllimport)
DWORD
__stdcall
SearchPathA(
             LPCSTR lpPath,
         LPCSTR lpFileName,
             LPCSTR lpExtension,
         DWORD nBufferLength,
                                                   LPSTR lpBuffer,
              LPSTR * lpFilePart
    );





__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathA(
         LPCSTR ExeName
    );

__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathW(
         LPCWSTR ExeName
    );
# 372 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processenv.h"
}
# 37 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h" 1
# 41 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
extern "C" {
# 74 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
LONG
__stdcall
CompareFileTime(
         const FILETIME * lpFileTime1,
         const FILETIME * lpFileTime2
    );
# 90 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryA(
         LPCSTR lpPathName,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryW(
         LPCWSTR lpPathName,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
# 119 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
HANDLE
__stdcall
CreateFileA(
         LPCSTR lpFileName,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD dwCreationDisposition,
         DWORD dwFlagsAndAttributes,
             HANDLE hTemplateFile
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateFileW(
         LPCWSTR lpFileName,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD dwCreationDisposition,
         DWORD dwFlagsAndAttributes,
             HANDLE hTemplateFile
    );







__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceW(
         DWORD dwFlags,
         LPCWSTR lpDeviceName,
             LPCWSTR lpTargetPath
    );
# 172 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
DeleteFileA(
         LPCSTR lpFileName
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteFileW(
         LPCWSTR lpFileName
    );
# 199 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint
    );






__declspec(dllimport)
BOOL
__stdcall
FileTimeToLocalFileTime(
         const FILETIME * lpFileTime,
          LPFILETIME lpLocalFileTime
    );
# 230 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
FindClose(
            HANDLE hFindFile
    );
# 245 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
FindCloseChangeNotification(
         HANDLE hChangeHandle
    );


__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationA(
         LPCSTR lpPathName,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationW(
         LPCWSTR lpPathName,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter
    );







__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileA(
         LPCSTR lpFileName,
          LPWIN32_FIND_DATAA lpFindFileData
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileW(
         LPCWSTR lpFileName,
          LPWIN32_FIND_DATAW lpFindFileData
    );
# 309 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExA(
         LPCSTR lpFileName,
         FINDEX_INFO_LEVELS fInfoLevelId,
                                                 LPVOID lpFindFileData,
         FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
         DWORD dwAdditionalFlags
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExW(
         LPCWSTR lpFileName,
         FINDEX_INFO_LEVELS fInfoLevelId,
                                                 LPVOID lpFindFileData,
         FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
         DWORD dwAdditionalFlags
    );
# 348 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeW(
                                  LPWSTR lpszVolumeName,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextChangeNotification(
         HANDLE hChangeHandle
    );
# 376 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
FindNextFileA(
         HANDLE hFindFile,
          LPWIN32_FIND_DATAA lpFindFileData
    );

__declspec(dllimport)
BOOL
__stdcall
FindNextFileW(
         HANDLE hFindFile,
          LPWIN32_FIND_DATAW lpFindFileData
    );
# 405 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeW(
            HANDLE hFindVolume,
                                  LPWSTR lpszVolumeName,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindVolumeClose(
         HANDLE hFindVolume
    );
# 434 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
FlushFileBuffers(
         HANDLE hFile
    );
# 449 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceA(
             LPCSTR lpRootPathName,
              LPDWORD lpSectorsPerCluster,
              LPDWORD lpBytesPerSector,
              LPDWORD lpNumberOfFreeClusters,
              LPDWORD lpTotalNumberOfClusters
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceW(
             LPCWSTR lpRootPathName,
              LPDWORD lpSectorsPerCluster,
              LPDWORD lpBytesPerSector,
              LPDWORD lpNumberOfFreeClusters,
              LPDWORD lpTotalNumberOfClusters
    );
# 484 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExA(
             LPCSTR lpDirectoryName,
              PULARGE_INTEGER lpFreeBytesAvailableToCaller,
              PULARGE_INTEGER lpTotalNumberOfBytes,
              PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExW(
             LPCWSTR lpDirectoryName,
              PULARGE_INTEGER lpFreeBytesAvailableToCaller,
              PULARGE_INTEGER lpTotalNumberOfBytes,
              PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );
# 517 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
UINT
__stdcall
GetDriveTypeA(
             LPCSTR lpRootPathName
    );

__declspec(dllimport)
UINT
__stdcall
GetDriveTypeW(
             LPCWSTR lpRootPathName
    );







__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesA(
         LPCSTR lpFileName
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesW(
         LPCWSTR lpFileName
    );
# 564 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;
# 580 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExA(
         LPCSTR lpFileName,
         GET_FILEEX_INFO_LEVELS fInfoLevelId,
                                                          LPVOID lpFileInformation
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExW(
         LPCWSTR lpFileName,
         GET_FILEEX_INFO_LEVELS fInfoLevelId,
                                                          LPVOID lpFileInformation
    );
# 611 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandle(
         HANDLE hFile,
          LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );


__declspec(dllimport)
DWORD
__stdcall
GetFileSize(
         HANDLE hFile,
              LPDWORD lpFileSizeHigh
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileSizeEx(
         HANDLE hFile,
          PLARGE_INTEGER lpFileSize
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileTime(
         HANDLE hFile,
              LPFILETIME lpCreationTime,
              LPFILETIME lpLastAccessTime,
              LPFILETIME lpLastWriteTime
    );


__declspec(dllimport)
DWORD
__stdcall
GetFileType(
         HANDLE hFile
    );





__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleA(
         HANDLE hFile,
                              LPSTR lpszFilePath,
         DWORD cchFilePath,
         DWORD dwFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleW(
         HANDLE hFile,
                              LPWSTR lpszFilePath,
         DWORD cchFilePath,
         DWORD dwFlags
    );
# 701 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)

DWORD
__stdcall
GetFullPathNameA(
         LPCSTR lpFileName,
         DWORD nBufferLength,
                                                   LPSTR lpBuffer,
                 LPSTR * lpFilePart
    );

__declspec(dllimport)

DWORD
__stdcall
GetFullPathNameW(
         LPCWSTR lpFileName,
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer,
                 LPWSTR * lpFilePart
    );







__declspec(dllimport)
DWORD
__stdcall
GetLogicalDrives(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );






__declspec(dllimport)

DWORD
__stdcall
GetLongPathNameA(
         LPCSTR lpszShortPath,
                                               LPSTR lpszLongPath,
         DWORD cchBuffer
    );

__declspec(dllimport)

DWORD
__stdcall
GetLongPathNameW(
         LPCWSTR lpszShortPath,
                                               LPWSTR lpszLongPath,
         DWORD cchBuffer
    );







__declspec(dllimport)

DWORD
__stdcall
GetShortPathNameW(
         LPCWSTR lpszLongPath,
                                               LPWSTR lpszShortPath,
         DWORD cchBuffer
    );






__declspec(dllimport)
UINT
__stdcall
GetTempFileNameW(
         LPCWSTR lpPathName,
         LPCWSTR lpPrefixString,
         UINT uUnique,
                           LPWSTR lpTempFileName
    );
# 809 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationByHandleW(
         HANDLE hFile,
                                      LPWSTR lpVolumeNameBuffer,
         DWORD nVolumeNameSize,
              LPDWORD lpVolumeSerialNumber,
              LPDWORD lpMaximumComponentLength,
              LPDWORD lpFileSystemFlags,
                                          LPWSTR lpFileSystemNameBuffer,
         DWORD nFileSystemNameSize
    );




__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationW(
             LPCWSTR lpRootPathName,
                                      LPWSTR lpVolumeNameBuffer,
         DWORD nVolumeNameSize,
              LPDWORD lpVolumeSerialNumber,
              LPDWORD lpMaximumComponentLength,
              LPDWORD lpFileSystemFlags,
                                          LPWSTR lpFileSystemNameBuffer,
         DWORD nFileSystemNameSize
    );






__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameW(
         LPCWSTR lpszFileName,
                                  LPWSTR lpszVolumePathName,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
LocalFileTimeToFileTime(
         const FILETIME * lpLocalFileTime,
          LPFILETIME lpFileTime
    );


__declspec(dllimport)
BOOL
__stdcall
LockFile(
         HANDLE hFile,
         DWORD dwFileOffsetLow,
         DWORD dwFileOffsetHigh,
         DWORD nNumberOfBytesToLockLow,
         DWORD nNumberOfBytesToLockHigh
    );
# 887 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
LockFileEx(
         HANDLE hFile,
         DWORD dwFlags,
               DWORD dwReserved,
         DWORD nNumberOfBytesToLockLow,
         DWORD nNumberOfBytesToLockHigh,
            LPOVERLAPPED lpOverlapped
    );
# 907 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceW(
             LPCWSTR lpDeviceName,
                                         LPWSTR lpTargetPath,
         DWORD ucchMax
    );
# 928 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)

BOOL
__stdcall
ReadFile(
         HANDLE hFile,
                                                                                                  LPVOID lpBuffer,
         DWORD nNumberOfBytesToRead,
              LPDWORD lpNumberOfBytesRead,
                LPOVERLAPPED lpOverlapped
    );
# 948 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)

BOOL
__stdcall
ReadFileEx(
         HANDLE hFile,
                                                                         LPVOID lpBuffer,
         DWORD nNumberOfBytesToRead,
            LPOVERLAPPED lpOverlapped,
         LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );


__declspec(dllimport)

BOOL
__stdcall
ReadFileScatter(
         HANDLE hFile,
         FILE_SEGMENT_ELEMENT aSegmentArray[],
         DWORD nNumberOfBytesToRead,
               LPDWORD lpReserved,
            LPOVERLAPPED lpOverlapped
    );
# 981 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryA(
         LPCSTR lpPathName
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryW(
         LPCWSTR lpPathName
    );







__declspec(dllimport)
BOOL
__stdcall
SetEndOfFile(
         HANDLE hFile
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesA(
         LPCSTR lpFileName,
         DWORD dwFileAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesW(
         LPCWSTR lpFileName,
         DWORD dwFileAttributes
    );
# 1034 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetFileInformationByHandle(
         HANDLE hFile,
         FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
                                   LPVOID lpFileInformation,
         DWORD dwBufferSize
    );
# 1054 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
DWORD
__stdcall
SetFilePointer(
         HANDLE hFile,
         LONG lDistanceToMove,
                PLONG lpDistanceToMoveHigh,
         DWORD dwMoveMethod
    );
# 1072 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetFilePointerEx(
         HANDLE hFile,
         LARGE_INTEGER liDistanceToMove,
              PLARGE_INTEGER lpNewFilePointer,
         DWORD dwMoveMethod
    );
# 1090 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetFileTime(
         HANDLE hFile,
             const FILETIME * lpCreationTime,
             const FILETIME * lpLastAccessTime,
             const FILETIME * lpLastWriteTime
    );





__declspec(dllimport)
BOOL
__stdcall
SetFileValidData(
         HANDLE hFile,
         LONGLONG ValidDataLength
    );




__declspec(dllimport)
BOOL
__stdcall
UnlockFile(
         HANDLE hFile,
         DWORD dwFileOffsetLow,
         DWORD dwFileOffsetHigh,
         DWORD nNumberOfBytesToUnlockLow,
         DWORD nNumberOfBytesToUnlockHigh
    );
# 1134 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
UnlockFileEx(
         HANDLE hFile,
               DWORD dwReserved,
         DWORD nNumberOfBytesToUnlockLow,
         DWORD nNumberOfBytesToUnlockHigh,
            LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
WriteFile(
         HANDLE hFile,
                                                LPCVOID lpBuffer,
         DWORD nNumberOfBytesToWrite,
              LPDWORD lpNumberOfBytesWritten,
                LPOVERLAPPED lpOverlapped
    );
# 1165 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
WriteFileEx(
         HANDLE hFile,
                                                LPCVOID lpBuffer,
         DWORD nNumberOfBytesToWrite,
            LPOVERLAPPED lpOverlapped,
         LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );


__declspec(dllimport)
BOOL
__stdcall
WriteFileGather(
         HANDLE hFile,
         FILE_SEGMENT_ELEMENT aSegmentArray[],
         DWORD nNumberOfBytesToWrite,
               LPDWORD lpReserved,
            LPOVERLAPPED lpOverlapped
    );
# 1203 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
DWORD
__stdcall
GetTempPathW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint,
                                  LPWSTR lpszVolumeName,
         DWORD cchBufferLength
    );
# 1233 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameW(
         LPCWSTR lpszVolumeName,
                                                                                          LPWCH lpszVolumePathNames,
         DWORD cchBufferLength,
          PDWORD lpcchReturnLength
    );
# 1260 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
typedef struct _CREATEFILE2_EXTENDED_PARAMETERS {
    DWORD dwSize;
    DWORD dwFileAttributes;
    DWORD dwFileFlags;
    DWORD dwSecurityQosFlags;
    LPSECURITY_ATTRIBUTES lpSecurityAttributes;
    HANDLE hTemplateFile;
} CREATEFILE2_EXTENDED_PARAMETERS, *PCREATEFILE2_EXTENDED_PARAMETERS, *LPCREATEFILE2_EXTENDED_PARAMETERS;

__declspec(dllimport)
HANDLE
__stdcall
CreateFile2(
         LPCWSTR lpFileName,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
         DWORD dwCreationDisposition,
             LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams
    );
# 1301 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetFileIoOverlappedRange(
         HANDLE FileHandle,
         PUCHAR OverlappedRangeStart,
         ULONG Length
    );
# 1323 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeA(
         LPCSTR lpFileName,
              LPDWORD lpFileSizeHigh
    );

__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeW(
         LPCWSTR lpFileName,
              LPDWORD lpFileSizeHigh
    );
# 1358 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fileapi.h"
}
# 38 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\debugapi.h" 1
# 37 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\debugapi.h"
extern "C" {
# 51 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\debugapi.h"
__declspec(dllimport)
BOOL
__stdcall
IsDebuggerPresent(
    void
    );
# 67 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\debugapi.h"
__declspec(dllimport)
void
__stdcall
DebugBreak(
    void
    );
# 82 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\debugapi.h"
__declspec(dllimport)
void
__stdcall
OutputDebugStringA(
             LPCSTR lpOutputString
    );

__declspec(dllimport)
void
__stdcall
OutputDebugStringW(
             LPCWSTR lpOutputString
    );
# 114 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\debugapi.h"
__declspec(dllimport)
BOOL
__stdcall
ContinueDebugEvent(
         DWORD dwProcessId,
         DWORD dwThreadId,
         DWORD dwContinueStatus
    );


__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEvent(
          LPDEBUG_EVENT lpDebugEvent,
         DWORD dwMilliseconds
    );


__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcess(
         DWORD dwProcessId
    );


__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcessStop(
         DWORD dwProcessId
    );





__declspec(dllimport)
BOOL
__stdcall
CheckRemoteDebuggerPresent(
         HANDLE hProcess,
          PBOOL pbDebuggerPresent
    );
# 173 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\debugapi.h"
}
# 39 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\utilapiset.h" 1
# 32 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\utilapiset.h"
extern "C" {






__declspec(dllimport)

PVOID
__stdcall
EncodePointer(
             PVOID Ptr
    );


__declspec(dllimport)

PVOID
__stdcall
DecodePointer(
             PVOID Ptr
    );
# 64 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\utilapiset.h"
__declspec(dllimport)

PVOID
__stdcall
EncodeSystemPointer(
             PVOID Ptr
    );


__declspec(dllimport)

PVOID
__stdcall
DecodeSystemPointer(
             PVOID Ptr
    );


__declspec(dllimport)
BOOL
__stdcall
Beep(
         DWORD dwFreq,
         DWORD dwDuration
    );






}
# 40 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\handleapi.h" 1
# 32 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\handleapi.h"
extern "C" {
# 47 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\handleapi.h"
__declspec(dllimport)
BOOL
__stdcall
CloseHandle(
         HANDLE hObject
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateHandle(
         HANDLE hSourceProcessHandle,
         HANDLE hSourceHandle,
         HANDLE hTargetProcessHandle,
             LPHANDLE lpTargetHandle,
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwOptions
    );
# 76 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\handleapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetHandleInformation(
         HANDLE hObject,
          LPDWORD lpdwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
SetHandleInformation(
         HANDLE hObject,
         DWORD dwMask,
         DWORD dwFlags
    );






}
# 41 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\errhandlingapi.h" 1
# 36 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\errhandlingapi.h"
extern "C" {
# 52 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\errhandlingapi.h"
typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(
         struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
# 69 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\errhandlingapi.h"
__declspec(dllimport)

void
__stdcall
RaiseException(
         DWORD dwExceptionCode,
         DWORD dwExceptionFlags,
         DWORD nNumberOfArguments,
                                       const ULONG_PTR * lpArguments
    );
# 89 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\errhandlingapi.h"
__declspec(dllimport)
LONG
__stdcall
UnhandledExceptionFilter(
         struct _EXCEPTION_POINTERS * ExceptionInfo
    );


__declspec(dllimport)
LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
             LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );
# 114 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\errhandlingapi.h"
__declspec(dllimport)

DWORD
__stdcall
GetLastError(
    void
    );




__declspec(dllimport)
void
__stdcall
SetLastError(
         DWORD dwErrCode
    );
# 143 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\errhandlingapi.h"
__declspec(dllimport)
UINT
__stdcall
GetErrorMode(
    void
    );




__declspec(dllimport)
UINT
__stdcall
SetErrorMode(
         UINT uMode
    );
# 175 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\errhandlingapi.h"
__declspec(dllimport)

PVOID
__stdcall
AddVectoredExceptionHandler(
         ULONG First,
         PVECTORED_EXCEPTION_HANDLER Handler
    );


__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredExceptionHandler(
         PVOID Handle
    );


__declspec(dllimport)

PVOID
__stdcall
AddVectoredContinueHandler(
         ULONG First,
         PVECTORED_EXCEPTION_HANDLER Handler
    );


__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredContinueHandler(
         PVOID Handle
    );
# 249 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\errhandlingapi.h"
}
# 42 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fibersapi.h" 1
# 36 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fibersapi.h"
extern "C" {
# 55 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fibersapi.h"
__declspec(dllimport)
DWORD
__stdcall
FlsAlloc(
             PFLS_CALLBACK_FUNCTION lpCallback
    );


__declspec(dllimport)
PVOID
__stdcall
FlsGetValue(
         DWORD dwFlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
FlsSetValue(
         DWORD dwFlsIndex,
             PVOID lpFlsData
    );


__declspec(dllimport)
BOOL
__stdcall
FlsFree(
         DWORD dwFlsIndex
    );
# 104 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fibersapi.h"
__declspec(dllimport)
BOOL
__stdcall
IsThreadAFiber(
    void
    );
# 123 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\fibersapi.h"
}
# 43 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\namedpipeapi.h" 1
# 37 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\namedpipeapi.h"
extern "C" {
# 47 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\namedpipeapi.h"
__declspec(dllimport)
BOOL
__stdcall
CreatePipe(
          PHANDLE hReadPipe,
          PHANDLE hWritePipe,
             LPSECURITY_ATTRIBUTES lpPipeAttributes,
         DWORD nSize
    );


__declspec(dllimport)
BOOL
__stdcall
ConnectNamedPipe(
         HANDLE hNamedPipe,
                LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
DisconnectNamedPipe(
         HANDLE hNamedPipe
    );


__declspec(dllimport)
BOOL
__stdcall
SetNamedPipeHandleState(
         HANDLE hNamedPipe,
             LPDWORD lpMode,
             LPDWORD lpMaxCollectionCount,
             LPDWORD lpCollectDataTimeout
    );


__declspec(dllimport)
BOOL
__stdcall
PeekNamedPipe(
         HANDLE hNamedPipe,
                                                         LPVOID lpBuffer,
         DWORD nBufferSize,
              LPDWORD lpBytesRead,
              LPDWORD lpTotalBytesAvail,
              LPDWORD lpBytesLeftThisMessage
    );


__declspec(dllimport)
BOOL
__stdcall
TransactNamedPipe(
         HANDLE hNamedPipe,
                                        LPVOID lpInBuffer,
         DWORD nInBufferSize,
                                                            LPVOID lpOutBuffer,
         DWORD nOutBufferSize,
          LPDWORD lpBytesRead,
                LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeW(
         LPCWSTR lpName,
         DWORD dwOpenMode,
         DWORD dwPipeMode,
         DWORD nMaxInstances,
         DWORD nOutBufferSize,
         DWORD nInBufferSize,
         DWORD nDefaultTimeOut,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeW(
         LPCWSTR lpNamedPipeName,
         DWORD nTimeOut
    );
# 148 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\namedpipeapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameW(
         HANDLE Pipe,
                                                 LPWSTR ClientComputerName,
         ULONG ClientComputerNameLength
    );
# 171 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\namedpipeapi.h"
__declspec(dllimport)

BOOL
__stdcall
ImpersonateNamedPipeClient(
         HANDLE hNamedPipe
    );






}
# 44 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\profileapi.h" 1
# 32 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\profileapi.h"
extern "C" {






__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceCounter(
          LARGE_INTEGER * lpPerformanceCount
    );


__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceFrequency(
          LARGE_INTEGER * lpFrequency
    );



}
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\heapapi.h" 1
# 35 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\heapapi.h"
extern "C" {
# 46 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\heapapi.h"
typedef struct _HEAP_SUMMARY {
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
} HEAP_SUMMARY, *PHEAP_SUMMARY;
typedef PHEAP_SUMMARY LPHEAP_SUMMARY;
# 66 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\heapapi.h"
__declspec(dllimport)

HANDLE
__stdcall
HeapCreate(
         DWORD flOptions,
         SIZE_T dwInitialSize,
         SIZE_T dwMaximumSize
    );


__declspec(dllimport)
BOOL
__stdcall
HeapDestroy(
         HANDLE hHeap
    );
# 92 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\heapapi.h"
__declspec(dllimport)


LPVOID
__stdcall
HeapAlloc(
         HANDLE hHeap,
         DWORD dwFlags,
         SIZE_T dwBytes
    );


__declspec(dllimport)



LPVOID
__stdcall
HeapReAlloc(
            HANDLE hHeap,
         DWORD dwFlags,
                    LPVOID lpMem,
         SIZE_T dwBytes
    );


__declspec(dllimport)

BOOL
__stdcall
HeapFree(
            HANDLE hHeap,
         DWORD dwFlags,
                                        LPVOID lpMem
    );


__declspec(dllimport)
SIZE_T
__stdcall
HeapSize(
         HANDLE hHeap,
         DWORD dwFlags,
         LPCVOID lpMem
    );
# 146 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\heapapi.h"
__declspec(dllimport)
BOOL
__stdcall
HeapValidate(
         HANDLE hHeap,
         DWORD dwFlags,
             LPCVOID lpMem
    );


__declspec(dllimport)
SIZE_T
__stdcall
HeapCompact(
         HANDLE hHeap,
         DWORD dwFlags
    );





BOOL
__stdcall
HeapSummary(
         HANDLE hHeap,
         DWORD dwFlags,
          LPHEAP_SUMMARY lpSummary
    );
# 186 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\heapapi.h"
__declspec(dllimport)
HANDLE
__stdcall
GetProcessHeap(
    void
    );
# 201 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\heapapi.h"
__declspec(dllimport)
DWORD
__stdcall
GetProcessHeaps(
         DWORD NumberOfHeaps,
                                           PHANDLE ProcessHeaps
    );


__declspec(dllimport)
BOOL
__stdcall
HeapLock(
         HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapUnlock(
         HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapWalk(
         HANDLE hHeap,
            LPPROCESS_HEAP_ENTRY lpEntry
    );


__declspec(dllimport)
BOOL
__stdcall
HeapSetInformation(
             HANDLE HeapHandle,
         HEAP_INFORMATION_CLASS HeapInformationClass,
                                                PVOID HeapInformation,
         SIZE_T HeapInformationLength
    );


__declspec(dllimport)
BOOL
__stdcall
HeapQueryInformation(
             HANDLE HeapHandle,
         HEAP_INFORMATION_CLASS HeapInformationClass,
                                                                    PVOID HeapInformation,
         SIZE_T HeapInformationLength,
              PSIZE_T ReturnLength
    );
# 266 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\heapapi.h"
}
# 46 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\ioapiset.h" 1
# 37 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\ioapiset.h"
extern "C" {
# 49 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\ioapiset.h"
__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResult(
         HANDLE hFile,
         LPOVERLAPPED lpOverlapped,
          LPDWORD lpNumberOfBytesTransferred,
         BOOL bWait
    );


__declspec(dllimport)

HANDLE
__stdcall
CreateIoCompletionPort(
         HANDLE FileHandle,
             HANDLE ExistingCompletionPort,
         ULONG_PTR CompletionKey,
         DWORD NumberOfConcurrentThreads
    );


__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatus(
         HANDLE CompletionPort,
          LPDWORD lpNumberOfBytesTransferred,
          PULONG_PTR lpCompletionKey,
          LPOVERLAPPED * lpOverlapped,
         DWORD dwMilliseconds
    );





__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatusEx(
         HANDLE CompletionPort,
                                                   LPOVERLAPPED_ENTRY lpCompletionPortEntries,
         ULONG ulCount,
          PULONG ulNumEntriesRemoved,
         DWORD dwMilliseconds,
         BOOL fAlertable
    );




__declspec(dllimport)
BOOL
__stdcall
PostQueuedCompletionStatus(
         HANDLE CompletionPort,
         DWORD dwNumberOfBytesTransferred,
         ULONG_PTR dwCompletionKey,
             LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
DeviceIoControl(
         HANDLE hDevice,
         DWORD dwIoControlCode,
                                        LPVOID lpInBuffer,
         DWORD nInBufferSize,
                                                                LPVOID lpOutBuffer,
         DWORD nOutBufferSize,
              LPDWORD lpBytesReturned,
                LPOVERLAPPED lpOverlapped
    );





__declspec(dllimport)
BOOL
__stdcall
CancelIoEx(
         HANDLE hFile,
             LPOVERLAPPED lpOverlapped
    );
# 156 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\ioapiset.h"
__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResultEx(
         HANDLE hFile,
         LPOVERLAPPED lpOverlapped,
          LPDWORD lpNumberOfBytesTransferred,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );
# 175 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\ioapiset.h"
__declspec(dllimport)
BOOL
__stdcall
CancelIo(
         HANDLE hFile
    );





__declspec(dllimport)
BOOL
__stdcall
CancelSynchronousIo(
         HANDLE hThread
    );
# 207 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\ioapiset.h"
}
# 47 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h" 1
# 38 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
extern "C" {
# 57 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;
# 74 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)
void
__stdcall
InitializeSRWLock(
          PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
ReleaseSRWLockExclusive(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
ReleaseSRWLockShared(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
AcquireSRWLockExclusive(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
AcquireSRWLockShared(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

BOOLEAN
__stdcall
TryAcquireSRWLockExclusive(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

BOOLEAN
__stdcall
TryAcquireSRWLockShared(
            PSRWLOCK SRWLock
    );
# 159 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)
void
__stdcall
InitializeCriticalSection(
          LPCRITICAL_SECTION lpCriticalSection
    );
# 176 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)
void
__stdcall
EnterCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );


__declspec(dllimport)
void
__stdcall
LeaveCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );
# 199 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)

BOOL
__stdcall
InitializeCriticalSectionAndSpinCount(
          LPCRITICAL_SECTION lpCriticalSection,
         DWORD dwSpinCount
    );
# 219 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)
BOOL
__stdcall
InitializeCriticalSectionEx(
          LPCRITICAL_SECTION lpCriticalSection,
         DWORD dwSpinCount,
         DWORD Flags
    );
# 238 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)
DWORD
__stdcall
SetCriticalSectionSpinCount(
            LPCRITICAL_SECTION lpCriticalSection,
         DWORD dwSpinCount
    );
# 257 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)
BOOL
__stdcall
TryEnterCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );




__declspec(dllimport)
void
__stdcall
DeleteCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );
# 283 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
typedef RTL_RUN_ONCE INIT_ONCE;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;
# 304 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
typedef
BOOL
(__stdcall *PINIT_ONCE_FN) (
            PINIT_ONCE InitOnce,
                PVOID Parameter,
                                  PVOID *Context
    );




__declspec(dllimport)
void
__stdcall
InitOnceInitialize(
          PINIT_ONCE InitOnce
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceExecuteOnce(
            PINIT_ONCE InitOnce,
                    PINIT_ONCE_FN InitFn,
                PVOID Parameter,
                                  LPVOID * Context
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceBeginInitialize(
            LPINIT_ONCE lpInitOnce,
         DWORD dwFlags,
          PBOOL fPending,
                                  LPVOID * lpContext
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceComplete(
            LPINIT_ONCE lpInitOnce,
         DWORD dwFlags,
             LPVOID lpContext
    );
# 361 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;
# 378 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)
void
__stdcall
InitializeConditionVariable(
          PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
void
__stdcall
WakeConditionVariable(
            PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
void
__stdcall
WakeAllConditionVariable(
            PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableCS(
            PCONDITION_VARIABLE ConditionVariable,
            PCRITICAL_SECTION CriticalSection,
         DWORD dwMilliseconds
    );


__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableSRW(
            PCONDITION_VARIABLE ConditionVariable,
            PSRWLOCK SRWLock,
         DWORD dwMilliseconds,
         ULONG Flags
    );
# 429 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetEvent(
         HANDLE hEvent
    );


__declspec(dllimport)
BOOL
__stdcall
ResetEvent(
         HANDLE hEvent
    );


__declspec(dllimport)
BOOL
__stdcall
ReleaseSemaphore(
         HANDLE hSemaphore,
         LONG lReleaseCount,
              LPLONG lpPreviousCount
    );


__declspec(dllimport)
BOOL
__stdcall
ReleaseMutex(
         HANDLE hMutex
    );
# 470 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObject(
         HANDLE hHandle,
         DWORD dwMilliseconds
    );
# 486 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)
DWORD
__stdcall
SleepEx(
         DWORD dwMilliseconds,
         BOOL bAlertable
    );


__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObjectEx(
         HANDLE hHandle,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );


__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjectsEx(
         DWORD nCount,
                       const HANDLE * lpHandles,
         BOOL bWaitAll,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );
# 531 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateMutexA(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
         BOOL bInitialOwner,
             LPCSTR lpName
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateMutexW(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
         BOOL bInitialOwner,
             LPCWSTR lpName
    );
# 564 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)

HANDLE
__stdcall
OpenMutexW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );
# 586 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateEventA(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
         BOOL bManualReset,
         BOOL bInitialState,
             LPCSTR lpName
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateEventW(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
         BOOL bManualReset,
         BOOL bInitialState,
             LPCWSTR lpName
    );
# 621 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)

HANDLE
__stdcall
OpenEventA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );

__declspec(dllimport)

HANDLE
__stdcall
OpenEventW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );







__declspec(dllimport)

HANDLE
__stdcall
OpenSemaphoreW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );
# 672 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
typedef
void
(__stdcall *PTIMERAPCROUTINE)(
             LPVOID lpArgToCompletionRoutine,
             DWORD dwTimerLowValue,
             DWORD dwTimerHighValue
    );

__declspec(dllimport)

HANDLE
__stdcall
OpenWaitableTimerW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpTimerName
    );
# 698 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
BOOL
__stdcall
SetWaitableTimerEx(
         HANDLE hTimer,
         const LARGE_INTEGER * lpDueTime,
         LONG lPeriod,
             PTIMERAPCROUTINE pfnCompletionRoutine,
             LPVOID lpArgToCompletionRoutine,
             PREASON_CONTEXT WakeContext,
         ULONG TolerableDelay
    );




__declspec(dllimport)
BOOL
__stdcall
SetWaitableTimer(
         HANDLE hTimer,
         const LARGE_INTEGER * lpDueTime,
         LONG lPeriod,
             PTIMERAPCROUTINE pfnCompletionRoutine,
             LPVOID lpArgToCompletionRoutine,
         BOOL fResume
    );


__declspec(dllimport)
BOOL
__stdcall
CancelWaitableTimer(
         HANDLE hTimer
    );
# 746 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateMutexExA(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
             LPCSTR lpName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateMutexExW(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
             LPCWSTR lpName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );
# 777 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateEventExA(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
             LPCSTR lpName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateEventExW(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
             LPCWSTR lpName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );







__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreExW(
             LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
         LONG lInitialCount,
         LONG lMaximumCount,
             LPCWSTR lpName,
               DWORD dwFlags,
         DWORD dwDesiredAccess
    );
# 832 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerExW(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             LPCWSTR lpTimerName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );
# 866 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
typedef RTL_BARRIER SYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER PSYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER LPSYNCHRONIZATION_BARRIER;





BOOL
__stdcall
EnterSynchronizationBarrier(
            LPSYNCHRONIZATION_BARRIER lpBarrier,
         DWORD dwFlags
    );


BOOL
__stdcall
InitializeSynchronizationBarrier(
          LPSYNCHRONIZATION_BARRIER lpBarrier,
         LONG lTotalThreads,
         LONG lSpinCount
    );


BOOL
__stdcall
DeleteSynchronizationBarrier(
            LPSYNCHRONIZATION_BARRIER lpBarrier
    );
# 905 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)
void
__stdcall
Sleep(
         DWORD dwMilliseconds
    );


BOOL
__stdcall
WaitOnAddress(
                                  volatile void * Address,
                                  PVOID CompareAddress,
         SIZE_T AddressSize,
             DWORD dwMilliseconds
    );


void
__stdcall
WakeByAddressSingle(
         PVOID Address
    );


void
__stdcall
WakeByAddressAll(
         PVOID Address
    );
# 946 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
         HANDLE hObjectToSignal,
         HANDLE hObjectToWaitOn,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );
# 969 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\synchapi.h"
}
# 48 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\interlockedapi.h" 1
# 36 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\interlockedapi.h"
extern "C" {
# 47 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\interlockedapi.h"
__declspec(dllimport)
void
__stdcall
InitializeSListHead(
          PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPopEntrySList(
            PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPushEntrySList(
            PSLIST_HEADER ListHead,
            PSLIST_ENTRY ListEntry
    );







__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPushListSListEx(
            PSLIST_HEADER ListHead,
            PSLIST_ENTRY List,
            PSLIST_ENTRY ListEnd,
         ULONG Count
    );




__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedFlushSList(
            PSLIST_HEADER ListHead
    );


__declspec(dllimport)
USHORT
__stdcall
QueryDepthSList(
         PSLIST_HEADER ListHead
    );
# 116 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\interlockedapi.h"
}
# 49 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h" 1
# 40 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
extern "C" {
# 53 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

typedef struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;

typedef STARTUPINFOW STARTUPINFO;
typedef LPSTARTUPINFOW LPSTARTUPINFO;
# 111 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
DWORD
__stdcall
QueueUserAPC(
         PAPCFUNC pfnAPC,
         HANDLE hThread,
         ULONG_PTR dwData
    );




__declspec(dllimport)
BOOL
__stdcall
GetProcessTimes(
         HANDLE hProcess,
          LPFILETIME lpCreationTime,
          LPFILETIME lpExitTime,
          LPFILETIME lpKernelTime,
          LPFILETIME lpUserTime
    );
# 142 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
HANDLE
__stdcall
GetCurrentProcess(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessId(
    void
    );
# 165 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitProcess(
         UINT uExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
TerminateProcess(
         HANDLE hProcess,
         UINT uExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
GetExitCodeProcess(
         HANDLE hProcess,
          LPDWORD lpExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
SwitchToThread(
    void
    );







__declspec(dllimport)

HANDLE
__stdcall
CreateThread(
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         SIZE_T dwStackSize,
         LPTHREAD_START_ROUTINE lpStartAddress,
                              LPVOID lpParameter,
         DWORD dwCreationFlags,
              LPDWORD lpThreadId
    );







__declspec(dllimport)

HANDLE
__stdcall
CreateRemoteThread(
         HANDLE hProcess,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         SIZE_T dwStackSize,
         LPTHREAD_START_ROUTINE lpStartAddress,
             LPVOID lpParameter,
         DWORD dwCreationFlags,
              LPDWORD lpThreadId
    );
# 246 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
HANDLE
__stdcall
GetCurrentThread(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetCurrentThreadId(
    void
    );
# 269 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)

HANDLE
__stdcall
OpenThread(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwThreadId
    );







__declspec(dllimport)
BOOL
__stdcall
SetThreadPriority(
         HANDLE hThread,
         int nPriority
    );
# 300 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetThreadPriorityBoost(
         HANDLE hThread,
         BOOL bDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadPriorityBoost(
         HANDLE hThread,
          PBOOL pDisablePriorityBoost
    );







__declspec(dllimport)
int
__stdcall
GetThreadPriority(
         HANDLE hThread
    );


__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitThread(
         DWORD dwExitCode
    );







__declspec(dllimport)
BOOL
__stdcall
TerminateThread(
         HANDLE hThread,
         DWORD dwExitCode
    );
# 360 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)

BOOL
__stdcall
GetExitCodeThread(
         HANDLE hThread,
          LPDWORD lpExitCode
    );


__declspec(dllimport)
DWORD
__stdcall
SuspendThread(
         HANDLE hThread
    );


__declspec(dllimport)
DWORD
__stdcall
ResumeThread(
         HANDLE hThread
    );
# 457 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
DWORD
__stdcall
TlsAlloc(
    void
    );


__declspec(dllimport)
LPVOID
__stdcall
TlsGetValue(
         DWORD dwTlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
TlsSetValue(
         DWORD dwTlsIndex,
             LPVOID lpTlsValue
    );


__declspec(dllimport)
BOOL
__stdcall
TlsFree(
         DWORD dwTlsIndex
    );
# 499 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
CreateProcessA(
             LPCSTR lpApplicationName,
                LPSTR lpCommandLine,
             LPSECURITY_ATTRIBUTES lpProcessAttributes,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         BOOL bInheritHandles,
         DWORD dwCreationFlags,
             LPVOID lpEnvironment,
             LPCSTR lpCurrentDirectory,
         LPSTARTUPINFOA lpStartupInfo,
          LPPROCESS_INFORMATION lpProcessInformation
    );

__declspec(dllimport)
BOOL
__stdcall
CreateProcessW(
             LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
             LPSECURITY_ATTRIBUTES lpProcessAttributes,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         BOOL bInheritHandles,
         DWORD dwCreationFlags,
             LPVOID lpEnvironment,
             LPCWSTR lpCurrentDirectory,
         LPSTARTUPINFOW lpStartupInfo,
          LPPROCESS_INFORMATION lpProcessInformation
    );
# 539 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetProcessShutdownParameters(
         DWORD dwLevel,
         DWORD dwFlags
    );


__declspec(dllimport)
DWORD
__stdcall
GetProcessVersion(
         DWORD ProcessId
    );


__declspec(dllimport)
void
__stdcall
GetStartupInfoW(
          LPSTARTUPINFOW lpStartupInfo
    );
# 578 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserW(
             HANDLE hToken,
             LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
             LPSECURITY_ATTRIBUTES lpProcessAttributes,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         BOOL bInheritHandles,
         DWORD dwCreationFlags,
             LPVOID lpEnvironment,
             LPCWSTR lpCurrentDirectory,
         LPSTARTUPINFOW lpStartupInfo,
          LPPROCESS_INFORMATION lpProcessInformation
    );
# 609 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)

BOOL
__stdcall
SetThreadToken(
             PHANDLE Thread,
             HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
OpenProcessToken(
         HANDLE ProcessHandle,
         DWORD DesiredAccess,
             PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
OpenThreadToken(
         HANDLE ThreadHandle,
         DWORD DesiredAccess,
         BOOL OpenAsSelf,
             PHANDLE TokenHandle
    );
# 649 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetPriorityClass(
         HANDLE hProcess,
         DWORD dwPriorityClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadStackGuarantee(
            PULONG StackSizeInBytes
    );


__declspec(dllimport)
DWORD
__stdcall
GetPriorityClass(
         HANDLE hProcess
    );


__declspec(dllimport)
BOOL
__stdcall
ProcessIdToSessionId(
         DWORD dwProcessId,
          DWORD * pSessionId
    );






__declspec(dllimport)
DWORD
__stdcall
GetProcessId(
         HANDLE Process
    );







__declspec(dllimport)
DWORD
__stdcall
GetThreadId(
         HANDLE Thread
    );





typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;
# 723 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
void
__stdcall
FlushProcessWriteBuffers(
    void
    );
# 738 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
DWORD
__stdcall
GetProcessIdOfThread(
         HANDLE Thread
    );


__declspec(dllimport)

BOOL
__stdcall
InitializeProcThreadAttributeList(
                                                LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
         DWORD dwAttributeCount,
               DWORD dwFlags,
                                                                                          PSIZE_T lpSize
    );


__declspec(dllimport)
void
__stdcall
DeleteProcThreadAttributeList(
            LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
    );




__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityUpdateMode(
         HANDLE hProcess,
         DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProcessAffinityUpdateMode(
         HANDLE hProcess,
              LPDWORD lpdwFlags
    );




__declspec(dllimport)
BOOL
__stdcall
UpdateProcThreadAttribute(
            LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
         DWORD dwFlags,
         DWORD_PTR Attribute,
                                 PVOID lpValue,
         SIZE_T cbSize,
                                   PVOID lpPreviousValue,
             PSIZE_T lpReturnSize
    );
# 811 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateRemoteThreadEx(
         HANDLE hProcess,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         SIZE_T dwStackSize,
         LPTHREAD_START_ROUTINE lpStartAddress,
             LPVOID lpParameter,
         DWORD dwCreationFlags,
             LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
              LPDWORD lpThreadId
    );
# 845 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
void
__stdcall
GetCurrentThreadStackLimits(
          PULONG_PTR LowLimit,
          PULONG_PTR HighLimit
    );




__declspec(dllimport)
BOOL
__stdcall
GetThreadContext(
         HANDLE hThread,
            LPCONTEXT lpContext
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadContext(
         HANDLE hThread,
         const CONTEXT * lpContext
    );





__declspec(dllimport)
BOOL
__stdcall
SetProcessMitigationPolicy(
         PROCESS_MITIGATION_POLICY MitigationPolicy,
                               PVOID lpBuffer,
         SIZE_T dwLength
    );


__declspec(dllimport)
BOOL
__stdcall
GetProcessMitigationPolicy(
         HANDLE hProcess,
         PROCESS_MITIGATION_POLICY MitigationPolicy,
                                 PVOID lpBuffer,
         SIZE_T dwLength
    );
# 913 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
FlushInstructionCache(
         HANDLE hProcess,
                                 LPCVOID lpBaseAddress,
         SIZE_T dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadTimes(
         HANDLE hThread,
          LPFILETIME lpCreationTime,
          LPFILETIME lpExitTime,
          LPFILETIME lpKernelTime,
          LPFILETIME lpUserTime
    );


__declspec(dllimport)
HANDLE
__stdcall
OpenProcess(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwProcessId
    );
# 952 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
BOOL
__stdcall
IsProcessorFeaturePresent(
         DWORD ProcessorFeature
    );
# 971 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetProcessHandleCount(
         HANDLE hProcess,
          PDWORD pdwHandleCount
    );
# 992 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessorNumber(
    void
    );
# 1012 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetThreadIdealProcessorEx(
         HANDLE hThread,
         PPROCESSOR_NUMBER lpIdealProcessor,
              PPROCESSOR_NUMBER lpPreviousIdealProcessor
    );
# 1029 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetThreadIdealProcessorEx(
         HANDLE hThread,
          PPROCESSOR_NUMBER lpIdealProcessor
    );


__declspec(dllimport)
void
__stdcall
GetCurrentProcessorNumberEx(
          PPROCESSOR_NUMBER ProcNumber
    );
# 1064 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetProcessPriorityBoost(
         HANDLE hProcess,
          PBOOL pDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
SetProcessPriorityBoost(
         HANDLE hProcess,
         BOOL bDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadIOPendingFlag(
         HANDLE hThread,
          PBOOL lpIOIsPending
    );


__declspec(dllimport)
BOOL
__stdcall
GetSystemTimes(
              PFILETIME lpIdleTime,
              PFILETIME lpKernelTime,
              PFILETIME lpUserTime
    );
# 1107 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
typedef enum _THREAD_INFORMATION_CLASS {
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadInformationClassMax
} THREAD_INFORMATION_CLASS;




__declspec(dllimport)
BOOL
__stdcall
GetThreadInformation(
         HANDLE hThread,
         THREAD_INFORMATION_CLASS ThreadInformationClass,
                                              LPVOID ThreadInformation,
         DWORD ThreadInformationSize
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadInformation(
         HANDLE hThread,
         THREAD_INFORMATION_CLASS ThreadInformationClass,
                                            LPVOID ThreadInformation,
         DWORD ThreadInformationSize
    );
# 1149 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
typedef struct _MEMORY_PRIORITY_INFORMATION {
    ULONG MemoryPriority;
} MEMORY_PRIORITY_INFORMATION, *PMEMORY_PRIORITY_INFORMATION;






__declspec(dllimport)
BOOL
__stdcall
IsProcessCritical(
         HANDLE hProcess,
          PBOOL Critical
    );







__declspec(dllimport)
BOOL
__stdcall
SetProtectedPolicy(
         LPCGUID PolicyGuid,
         ULONG_PTR PolicyValue,
              PULONG_PTR OldPolicyValue
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProtectedPolicy(
         LPCGUID PolicyGuid,
          PULONG_PTR PolicyValue
    );
# 1204 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processthreadsapi.h"
}
# 50 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h" 1
# 28 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
#pragma warning(disable: 4514)

#pragma warning(disable: 4103)



#pragma warning(push)

#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)
# 62 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
extern "C" {
# 75 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        } ;
    } ;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;
# 105 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
__declspec(deprecated)
__declspec(dllimport)

DWORD
__stdcall
GetVersion(
    void
    );


typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

__declspec(dllimport)
BOOL
__stdcall
GlobalMemoryStatusEx(
          LPMEMORYSTATUSEX lpBuffer
    );
# 142 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
__declspec(dllimport)
void
__stdcall
GetSystemTime(
          LPSYSTEMTIME lpSystemTime
    );


__declspec(dllimport)
void
__stdcall
GetSystemTimeAsFileTime(
          LPFILETIME lpSystemTimeAsFileTime
    );


__declspec(dllimport)
void
__stdcall
GetLocalTime(
          LPSYSTEMTIME lpSystemTime
    );
# 173 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetLocalTime(
         const SYSTEMTIME * lpSystemTime
    );


__declspec(dllimport)
void
__stdcall
GetSystemInfo(
          LPSYSTEM_INFO lpSystemInfo
    );
# 200 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
__declspec(dllimport)
DWORD
__stdcall
GetTickCount(
    void
    );
# 218 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
__declspec(dllimport)
ULONGLONG
__stdcall
GetTickCount64(
    void
    );
# 235 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
__declspec(dllimport)

BOOL
__stdcall
GetSystemTimeAdjustment(
          PDWORD lpTimeAdjustment,
          PDWORD lpTimeIncrement,
          PBOOL lpTimeAdjustmentDisabled
    );


__declspec(dllimport)

UINT
__stdcall
GetSystemDirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );

__declspec(dllimport)

UINT
__stdcall
GetSystemDirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );







__declspec(dllimport)


UINT
__stdcall
GetWindowsDirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );

__declspec(dllimport)


UINT
__stdcall
GetWindowsDirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );







__declspec(dllimport)

UINT
__stdcall
GetSystemWindowsDirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );

__declspec(dllimport)

UINT
__stdcall
GetSystemWindowsDirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );
# 332 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
typedef enum _COMPUTER_NAME_FORMAT {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
} COMPUTER_NAME_FORMAT ;
# 356 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
__declspec(dllimport)

BOOL
__stdcall
GetComputerNameExA(
         COMPUTER_NAME_FORMAT NameType,
                                            LPSTR lpBuffer,
            LPDWORD nSize
    );

__declspec(dllimport)

BOOL
__stdcall
GetComputerNameExW(
         COMPUTER_NAME_FORMAT NameType,
                                            LPWSTR lpBuffer,
            LPDWORD nSize
    );
# 395 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExW(
         COMPUTER_NAME_FORMAT NameType,
         LPCWSTR lpBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
SetSystemTime(
         const SYSTEMTIME * lpSystemTime
    );
# 428 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
__declspec(deprecated)
__declspec(dllimport)

BOOL
__stdcall
GetVersionExA(
            LPOSVERSIONINFOA lpVersionInformation
    );

__declspec(deprecated)
__declspec(dllimport)

BOOL
__stdcall
GetVersionExW(
            LPOSVERSIONINFOW lpVersionInformation
    );







__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformation(
                                                                PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
            PDWORD ReturnedLength
    );





__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformationEx(
         LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,
                                                                PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,
            PDWORD ReturnedLength
    );
# 492 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
__declspec(dllimport)
void
__stdcall
GetNativeSystemInfo(
          LPSYSTEM_INFO lpSystemInfo
    );
# 512 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetProductInfo(
         DWORD dwOSMajorVersion,
         DWORD dwOSMinorVersion,
         DWORD dwSpMajorVersion,
         DWORD dwSpMinorVersion,
          PDWORD pdwReturnedProductType
    );







__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
         ULONGLONG ConditionMask,
         ULONG TypeMask,
         UCHAR Condition
    );







__declspec(dllimport)
BOOL
__stdcall
GetOsSafeBootMode(
          PDWORD Flags
    );




__declspec(dllimport)
void
__stdcall
GetSystemTimePreciseAsFileTime(
          LPFILETIME lpSystemTimeAsFileTime
    );


__declspec(dllimport)
UINT
__stdcall
EnumSystemFirmwareTables(
         DWORD FirmwareTableProviderSignature,
                                                  PVOID pFirmwareTableEnumBuffer,
         DWORD BufferSize
    );


__declspec(dllimport)
UINT
__stdcall
GetSystemFirmwareTable(
         DWORD FirmwareTableProviderSignature,
         DWORD FirmwareTableID,
                                                  PVOID pFirmwareTableBuffer,
         DWORD BufferSize
    );
# 598 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
__declspec(dllimport)

BOOL
__stdcall
DnsHostnameToComputerNameExW(
         LPCWSTR Hostname,
                                            LPWSTR ComputerName,
            LPDWORD nSize
    );


__declspec(dllimport)

BOOL
__stdcall
GetPhysicallyInstalledSystemMemory(
          PULONGLONG TotalMemoryInKilobytes
    );




__declspec(dllimport)
BOOL
__stdcall
SetComputerNameEx2W(
         COMPUTER_NAME_FORMAT NameType,
         DWORD Flags,
         LPCWSTR lpBuffer
    );






__declspec(dllimport)

BOOL
__stdcall
SetSystemTimeAdjustment(
         DWORD dwTimeAdjustment,
         BOOL bTimeAdjustmentDisabled
    );


__declspec(dllimport)
BOOL
__stdcall
InstallELAMCertificateInfo(
         HANDLE ELAMFile
    );
# 663 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\sysinfoapi.h"
}






#pragma warning(pop)
# 51 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h" 1
# 41 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h"
extern "C" {
# 86 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h"
__declspec(dllimport)

LPVOID
__stdcall
VirtualAlloc(
             LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flAllocationType,
         DWORD flProtect
    );
# 107 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h"
__declspec(dllimport)
BOOL
__stdcall
VirtualFree(
                                                                                                                           LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD dwFreeType
    );


__declspec(dllimport)

BOOL
__stdcall
VirtualProtect(
         LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flNewProtect,
          PDWORD lpflOldProtect
    );
# 136 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h"
__declspec(dllimport)
SIZE_T
__stdcall
VirtualQuery(
             LPCVOID lpAddress,
                                            PMEMORY_BASIC_INFORMATION lpBuffer,
         SIZE_T dwLength
    );
# 153 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h"
__declspec(dllimport)

LPVOID
__stdcall
VirtualAllocEx(
         HANDLE hProcess,
             LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flAllocationType,
         DWORD flProtect
    );
# 178 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h"
__declspec(dllimport)
BOOL
__stdcall
VirtualFreeEx(
         HANDLE hProcess,
                                                                                                                           LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD dwFreeType
    );


__declspec(dllimport)

BOOL
__stdcall
VirtualProtectEx(
         HANDLE hProcess,
         LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flNewProtect,
          PDWORD lpflOldProtect
    );


__declspec(dllimport)
SIZE_T
__stdcall
VirtualQueryEx(
         HANDLE hProcess,
             LPCVOID lpAddress,
                                            PMEMORY_BASIC_INFORMATION lpBuffer,
         SIZE_T dwLength
    );


__declspec(dllimport)

BOOL
__stdcall
ReadProcessMemory(
         HANDLE hProcess,
         LPCVOID lpBaseAddress,
                                                       LPVOID lpBuffer,
         SIZE_T nSize,
              SIZE_T * lpNumberOfBytesRead
    );


__declspec(dllimport)

BOOL
__stdcall
WriteProcessMemory(
         HANDLE hProcess,
         LPVOID lpBaseAddress,
                            LPCVOID lpBuffer,
         SIZE_T nSize,
              SIZE_T * lpNumberOfBytesWritten
    );


__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingW(
         HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
         DWORD flProtect,
         DWORD dwMaximumSizeHigh,
         DWORD dwMaximumSizeLow,
             LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenFileMappingW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );






__declspec(dllimport)

LPVOID
__stdcall
MapViewOfFile(
         HANDLE hFileMappingObject,
         DWORD dwDesiredAccess,
         DWORD dwFileOffsetHigh,
         DWORD dwFileOffsetLow,
         SIZE_T dwNumberOfBytesToMap
    );


__declspec(dllimport)

LPVOID
__stdcall
MapViewOfFileEx(
         HANDLE hFileMappingObject,
         DWORD dwDesiredAccess,
         DWORD dwFileOffsetHigh,
         DWORD dwFileOffsetLow,
         SIZE_T dwNumberOfBytesToMap,
             LPVOID lpBaseAddress
    );
# 306 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h"
__declspec(dllimport)
BOOL
__stdcall
FlushViewOfFile(
         LPCVOID lpBaseAddress,
         SIZE_T dwNumberOfBytesToFlush
    );


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile(
         LPCVOID lpBaseAddress
    );
# 336 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h"
__declspec(dllimport)
SIZE_T
__stdcall
GetLargePageMinimum(
    void
    );


__declspec(dllimport)

BOOL
__stdcall
GetProcessWorkingSetSizeEx(
         HANDLE hProcess,
          PSIZE_T lpMinimumWorkingSetSize,
          PSIZE_T lpMaximumWorkingSetSize,
          PDWORD Flags
    );


__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSizeEx(
         HANDLE hProcess,
         SIZE_T dwMinimumWorkingSetSize,
         SIZE_T dwMaximumWorkingSetSize,
         DWORD Flags
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualLock(
         LPVOID lpAddress,
         SIZE_T dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualUnlock(
         LPVOID lpAddress,
         SIZE_T dwSize
    );


__declspec(dllimport)

UINT
__stdcall
GetWriteWatch(
         DWORD dwFlags,
         PVOID lpBaseAddress,
         SIZE_T dwRegionSize,
                                                PVOID * lpAddresses,
                ULONG_PTR * lpdwCount,
              LPDWORD lpdwGranularity
    );


__declspec(dllimport)
UINT
__stdcall
ResetWriteWatch(
         LPVOID lpBaseAddress,
         SIZE_T dwRegionSize
    );





typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;

__declspec(dllimport)

HANDLE
__stdcall
CreateMemoryResourceNotification(
         MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
    );


__declspec(dllimport)

BOOL
__stdcall
QueryMemoryResourceNotification(
         HANDLE ResourceNotificationHandle,
          PBOOL ResourceState
    );
# 446 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h"
__declspec(dllimport)

BOOL
__stdcall
GetSystemFileCacheSize(
          PSIZE_T lpMinimumFileCacheSize,
          PSIZE_T lpMaximumFileCacheSize,
          PDWORD lpFlags
    );


__declspec(dllimport)
BOOL
__stdcall
SetSystemFileCacheSize(
         SIZE_T MinimumFileCacheSize,
         SIZE_T MaximumFileCacheSize,
         DWORD Flags
    );







__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingNumaW(
         HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
         DWORD flProtect,
         DWORD dwMaximumSizeHigh,
         DWORD dwMaximumSizeLow,
             LPCWSTR lpName,
         DWORD nndPreferred
    );
# 496 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h"
typedef struct _WIN32_MEMORY_RANGE_ENTRY {
    PVOID VirtualAddress;
    SIZE_T NumberOfBytes;
} WIN32_MEMORY_RANGE_ENTRY, *PWIN32_MEMORY_RANGE_ENTRY;

__declspec(dllimport)
BOOL
__stdcall
PrefetchVirtualMemory(
         HANDLE hProcess,
         ULONG_PTR NumberOfEntries,
                                PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses,
         ULONG Flags
    );


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFileEx(
         PVOID BaseAddress,
         ULONG UnmapFlags
    );
# 533 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingFromApp(
         HANDLE hFile,
             PSECURITY_ATTRIBUTES SecurityAttributes,
         ULONG PageProtection,
         ULONG64 MaximumSize,
             PCWSTR Name
    );


__declspec(dllimport)

PVOID
__stdcall
MapViewOfFileFromApp(
         HANDLE hFileMappingObject,
         ULONG DesiredAccess,
         ULONG64 FileOffset,
         SIZE_T NumberOfBytesToMap
    );
# 578 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h"
__declspec(dllimport)

BOOL
__stdcall
AllocateUserPhysicalPages(
         HANDLE hProcess,
            PULONG_PTR NumberOfPages,
                                                    PULONG_PTR PageArray
    );


__declspec(dllimport)

BOOL
__stdcall
FreeUserPhysicalPages(
         HANDLE hProcess,
            PULONG_PTR NumberOfPages,
                               PULONG_PTR PageArray
    );


__declspec(dllimport)

BOOL
__stdcall
MapUserPhysicalPages(
         PVOID VirtualAddress,
         ULONG_PTR NumberOfPages,
                                  PULONG_PTR PageArray
    );







__declspec(dllimport)

BOOL
__stdcall
AllocateUserPhysicalPagesNuma(
         HANDLE hProcess,
            PULONG_PTR NumberOfPages,
                                                    PULONG_PTR PageArray,
         DWORD nndPreferred
    );


__declspec(dllimport)

LPVOID
__stdcall
VirtualAllocExNuma(
         HANDLE hProcess,
             LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flAllocationType,
         DWORD flProtect,
         DWORD nndPreferred
    );
# 649 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h"
__declspec(dllimport)

BOOL
__stdcall
GetMemoryErrorHandlingCapabilities(
          PULONG Capabilities
    );



typedef
void
__stdcall
BAD_MEMORY_CALLBACK_ROUTINE(
    void
    );

typedef BAD_MEMORY_CALLBACK_ROUTINE *PBAD_MEMORY_CALLBACK_ROUTINE;

__declspec(dllimport)

PVOID
__stdcall
RegisterBadMemoryNotification(
         PBAD_MEMORY_CALLBACK_ROUTINE Callback
    );


__declspec(dllimport)

BOOL
__stdcall
UnregisterBadMemoryNotification(
         PVOID RegistrationHandle
    );
# 760 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\memoryapi.h"
}
# 52 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\threadpoollegacyapiset.h" 1
# 33 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\threadpoollegacyapiset.h"
extern "C" {
# 44 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\threadpoollegacyapiset.h"
__declspec(dllimport)
BOOL
__stdcall
QueueUserWorkItem(
         LPTHREAD_START_ROUTINE Function,
             PVOID Context,
         ULONG Flags
    );


__declspec(dllimport)

BOOL
__stdcall
UnregisterWaitEx(
         HANDLE WaitHandle,
             HANDLE CompletionEvent
    );


__declspec(dllimport)

HANDLE
__stdcall
CreateTimerQueue(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
CreateTimerQueueTimer(
             PHANDLE phNewTimer,
             HANDLE TimerQueue,
         WAITORTIMERCALLBACK Callback,
             PVOID Parameter,
         DWORD DueTime,
         DWORD Period,
         ULONG Flags
    );


__declspec(dllimport)

BOOL
__stdcall
ChangeTimerQueueTimer(
             HANDLE TimerQueue,
            HANDLE Timer,
         ULONG DueTime,
         ULONG Period
    );


__declspec(dllimport)

BOOL
__stdcall
DeleteTimerQueueTimer(
             HANDLE TimerQueue,
         HANDLE Timer,
             HANDLE CompletionEvent
    );


__declspec(dllimport)

BOOL
__stdcall
DeleteTimerQueueEx(
         HANDLE TimerQueue,
             HANDLE CompletionEvent
    );






}
# 53 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\threadpoolapiset.h" 1
# 36 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\threadpoolapiset.h"
extern "C" {
# 47 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\threadpoolapiset.h"
typedef
void
(__stdcall *PTP_WIN32_IO_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PVOID Overlapped,
                ULONG IoResult,
                ULONG_PTR NumberOfBytesTransferred,
                PTP_IO Io
    );




__declspec(dllimport)

PTP_POOL
__stdcall
CreateThreadpool(
               PVOID reserved
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolThreadMaximum(
            PTP_POOL ptpp,
         DWORD cthrdMost
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolThreadMinimum(
            PTP_POOL ptpp,
         DWORD cthrdMic
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolStackInformation(
            PTP_POOL ptpp,
         PTP_POOL_STACK_INFORMATION ptpsi
    );


__declspec(dllimport)
BOOL
__stdcall
QueryThreadpoolStackInformation(
         PTP_POOL ptpp,
          PTP_POOL_STACK_INFORMATION ptpsi
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpool(
            PTP_POOL ptpp
    );


__declspec(dllimport)

PTP_CLEANUP_GROUP
__stdcall
CreateThreadpoolCleanupGroup(
    void
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroupMembers(
            PTP_CLEANUP_GROUP ptpcg,
         BOOL fCancelPendingCallbacks,
                PVOID pvCleanupContext
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroup(
            PTP_CLEANUP_GROUP ptpcg
    );


__declspec(dllimport)
void
__stdcall
SetEventWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
         HANDLE evt
    );


__declspec(dllimport)
void
__stdcall
ReleaseSemaphoreWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
         HANDLE sem,
         DWORD crel
    );


__declspec(dllimport)
void
__stdcall
ReleaseMutexWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
         HANDLE mut
    );


__declspec(dllimport)
void
__stdcall
LeaveCriticalSectionWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
            PCRITICAL_SECTION pcs
    );


__declspec(dllimport)
void
__stdcall
FreeLibraryWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
         HMODULE mod
    );


__declspec(dllimport)
BOOL
__stdcall
CallbackMayRunLong(
            PTP_CALLBACK_INSTANCE pci
    );


__declspec(dllimport)
void
__stdcall
DisassociateCurrentThreadFromCallback(
            PTP_CALLBACK_INSTANCE pci
    );


__declspec(dllimport)

BOOL
__stdcall
TrySubmitThreadpoolCallback(
         PTP_SIMPLE_CALLBACK pfns,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)

PTP_WORK
__stdcall
CreateThreadpoolWork(
         PTP_WORK_CALLBACK pfnwk,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SubmitThreadpoolWork(
            PTP_WORK pwk
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWorkCallbacks(
            PTP_WORK pwk,
         BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolWork(
            PTP_WORK pwk
    );


__declspec(dllimport)

PTP_TIMER
__stdcall
CreateThreadpoolTimer(
         PTP_TIMER_CALLBACK pfnti,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolTimer(
            PTP_TIMER pti,
             PFILETIME pftDueTime,
         DWORD msPeriod,
             DWORD msWindowLength
    );


__declspec(dllimport)
BOOL
__stdcall
IsThreadpoolTimerSet(
            PTP_TIMER pti
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolTimerCallbacks(
            PTP_TIMER pti,
         BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolTimer(
            PTP_TIMER pti
    );


__declspec(dllimport)

PTP_WAIT
__stdcall
CreateThreadpoolWait(
         PTP_WAIT_CALLBACK pfnwa,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolWait(
            PTP_WAIT pwa,
             HANDLE h,
             PFILETIME pftTimeout
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWaitCallbacks(
            PTP_WAIT pwa,
         BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolWait(
            PTP_WAIT pwa
    );


__declspec(dllimport)

PTP_IO
__stdcall
CreateThreadpoolIo(
         HANDLE fl,
         PTP_WIN32_IO_CALLBACK pfnio,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
StartThreadpoolIo(
            PTP_IO pio
    );


__declspec(dllimport)
void
__stdcall
CancelThreadpoolIo(
            PTP_IO pio
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolIoCallbacks(
            PTP_IO pio,
         BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolIo(
            PTP_IO pio
    );





__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolTimerEx(
            PTP_TIMER pti,
             PFILETIME pftDueTime,
         DWORD msPeriod,
             DWORD msWindowLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolWaitEx(
            PTP_WAIT pwa,
             HANDLE h,
             PFILETIME pftTimeout,
               PVOID Reserved
    );
# 414 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\threadpoolapiset.h"
}
# 54 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\bemapiset.h" 1
# 33 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\bemapiset.h"
extern "C" {
# 43 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\bemapiset.h"
typedef struct _CONTRACT_DESCRIPTION CONTRACT_DESCRIPTION;

typedef struct _BEM_REFERENCE BEM_REFERENCE;

typedef void (__stdcall* BEM_FREE_INTERFACE_CALLBACK)( void* interfaceInstance);

HRESULT
__stdcall
BemCreateReference(
         const GUID & iid,
         void * interfaceInstance,
         BEM_FREE_INTERFACE_CALLBACK freeCallback,
             BEM_REFERENCE ** reference
    );


HRESULT
__stdcall
BemCreateContractFrom(
         LPCWSTR dllPath,
         const GUID & extensionId,
         const CONTRACT_DESCRIPTION * contractDescription,
         void * hostContract,
             void ** contract
    );


HRESULT
__stdcall
BemCopyReference(
         BEM_REFERENCE * reference,
             BEM_REFERENCE ** copiedReference
    );


void
__stdcall
BemFreeReference(
             BEM_REFERENCE * reference
    );


void
__stdcall
BemFreeContract(
             void * contract
    );
# 98 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\bemapiset.h"
}
# 55 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\jobapi.h" 1
# 33 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\jobapi.h"
extern "C" {
# 43 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\jobapi.h"
__declspec(dllimport)
BOOL
__stdcall
IsProcessInJob(
         HANDLE ProcessHandle,
             HANDLE JobHandle,
          PBOOL Result
    );
# 59 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\jobapi.h"
}
# 56 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wow64apiset.h" 1
# 33 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wow64apiset.h"
extern "C" {
# 46 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wow64apiset.h"
__declspec(dllimport)
BOOL
__stdcall
Wow64DisableWow64FsRedirection(
          PVOID * OldValue
    );


__declspec(dllimport)
BOOL
__stdcall
Wow64RevertWow64FsRedirection(
         PVOID OlValue
    );
# 69 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wow64apiset.h"
__declspec(dllimport)
BOOL
__stdcall
IsWow64Process(
         HANDLE hProcess,
          PBOOL Wow64Process
    );
# 84 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wow64apiset.h"
}
# 57 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h" 1
# 40 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
extern "C" {
# 59 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
typedef struct tagENUMUILANG {
    ULONG NumOfEnumUILang;
    ULONG SizeOfEnumUIBuffer;
    LANGID *pEnumUIBuffer;
} ENUMUILANG, *PENUMUILANG;



typedef BOOL (__stdcall* ENUMRESLANGPROCA)(
             HMODULE hModule,
         LPCSTR lpType,
         LPCSTR lpName,
         WORD wLanguage,
         LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROCW)(
             HMODULE hModule,
         LPCWSTR lpType,
         LPCWSTR lpName,
         WORD wLanguage,
         LONG_PTR lParam);






typedef BOOL (__stdcall* ENUMRESNAMEPROCA)(
             HMODULE hModule,
         LPCSTR lpType,
         LPSTR lpName,
         LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROCW)(
             HMODULE hModule,
         LPCWSTR lpType,
         LPWSTR lpName,
         LONG_PTR lParam);






typedef BOOL (__stdcall* ENUMRESTYPEPROCA)(
             HMODULE hModule,
         LPSTR lpType,
         LONG_PTR lParam
    );
typedef BOOL (__stdcall* ENUMRESTYPEPROCW)(
             HMODULE hModule,
         LPWSTR lpType,
         LONG_PTR lParam
    );
# 154 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
__declspec(dllimport)
BOOL
__stdcall
DisableThreadLibraryCalls(
         HMODULE hLibModule
    );
# 169 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
__declspec(dllimport)

HRSRC
__stdcall
FindResourceExW(
             HMODULE hModule,
         LPCWSTR lpType,
         LPCWSTR lpName,
         WORD wLanguage
    );
# 195 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
__declspec(dllimport)
int
__stdcall
FindStringOrdinal(
         DWORD dwFindStringOrdinalFlags,
                          LPCWSTR lpStringSource,
         int cchSource,
                         LPCWSTR lpStringValue,
         int cchValue,
         BOOL bIgnoreCase
    );




__declspec(dllimport)
BOOL
__stdcall
FreeLibrary(
         HMODULE hLibModule
    );
# 225 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
FreeLibraryAndExitThread(
         HMODULE hLibModule,
         DWORD dwExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
FreeResource(
         HGLOBAL hResData
    );


__declspec(dllimport)


DWORD
__stdcall
GetModuleFileNameA(
             HMODULE hModule,
                                                                      LPSTR lpFilename,
         DWORD nSize
    );

__declspec(dllimport)


DWORD
__stdcall
GetModuleFileNameW(
             HMODULE hModule,
                                                                      LPWSTR lpFilename,
         DWORD nSize
    );







__declspec(dllimport)


HMODULE
__stdcall
GetModuleHandleA(
             LPCSTR lpModuleName
    );

__declspec(dllimport)


HMODULE
__stdcall
GetModuleHandleW(
             LPCWSTR lpModuleName
    );
# 302 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXA)(
                DWORD dwFlags,
                LPCSTR lpModuleName,
             HMODULE* phModule
    );
typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXW)(
                DWORD dwFlags,
                LPCWSTR lpModuleName,
             HMODULE* phModule
    );






__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExA(
         DWORD dwFlags,
             LPCSTR lpModuleName,
          HMODULE * phModule
    );

__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExW(
         DWORD dwFlags,
             LPCWSTR lpModuleName,
          HMODULE * phModule
    );
# 357 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
__declspec(dllimport)
FARPROC
__stdcall
GetProcAddress(
         HMODULE hModule,
         LPCSTR lpProcName
    );
# 373 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryExA(
         LPCSTR lpLibFileName,
               HANDLE hFile,
         DWORD dwFlags
    );

__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryExW(
         LPCWSTR lpLibFileName,
               HANDLE hFile,
         DWORD dwFlags
    );
# 413 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
__declspec(dllimport)

HGLOBAL
__stdcall
LoadResource(
             HMODULE hModule,
         HRSRC hResInfo
    );
# 432 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
__declspec(dllimport)
int
__stdcall
LoadStringA(
             HINSTANCE hInstance,
         UINT uID,
                                              LPSTR lpBuffer,
         int cchBufferMax
    );

__declspec(dllimport)
int
__stdcall
LoadStringW(
             HINSTANCE hInstance,
         UINT uID,
                                              LPWSTR lpBuffer,
         int cchBufferMax
    );
# 467 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
__declspec(dllimport)
LPVOID
__stdcall
LockResource(
         HGLOBAL hResData
    );


__declspec(dllimport)
DWORD
__stdcall
SizeofResource(
             HMODULE hModule,
         HRSRC hResInfo
    );
# 493 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
typedef PVOID DLL_DIRECTORY_COOKIE, *PDLL_DIRECTORY_COOKIE;

__declspec(dllimport)
DLL_DIRECTORY_COOKIE
__stdcall
AddDllDirectory(
         PCWSTR NewDirectory
    );


__declspec(dllimport)
BOOL
__stdcall
RemoveDllDirectory(
         DLL_DIRECTORY_COOKIE Cookie
    );


__declspec(dllimport)
BOOL
__stdcall
SetDefaultDllDirectories(
         DWORD DirectoryFlags
    );
# 534 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExA(
             HMODULE hModule,
         LPCSTR lpType,
         LPCSTR lpName,
         ENUMRESLANGPROCA lpEnumFunc,
             LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExW(
             HMODULE hModule,
         LPCWSTR lpType,
         LPCWSTR lpName,
         ENUMRESLANGPROCW lpEnumFunc,
             LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );







__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExA(
             HMODULE hModule,
         LPCSTR lpType,
         ENUMRESNAMEPROCA lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExW(
             HMODULE hModule,
         LPCWSTR lpType,
         ENUMRESNAMEPROCW lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );







__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExA(
             HMODULE hModule,
         ENUMRESTYPEPROCA lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExW(
             HMODULE hModule,
         ENUMRESTYPEPROCW lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
# 636 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\libloaderapi.h"
}
# 58 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\securitybaseapi.h" 1
# 37 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\securitybaseapi.h"
extern "C" {
# 53 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\securitybaseapi.h"
__declspec(dllimport)
BOOL
__stdcall
AccessCheck(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PGENERIC_MAPPING GenericMapping,
                                                                        PPRIVILEGE_SET PrivilegeSet,
            LPDWORD PrivilegeSetLength,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmW(
         LPCWSTR SubsystemName,
             LPVOID HandleId,
         LPWSTR ObjectTypeName,
             LPWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
         DWORD DesiredAccess,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus,
          LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByType(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID PrincipalSelfSid,
         HANDLE ClientToken,
         DWORD DesiredAccess,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
                                                                        PPRIVILEGE_SET PrivilegeSet,
            LPDWORD PrivilegeSetLength,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultList(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID PrincipalSelfSid,
         HANDLE ClientToken,
         DWORD DesiredAccess,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
                                                                        PPRIVILEGE_SET PrivilegeSet,
            LPDWORD PrivilegeSetLength,
                                       LPDWORD GrantedAccessList,
                                       LPDWORD AccessStatusList
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
         DWORD DesiredAccess,
         AUDIT_EVENT_TYPE AuditType,
         DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus,
          LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
         DWORD DesiredAccess,
         AUDIT_EVENT_TYPE AuditType,
         DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
                                       LPDWORD GrantedAccessList,
                                       LPDWORD AccessStatusList,
          LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
         DWORD DesiredAccess,
         AUDIT_EVENT_TYPE AuditType,
         DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
                                       LPDWORD GrantedAccessList,
                                       LPDWORD AccessStatusList,
          LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AccessMask,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAceEx(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedObjectAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
             GUID * ObjectTypeGuid,
             GUID * InheritedObjectTypeGuid,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AccessMask,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAceEx(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedObjectAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
             GUID * ObjectTypeGuid,
             GUID * InheritedObjectTypeGuid,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD dwStartingAceIndex,
                                     LPVOID pAceList,
         DWORD nAceListLength
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD dwAccessMask,
         PSID pSid,
         BOOL bAuditSuccess,
         BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAceEx(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD dwAccessMask,
         PSID pSid,
         BOOL bAuditSuccess,
         BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessObjectAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
             GUID * ObjectTypeGuid,
             GUID * InheritedObjectTypeGuid,
         PSID pSid,
         BOOL bAuditSuccess,
         BOOL bAuditFailure
    );





__declspec(dllimport)
BOOL
__stdcall
AddMandatoryAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD MandatoryPolicy,
         PSID pLabelSid
    );
# 359 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\securitybaseapi.h"
__declspec(dllimport)
BOOL
__stdcall
AddResourceAttributeAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
         PSID pSid,
         PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo,
          PDWORD pReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AddScopedPolicyIDAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
         PSID pSid
    );






__declspec(dllimport)
BOOL
__stdcall
AdjustTokenGroups(
         HANDLE TokenHandle,
         BOOL ResetToDefault,
             PTOKEN_GROUPS NewState,
         DWORD BufferLength,
                                                           PTOKEN_GROUPS PreviousState,
              PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenPrivileges(
         HANDLE TokenHandle,
         BOOL DisableAllPrivileges,
             PTOKEN_PRIVILEGES NewState,
         DWORD BufferLength,
                                                           PTOKEN_PRIVILEGES PreviousState,
              PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateAndInitializeSid(
         PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
         BYTE nSubAuthorityCount,
         DWORD nSubAuthority0,
         DWORD nSubAuthority1,
         DWORD nSubAuthority2,
         DWORD nSubAuthority3,
         DWORD nSubAuthority4,
         DWORD nSubAuthority5,
         DWORD nSubAuthority6,
         DWORD nSubAuthority7,
             PSID * pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateLocallyUniqueId(
          PLUID Luid
    );


__declspec(dllimport)
BOOL
__stdcall
AreAllAccessesGranted(
         DWORD GrantedAccess,
         DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
AreAnyAccessesGranted(
         DWORD GrantedAccess,
         DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembership(
             HANDLE TokenHandle,
         PSID SidToCheck,
          PBOOL IsMember
    );







__declspec(dllimport)
BOOL
__stdcall
CheckTokenCapability(
             HANDLE TokenHandle,
         PSID CapabilitySidToCheck,
          PBOOL HasCapability
    );


__declspec(dllimport)
BOOL
__stdcall
GetAppContainerAce(
         PACL Acl,
         DWORD StartingAceIndex,
             PVOID * AppContainerAce,
              DWORD * AppContainerAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembershipEx(
             HANDLE TokenHandle,
         PSID SidToCheck,
         DWORD Flags,
          PBOOL IsMember
    );






__declspec(dllimport)
BOOL
__stdcall
ConvertToAutoInheritPrivateObjectSecurity(
             PSECURITY_DESCRIPTOR ParentDescriptor,
         PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
             PSECURITY_DESCRIPTOR * NewSecurityDescriptor,
             GUID * ObjectType,
         BOOLEAN IsDirectoryObject,
         PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CopySid(
         DWORD nDestinationSidLength,
                                              PSID pDestinationSid,
         PSID pSourceSid
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurity(
             PSECURITY_DESCRIPTOR ParentDescriptor,
             PSECURITY_DESCRIPTOR CreatorDescriptor,
             PSECURITY_DESCRIPTOR * NewDescriptor,
         BOOL IsDirectoryObject,
             HANDLE Token,
         PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityEx(
             PSECURITY_DESCRIPTOR ParentDescriptor,
             PSECURITY_DESCRIPTOR CreatorDescriptor,
             PSECURITY_DESCRIPTOR * NewDescriptor,
             GUID * ObjectType,
         BOOL IsContainerObject,
         ULONG AutoInheritFlags,
             HANDLE Token,
         PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityWithMultipleInheritance(
             PSECURITY_DESCRIPTOR ParentDescriptor,
             PSECURITY_DESCRIPTOR CreatorDescriptor,
             PSECURITY_DESCRIPTOR * NewDescriptor,
                              GUID ** ObjectTypes,
         ULONG GuidCount,
         BOOL IsContainerObject,
         ULONG AutoInheritFlags,
             HANDLE Token,
         PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreateRestrictedToken(
         HANDLE ExistingTokenHandle,
         DWORD Flags,
         DWORD DisableSidCount,
                                    PSID_AND_ATTRIBUTES SidsToDisable,
         DWORD DeletePrivilegeCount,
                                         PLUID_AND_ATTRIBUTES PrivilegesToDelete,
         DWORD RestrictedSidCount,
                                       PSID_AND_ATTRIBUTES SidsToRestrict,
             PHANDLE NewTokenHandle
    );





__declspec(dllimport)

BOOL
__stdcall
CreateWellKnownSid(
         WELL_KNOWN_SID_TYPE WellKnownSidType,
             PSID DomainSid,
                                              PSID pSid,
            DWORD * cbSid
    );


__declspec(dllimport)

BOOL
__stdcall
EqualDomainSid(
         PSID pSid1,
         PSID pSid2,
          BOOL * pfEqual
    );




__declspec(dllimport)
BOOL
__stdcall
DeleteAce(
            PACL pAcl,
         DWORD dwAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
DestroyPrivateObjectSecurity(
                               PSECURITY_DESCRIPTOR * ObjectDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateToken(
         HANDLE ExistingTokenHandle,
         SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
             PHANDLE DuplicateTokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateTokenEx(
         HANDLE hExistingToken,
         DWORD dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpTokenAttributes,
         SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
         TOKEN_TYPE TokenType,
             PHANDLE phNewToken
    );


__declspec(dllimport)
BOOL
__stdcall
EqualPrefixSid(
         PSID pSid1,
         PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
EqualSid(
         PSID pSid1,
         PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
FindFirstFreeAce(
         PACL pAcl,
             LPVOID * pAce
    );


__declspec(dllimport)
PVOID
__stdcall
FreeSid(
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
GetAce(
         PACL pAcl,
         DWORD dwAceIndex,
             LPVOID * pAce
    );


__declspec(dllimport)
BOOL
__stdcall
GetAclInformation(
         PACL pAcl,
                                              LPVOID pAclInformation,
         DWORD nAclInformationLength,
         ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityW(
         LPCWSTR lpFileName,
         SECURITY_INFORMATION RequestedInformation,
                                                         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         DWORD nLength,
          LPDWORD lpnLengthNeeded
    );






__declspec(dllimport)
BOOL
__stdcall
GetKernelObjectSecurity(
         HANDLE Handle,
         SECURITY_INFORMATION RequestedInformation,
                                    PSECURITY_DESCRIPTOR pSecurityDescriptor,
         DWORD nLength,
          LPDWORD lpnLengthNeeded
    );


__declspec(dllimport)


DWORD
__stdcall
GetLengthSid(
                                           PSID pSid
    );


__declspec(dllimport)

BOOL
__stdcall
GetPrivateObjectSecurity(
         PSECURITY_DESCRIPTOR ObjectDescriptor,
         SECURITY_INFORMATION SecurityInformation,
                                                               PSECURITY_DESCRIPTOR ResultantDescriptor,
         DWORD DescriptorLength,
          PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorControl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          PSECURITY_DESCRIPTOR_CONTROL pControl,
          LPDWORD lpdwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorDacl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          LPBOOL lpbDaclPresent,
             PACL * pDacl,
          LPBOOL lpbDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorGroup(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID * pGroup,
          LPBOOL lpbGroupDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorLength(
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorOwner(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID * pOwner,
          LPBOOL lpbOwnerDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorRMControl(
         PSECURITY_DESCRIPTOR SecurityDescriptor,
          PUCHAR RMControl
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorSacl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          LPBOOL lpbSaclPresent,
             PACL * pSacl,
          LPBOOL lpbSaclDefaulted
    );


__declspec(dllimport)
PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority(
         PSID pSid
    );


__declspec(dllimport)
DWORD
__stdcall
GetSidLengthRequired(
         UCHAR nSubAuthorityCount
    );


__declspec(dllimport)
PDWORD
__stdcall
GetSidSubAuthority(
         PSID pSid,
         DWORD nSubAuthority
    );


__declspec(dllimport)
PUCHAR
__stdcall
GetSidSubAuthorityCount(
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
GetTokenInformation(
         HANDLE TokenHandle,
         TOKEN_INFORMATION_CLASS TokenInformationClass,
                                                                     LPVOID TokenInformation,
         DWORD TokenInformationLength,
          PDWORD ReturnLength
    );





__declspec(dllimport)

BOOL
__stdcall
GetWindowsAccountDomainSid(
         PSID pSid,
                                                          PSID pDomainSid,
            DWORD * cbDomainSid
    );




__declspec(dllimport)
BOOL
__stdcall
ImpersonateAnonymousToken(
         HANDLE ThreadHandle
    );



__declspec(dllimport)
BOOL
__stdcall
ImpersonateLoggedOnUser(
         HANDLE hToken
    );



__declspec(dllimport)
BOOL
__stdcall
ImpersonateSelf(
         SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeAcl(
                                   PACL pAcl,
         DWORD nAclLength,
         DWORD dwAclRevision
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSecurityDescriptor(
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
         DWORD dwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSid(
                                                                                  PSID Sid,
         PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
         BYTE nSubAuthorityCount
    );


__declspec(dllimport)
BOOL
__stdcall
IsTokenRestricted(
         HANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidAcl(
         PACL pAcl
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSecurityDescriptor(
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSid(
         PSID pSid
    );





__declspec(dllimport)
BOOL
__stdcall
IsWellKnownSid(
         PSID pSid,
         WELL_KNOWN_SID_TYPE WellKnownSidType
    );




__declspec(dllimport)

BOOL
__stdcall
MakeAbsoluteSD(
         PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
                                                                                                        PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
            LPDWORD lpdwAbsoluteSecurityDescriptorSize,
                                                            PACL pDacl,
            LPDWORD lpdwDaclSize,
                                                            PACL pSacl,
            LPDWORD lpdwSaclSize,
                                                              PSID pOwner,
            LPDWORD lpdwOwnerSize,
                                                                            PSID pPrimaryGroup,
            LPDWORD lpdwPrimaryGroupSize
    );


__declspec(dllimport)

BOOL
__stdcall
MakeSelfRelativeSD(
         PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
                                                                    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
            LPDWORD lpdwBufferLength
    );


__declspec(dllimport)
void
__stdcall
MapGenericMask(
            PDWORD AccessMask,
         PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         LPWSTR ObjectTypeName,
             LPWSTR ObjectName,
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         DWORD GrantedAccess,
             PPRIVILEGE_SET Privileges,
         BOOL ObjectCreation,
         BOOL AccessGranted,
          LPBOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );






__declspec(dllimport)
BOOL
__stdcall
PrivilegeCheck(
         HANDLE ClientToken,
            PPRIVILEGE_SET RequiredPrivileges,
          LPBOOL pfResult
    );


__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmW(
         LPCWSTR SubsystemName,
         LPCWSTR ServiceName,
         HANDLE ClientToken,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );
# 1135 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\securitybaseapi.h"
__declspec(dllimport)
void
__stdcall
QuerySecurityAccessMask(
         SECURITY_INFORMATION SecurityInformation,
          LPDWORD DesiredAccess
    );




__declspec(dllimport)
BOOL
__stdcall
RevertToSelf(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
SetAclInformation(
            PACL pAcl,
                                            LPVOID pAclInformation,
         DWORD nAclInformationLength,
         ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityW(
         LPCWSTR lpFileName,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );





__declspec(dllimport)
BOOL
__stdcall
SetKernelObjectSecurity(
         HANDLE Handle,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR SecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurity(
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR ModificationDescriptor,
            PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,
         PGENERIC_MAPPING GenericMapping,
             HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurityEx(
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR ModificationDescriptor,
            PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,
         ULONG AutoInheritFlags,
         PGENERIC_MAPPING GenericMapping,
             HANDLE Token
    );





__declspec(dllimport)
void
__stdcall
SetSecurityAccessMask(
         SECURITY_INFORMATION SecurityInformation,
          LPDWORD DesiredAccess
    );




__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorControl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,
         SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorDacl(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
         BOOL bDaclPresent,
             PACL pDacl,
         BOOL bDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorGroup(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID pGroup,
         BOOL bGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorOwner(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID pOwner,
         BOOL bOwnerDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
SetSecurityDescriptorRMControl(
            PSECURITY_DESCRIPTOR SecurityDescriptor,
             PUCHAR RMControl
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorSacl(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
         BOOL bSaclPresent,
             PACL pSacl,
         BOOL bSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetTokenInformation(
         HANDLE TokenHandle,
         TOKEN_INFORMATION_CLASS TokenInformationClass,
                                             LPVOID TokenInformation,
         DWORD TokenInformationLength
    );







__declspec(dllimport)
BOOL
__stdcall
SetCachedSigningLevel(
                                PHANDLE SourceFiles,
         ULONG SourceFileCount,
         ULONG Flags,
             HANDLE TargetFile
    );


__declspec(dllimport)
BOOL
__stdcall
GetCachedSigningLevel(
         HANDLE File,
          PULONG Flags,
          PULONG SigningLevel,
                                                                PUCHAR Thumbprint,
                PULONG ThumbprintSize,
              PULONG ThumbprintAlgorithm
    );
# 1336 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\securitybaseapi.h"
}
# 59 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\namespaceapi.h" 1
# 33 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\namespaceapi.h"
extern "C" {
# 42 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\namespaceapi.h"
__declspec(dllimport)
HANDLE
__stdcall
CreatePrivateNamespaceW(
             LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
         LPVOID lpBoundaryDescriptor,
         LPCWSTR lpAliasPrefix
    );


__declspec(dllimport)
HANDLE
__stdcall
OpenPrivateNamespaceW(
         LPVOID lpBoundaryDescriptor,
         LPCWSTR lpAliasPrefix
    );


__declspec(dllimport)
BOOLEAN
__stdcall
ClosePrivateNamespace(
         HANDLE Handle,
         ULONG Flags
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateBoundaryDescriptorW(
         LPCWSTR Name,
         ULONG Flags
    );


__declspec(dllimport)
BOOL
__stdcall
AddSIDToBoundaryDescriptor(
            HANDLE * BoundaryDescriptor,
         PSID RequiredSid
    );


__declspec(dllimport)
void
__stdcall
DeleteBoundaryDescriptor(
         HANDLE BoundaryDescriptor
    );






}
# 60 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\systemtopologyapi.h" 1
# 33 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\systemtopologyapi.h"
extern "C" {






__declspec(dllimport)
BOOL
__stdcall
GetNumaHighestNodeNumber(
          PULONG HighestNodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMaskEx(
         USHORT Node,
          PGROUP_AFFINITY ProcessorMask
    );
# 66 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\systemtopologyapi.h"
}
# 61 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processtopologyapi.h" 1
# 36 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processtopologyapi.h"
extern "C" {
# 46 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processtopologyapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetProcessGroupAffinity(
         HANDLE hProcess,
            PUSHORT GroupCount,
                              PUSHORT GroupArray
    );
# 69 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processtopologyapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetThreadGroupAffinity(
         HANDLE hThread,
          PGROUP_AFFINITY GroupAffinity
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadGroupAffinity(
         HANDLE hThread,
         const GROUP_AFFINITY * GroupAffinity,
              PGROUP_AFFINITY PreviousGroupAffinity
    );
# 94 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\processtopologyapi.h"
}
# 62 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\securityappcontainer.h" 1
# 39 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\securityappcontainer.h"
extern "C" {
# 49 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\securityappcontainer.h"
BOOL
__stdcall
GetAppContainerNamedObjectPath(
             HANDLE Token,
             PSID AppContainerSid,
         ULONG ObjectPathLength,
                                       LPWSTR ObjectPath,
          PULONG ReturnLength
    );





}
# 63 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\realtimeapiset.h" 1
# 32 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\realtimeapiset.h"
extern "C" {
# 42 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\realtimeapiset.h"
__declspec(dllimport)
BOOL
__stdcall
QueryThreadCycleTime(
         HANDLE ThreadHandle,
          PULONG64 CycleTime
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProcessCycleTime(
         HANDLE ProcessHandle,
          PULONG64 CycleTime
    );


__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTime(
            PULONG BufferLength,
                                          PULONG64 ProcessorIdleCycleTime
    );







__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTimeEx(
         USHORT Group,
            PULONG BufferLength,
                                          PULONG64 ProcessorIdleCycleTime
    );
# 96 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\realtimeapiset.h"
__declspec(dllimport)
BOOL
__stdcall
QueryUnbiasedInterruptTime(
          PULONGLONG UnbiasedTime
    );
# 110 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\realtimeapiset.h"
}
# 64 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2



extern "C" {
# 280 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef void (__stdcall *PFIBER_START_ROUTINE)(
    LPVOID lpFiberParameter
    );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;

typedef LPVOID (__stdcall *PFIBER_CALLOUT_ROUTINE)(
    LPVOID lpParameter
    );
# 300 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef LPVOID LPLDT_ENTRY;
# 403 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
# 458 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef struct _DCB {
    DWORD DCBlength;
    DWORD BaudRate;
    DWORD fBinary: 1;
    DWORD fParity: 1;
    DWORD fOutxCtsFlow:1;
    DWORD fOutxDsrFlow:1;
    DWORD fDtrControl:2;
    DWORD fDsrSensitivity:1;
    DWORD fTXContinueOnXoff: 1;
    DWORD fOutX: 1;
    DWORD fInX: 1;
    DWORD fErrorChar: 1;
    DWORD fNull: 1;
    DWORD fRtsControl:2;
    DWORD fAbortOnError:1;
    DWORD fDummy2:17;
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;
    WORD wVersion;
    WORD wReserved;
    DCB dcb;
    DWORD dwProviderSubType;

    DWORD dwProviderOffset;

    DWORD dwProviderSize;
    WCHAR wcProviderData[1];
} COMMCONFIG,*LPCOMMCONFIG;
# 545 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;
# 646 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;

typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;


typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
# 875 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;
# 895 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
int




__stdcall




WinMain (
         HINSTANCE hInstance,
             HINSTANCE hPrevInstance,
         LPSTR lpCmdLine,
         int nShowCmd
    );

int



__stdcall

wWinMain(
         HINSTANCE hInstance,
             HINSTANCE hPrevInstance,
         LPWSTR lpCmdLine,
         int nShowCmd
    );

__declspec(dllimport)


HGLOBAL
__stdcall
GlobalAlloc(
         UINT uFlags,
         SIZE_T dwBytes
    );

__declspec(dllimport)

HGLOBAL
__stdcall
GlobalReAlloc (
                HGLOBAL hMem,
         SIZE_T dwBytes,
         UINT uFlags
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalSize (
         HGLOBAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
GlobalFlags (
         HGLOBAL hMem
    );

__declspec(dllimport)

LPVOID
__stdcall
GlobalLock (
         HGLOBAL hMem
    );

__declspec(dllimport)

HGLOBAL
__stdcall
GlobalHandle (
         LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnlock(
         HGLOBAL hMem
    );

__declspec(dllimport)


HGLOBAL
__stdcall
GlobalFree(
                    HGLOBAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalCompact(
         DWORD dwMinFree
    );

__declspec(dllimport)
void
__stdcall
GlobalFix(
         HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalUnfix(
         HGLOBAL hMem
    );

__declspec(dllimport)
LPVOID
__stdcall
GlobalWire(
         HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnWire(
         HGLOBAL hMem
    );


__declspec(dllimport)
void
__stdcall
GlobalMemoryStatus(
          LPMEMORYSTATUS lpBuffer
    );

__declspec(dllimport)


HLOCAL
__stdcall
LocalAlloc(
         UINT uFlags,
         SIZE_T uBytes
    );

__declspec(dllimport)

HLOCAL
__stdcall
LocalReAlloc(
                    HLOCAL hMem,
         SIZE_T uBytes,
         UINT uFlags
    );

__declspec(dllimport)

LPVOID
__stdcall
LocalLock(
         HLOCAL hMem
    );

__declspec(dllimport)

HLOCAL
__stdcall
LocalHandle(
         LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
LocalUnlock(
         HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalSize(
         HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalFlags(
         HLOCAL hMem
    );

__declspec(dllimport)


HLOCAL
__stdcall
LocalFree(
                    HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalShrink(
         HLOCAL hMem,
         UINT cbNewSize
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalCompact(
         UINT uMinFree
    );



__declspec(dllimport)
BOOL
__stdcall
GetProcessorSystemCycleTime (
         USHORT Group,
                                                                PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,
            PDWORD ReturnedLength
    );
# 1144 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeA(
          LPCSTR lpApplicationName,
          LPDWORD lpBinaryType
    );
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeW(
          LPCWSTR lpApplicationName,
          LPDWORD lpBinaryType
    );






__declspec(dllimport)

DWORD
__stdcall
GetShortPathNameA(
         LPCSTR lpszLongPath,
                                               LPSTR lpszShortPath,
         DWORD cchBuffer
    );






__declspec(dllimport)

DWORD
__stdcall
GetLongPathNameTransactedA(
             LPCSTR lpszShortPath,
                                               LPSTR lpszLongPath,
             DWORD cchBuffer,
             HANDLE hTransaction
    );
__declspec(dllimport)

DWORD
__stdcall
GetLongPathNameTransactedW(
             LPCWSTR lpszShortPath,
                                               LPWSTR lpszLongPath,
             DWORD cchBuffer,
             HANDLE hTransaction
    );
# 1207 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetProcessAffinityMask(
          HANDLE hProcess,
          PDWORD_PTR lpProcessAffinityMask,
          PDWORD_PTR lpSystemAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityMask(
         HANDLE hProcess,
         DWORD_PTR dwProcessAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessIoCounters(
          HANDLE hProcess,
          PIO_COUNTERS lpIoCounters
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSize(
          HANDLE hProcess,
          PSIZE_T lpMinimumWorkingSetSize,
          PSIZE_T lpMaximumWorkingSetSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSize(
         HANDLE hProcess,
         SIZE_T dwMinimumWorkingSetSize,
         SIZE_T dwMaximumWorkingSetSize
    );

__declspec(dllimport)

void
__stdcall
FatalExit(
         int ExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsA(
                                     LPCH NewEnvironment
    );
# 1274 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
void
__stdcall
RaiseFailFastException(
             PEXCEPTION_RECORD pExceptionRecord,
             PCONTEXT pContextRecord,
         DWORD dwFlags
    );
# 1297 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
void
__stdcall
SwitchToFiber(
         LPVOID lpFiber
    );

__declspec(dllimport)
void
__stdcall
DeleteFiber(
         LPVOID lpFiber
    );



__declspec(dllimport)
BOOL
__stdcall
ConvertFiberToThread(
    void
    );





__declspec(dllimport)

PVOID
__stdcall
CalloutOnFiberStack(
         PVOID lpFiber,
         PFIBER_CALLOUT_ROUTINE lpStartAddress,
             PVOID lpParameter
    );



__declspec(dllimport)

LPVOID
__stdcall
CreateFiberEx(
             SIZE_T dwStackCommitSize,
             SIZE_T dwStackReserveSize,
             DWORD dwFlags,
             LPFIBER_START_ROUTINE lpStartAddress,
             LPVOID lpParameter
    );

__declspec(dllimport)

LPVOID
__stdcall
ConvertThreadToFiberEx(
             LPVOID lpParameter,
             DWORD dwFlags
    );







__declspec(dllimport)

LPVOID
__stdcall
CreateFiber(
             SIZE_T dwStackSize,
             LPFIBER_START_ROUTINE lpStartAddress,
             LPVOID lpParameter
    );

__declspec(dllimport)

LPVOID
__stdcall
ConvertThreadToFiber(
             LPVOID lpParameter
    );
# 1399 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef void *PUMS_CONTEXT;

typedef void *PUMS_COMPLETION_LIST;

typedef enum _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, *PUMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;

typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT;

typedef struct _UMS_SCHEDULER_STARTUP_INFO {




    ULONG UmsVersion;




    PUMS_COMPLETION_LIST CompletionList;





    PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;




    PVOID SchedulerParam;

} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO;

typedef struct _UMS_SYSTEM_THREAD_INFORMATION {
    ULONG UmsVersion;
    union {
        struct {
            ULONG IsUmsSchedulerThread : 1;
            ULONG IsUmsWorkerThread : 1;
        } ;
        ULONG ThreadUmsFlags;
    } ;
} UMS_SYSTEM_THREAD_INFORMATION, *PUMS_SYSTEM_THREAD_INFORMATION;


__declspec(dllimport)
BOOL
__stdcall
CreateUmsCompletionList(
             PUMS_COMPLETION_LIST* UmsCompletionList
    );

__declspec(dllimport)
BOOL
__stdcall
DequeueUmsCompletionListItems(
         PUMS_COMPLETION_LIST UmsCompletionList,
         DWORD WaitTimeOut,
          PUMS_CONTEXT* UmsThreadList
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsCompletionListEvent(
         PUMS_COMPLETION_LIST UmsCompletionList,
            PHANDLE UmsCompletionEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ExecuteUmsThread(
            PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
UmsThreadYield(
         PVOID SchedulerParam
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsCompletionList(
         PUMS_COMPLETION_LIST UmsCompletionList
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetCurrentUmsThread(
    void
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetNextUmsListItem(
            PUMS_CONTEXT UmsContext
    );

__declspec(dllimport)
BOOL
__stdcall
QueryUmsThreadInformation(
         PUMS_CONTEXT UmsThread,
         UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
                                                                     PVOID UmsThreadInformation,
         ULONG UmsThreadInformationLength,
              PULONG ReturnLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetUmsThreadInformation(
         PUMS_CONTEXT UmsThread,
         UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
         PVOID UmsThreadInformation,
         ULONG UmsThreadInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsThreadContext(
         PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
CreateUmsThreadContext(
             PUMS_CONTEXT *lpUmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
EnterUmsSchedulingMode(
         PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsSystemThreadInformation(
         HANDLE ThreadHandle,
            PUMS_SYSTEM_THREAD_INFORMATION SystemThreadInfo
    );
# 1569 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
DWORD_PTR
__stdcall
SetThreadAffinityMask(
         HANDLE hThread,
         DWORD_PTR dwThreadAffinityMask
    );






__declspec(dllimport)
DWORD
__stdcall
SetThreadIdealProcessor(
         HANDLE hThread,
         DWORD dwIdealProcessor
    );
# 1600 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef enum _PROCESS_INFORMATION_CLASS {
    ProcessMemoryPriority,
    ProcessInformationClassMax
} PROCESS_INFORMATION_CLASS;



__declspec(dllimport)
BOOL
__stdcall
GetProcessInformation (
         HANDLE hProcess,
         PROCESS_INFORMATION_CLASS ProcessInformationClass,
                                               LPVOID ProcessInformation,
         DWORD ProcessInformationSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessInformation (
         HANDLE hProcess,
         PROCESS_INFORMATION_CLASS ProcessInformationClass,
                                             LPVOID ProcessInformation,
         DWORD ProcessInformationSize
    );
# 1634 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetProcessDEPPolicy(
         DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessDEPPolicy(
         HANDLE hProcess,
          LPDWORD lpFlags,
          PBOOL lpPermanent
    );



__declspec(dllimport)
BOOL
__stdcall
RequestWakeupLatency(
         LATENCY_TIME latency
    );

__declspec(dllimport)
BOOL
__stdcall
IsSystemResumeAutomatic(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadSelectorEntry(
          HANDLE hThread,
          DWORD dwSelector,
          LPLDT_ENTRY lpSelectorEntry
    );

__declspec(dllimport)
EXECUTION_STATE
__stdcall
SetThreadExecutionState(
         EXECUTION_STATE esFlags
    );







typedef REASON_CONTEXT POWER_REQUEST_CONTEXT, *PPOWER_REQUEST_CONTEXT, *LPPOWER_REQUEST_CONTEXT;

__declspec(dllimport)
HANDLE
__stdcall
PowerCreateRequest (
         PREASON_CONTEXT Context
    );

__declspec(dllimport)
BOOL
__stdcall
PowerSetRequest (
         HANDLE PowerRequest,
         POWER_REQUEST_TYPE RequestType
    );

__declspec(dllimport)
BOOL
__stdcall
PowerClearRequest (
         HANDLE PowerRequest,
         POWER_REQUEST_TYPE RequestType
    );
# 1770 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetFileCompletionNotificationModes(
         HANDLE FileHandle,
         UCHAR Flags
    );
# 1789 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
GetThreadErrorMode(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadErrorMode(
         DWORD dwNewMode,
             LPDWORD lpOldMode
    );





__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadContext(
            HANDLE hThread,
            PWOW64_CONTEXT lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
Wow64SetThreadContext(
         HANDLE hThread,
         const WOW64_CONTEXT *lpContext
    );





__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadSelectorEntry(
         HANDLE hThread,
         DWORD dwSelector,
          PWOW64_LDT_ENTRY lpSelectorEntry
    );







__declspec(dllimport)
DWORD
__stdcall
Wow64SuspendThread(
         HANDLE hThread
    );



__declspec(dllimport)
BOOL
__stdcall
DebugSetProcessKillOnExit(
         BOOL KillOnExit
    );

__declspec(dllimport)
BOOL
__stdcall
DebugBreakProcess (
         HANDLE Process
    );
# 1882 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
PulseEvent(
         HANDLE hEvent
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjects(
         DWORD nCount,
                       const HANDLE *lpHandles,
         BOOL bWaitAll,
         DWORD dwMilliseconds
    );

__declspec(dllimport)
ATOM
__stdcall
GlobalDeleteAtom(
         ATOM nAtom
    );

__declspec(dllimport)
BOOL
__stdcall
InitAtomTable(
         DWORD nSize
    );

__declspec(dllimport)
ATOM
__stdcall
DeleteAtom(
         ATOM nAtom
    );

__declspec(dllimport)
UINT
__stdcall
SetHandleCount(
         UINT uNumber
    );

__declspec(dllimport)
BOOL
__stdcall
RequestDeviceWakeup(
         HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
CancelDeviceWakeupRequest(
         HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
GetDevicePowerState(
          HANDLE hDevice,
          BOOL *pfOn
    );

__declspec(dllimport)
BOOL
__stdcall
SetMessageWaitingIndicator(
         HANDLE hMsgIndicator,
         ULONG ulMsgCount
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameA(
         HANDLE hFile,
         LPCSTR lpShortName
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameW(
         HANDLE hFile,
         LPCWSTR lpShortName
    );
# 1983 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
LoadModule(
         LPCSTR lpModuleName,
         LPVOID lpParameterBlock
    );



__declspec(dllimport)
UINT
__stdcall
WinExec(
         LPCSTR lpCmdLine,
         UINT uCmdShow
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommBreak(
         HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommError(
              HANDLE hFile,
              LPDWORD lpErrors,
              LPCOMSTAT lpStat
    );

__declspec(dllimport)
BOOL
__stdcall
SetupComm(
         HANDLE hFile,
         DWORD dwInQueue,
         DWORD dwOutQueue
    );

__declspec(dllimport)
BOOL
__stdcall
EscapeCommFunction(
         HANDLE hFile,
         DWORD dwFunc
    );

__declspec(dllimport)

BOOL
__stdcall
GetCommConfig(
              HANDLE hCommDev,
                                      LPCOMMCONFIG lpCC,
              LPDWORD lpdwSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommMask(
          HANDLE hFile,
          LPDWORD lpEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommProperties(
            HANDLE hFile,
            LPCOMMPROP lpCommProp
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommModemStatus(
          HANDLE hFile,
          LPDWORD lpModemStat
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommState(
          HANDLE hFile,
          LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommTimeouts(
          HANDLE hFile,
          LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
PurgeComm(
         HANDLE hFile,
         DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommBreak(
         HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommConfig(
         HANDLE hCommDev,
                             LPCOMMCONFIG lpCC,
         DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommMask(
         HANDLE hFile,
         DWORD dwEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommState(
         HANDLE hFile,
         LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommTimeouts(
         HANDLE hFile,
         LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
TransmitCommChar(
         HANDLE hFile,
         char cChar
    );

__declspec(dllimport)
BOOL
__stdcall
WaitCommEvent(
                HANDLE hFile,
                LPDWORD lpEvtMask,
                LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
DWORD
__stdcall
SetTapePosition(
         HANDLE hDevice,
         DWORD dwPositionMethod,
         DWORD dwPartition,
         DWORD dwOffsetLow,
         DWORD dwOffsetHigh,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapePosition(
          HANDLE hDevice,
          DWORD dwPositionType,
          LPDWORD lpdwPartition,
          LPDWORD lpdwOffsetLow,
          LPDWORD lpdwOffsetHigh
    );

__declspec(dllimport)
DWORD
__stdcall
PrepareTape(
         HANDLE hDevice,
         DWORD dwOperation,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
EraseTape(
         HANDLE hDevice,
         DWORD dwEraseType,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
CreateTapePartition(
         HANDLE hDevice,
         DWORD dwPartitionMethod,
         DWORD dwCount,
         DWORD dwSize
    );

__declspec(dllimport)
DWORD
__stdcall
WriteTapemark(
         HANDLE hDevice,
         DWORD dwTapemarkType,
         DWORD dwTapemarkCount,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeStatus(
         HANDLE hDevice
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeParameters(
            HANDLE hDevice,
            DWORD dwOperation,
            LPDWORD lpdwSize,
                                  LPVOID lpTapeInformation
    );




__declspec(dllimport)
DWORD
__stdcall
SetTapeParameters(
         HANDLE hDevice,
         DWORD dwOperation,
         LPVOID lpTapeInformation
    );
# 2249 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
int
__stdcall
MulDiv(
         int nNumber,
         int nNumerator,
         int nDenominator
    );







typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
} DEP_SYSTEM_POLICY_TYPE;



__declspec(dllimport)
DEP_SYSTEM_POLICY_TYPE
__stdcall
GetSystemDEPPolicy(
    void
    );





__declspec(dllimport)
BOOL
__stdcall
GetSystemRegistryQuota(
              PDWORD pdwQuotaAllowed,
              PDWORD pdwQuotaUsed
    );







__declspec(dllimport)
BOOL
__stdcall
FileTimeToDosDateTime(
          const FILETIME *lpFileTime,
          LPWORD lpFatDate,
          LPWORD lpFatTime
    );

__declspec(dllimport)
BOOL
__stdcall
DosDateTimeToFileTime(
          WORD wFatDate,
          WORD wFatTime,
          LPFILETIME lpFileTime
    );
# 2325 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)

DWORD
__stdcall
FormatMessageA(
             DWORD dwFlags,
             LPCVOID lpSource,
             DWORD dwMessageId,
             DWORD dwLanguageId,
             LPSTR lpBuffer,
             DWORD nSize,
             va_list *Arguments
    );
__declspec(dllimport)

DWORD
__stdcall
FormatMessageW(
             DWORD dwFlags,
             LPCVOID lpSource,
             DWORD dwMessageId,
             DWORD dwLanguageId,
             LPWSTR lpBuffer,
             DWORD nSize,
             va_list *Arguments
    );
# 2409 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeInfo(
              HANDLE hNamedPipe,
              LPDWORD lpFlags,
              LPDWORD lpOutBufferSize,
              LPDWORD lpInBufferSize,
              LPDWORD lpMaxInstances
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotA(
             LPCSTR lpName,
             DWORD nMaxMessageSize,
             DWORD lReadTimeout,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotW(
             LPCWSTR lpName,
             DWORD nMaxMessageSize,
             DWORD lReadTimeout,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
GetMailslotInfo(
              HANDLE hMailslot,
              LPDWORD lpMaxMessageSize,
              LPDWORD lpNextSize,
              LPDWORD lpMessageCount,
              LPDWORD lpReadTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
SetMailslotInfo(
         HANDLE hMailslot,
         DWORD lReadTimeout
    );





__declspec(dllimport)
BOOL
__stdcall
EncryptFileA(
         LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
EncryptFileW(
         LPCWSTR lpFileName
    );






__declspec(dllimport)
BOOL
__stdcall
DecryptFileA(
               LPCSTR lpFileName,
               DWORD dwReserved
    );
__declspec(dllimport)
BOOL
__stdcall
DecryptFileW(
               LPCWSTR lpFileName,
               DWORD dwReserved
    );
# 2520 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusA(
          LPCSTR lpFileName,
          LPDWORD lpStatus
    );
__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusW(
          LPCWSTR lpFileName,
          LPDWORD lpStatus
    );
# 2546 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef
DWORD
(__stdcall *PFE_EXPORT_FUNC)(
                               PBYTE pbData,
             PVOID pvCallbackContext,
             ULONG ulLength
    );

typedef
DWORD
(__stdcall *PFE_IMPORT_FUNC)(
                                                PBYTE pbData,
             PVOID pvCallbackContext,
             PULONG ulLength
    );
# 2573 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawA(
                LPCSTR lpFileName,
                ULONG ulFlags,
             PVOID *pvContext
    );
__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawW(
                LPCWSTR lpFileName,
                ULONG ulFlags,
             PVOID *pvContext
    );






__declspec(dllimport)
DWORD
__stdcall
ReadEncryptedFileRaw(
             PFE_EXPORT_FUNC pfExportCallback,
             PVOID pvCallbackContext,
             PVOID pvContext
    );

__declspec(dllimport)
DWORD
__stdcall
WriteEncryptedFileRaw(
             PFE_IMPORT_FUNC pfImportCallback,
             PVOID pvCallbackContext,
             PVOID pvContext
    );

__declspec(dllimport)
void
__stdcall
CloseEncryptedFileRaw(
         PVOID pvContext
    );





__declspec(dllimport)
int
__stdcall
lstrcmpA(
         LPCSTR lpString1,
         LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpW(
         LPCWSTR lpString1,
         LPCWSTR lpString2
    );






__declspec(dllimport)
int
__stdcall
lstrcmpiA(
         LPCSTR lpString1,
         LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpiW(
         LPCWSTR lpString1,
         LPCWSTR lpString2
    );






__declspec(dllimport)




LPSTR
__stdcall
lstrcpynA(
                             LPSTR lpString1,
         LPCSTR lpString2,
         int iMaxLength
    );
__declspec(dllimport)




LPWSTR
__stdcall
lstrcpynW(
                             LPWSTR lpString1,
         LPCWSTR lpString2,
         int iMaxLength
    );







#pragma warning(push)
#pragma warning(disable: 4995)


__declspec(dllimport)
LPSTR
__stdcall
lstrcpyA(
                                                 LPSTR lpString1,
          LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpyW(
                                                 LPWSTR lpString1,
          LPCWSTR lpString2
    );






__declspec(dllimport)
LPSTR
__stdcall
lstrcatA(
                                                                                   LPSTR lpString1,
            LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcatW(
                                                                                   LPWSTR lpString1,
            LPCWSTR lpString2
    );







#pragma warning(pop)


__declspec(dllimport)
int
__stdcall
lstrlenA(
         LPCSTR lpString
    );
__declspec(dllimport)
int
__stdcall
lstrlenW(
         LPCWSTR lpString
    );






__declspec(dllimport)
HFILE
__stdcall
OpenFile(
            LPCSTR lpFileName,
            LPOFSTRUCT lpReOpenBuff,
            UINT uStyle
    );

__declspec(dllimport)
HFILE
__stdcall
_lopen(
         LPCSTR lpPathName,
         int iReadWrite
    );

__declspec(dllimport)
HFILE
__stdcall
_lcreat(
         LPCSTR lpPathName,
         int iAttribute
    );

__declspec(dllimport)
UINT
__stdcall
_lread(
         HFILE hFile,
                                          LPVOID lpBuffer,
         UINT uBytes
    );

__declspec(dllimport)
UINT
__stdcall
_lwrite(
         HFILE hFile,
                             LPCCH lpBuffer,
         UINT uBytes
    );

__declspec(dllimport)
long
__stdcall
_hread(
         HFILE hFile,
                                          LPVOID lpBuffer,
         long lBytes
    );

__declspec(dllimport)
long
__stdcall
_hwrite(
         HFILE hFile,
                             LPCCH lpBuffer,
         long lBytes
    );

__declspec(dllimport)
HFILE
__stdcall
_lclose(
         HFILE hFile
    );

__declspec(dllimport)
LONG
__stdcall
_llseek(
         HFILE hFile,
         LONG lOffset,
         int iOrigin
    );

__declspec(dllimport)
BOOL
__stdcall
IsTextUnicode(
                            const void* lpv,
                int iSize,
                LPINT lpiResult
    );


__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
         HANDLE hObjectToSignal,
         HANDLE hObjectToWaitOn,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );


__declspec(dllimport)
BOOL
__stdcall
BackupRead(
            HANDLE hFile,
                                                                      LPBYTE lpBuffer,
            DWORD nNumberOfBytesToRead,
            LPDWORD lpNumberOfBytesRead,
            BOOL bAbort,
            BOOL bProcessSecurity,
            LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupSeek(
            HANDLE hFile,
            DWORD dwLowBytesToSeek,
            DWORD dwHighBytesToSeek,
            LPDWORD lpdwLowByteSeeked,
            LPDWORD lpdwHighByteSeeked,
            LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupWrite(
            HANDLE hFile,
                                            LPBYTE lpBuffer,
            DWORD nNumberOfBytesToWrite,
            LPDWORD lpNumberOfBytesWritten,
            BOOL bAbort,
            BOOL bProcessSecurity,
            LPVOID *lpContext
    );




typedef struct _WIN32_STREAM_ID {
        DWORD dwStreamId ;
        DWORD dwStreamAttributes ;
        LARGE_INTEGER Size ;
        DWORD dwStreamNameSize ;
        WCHAR cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;
# 2959 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef struct _STARTUPINFOEXA {
    STARTUPINFOA StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXA, *LPSTARTUPINFOEXA;
typedef struct _STARTUPINFOEXW {
    STARTUPINFOW StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXW, *LPSTARTUPINFOEXW;

typedef STARTUPINFOEXW STARTUPINFOEX;
typedef LPSTARTUPINFOEXW LPSTARTUPINFOEX;
# 2985 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
OpenMutexA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );




__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreA(
             LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
             LONG lInitialCount,
             LONG lMaximumCount,
             LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreW(
             LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
             LONG lInitialCount,
             LONG lMaximumCount,
             LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenSemaphoreA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerA(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             BOOL bManualReset,
             LPCSTR lpTimerName
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerW(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             BOOL bManualReset,
             LPCWSTR lpTimerName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenWaitableTimerA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpTimerName
    );






__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreExA(
                LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
                LONG lInitialCount,
                LONG lMaximumCount,
                LPCSTR lpName,
                DWORD dwFlags,
                DWORD dwDesiredAccess
    );




__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerExA(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             LPCSTR lpTimerName,
             DWORD dwFlags,
             DWORD dwDesiredAccess
    );
# 3112 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingA(
             HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
             DWORD flProtect,
             DWORD dwMaximumSizeHigh,
             DWORD dwMaximumSizeLow,
             LPCSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingNumaA(
             HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
             DWORD flProtect,
             DWORD dwMaximumSizeHigh,
             DWORD dwMaximumSizeLow,
             LPCSTR lpName,
             DWORD nndPreferred
    );







__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );




__declspec(dllimport)

DWORD
__stdcall
GetLogicalDriveStringsA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );





__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryA(
         LPCSTR lpLibFileName
    );
__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryW(
         LPCWSTR lpLibFileName
    );
# 3203 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)

HMODULE
__stdcall
LoadPackagedLibrary (
               LPCWSTR lpwLibFileName,
               DWORD Reserved
    );
# 3224 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameA(
         HANDLE hProcess,
         DWORD dwFlags,
                                          LPSTR lpExeName,
            PDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameW(
         HANDLE hProcess,
         DWORD dwFlags,
                                          LPWSTR lpExeName,
            PDWORD lpdwSize
    );
# 3265 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef enum _PROC_THREAD_ATTRIBUTE_NUM {
    ProcThreadAttributeParentProcess = 0,
    ProcThreadAttributeHandleList = 2,

    ProcThreadAttributeGroupAffinity = 3,
    ProcThreadAttributePreferredNode = 4,
    ProcThreadAttributeIdealProcessor = 5,
    ProcThreadAttributeUmsThread = 6,
    ProcThreadAttributeMitigationPolicy = 7,


    ProcThreadAttributeSecurityCapabilities = 9,

    ProcThreadAttributeProtectionLevel = 11,
} PROC_THREAD_ATTRIBUTE_NUM;
# 3443 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetProcessShutdownParameters(
          LPDWORD lpdwLevel,
          LPDWORD lpdwFlags
    );

__declspec(dllimport)
void
__stdcall
FatalAppExitA(
         UINT uAction,
         LPCSTR lpMessageText
    );
__declspec(dllimport)
void
__stdcall
FatalAppExitW(
         UINT uAction,
         LPCWSTR lpMessageText
    );






__declspec(dllimport)
void
__stdcall
GetStartupInfoA(
          LPSTARTUPINFOA lpStartupInfo
    );
# 3535 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                             PVOID pBuffer,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                             PVOID pBuffer,
         DWORD nSize
    );
# 3561 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableExA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                             PVOID pBuffer,
         DWORD nSize,
              PDWORD pdwAttribubutes
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableExW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                             PVOID pBuffer,
         DWORD nSize,
              PDWORD pdwAttribubutes
    );
# 3589 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                PVOID pValue,
         DWORD nSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                PVOID pValue,
         DWORD nSize
    );
# 3615 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableExA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                PVOID pValue,
         DWORD nSize,
         DWORD dwAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableExW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                PVOID pValue,
         DWORD nSize,
         DWORD dwAttributes
    );
# 3645 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetFirmwareType (
            PFIRMWARE_TYPE FirmwareType
    );


__declspec(dllimport)
BOOL
__stdcall
IsNativeVhdBoot (
          PBOOL NativeVhdBoot
    );



__declspec(dllimport)

HRSRC
__stdcall
FindResourceA(
             HMODULE hModule,
             LPCSTR lpName,
             LPCSTR lpType
    );
__declspec(dllimport)

HRSRC
__stdcall
FindResourceW(
             HMODULE hModule,
             LPCWSTR lpName,
             LPCWSTR lpType
    );






__declspec(dllimport)

HRSRC
__stdcall
FindResourceExA(
             HMODULE hModule,
             LPCSTR lpType,
             LPCSTR lpName,
             WORD wLanguage
    );




__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesA(
             HMODULE hModule,
             ENUMRESTYPEPROCA lpEnumFunc,
             LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesW(
             HMODULE hModule,
             ENUMRESTYPEPROCW lpEnumFunc,
             LONG_PTR lParam
    );






__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesA(
             HMODULE hModule,
             LPCSTR lpType,
             ENUMRESNAMEPROCA lpEnumFunc,
             LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesW(
             HMODULE hModule,
             LPCWSTR lpType,
             ENUMRESNAMEPROCW lpEnumFunc,
             LONG_PTR lParam
    );






__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesA(
             HMODULE hModule,
             LPCSTR lpType,
             LPCSTR lpName,
             ENUMRESLANGPROCA lpEnumFunc,
             LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesW(
             HMODULE hModule,
             LPCWSTR lpType,
             LPCWSTR lpName,
             ENUMRESLANGPROCW lpEnumFunc,
             LONG_PTR lParam
    );






__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceA(
         LPCSTR pFileName,
         BOOL bDeleteExistingResources
    );
__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceW(
         LPCWSTR pFileName,
         BOOL bDeleteExistingResources
    );






__declspec(dllimport)
BOOL
__stdcall
UpdateResourceA(
         HANDLE hUpdate,
         LPCSTR lpType,
         LPCSTR lpName,
         WORD wLanguage,
                             LPVOID lpData,
         DWORD cb
    );
__declspec(dllimport)
BOOL
__stdcall
UpdateResourceW(
         HANDLE hUpdate,
         LPCWSTR lpType,
         LPCWSTR lpName,
         WORD wLanguage,
                             LPVOID lpData,
         DWORD cb
    );






__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceA(
         HANDLE hUpdate,
         BOOL fDiscard
    );
__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceW(
         HANDLE hUpdate,
         BOOL fDiscard
    );
# 3842 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomExA(
             LPCSTR lpString,
         DWORD Flags
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomExW(
             LPCWSTR lpString,
         DWORD Flags
    );






__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameA(
         ATOM nAtom,
                                       LPSTR lpBuffer,
         int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameW(
         ATOM nAtom,
                                       LPWSTR lpBuffer,
         int nSize
    );






__declspec(dllimport)
ATOM
__stdcall
AddAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
AddAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
ATOM
__stdcall
FindAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
FindAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GetAtomNameA(
         ATOM nAtom,
                                       LPSTR lpBuffer,
         int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GetAtomNameW(
         ATOM nAtom,
                                       LPWSTR lpBuffer,
         int nSize
    );






__declspec(dllimport)
UINT
__stdcall
GetProfileIntA(
         LPCSTR lpAppName,
         LPCSTR lpKeyName,
         INT nDefault
    );
__declspec(dllimport)
UINT
__stdcall
GetProfileIntW(
         LPCWSTR lpAppName,
         LPCWSTR lpKeyName,
         INT nDefault
    );






__declspec(dllimport)
DWORD
__stdcall
GetProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpDefault,
                                           LPSTR lpReturnedString,
             DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpDefault,
                                           LPWSTR lpReturnedString,
             DWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpString
    );






__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionA(
         LPCSTR lpAppName,
                                           LPSTR lpReturnedString,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionW(
         LPCWSTR lpAppName,
                                           LPWSTR lpReturnedString,
         DWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionA(
         LPCSTR lpAppName,
         LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionW(
         LPCWSTR lpAppName,
         LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             INT nDefault,
             LPCSTR lpFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             INT nDefault,
             LPCWSTR lpFileName
    );
# 4138 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpDefault,
                                           LPSTR lpReturnedString,
             DWORD nSize,
             LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpDefault,
                                           LPWSTR lpReturnedString,
             DWORD nSize,
             LPCWSTR lpFileName
    );
# 4194 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpString,
             LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpString,
             LPCWSTR lpFileName
    );






__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionA(
             LPCSTR lpAppName,
                                           LPSTR lpReturnedString,
             DWORD nSize,
             LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionW(
             LPCWSTR lpAppName,
                                           LPWSTR lpReturnedString,
             DWORD nSize,
             LPCWSTR lpFileName
    );
# 4266 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionA(
             LPCSTR lpAppName,
             LPCSTR lpString,
             LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionW(
             LPCWSTR lpAppName,
             LPCWSTR lpString,
             LPCWSTR lpFileName
    );







__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesA(
                                           LPSTR lpszReturnBuffer,
             DWORD nSize,
             LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesW(
                                           LPWSTR lpszReturnBuffer,
             DWORD nSize,
             LPCWSTR lpFileName
    );
# 4333 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructA(
             LPCSTR lpszSection,
             LPCSTR lpszKey,
                                        LPVOID lpStruct,
             UINT uSizeStruct,
             LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructW(
             LPCWSTR lpszSection,
             LPCWSTR lpszKey,
                                        LPVOID lpStruct,
             UINT uSizeStruct,
             LPCWSTR szFile
    );
# 4385 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructA(
             LPCSTR lpszSection,
             LPCSTR lpszKey,
                                      LPVOID lpStruct,
             UINT uSizeStruct,
             LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructW(
             LPCWSTR lpszSection,
             LPCWSTR lpszKey,
                                      LPVOID lpStruct,
             UINT uSizeStruct,
             LPCWSTR szFile
    );






__declspec(dllimport)
DWORD
__stdcall
GetTempPathA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );




__declspec(dllimport)
UINT
__stdcall
GetTempFileNameA(
         LPCSTR lpPathName,
         LPCSTR lpPrefixString,
         UINT uUnique,
                           LPSTR lpTempFileName
    );
# 4462 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)

UINT
__stdcall
GetSystemWow64DirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );
__declspec(dllimport)

UINT
__stdcall
GetSystemWow64DirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );






__declspec(dllimport)
BOOLEAN
__stdcall
Wow64EnableWow64FsRedirection (
         BOOLEAN Wow64FsEnableRedirection
    );




typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_A)( LPSTR lpBuffer, UINT uSize);
typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_W)( LPWSTR lpBuffer, UINT uSize);
# 4562 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryA(
             LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryW(
             LPCWSTR lpPathName
    );






__declspec(dllimport)

DWORD
__stdcall
GetDllDirectoryA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );
__declspec(dllimport)

DWORD
__stdcall
GetDllDirectoryW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );
# 4609 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetSearchPathMode (
         DWORD Flags
    );
# 4648 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExA(
             LPCSTR lpTemplateDirectory,
             LPCSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExW(
             LPCWSTR lpTemplateDirectory,
             LPCWSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
# 4672 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedA(
             LPCSTR lpTemplateDirectory,
             LPCSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedW(
             LPCWSTR lpTemplateDirectory,
             LPCWSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             HANDLE hTransaction
    );






__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedA(
         LPCSTR lpPathName,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedW(
         LPCWSTR lpPathName,
             HANDLE hTransaction
    );






__declspec(dllimport)

DWORD
__stdcall
GetFullPathNameTransactedA(
                    LPCSTR lpFileName,
                    DWORD nBufferLength,
                                                   LPSTR lpBuffer,
                 LPSTR *lpFilePart,
                    HANDLE hTransaction
    );
__declspec(dllimport)

DWORD
__stdcall
GetFullPathNameTransactedW(
                    LPCWSTR lpFileName,
                    DWORD nBufferLength,
                                                   LPWSTR lpBuffer,
                 LPWSTR *lpFilePart,
                    HANDLE hTransaction
    );
# 4752 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceA(
             DWORD dwFlags,
             LPCSTR lpDeviceName,
             LPCSTR lpTargetPath
    );




__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceA(
             LPCSTR lpDeviceName,
                                         LPSTR lpTargetPath,
             DWORD ucchMax
    );
# 4780 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
HANDLE
__stdcall
CreateFileTransactedA(
               LPCSTR lpFileName,
               DWORD dwDesiredAccess,
               DWORD dwShareMode,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               DWORD dwCreationDisposition,
               DWORD dwFlagsAndAttributes,
               HANDLE hTemplateFile,
               HANDLE hTransaction,
               PUSHORT pusMiniVersion,
               PVOID lpExtendedParameter
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileTransactedW(
               LPCWSTR lpFileName,
               DWORD dwDesiredAccess,
               DWORD dwShareMode,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               DWORD dwCreationDisposition,
               DWORD dwFlagsAndAttributes,
               HANDLE hTemplateFile,
               HANDLE hTransaction,
               PUSHORT pusMiniVersion,
               PVOID lpExtendedParameter
    );
# 4821 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
HANDLE
__stdcall
ReOpenFile(
         HANDLE hOriginalFile,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
         DWORD dwFlagsAndAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedA(
             LPCSTR lpFileName,
             DWORD dwFileAttributes,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedW(
             LPCWSTR lpFileName,
             DWORD dwFileAttributes,
             HANDLE hTransaction
    );






__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedA(
          LPCSTR lpFileName,
          GET_FILEEX_INFO_LEVELS fInfoLevelId,
                                                          LPVOID lpFileInformation,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedW(
          LPCWSTR lpFileName,
          GET_FILEEX_INFO_LEVELS fInfoLevelId,
                                                          LPVOID lpFileInformation,
             HANDLE hTransaction
    );






__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedA(
              LPCSTR lpFileName,
              LPDWORD lpFileSizeHigh,
              HANDLE hTransaction
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedW(
              LPCWSTR lpFileName,
              LPDWORD lpFileSizeHigh,
              HANDLE hTransaction
    );






__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedA(
             LPCSTR lpFileName,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedW(
             LPCWSTR lpFileName,
             HANDLE hTransaction
    );
# 4958 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3A(
              LPCSTR lpName,
                                  LPSTR lpOemName,
              DWORD OemNameSize,
              PBOOL pbNameContainsSpaces ,
              PBOOL pbNameLegal
    );
__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3W(
              LPCWSTR lpName,
                                  LPSTR lpOemName,
              DWORD OemNameSize,
              PBOOL pbNameContainsSpaces ,
              PBOOL pbNameLegal
    );
# 4996 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileTransactedA(
               LPCSTR lpFileName,
               FINDEX_INFO_LEVELS fInfoLevelId,
                                                 LPVOID lpFindFileData,
               FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
               DWORD dwAdditionalFlags,
               HANDLE hTransaction
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileTransactedW(
               LPCWSTR lpFileName,
               FINDEX_INFO_LEVELS fInfoLevelId,
                                                 LPVOID lpFindFileData,
               FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
               DWORD dwAdditionalFlags,
               HANDLE hTransaction
    );
# 5037 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CopyFileA(
         LPCSTR lpExistingFileName,
         LPCSTR lpNewFileName,
         BOOL bFailIfExists
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileW(
         LPCWSTR lpExistingFileName,
         LPCWSTR lpNewFileName,
         BOOL bFailIfExists
    );
# 5089 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef
DWORD
(__stdcall *LPPROGRESS_ROUTINE)(
             LARGE_INTEGER TotalFileSize,
             LARGE_INTEGER TotalBytesTransferred,
             LARGE_INTEGER StreamSize,
             LARGE_INTEGER StreamBytesTransferred,
             DWORD dwStreamNumber,
             DWORD dwCallbackReason,
             HANDLE hSourceFile,
             HANDLE hDestinationFile,
             LPVOID lpData
    );

__declspec(dllimport)
BOOL
__stdcall
CopyFileExA(
                LPCSTR lpExistingFileName,
                LPCSTR lpNewFileName,
                LPPROGRESS_ROUTINE lpProgressRoutine,
                LPVOID lpData,

                LPBOOL pbCancel,
                DWORD dwCopyFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileExW(
                LPCWSTR lpExistingFileName,
                LPCWSTR lpNewFileName,
                LPPROGRESS_ROUTINE lpProgressRoutine,
                LPVOID lpData,

                LPBOOL pbCancel,
                DWORD dwCopyFlags
    );
# 5135 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             LPBOOL pbCancel,
             DWORD dwCopyFlags,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             LPBOOL pbCancel,
             DWORD dwCopyFlags,
             HANDLE hTransaction
    );
# 5179 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef enum _COPYFILE2_MESSAGE_TYPE {
     COPYFILE2_CALLBACK_NONE = 0,
     COPYFILE2_CALLBACK_CHUNK_STARTED,
     COPYFILE2_CALLBACK_CHUNK_FINISHED,
     COPYFILE2_CALLBACK_STREAM_STARTED,
     COPYFILE2_CALLBACK_STREAM_FINISHED,
     COPYFILE2_CALLBACK_POLL_CONTINUE,
     COPYFILE2_CALLBACK_ERROR,
     COPYFILE2_CALLBACK_MAX,
} COPYFILE2_MESSAGE_TYPE;

typedef enum _COPYFILE2_MESSAGE_ACTION {
    COPYFILE2_PROGRESS_CONTINUE = 0,
    COPYFILE2_PROGRESS_CANCEL,
    COPYFILE2_PROGRESS_STOP,
    COPYFILE2_PROGRESS_QUIET,
    COPYFILE2_PROGRESS_PAUSE,
} COPYFILE2_MESSAGE_ACTION;

typedef enum _COPYFILE2_COPY_PHASE {
    COPYFILE2_PHASE_NONE = 0,
    COPYFILE2_PHASE_PREPARE_SOURCE,
    COPYFILE2_PHASE_PREPARE_DEST,
    COPYFILE2_PHASE_READ_SOURCE,
    COPYFILE2_PHASE_WRITE_DESTINATION,
    COPYFILE2_PHASE_SERVER_COPY,
    COPYFILE2_PHASE_NAMEGRAFT_COPY,

    COPYFILE2_PHASE_MAX,
} COPYFILE2_COPY_PHASE;



typedef struct COPYFILE2_MESSAGE {

    COPYFILE2_MESSAGE_TYPE Type;
    DWORD dwPadding;

    union {

        struct {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliChunkSize;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliTotalFileSize;
        } ChunkStarted;

        struct {
            DWORD dwStreamNumber;
            DWORD dwFlags;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliChunkSize;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } ChunkFinished;

        struct {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliTotalFileSize;
        } StreamStarted;

        struct {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } StreamFinished;

        struct {
            DWORD dwReserved;
        } PollContinue;

        struct {
            COPYFILE2_COPY_PHASE CopyPhase;
            DWORD dwStreamNumber;
            HRESULT hrFailure;
            DWORD dwReserved;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } Error;

    } Info;

} COPYFILE2_MESSAGE;

typedef
COPYFILE2_MESSAGE_ACTION (__stdcall *PCOPYFILE2_PROGRESS_ROUTINE)(
            const COPYFILE2_MESSAGE *pMessage,
            PVOID pvCallbackContext
);

typedef struct COPYFILE2_EXTENDED_PARAMETERS {
  DWORD dwSize;
  DWORD dwCopyFlags;
  BOOL *pfCancel;
  PCOPYFILE2_PROGRESS_ROUTINE pProgressRoutine;
  PVOID pvCallbackContext;
} COPYFILE2_EXTENDED_PARAMETERS;

__declspec(dllimport)
HRESULT
__stdcall
CopyFile2(
            PCWSTR pwszExistingFileName,
            PCWSTR pwszNewFileName,
            COPYFILE2_EXTENDED_PARAMETERS *pExtendedParameters
);
# 5316 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
MoveFileA(
         LPCSTR lpExistingFileName,
         LPCSTR lpNewFileName
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileW(
         LPCWSTR lpExistingFileName,
         LPCWSTR lpNewFileName
    );
# 5362 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
MoveFileExA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileExW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             DWORD dwFlags
    );
# 5391 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags
    );
# 5419 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags,
             HANDLE hTransaction
    );
# 5472 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
ReplaceFileA(
               LPCSTR lpReplacedFileName,
               LPCSTR lpReplacementFileName,
               LPCSTR lpBackupFileName,
               DWORD dwReplaceFlags,
               LPVOID lpExclude,
               LPVOID lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
ReplaceFileW(
               LPCWSTR lpReplacedFileName,
               LPCWSTR lpReplacementFileName,
               LPCWSTR lpBackupFileName,
               DWORD dwReplaceFlags,
               LPVOID lpExclude,
               LPVOID lpReserved
    );
# 5507 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkA(
               LPCSTR lpFileName,
               LPCSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkW(
               LPCWSTR lpFileName,
               LPCWSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
# 5536 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedA(
               LPCSTR lpFileName,
               LPCSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedW(
               LPCWSTR lpFileName,
               LPCWSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               HANDLE hTransaction
    );
# 5569 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef enum _STREAM_INFO_LEVELS {

    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel

} STREAM_INFO_LEVELS;

typedef struct _WIN32_FIND_STREAM_DATA {

    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[ 260 + 36 ];

} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA;

__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamW(
               LPCWSTR lpFileName,
               STREAM_INFO_LEVELS InfoLevel,
                                                       LPVOID lpFindStreamData,
               DWORD dwFlags
    );


__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamTransactedW (
               LPCWSTR lpFileName,
               STREAM_INFO_LEVELS InfoLevel,
                                                       LPVOID lpFindStreamData,
               DWORD dwFlags,
               HANDLE hTransaction
    );


__declspec(dllimport)
BOOL
__stdcall
FindNextStreamW(
          HANDLE hFindStream,
                                                       LPVOID lpFindStreamData
    );




__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameW (
            LPCWSTR lpFileName,
            DWORD dwFlags,
            LPDWORD StringLength,
                                PWSTR LinkName
    );

__declspec(dllimport)
BOOL
__stdcall
FindNextFileNameW (
            HANDLE hFindStream,
            LPDWORD StringLength,
                                PWSTR LinkName
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameTransactedW (
             LPCWSTR lpFileName,
             DWORD dwFlags,
             LPDWORD StringLength,
                                PWSTR LinkName,
             HANDLE hTransaction
    );



__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeA(
             LPCSTR lpName,
             DWORD dwOpenMode,
             DWORD dwPipeMode,
             DWORD nMaxInstances,
             DWORD nOutBufferSize,
             DWORD nInBufferSize,
             DWORD nDefaultTimeOut,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateA(
              HANDLE hNamedPipe,
              LPDWORD lpState,
              LPDWORD lpCurInstances,
              LPDWORD lpMaxCollectionCount,
              LPDWORD lpCollectDataTimeout,
                                       LPSTR lpUserName,
              DWORD nMaxUserNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateW(
              HANDLE hNamedPipe,
              LPDWORD lpState,
              LPDWORD lpCurInstances,
              LPDWORD lpMaxCollectionCount,
              LPDWORD lpCollectDataTimeout,
                                       LPWSTR lpUserName,
              DWORD nMaxUserNameSize
    );






__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeA(
          LPCSTR lpNamedPipeName,
                                        LPVOID lpInBuffer,
          DWORD nInBufferSize,
                                                            LPVOID lpOutBuffer,
          DWORD nOutBufferSize,
          LPDWORD lpBytesRead,
          DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeW(
          LPCWSTR lpNamedPipeName,
                                        LPVOID lpInBuffer,
          DWORD nInBufferSize,
                                                            LPVOID lpOutBuffer,
          DWORD nOutBufferSize,
          LPDWORD lpBytesRead,
          DWORD nTimeOut
    );






__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeA(
         LPCSTR lpNamedPipeName,
         DWORD nTimeOut
    );







__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameA(
         HANDLE Pipe,
                                                  LPSTR ClientComputerName,
         ULONG ClientComputerNameLength
    );





__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientProcessId(
         HANDLE Pipe,
          PULONG ClientProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientSessionId(
         HANDLE Pipe,
          PULONG ClientSessionId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerProcessId(
         HANDLE Pipe,
          PULONG ServerProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerSessionId(
         HANDLE Pipe,
          PULONG ServerSessionId
    );



__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelA(
             LPCSTR lpRootPathName,
             LPCSTR lpVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelW(
             LPCWSTR lpRootPathName,
             LPCWSTR lpVolumeName
    );






__declspec(dllimport)
void
__stdcall
SetFileApisToOEM( void );

__declspec(dllimport)
void
__stdcall
SetFileApisToANSI( void );

__declspec(dllimport)
BOOL
__stdcall
AreFileApisANSI( void );

__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationA(
              LPCSTR lpRootPathName,
                                      LPSTR lpVolumeNameBuffer,
              DWORD nVolumeNameSize,
              LPDWORD lpVolumeSerialNumber,
              LPDWORD lpMaximumComponentLength,
              LPDWORD lpFileSystemFlags,
                                          LPSTR lpFileSystemNameBuffer,
              DWORD nFileSystemNameSize
    );







__declspec(dllimport)
BOOL
__stdcall
SetFileBandwidthReservation(
          HANDLE hFile,
          DWORD nPeriodMilliseconds,
          DWORD nBytesPerPeriod,
          BOOL bDiscardable,
          LPDWORD lpTransferSize,
          LPDWORD lpNumOutstandingRequests
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileBandwidthReservation(
          HANDLE hFile,
          LPDWORD lpPeriodMilliseconds,
          LPDWORD lpBytesPerPeriod,
          LPBOOL pDiscardable,
          LPDWORD lpTransferSize,
          LPDWORD lpNumOutstandingRequests
    );







__declspec(dllimport)
BOOL
__stdcall
ClearEventLogA (
             HANDLE hEventLog,
             LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
ClearEventLogW (
             HANDLE hEventLog,
             LPCWSTR lpBackupFileName
    );






__declspec(dllimport)
BOOL
__stdcall
BackupEventLogA (
         HANDLE hEventLog,
         LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
BackupEventLogW (
         HANDLE hEventLog,
         LPCWSTR lpBackupFileName
    );






__declspec(dllimport)
BOOL
__stdcall
CloseEventLog (
         HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
DeregisterEventSource (
         HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyChangeEventLog(
         HANDLE hEventLog,
         HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfEventLogRecords (
          HANDLE hEventLog,
          PDWORD NumberOfRecords
    );

__declspec(dllimport)
BOOL
__stdcall
GetOldestEventLogRecord (
          HANDLE hEventLog,
          PDWORD OldestRecord
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogA (
             LPCSTR lpUNCServerName,
             LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpSourceName
    );






__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceA (
             LPCSTR lpUNCServerName,
             LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpSourceName
    );






__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogA (
             LPCSTR lpUNCServerName,
             LPCSTR lpFileName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpFileName
    );






__declspec(dllimport)
BOOL
__stdcall
ReadEventLogA (
          HANDLE hEventLog,
          DWORD dwReadFlags,
          DWORD dwRecordOffset,
                                                              LPVOID lpBuffer,
          DWORD nNumberOfBytesToRead,
          DWORD *pnBytesRead,
          DWORD *pnMinNumberOfBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
ReadEventLogW (
          HANDLE hEventLog,
          DWORD dwReadFlags,
          DWORD dwRecordOffset,
                                                              LPVOID lpBuffer,
          DWORD nNumberOfBytesToRead,
          DWORD *pnBytesRead,
          DWORD *pnMinNumberOfBytesNeeded
    );






__declspec(dllimport)
BOOL
__stdcall
ReportEventA (
             HANDLE hEventLog,
             WORD wType,
             WORD wCategory,
             DWORD dwEventID,
             PSID lpUserSid,
             WORD wNumStrings,
             DWORD dwDataSize,
                                LPCSTR *lpStrings,
                                     LPVOID lpRawData
    );
__declspec(dllimport)
BOOL
__stdcall
ReportEventW (
             HANDLE hEventLog,
             WORD wType,
             WORD wCategory,
             DWORD dwEventID,
             PSID lpUserSid,
             WORD wNumStrings,
             DWORD dwDataSize,
                                LPCWSTR *lpStrings,
                                     LPVOID lpRawData
    );
# 6077 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef struct _EVENTLOG_FULL_INFORMATION
{
    DWORD dwFull;
}
EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetEventLogInformation (
          HANDLE hEventLog,
          DWORD dwInfoLevel,
                                                      LPVOID lpBuffer,
          DWORD cbBufSize,
          LPDWORD pcbBytesNeeded
    );
# 6101 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef ULONG OPERATION_ID;





typedef struct _OPERATION_START_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_START_PARAMETERS, *POPERATION_START_PARAMETERS;







typedef struct _OPERATION_END_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_END_PARAMETERS, *POPERATION_END_PARAMETERS;



__declspec(dllimport)
BOOL
__stdcall
OperationStart (
         OPERATION_START_PARAMETERS* OperationStartParams
    );

__declspec(dllimport)
BOOL
__stdcall
OperationEnd (
         OPERATION_END_PARAMETERS* OperationEndParams
    );
# 6149 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPSTR ObjectTypeName,
             LPSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             DWORD DesiredAccess,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPBOOL AccessStatus,
             LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPBOOL AccessStatus,
             LPBOOL pfGenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
                                             LPDWORD GrantedAccess,
                                             LPDWORD AccessStatusList,
             LPBOOL pfGenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             HANDLE ClientToken,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
                                             LPDWORD GrantedAccess,
                                             LPDWORD AccessStatusList,
             LPBOOL pfGenerateOnClose
    );





__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPSTR ObjectTypeName,
             LPSTR ObjectName,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             HANDLE ClientToken,
             DWORD DesiredAccess,
             DWORD GrantedAccess,
             PPRIVILEGE_SET Privileges,
             BOOL ObjectCreation,
             BOOL AccessGranted,
             LPBOOL GenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );




__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmA (
         LPCSTR SubsystemName,
         LPCSTR ServiceName,
         HANDLE ClientToken,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );





__declspec(dllimport)
BOOL
__stdcall
AddConditionalAce (
            PACL pAcl,
            DWORD dwAceRevision,
            DWORD AceFlags,
            UCHAR AceType,
            DWORD AccessMask,
            PSID pSid,
                           PWCHAR ConditionStr,
          DWORD *ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityA (
         LPCSTR lpFileName,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );




__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityA (
          LPCSTR lpFileName,
          SECURITY_INFORMATION RequestedInformation,
                                                         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          DWORD nLength,
          LPDWORD lpnLengthNeeded
    );





__declspec(dllimport)
BOOL
__stdcall
ReadDirectoryChangesW(
                HANDLE hDirectory,
                                                           LPVOID lpBuffer,
                DWORD nBufferLength,
                BOOL bWatchSubtree,
                DWORD dwNotifyFilter,
                LPDWORD lpBytesReturned,
                LPOVERLAPPED lpOverlapped,
                LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );




__declspec(dllimport)

LPVOID
__stdcall
MapViewOfFileExNuma(
             HANDLE hFileMappingObject,
             DWORD dwDesiredAccess,
             DWORD dwFileOffsetHigh,
             DWORD dwFileOffsetLow,
             SIZE_T dwNumberOfBytesToMap,
             LPVOID lpBaseAddress,
             DWORD nndPreferred
    );



__declspec(dllimport)
BOOL
__stdcall
IsBadReadPtr(
             const void *lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadWritePtr(
             LPVOID lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeReadPtr(
             const void *lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeWritePtr(
             LPVOID lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadCodePtr(
             FARPROC lpfn
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrA(
             LPCSTR lpsz,
             UINT_PTR ucchMax
    );
__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrW(
             LPCWSTR lpsz,
             UINT_PTR ucchMax
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidA(
             LPCSTR lpSystemName,
         PSID Sid,
                                                LPSTR Name,
             LPDWORD cchName,
                                                                                LPSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidW(
             LPCWSTR lpSystemName,
         PSID Sid,
                                                LPWSTR Name,
             LPDWORD cchName,
                                                                                LPWSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameA(
             LPCSTR lpSystemName,
             LPCSTR lpAccountName,
                                              PSID Sid,
             LPDWORD cbSid,
                                                                                LPSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameW(
             LPCWSTR lpSystemName,
             LPCWSTR lpAccountName,
                                              PSID Sid,
             LPDWORD cbSid,
                                                                                LPWSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );
# 6519 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameLocalA(
             LPCSTR lpAccountName,
                                              PSID Sid,
             LPDWORD cbSid,
                                                                                LPSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameLocalW(
             LPCWSTR lpAccountName,
                                              PSID Sid,
             LPDWORD cbSid,
                                                                                LPWSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidLocalA(
         PSID Sid,
                                                LPSTR Name,
             LPDWORD cchName,
                                                                                LPSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidLocalW(
         PSID Sid,
                                                LPWSTR Name,
             LPDWORD cchName,
                                                                                LPWSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );
# 6599 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueA(
             LPCSTR lpSystemName,
             LPCSTR lpName,
             PLUID lpLuid
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueW(
             LPCWSTR lpSystemName,
             LPCWSTR lpName,
             PLUID lpLuid
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeNameA(
             LPCSTR lpSystemName,
             PLUID lpLuid,
                                                LPSTR lpName,
             LPDWORD cchName
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeNameW(
             LPCWSTR lpSystemName,
             PLUID lpLuid,
                                                LPWSTR lpName,
             LPDWORD cchName
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeDisplayNameA(
             LPCSTR lpSystemName,
             LPCSTR lpName,
                                                              LPSTR lpDisplayName,
             LPDWORD cchDisplayName,
             LPDWORD lpLanguageId
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeDisplayNameW(
             LPCWSTR lpSystemName,
             LPCWSTR lpName,
                                                              LPWSTR lpDisplayName,
             LPDWORD cchDisplayName,
             LPDWORD lpLanguageId
    );






__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBA(
          LPCSTR lpDef,
          LPDCB lpDCB
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBW(
          LPCWSTR lpDef,
          LPDCB lpDCB
    );






__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
          LPCSTR lpDef,
          LPDCB lpDCB,
          LPCOMMTIMEOUTS lpCommTimeouts
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
          LPCWSTR lpDef,
          LPDCB lpDCB,
          LPCOMMTIMEOUTS lpCommTimeouts
    );






__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogA(
             LPCSTR lpszName,
             HWND hWnd,
             LPCOMMCONFIG lpCC
    );
__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogW(
             LPCWSTR lpszName,
             HWND hWnd,
             LPCOMMCONFIG lpCC
    );






__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigA(
            LPCSTR lpszName,
                                                LPCOMMCONFIG lpCC,
            LPDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigW(
            LPCWSTR lpszName,
                                                LPCOMMCONFIG lpCC,
            LPDWORD lpdwSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigA(
         LPCSTR lpszName,
                             LPCOMMCONFIG lpCC,
         DWORD dwSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigW(
         LPCWSTR lpszName,
                             LPCOMMCONFIG lpCC,
         DWORD dwSize
    );
# 6785 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)

BOOL
__stdcall
GetComputerNameA (
                                            LPSTR lpBuffer,
            LPDWORD nSize
    );
__declspec(dllimport)

BOOL
__stdcall
GetComputerNameW (
                                            LPWSTR lpBuffer,
            LPDWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetComputerNameA (
         LPCSTR lpComputerName
    );
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameW (
         LPCWSTR lpComputerName
    );
# 6828 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExA (
         COMPUTER_NAME_FORMAT NameType,
         LPCSTR lpBuffer
    );





__declspec(dllimport)

BOOL
__stdcall
DnsHostnameToComputerNameA (
            LPCSTR Hostname,
                                            LPSTR ComputerName,
            LPDWORD nSize
    );
__declspec(dllimport)

BOOL
__stdcall
DnsHostnameToComputerNameW (
            LPCWSTR Hostname,
                                            LPWSTR ComputerName,
            LPDWORD nSize
    );
# 6866 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetUserNameA (
                                                LPSTR lpBuffer,
            LPDWORD pcbBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetUserNameW (
                                                LPWSTR lpBuffer,
            LPDWORD pcbBuffer
    );
# 6914 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
LogonUserA (
                LPCSTR lpszUsername,
                LPCSTR lpszDomain,
                LPCSTR lpszPassword,
                DWORD dwLogonType,
                DWORD dwLogonProvider,
             PHANDLE phToken
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserW (
                LPCWSTR lpszUsername,
                LPCWSTR lpszDomain,
                LPCWSTR lpszPassword,
                DWORD dwLogonType,
                DWORD dwLogonProvider,
             PHANDLE phToken
    );






__declspec(dllimport)
BOOL
__stdcall
LogonUserExA (
                    LPCSTR lpszUsername,
                    LPCSTR lpszDomain,
                    LPCSTR lpszPassword,
                    DWORD dwLogonType,
                    DWORD dwLogonProvider,
                 PHANDLE phToken,
                 PSID *ppLogonSid,
                                                          PVOID *ppProfileBuffer,
                    LPDWORD pdwProfileLength,
                    PQUOTA_LIMITS pQuotaLimits
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserExW (
                    LPCWSTR lpszUsername,
                    LPCWSTR lpszDomain,
                    LPCWSTR lpszPassword,
                    DWORD dwLogonType,
                    DWORD dwLogonProvider,
                 PHANDLE phToken,
                 PSID *ppLogonSid,
                                                          PVOID *ppProfileBuffer,
                    LPDWORD pdwProfileLength,
                    PQUOTA_LIMITS pQuotaLimits
    );
# 6984 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserA (
                HANDLE hToken,
                LPCSTR lpApplicationName,
                LPSTR lpCommandLine,
                LPSECURITY_ATTRIBUTES lpProcessAttributes,
                LPSECURITY_ATTRIBUTES lpThreadAttributes,
                BOOL bInheritHandles,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCSTR lpCurrentDirectory,
                LPSTARTUPINFOA lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
    );
# 7014 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
                      BOOL
__stdcall
CreateProcessWithLogonW(
                LPCWSTR lpUsername,
                LPCWSTR lpDomain,
                LPCWSTR lpPassword,
                DWORD dwLogonFlags,
                LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCWSTR lpCurrentDirectory,
                LPSTARTUPINFOW lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
      );

__declspec(dllimport)
                      BOOL
__stdcall
CreateProcessWithTokenW(
                HANDLE hToken,
                DWORD dwLogonFlags,
                LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCWSTR lpCurrentDirectory,
                LPSTARTUPINFOW lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
      );



__declspec(dllimport)
BOOL
__stdcall
IsTokenUntrusted(
         HANDLE TokenHandle
    );







__declspec(dllimport)
BOOL
__stdcall
RegisterWaitForSingleObject(
             PHANDLE phNewWaitObject,
                HANDLE hObject,
                WAITORTIMERCALLBACK Callback,
                PVOID Context,
                ULONG dwMilliseconds,
                ULONG dwFlags
    );

__declspec(dllimport)

BOOL
__stdcall
UnregisterWait(
         HANDLE WaitHandle
    );

__declspec(dllimport)
BOOL
__stdcall
BindIoCompletionCallback (
         HANDLE FileHandle,
         LPOVERLAPPED_COMPLETION_ROUTINE Function,
         ULONG Flags
    );

__declspec(dllimport)
HANDLE
__stdcall
SetTimerQueueTimer(
             HANDLE TimerQueue,
             WAITORTIMERCALLBACK Callback,
             PVOID Parameter,
             DWORD DueTime,
             DWORD Period,
             BOOL PreferIo
    );

__declspec(dllimport)

BOOL
__stdcall
CancelTimerQueueTimer(
             HANDLE TimerQueue,
             HANDLE Timer
    );

__declspec(dllimport)

BOOL
__stdcall
DeleteTimerQueue(
         HANDLE TimerQueue
    );





__forceinline
void
InitializeThreadpoolEnvironment(
          PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpInitializeCallbackEnviron(pcbe);
}

__forceinline
void
SetThreadpoolCallbackPool(
            PTP_CALLBACK_ENVIRON pcbe,
            PTP_POOL ptpp
    )
{
    TpSetCallbackThreadpool(pcbe, ptpp);
}

__forceinline
void
SetThreadpoolCallbackCleanupGroup(
             PTP_CALLBACK_ENVIRON pcbe,
             PTP_CLEANUP_GROUP ptpcg,
             PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng
    )
{
    TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng);
}

__forceinline
void
SetThreadpoolCallbackRunsLong(
            PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackLongFunction(pcbe);
}

__forceinline
void
SetThreadpoolCallbackLibrary(
            PTP_CALLBACK_ENVIRON pcbe,
            PVOID mod
    )
{
    TpSetCallbackRaceWithDll(pcbe, mod);
}



__forceinline
void
SetThreadpoolCallbackPriority(
            PTP_CALLBACK_ENVIRON pcbe,
            TP_CALLBACK_PRIORITY Priority
    )
{
    TpSetCallbackPriority(pcbe, Priority);
}



__forceinline
void
SetThreadpoolCallbackPersistent(
            PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackPersistent(pcbe);
}

__forceinline
void
DestroyThreadpoolEnvironment(
            PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpDestroyCallbackEnviron(pcbe);
}







__declspec(dllimport)

HANDLE
__stdcall
CreatePrivateNamespaceA(
             LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
             LPVOID lpBoundaryDescriptor,
             LPCSTR lpAliasPrefix
    );







__declspec(dllimport)

HANDLE
__stdcall
OpenPrivateNamespaceA(
             LPVOID lpBoundaryDescriptor,
             LPCSTR lpAliasPrefix
    );
# 7246 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateBoundaryDescriptorA(
         LPCSTR Name,
         ULONG Flags
    );
# 7262 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
AddIntegrityLabelToBoundaryDescriptor(
            HANDLE * BoundaryDescriptor,
         PSID IntegrityLabel
    );
# 7290 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef struct tagHW_PROFILE_INFOA {
    DWORD dwDockInfo;
    CHAR szHwProfileGuid[39];
    CHAR szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[39];
    WCHAR szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;

typedef HW_PROFILE_INFOW HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOW LPHW_PROFILE_INFO;






__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileA (
          LPHW_PROFILE_INFOA lpHwProfileInfo
    );
__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileW (
          LPHW_PROFILE_INFOW lpHwProfileInfo
    );







__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoA(
            LPOSVERSIONINFOEXA lpVersionInformation,
            DWORD dwTypeMask,
            DWORDLONG dwlConditionMask
    );
__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoW(
            LPOSVERSIONINFOEXW lpVersionInformation,
            DWORD dwTypeMask,
            DWORDLONG dwlConditionMask
    );
# 7358 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\winerror.h" 1
# 26297 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\winerror.h"
__forceinline HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (7 << 16) | 0x80000000);}
# 7358 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\timezoneapi.h" 1
# 34 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\timezoneapi.h"
extern "C" {
# 47 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\timezoneapi.h"
typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[ 128 ];
    BOOLEAN DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;

__declspec(dllimport)

BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
             const TIME_ZONE_INFORMATION * lpTimeZoneInformation,
         const SYSTEMTIME * lpUniversalTime,
          LPSYSTEMTIME lpLocalTime
    );


__declspec(dllimport)

BOOL
__stdcall
TzSpecificLocalTimeToSystemTime(
             const TIME_ZONE_INFORMATION * lpTimeZoneInformation,
         const SYSTEMTIME * lpLocalTime,
          LPSYSTEMTIME lpUniversalTime
    );


__declspec(dllimport)

BOOL
__stdcall
FileTimeToSystemTime(
         const FILETIME * lpFileTime,
          LPSYSTEMTIME lpSystemTime
    );


__declspec(dllimport)

BOOL
__stdcall
SystemTimeToFileTime(
         const SYSTEMTIME * lpSystemTime,
          LPFILETIME lpFileTime
    );


__declspec(dllimport)

DWORD
__stdcall
GetTimeZoneInformation(
          LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );
# 127 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\timezoneapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetTimeZoneInformation(
         const TIME_ZONE_INFORMATION * lpTimeZoneInformation
    );





__declspec(dllimport)
BOOL
__stdcall
SetDynamicTimeZoneInformation(
         const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation
    );
# 158 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\timezoneapi.h"
__declspec(dllimport)

DWORD
__stdcall
GetDynamicTimeZoneInformation(
          PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
    );
# 173 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\timezoneapi.h"
BOOL
__stdcall
GetTimeZoneInformationForYear(
         USHORT wYear,
             PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,
          LPTIME_ZONE_INFORMATION ptzi
    );
# 189 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\timezoneapi.h"
__declspec(dllimport)

DWORD
__stdcall
EnumDynamicTimeZoneInformation(
         const DWORD dwIndex,
          PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation
    );


__declspec(dllimport)

DWORD
__stdcall
GetDynamicTimeZoneInformationEffectiveYears(
         const PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation,
          LPDWORD FirstYear,
          LPDWORD LastYear
    );


__declspec(dllimport)

BOOL
__stdcall
SystemTimeToTzSpecificLocalTimeEx(
             const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation,
         const SYSTEMTIME * lpUniversalTime,
          LPSYSTEMTIME lpLocalTime
    );


__declspec(dllimport)

BOOL
__stdcall
TzSpecificLocalTimeToSystemTimeEx(
             const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation,
         const SYSTEMTIME * lpLocalTime,
          LPSYSTEMTIME lpUniversalTime
    );
# 240 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\timezoneapi.h"
}
# 7359 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h" 2
# 7392 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
} SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

__declspec(dllimport)
BOOL
__stdcall
GetSystemPowerStatus(
          LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemPowerState(
         BOOL fSuspend,
         BOOL fForce
    );
# 7423 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
MapUserPhysicalPagesScatter(
                              PVOID *VirtualAddresses,
         ULONG_PTR NumberOfPages,
                                  PULONG_PTR PageArray
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateJobObjectA(
             LPSECURITY_ATTRIBUTES lpJobAttributes,
             LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateJobObjectW(
             LPSECURITY_ATTRIBUTES lpJobAttributes,
             LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenJobObjectA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
OpenJobObjectW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );






__declspec(dllimport)
BOOL
__stdcall
AssignProcessToJobObject(
         HANDLE hJob,
         HANDLE hProcess
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateJobObject(
         HANDLE hJob,
         UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
QueryInformationJobObject(
              HANDLE hJob,
              JOBOBJECTINFOCLASS JobObjectInformationClass,
                                                                         LPVOID lpJobObjectInformation,
              DWORD cbJobObjectInformationLength,
              LPDWORD lpReturnLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetInformationJobObject(
         HANDLE hJob,
         JOBOBJECTINFOCLASS JobObjectInformationClass,
                                                   LPVOID lpJobObjectInformation,
         DWORD cbJobObjectInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
CreateJobSet (
         ULONG NumJob,
                       PJOB_SET_ARRAY UserJobSet,
         ULONG Flags);

__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeA(
                                  LPSTR lpszVolumeName,
         DWORD cchBufferLength
    );




__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeA(
            HANDLE hFindVolume,
                                  LPSTR lpszVolumeName,
            DWORD cchBufferLength
    );




__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeMountPointA(
         LPCSTR lpszRootPathName,
                                  LPSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeMountPointW(
         LPCWSTR lpszRootPathName,
                                  LPWSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointA(
         HANDLE hFindVolumeMountPoint,
                                  LPSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointW(
         HANDLE hFindVolumeMountPoint,
                                  LPWSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindVolumeMountPointClose(
         HANDLE hFindVolumeMountPoint
    );

__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint,
         LPCSTR lpszVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint,
         LPCWSTR lpszVolumeName
    );






__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint
    );




__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint,
                                  LPSTR lpszVolumeName,
         DWORD cchBufferLength
    );




__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameA(
         LPCSTR lpszFileName,
                                  LPSTR lpszVolumePathName,
         DWORD cchBufferLength
    );
# 7655 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameA(
          LPCSTR lpszVolumeName,
                                                                                          LPCH lpszVolumePathNames,
          DWORD cchBufferLength,
          PDWORD lpcchReturnLength
    );
# 7682 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef struct tagACTCTXA {
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXA, *PACTCTXA;
typedef struct tagACTCTXW {
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXW, *PACTCTXW;

typedef ACTCTXW ACTCTX;
typedef PACTCTXW PACTCTX;





typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;

typedef PCACTCTXW PCACTCTX;






__declspec(dllimport)
HANDLE
__stdcall
CreateActCtxA(
         PCACTCTXA pActCtx
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateActCtxW(
         PCACTCTXW pActCtx
    );






__declspec(dllimport)
void
__stdcall
AddRefActCtx(
            HANDLE hActCtx
    );


__declspec(dllimport)
void
__stdcall
ReleaseActCtx(
            HANDLE hActCtx
    );

__declspec(dllimport)
BOOL
__stdcall
ZombifyActCtx(
            HANDLE hActCtx
    );



__declspec(dllimport)
BOOL
__stdcall
ActivateActCtx(
                HANDLE hActCtx,
            ULONG_PTR *lpCookie
    );





__declspec(dllimport)
BOOL
__stdcall
DeactivateActCtx(
         DWORD dwFlags,
         ULONG_PTR ulCookie
    );

__declspec(dllimport)
BOOL
__stdcall
GetCurrentActCtx(
             HANDLE *lphActCtx);


typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 * PCACTCTX_SECTION_KEYED_DATA_2600;

typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;

    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA * PCACTCTX_SECTION_KEYED_DATA;
# 7838 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringA(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               LPCSTR lpStringToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );

__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringW(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               LPCWSTR lpStringToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );






__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionGuid(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               const GUID *lpGuidToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );





typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE hActCtx;
    DWORD dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;
# 7928 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
QueryActCtxW(
              DWORD dwFlags,
              HANDLE hActCtx,
              PVOID pvSubInstance,
              ULONG ulInfoClass,
                                                               PVOID pvBuffer,
              SIZE_T cbBuffer,
              SIZE_T *pcbWrittenOrRequired
    );

typedef BOOL (__stdcall * PQUERYACTCTXW_FUNC)(
              DWORD dwFlags,
              HANDLE hActCtx,
              PVOID pvSubInstance,
              ULONG ulInfoClass,
                                                               PVOID pvBuffer,
              SIZE_T cbBuffer,
              SIZE_T *pcbWrittenOrRequired
    );






__declspec(dllimport)
DWORD
__stdcall
WTSGetActiveConsoleSessionId(
    void
    );





__declspec(dllimport)
WORD
__stdcall
GetActiveProcessorGroupCount(
    void
    );

__declspec(dllimport)
WORD
__stdcall
GetMaximumProcessorGroupCount(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetActiveProcessorCount(
         WORD GroupNumber
    );

__declspec(dllimport)
DWORD
__stdcall
GetMaximumProcessorCount(
         WORD GroupNumber
    );







__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNode(
          UCHAR Processor,
          PUCHAR NodeNumber
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeNumberFromHandle(
          HANDLE hFile,
          PUSHORT NodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNodeEx(
          PPROCESSOR_NUMBER Processor,
          PUSHORT NodeNumber
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMask(
          UCHAR Node,
          PULONGLONG ProcessorMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNode(
          UCHAR Node,
          PULONGLONG AvailableBytes
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNodeEx(
          USHORT Node,
          PULONGLONG AvailableBytes
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNode(
          ULONG ProximityId,
          PUCHAR NodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNodeEx(
          ULONG ProximityId,
          PUSHORT NodeNumber
    );






typedef DWORD (__stdcall *APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);
# 8120 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRecoveryCallback(
          APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,
              PVOID pvParameter,
         DWORD dwPingInterval,
         DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRecoveryCallback(void);

__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRestart(
             PCWSTR pwzCommandline,
         DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRestart(void);

__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRecoveryCallback(
          HANDLE hProcess,
          APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback,
                                  PVOID* ppvParameter,
              PDWORD pdwPingInterval,
              PDWORD pdwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRestartSettings(
         HANDLE hProcess,
                                PWSTR pwzCommandline,
            PDWORD pcchSize,
              PDWORD pdwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
ApplicationRecoveryInProgress(
          PBOOL pbCancelled
    );

__declspec(dllimport)
void
__stdcall
ApplicationRecoveryFinished(
         BOOL bSuccess
    );
# 8193 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef struct _FILE_BASIC_INFO {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    DWORD FileAttributes;
} FILE_BASIC_INFO, *PFILE_BASIC_INFO;

typedef struct _FILE_STANDARD_INFO {
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO;

typedef struct _FILE_NAME_INFO {
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFO, *PFILE_NAME_INFO;

typedef struct _FILE_RENAME_INFO {
    BOOLEAN ReplaceIfExists;
    HANDLE RootDirectory;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFO, *PFILE_RENAME_INFO;

typedef struct _FILE_ALLOCATION_INFO {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO;

typedef struct _FILE_END_OF_FILE_INFO {
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO;

typedef struct _FILE_STREAM_INFO {
    DWORD NextEntryOffset;
    DWORD StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFO, *PFILE_STREAM_INFO;

typedef struct _FILE_COMPRESSION_INFO {
    LARGE_INTEGER CompressedFileSize;
    WORD CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO;

typedef struct _FILE_ATTRIBUTE_TAG_INFO {
    DWORD FileAttributes;
    DWORD ReparseTag;
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO;

typedef struct _FILE_DISPOSITION_INFO {
    BOOLEAN DeleteFileW;
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO;

typedef struct _FILE_ID_BOTH_DIR_INFO {
    DWORD NextEntryOffset;
    DWORD FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    DWORD FileAttributes;
    DWORD FileNameLength;
    DWORD EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO;

typedef struct _FILE_FULL_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    WCHAR FileName[1];
} FILE_FULL_DIR_INFO, *PFILE_FULL_DIR_INFO;

typedef enum _PRIORITY_HINT {
      IoPriorityHintVeryLow = 0,
      IoPriorityHintLow,
      IoPriorityHintNormal,
      MaximumIoPriorityHintType
} PRIORITY_HINT;

typedef struct _FILE_IO_PRIORITY_HINT_INFO {
    PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFO, *PFILE_IO_PRIORITY_HINT_INFO;





typedef struct _FILE_ALIGNMENT_INFO {
    ULONG AlignmentRequirement;
} FILE_ALIGNMENT_INFO, *PFILE_ALIGNMENT_INFO;
# 8326 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef struct _FILE_STORAGE_INFO {
    ULONG LogicalBytesPerSector;
    ULONG PhysicalBytesPerSectorForAtomicity;
    ULONG PhysicalBytesPerSectorForPerformance;
    ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
    ULONG Flags;
    ULONG ByteOffsetForSectorAlignment;
    ULONG ByteOffsetForPartitionAlignment;
} FILE_STORAGE_INFO, *PFILE_STORAGE_INFO;




typedef struct _FILE_ID_INFO {
    ULONGLONG VolumeSerialNumber;
    FILE_ID_128 FileId;
} FILE_ID_INFO, *PFILE_ID_INFO;




typedef struct _FILE_ID_EXTD_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    FILE_ID_128 FileId;
    WCHAR FileName[1];
} FILE_ID_EXTD_DIR_INFO, *PFILE_ID_EXTD_DIR_INFO;
# 8400 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
typedef struct _FILE_REMOTE_PROTOCOL_INFO
{

    USHORT StructureVersion;
    USHORT StructureSize;

    ULONG Protocol;


    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;

    USHORT Reserved;


    ULONG Flags;

    struct {
        ULONG Reserved[8];
    } GenericReserved;
# 8429 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
    union {

        struct {

            struct {
                ULONG Capabilities;
            } Server;

            struct {
                ULONG Capabilities;
                ULONG CachingFlags;
            } Share;

        } Smb2;

        ULONG Reserved[16];

    } ProtocolSpecific;



} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandleEx(
          HANDLE hFile,
          FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
                                     LPVOID lpFileInformation,
          DWORD dwBufferSize
);







typedef enum _FILE_ID_TYPE {
      FileIdType,
      ObjectIdType,
      ExtendedFileIdType,
      MaximumFileIdType
} FILE_ID_TYPE, *PFILE_ID_TYPE;

typedef struct FILE_ID_DESCRIPTOR {
    DWORD dwSize;
    FILE_ID_TYPE Type;
    union {
        LARGE_INTEGER FileId;
        GUID ObjectId;

        FILE_ID_128 ExtendedFileId;

    } ;
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;

__declspec(dllimport)
HANDLE
__stdcall
OpenFileById (
             HANDLE hVolumeHint,
             LPFILE_ID_DESCRIPTOR lpFileId,
             DWORD dwDesiredAccess,
             DWORD dwShareMode,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             DWORD dwFlagsAndAttributes
    );
# 8517 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkA (
         LPCSTR lpSymlinkFileName,
         LPCSTR lpTargetFileName,
         DWORD dwFlags
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkW (
         LPCWSTR lpSymlinkFileName,
         LPCWSTR lpTargetFileName,
         DWORD dwFlags
    );






__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedA (
             LPCSTR lpSymlinkFileName,
             LPCSTR lpTargetFileName,
             DWORD dwFlags,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedW (
             LPCWSTR lpSymlinkFileName,
             LPCWSTR lpTargetFileName,
             DWORD dwFlags,
             HANDLE hTransaction
    );
# 8568 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
QueryActCtxSettingsW(
                  DWORD dwFlags,
                  HANDLE hActCtx,
                  PCWSTR settingsNameSpace,
                  PCWSTR settingName,
                                                               PWSTR pvBuffer,
              SIZE_T dwBuffer,
              SIZE_T *pdwWrittenOrRequired
    );





__declspec(dllimport)
BOOL
__stdcall
ReplacePartitionUnit (
         PWSTR TargetPartition,
         PWSTR SparePartition,
         ULONG Flags
    );






__declspec(dllimport)
BOOL
__stdcall
AddSecureMemoryCacheCallback(
                    PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveSecureMemoryCacheCallback(
                    PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );
# 8624 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CopyContext(
            PCONTEXT Destination,
         DWORD ContextFlags,
         PCONTEXT Source
    );
# 8640 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
InitializeContext(
                                           PVOID Buffer,
         DWORD ContextFlags,
          PCONTEXT* Context,
            PDWORD ContextLength
    );
# 8657 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
DWORD64
__stdcall
GetEnabledXStateFeatures(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetXStateFeaturesMask(
         PCONTEXT Context,
          PDWORD64 FeatureMask
    );


__declspec(dllimport)
PVOID
__stdcall
LocateXStateFeature(
         PCONTEXT Context,
         DWORD FeatureId,
              PDWORD Length
    );
# 8690 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetXStateFeaturesMask(
            PCONTEXT Context,
         DWORD64 FeatureMask
    );
# 8710 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
EnableThreadProfiling(
         HANDLE ThreadHandle,
         DWORD Flags,
         DWORD64 HardwareCounters,
          HANDLE *PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
DisableThreadProfiling(
         HANDLE PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
QueryThreadProfiling(
         HANDLE ThreadHandle,
          PBOOLEAN Enabled
    );

__declspec(dllimport)
DWORD
__stdcall
ReadThreadProfilingData(
         HANDLE PerformanceDataHandle,
         DWORD Flags,
          PPERFORMANCE_DATA PerformanceData
    );
# 8758 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
}




#pragma warning(pop)
# 8820 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winbase.h"
extern "C++" {

__forceinline
unsigned
_InterlockedIncrement(
                                  unsigned volatile *Addend
    )
{
    return (unsigned) _InterlockedIncrement((volatile long*) Addend);
}

__forceinline
unsigned long
_InterlockedIncrement(
                                  unsigned long volatile *Addend
    )
{
    return (unsigned long) _InterlockedIncrement((volatile long*) Addend);
}



__forceinline
unsigned __int64
_InterlockedIncrement(
                                  unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) _InterlockedIncrement64((volatile long long*) Addend);
}



__forceinline
unsigned
_InterlockedDecrement(
                                  unsigned volatile *Addend
    )
{
    return (unsigned long) _InterlockedDecrement((volatile long*) Addend);
}

__forceinline
unsigned long
_InterlockedDecrement(
                                  unsigned long volatile *Addend
    )
{
    return (unsigned long) _InterlockedDecrement((volatile long*) Addend);
}



__forceinline
unsigned __int64
_InterlockedDecrement(
                                  unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) _InterlockedDecrement64((volatile long long*) Addend);
}





__forceinline
unsigned
_InterlockedExchange(
                                  unsigned volatile *Target,
         unsigned Value
    )
{
    return (unsigned) _InterlockedExchange((volatile long*) Target, (long) Value);
}

__forceinline
unsigned long
_InterlockedExchange(
                                  unsigned long volatile *Target,
         unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchange((volatile long*) Target, (long) Value);
}



__forceinline
unsigned __int64
_InterlockedExchange(
                                  unsigned __int64 volatile *Target,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedExchange64((volatile long long*) Target, (long long) Value);
}



__forceinline
unsigned
_InterlockedExchangeAdd(
                                  unsigned volatile *Addend,
         unsigned Value
    )
{
    return (unsigned) _InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned
InterlockedExchangeSubtract(
                                  unsigned volatile *Addend,
         unsigned Value
    )
{
    return (unsigned) _InterlockedExchangeAdd((volatile long*) Addend, - (long) Value);
}

__forceinline
unsigned long
_InterlockedExchangeAdd(
                                  unsigned long volatile *Addend,
         unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned long
InterlockedExchangeSubtract(
                                  unsigned long volatile *Addend,
         unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchangeAdd((volatile long*) Addend, - (long) Value);
}



__forceinline
unsigned __int64
_InterlockedExchangeAdd(
                                  unsigned __int64 volatile *Addend,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedExchangeAdd64((volatile long long*) Addend, (long long) Value);
}

__forceinline
unsigned __int64
InterlockedExchangeSubtract(
                                  unsigned __int64 volatile *Addend,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedExchangeAdd64((volatile long long*) Addend, - (long long) Value);
}



__forceinline
unsigned
_InterlockedCompareExchange(
                                  unsigned volatile *Destination,
         unsigned Exchange,
         unsigned Comperand
    )
{
    return (unsigned) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}

__forceinline
unsigned long
_InterlockedCompareExchange(
                                  unsigned long volatile *Destination,
         unsigned long Exchange,
         unsigned long Comperand
    )
{
    return (unsigned long) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}



__forceinline
unsigned __int64
_InterlockedCompareExchange(
                                  unsigned __int64 volatile *Destination,
         unsigned __int64 Exchange,
         unsigned __int64 Comperand
    )
{
    return (unsigned __int64) _InterlockedCompareExchange64((volatile long long*) Destination, (long long) Exchange, (long long) Comperand);
}

__forceinline
unsigned __int64
_InterlockedAnd(
                                  unsigned __int64 volatile *Destination,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedAnd64((volatile long long*) Destination, (long long) Value);
}

__forceinline
unsigned __int64
_InterlockedOr(
                                  unsigned __int64 volatile *Destination,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedOr64((volatile long long*) Destination, (long long) Value);
}

__forceinline
unsigned __int64
_InterlockedXor(
                                  unsigned __int64 volatile *Destination,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedXor64((volatile long long*) Destination, (long long) Value);
}





}
# 165 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h" 1
# 18 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
#pragma warning(push)
#pragma warning(disable: 4201)
# 48 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
extern "C" {
# 289 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct _DRAWPATRECT {
        POINT ptPosition;
        POINT ptSize;
        WORD wStyle;
        WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;
# 421 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct _PSINJECTDATA {

    DWORD DataBytes;
    WORD InjectionPoint;
    WORD PageNumber;



} PSINJECTDATA, *PPSINJECTDATA;
# 509 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct _PSFEATURE_OUTPUT {

    BOOL bPageIndependent;
    BOOL bSetPageDevice;

} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;





typedef struct _PSFEATURE_CUSTPAPER {

    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;

} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;
# 586 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagXFORM
  {
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
  } XFORM, *PXFORM, *LPXFORM;


typedef struct tagBITMAP
  {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
  } BITMAP, *PBITMAP, *NPBITMAP, *LPBITMAP;





# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack1.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack1.h"
#pragma warning(disable: 4103)

#pragma pack(push,1)
# 611 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h" 2





typedef struct tagRGBTRIPLE {
        BYTE rgbtBlue;
        BYTE rgbtGreen;
        BYTE rgbtRed;
} RGBTRIPLE, *PRGBTRIPLE, *NPRGBTRIPLE, *LPRGBTRIPLE;





# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 625 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h" 2





typedef struct tagRGBQUAD {
        BYTE rgbBlue;
        BYTE rgbGreen;
        BYTE rgbRed;
        BYTE rgbReserved;
} RGBQUAD;







typedef RGBQUAD * LPRGBQUAD;
# 668 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef LONG LCSCSTYPE;



typedef LONG LCSGAMUTMATCH;
# 700 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef long FXPT16DOT16, *LPFXPT16DOT16;
typedef long FXPT2DOT30, *LPFXPT2DOT30;




typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;







typedef CIEXYZ *LPCIEXYZ;







typedef struct tagICEXYZTRIPLE
{
        CIEXYZ ciexyzRed;
        CIEXYZ ciexyzGreen;
        CIEXYZ ciexyzBlue;
} CIEXYZTRIPLE;







typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;
# 753 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;

typedef LOGCOLORSPACEW LOGCOLORSPACE;
typedef LPLOGCOLORSPACEW LPLOGCOLORSPACE;
# 794 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagBITMAPCOREHEADER {
        DWORD bcSize;
        WORD bcWidth;
        WORD bcHeight;
        WORD bcPlanes;
        WORD bcBitCount;
} BITMAPCOREHEADER, *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;







typedef struct tagBITMAPINFOHEADER{
        DWORD biSize;
        LONG biWidth;
        LONG biHeight;
        WORD biPlanes;
        WORD biBitCount;
        DWORD biCompression;
        DWORD biSizeImage;
        LONG biXPelsPerMeter;
        LONG biYPelsPerMeter;
        DWORD biClrUsed;
        DWORD biClrImportant;
} BITMAPINFOHEADER, *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;
# 830 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct {
        DWORD bV4Size;
        LONG bV4Width;
        LONG bV4Height;
        WORD bV4Planes;
        WORD bV4BitCount;
        DWORD bV4V4Compression;
        DWORD bV4SizeImage;
        LONG bV4XPelsPerMeter;
        LONG bV4YPelsPerMeter;
        DWORD bV4ClrUsed;
        DWORD bV4ClrImportant;
        DWORD bV4RedMask;
        DWORD bV4GreenMask;
        DWORD bV4BlueMask;
        DWORD bV4AlphaMask;
        DWORD bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD bV4GammaRed;
        DWORD bV4GammaGreen;
        DWORD bV4GammaBlue;
} BITMAPV4HEADER, *LPBITMAPV4HEADER, *PBITMAPV4HEADER;
# 861 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct {
        DWORD bV5Size;
        LONG bV5Width;
        LONG bV5Height;
        WORD bV5Planes;
        WORD bV5BitCount;
        DWORD bV5Compression;
        DWORD bV5SizeImage;
        LONG bV5XPelsPerMeter;
        LONG bV5YPelsPerMeter;
        DWORD bV5ClrUsed;
        DWORD bV5ClrImportant;
        DWORD bV5RedMask;
        DWORD bV5GreenMask;
        DWORD bV5BlueMask;
        DWORD bV5AlphaMask;
        DWORD bV5CSType;
        CIEXYZTRIPLE bV5Endpoints;
        DWORD bV5GammaRed;
        DWORD bV5GammaGreen;
        DWORD bV5GammaBlue;
        DWORD bV5Intent;
        DWORD bV5ProfileData;
        DWORD bV5ProfileSize;
        DWORD bV5Reserved;
} BITMAPV5HEADER, *LPBITMAPV5HEADER, *PBITMAPV5HEADER;
# 909 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
} BITMAPINFO, *LPBITMAPINFO, *PBITMAPINFO;







typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
} BITMAPCOREINFO, *LPBITMAPCOREINFO, *PBITMAPCOREINFO;





# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack2.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack2.h"
#pragma warning(disable: 4103)

#pragma pack(push,2)
# 928 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h" 2





typedef struct tagBITMAPFILEHEADER {
        WORD bfType;
        DWORD bfSize;
        WORD bfReserved1;
        WORD bfReserved2;
        DWORD bfOffBits;
} BITMAPFILEHEADER, *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;





# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 944 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h" 2
# 954 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO, *NPCHARSETINFO, *LPCHARSETINFO;
# 980 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;
# 1000 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagHANDLETABLE
  {
    HGDIOBJ objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE, *LPHANDLETABLE;

typedef struct tagMETARECORD
  {
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
  } METARECORD;







typedef struct tagMETARECORD __unaligned *PMETARECORD;







typedef struct tagMETARECORD __unaligned *LPMETARECORD;

typedef struct tagMETAFILEPICT
  {
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
  } METAFILEPICT, *LPMETAFILEPICT;





# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack2.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack2.h"
#pragma warning(disable: 4103)

#pragma pack(push,2)
# 1039 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h" 2





typedef struct tagMETAHEADER
{
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER __unaligned *PMETAHEADER;
typedef struct tagMETAHEADER __unaligned *LPMETAHEADER;





# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 1060 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h" 2






typedef struct tagENHMETARECORD
{
    DWORD iType;
    DWORD nSize;
    DWORD dParm[1];
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD iType;
    DWORD nSize;

    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;

    WORD sReserved;
    DWORD nDescription;

    DWORD offDescription;

    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;

    DWORD cbPixelFormat;

    DWORD offPixelFormat;

    DWORD bOpenGL;



    SIZEL szlMicrometers;


} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;
# 1128 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
    typedef WCHAR BCHAR;
# 1138 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack4.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack4.h"
#pragma warning(disable: 4103)

#pragma pack(push,4)
# 1138 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h" 2





typedef struct tagTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA, *NPTEXTMETRICA, *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW, *NPTEXTMETRICW, *LPTEXTMETRICW;

typedef TEXTMETRICW TEXTMETRIC;
typedef PTEXTMETRICW PTEXTMETRIC;
typedef NPTEXTMETRICW NPTEXTMETRIC;
typedef LPTEXTMETRICW LPTEXTMETRIC;
# 1204 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 1204 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h" 2
# 1221 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack4.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack4.h"
#pragma warning(disable: 4103)

#pragma pack(push,4)
# 1221 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h" 2





typedef struct tagNEWTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA, *NPNEWTEXTMETRICA, *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW, *NPNEWTEXTMETRICW, *LPNEWTEXTMETRICW;

typedef NEWTEXTMETRICW NEWTEXTMETRIC;
typedef PNEWTEXTMETRICW PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICW NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICW LPNEWTEXTMETRIC;
# 1295 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 1295 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h" 2







typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
}NEWTEXTMETRICEXW;

typedef NEWTEXTMETRICEXW NEWTEXTMETRICEX;
# 1329 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagPELARRAY
  {
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
  } PELARRAY, *PPELARRAY, *NPPELARRAY, *LPPELARRAY;
# 1345 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagLOGBRUSH
  {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
  } LOGBRUSH, *PLOGBRUSH, *NPLOGBRUSH, *LPLOGBRUSH;

typedef struct tagLOGBRUSH32
  {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
  } LOGBRUSH32, *PLOGBRUSH32, *NPLOGBRUSH32, *LPLOGBRUSH32;







typedef LOGBRUSH PATTERN;
typedef PATTERN *PPATTERN;
typedef PATTERN *NPPATTERN;
typedef PATTERN *LPPATTERN;
# 1377 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagLOGPEN
  {
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
  } LOGPEN, *PLOGPEN, *NPLOGPEN, *LPLOGPEN;







typedef struct tagEXTLOGPEN {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN, *NPEXTLOGPEN, *LPEXTLOGPEN;







typedef struct tagEXTLOGPEN32 {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN32, *PEXTLOGPEN32, *NPEXTLOGPEN32, *LPEXTLOGPEN32;



typedef struct tagPALETTEENTRY {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
} PALETTEENTRY, *PPALETTEENTRY, *LPPALETTEENTRY;





typedef struct tagLOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
                                    PALETTEENTRY palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE, *NPLOGPALETTE, *LPLOGPALETTE;






typedef struct tagLOGFONTA
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[32];
} LOGFONTA, *PLOGFONTA, *NPLOGFONTA, *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
} LOGFONTW, *PLOGFONTW, *NPLOGFONTW, *LPLOGFONTW;

typedef LOGFONTW LOGFONT;
typedef PLOGFONTW PLOGFONT;
typedef NPLOGFONTW NPLOGFONT;
typedef LPLOGFONTW LPLOGFONT;
# 1495 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;

typedef ENUMLOGFONTW ENUMLOGFONT;
typedef LPENUMLOGFONTW LPENUMLOGFONT;






typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    BYTE elfScript[32];
} ENUMLOGFONTEXA, *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    WCHAR elfScript[32];
} ENUMLOGFONTEXW, *LPENUMLOGFONTEXW;

typedef ENUMLOGFONTEXW ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXW LPENUMLOGFONTEX;
# 1673 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagPANOSE
{
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
} PANOSE, * LPPANOSE;
# 1799 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagEXTLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA, *NPEXTLOGFONTA, *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW, *NPEXTLOGFONTW, *LPEXTLOGFONTW;

typedef EXTLOGFONTW EXTLOGFONT;
typedef PEXTLOGFONTW PEXTLOGFONT;
typedef NPEXTLOGFONTW NPEXTLOGFONT;
typedef LPEXTLOGFONTW LPEXTLOGFONT;
# 2185 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct _devicemodeA {
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {

      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };

      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    };
    DWORD dmDisplayFrequency;

    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;

    DWORD dmPanningWidth;
    DWORD dmPanningHeight;


} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {

      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };

      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    };
    DWORD dmDisplayFrequency;

    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;

    DWORD dmPanningWidth;
    DWORD dmPanningHeight;


} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;

typedef DEVMODEW DEVMODE;
typedef PDEVMODEW PDEVMODE;
typedef NPDEVMODEW NPDEVMODE;
typedef LPDEVMODEW LPDEVMODE;
# 2720 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct _DISPLAY_DEVICEA {
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;

typedef DISPLAY_DEVICEW DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEW PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEW LPDISPLAY_DEVICE;
# 2785 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct DISPLAYCONFIG_RATIONAL
{
    UINT32 Numerator;
    UINT32 Denominator;
} DISPLAYCONFIG_RATIONAL;

typedef enum
{
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = 0x80000000,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;

typedef enum
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_SCANLINE_ORDERING;

typedef struct DISPLAYCONFIG_2DREGION
{
    UINT32 cx;
    UINT32 cy;
} DISPLAYCONFIG_2DREGION;

typedef struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
    UINT64 pixelRate;
    DISPLAYCONFIG_RATIONAL hSyncFreq;
    DISPLAYCONFIG_RATIONAL vSyncFreq;
    DISPLAYCONFIG_2DREGION activeSize;
    DISPLAYCONFIG_2DREGION totalSize;

    union
    {
        struct
        {
            UINT32 videoStandard : 16;


            UINT32 vSyncFreqDivider : 6;

            UINT32 reserved : 10;
        } AdditionalSignalInfo;

        UINT32 videoStandard;
    };


    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO;

typedef enum
{
    DISPLAYCONFIG_SCALING_IDENTITY = 1,
    DISPLAYCONFIG_SCALING_CENTERED = 2,
    DISPLAYCONFIG_SCALING_STRETCHED = 3,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4,
    DISPLAYCONFIG_SCALING_CUSTOM = 5,
    DISPLAYCONFIG_SCALING_PREFERRED = 128,
    DISPLAYCONFIG_SCALING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_SCALING;

typedef enum
{
    DISPLAYCONFIG_ROTATION_IDENTITY = 1,
    DISPLAYCONFIG_ROTATION_ROTATE90 = 2,
    DISPLAYCONFIG_ROTATION_ROTATE180 = 3,
    DISPLAYCONFIG_ROTATION_ROTATE270 = 4,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_ROTATION;

typedef enum
{
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_MODE_INFO_TYPE;

typedef enum
{
    DISPLAYCONFIG_PIXELFORMAT_8BPP = 1,
    DISPLAYCONFIG_PIXELFORMAT_16BPP = 2,
    DISPLAYCONFIG_PIXELFORMAT_24BPP = 3,
    DISPLAYCONFIG_PIXELFORMAT_32BPP = 4,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 0xffffffff
} DISPLAYCONFIG_PIXELFORMAT;

typedef struct DISPLAYCONFIG_SOURCE_MODE
{
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_PIXELFORMAT pixelFormat;
    POINTL position;
} DISPLAYCONFIG_SOURCE_MODE;

typedef struct DISPLAYCONFIG_TARGET_MODE
{
    DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
} DISPLAYCONFIG_TARGET_MODE;

typedef struct DISPLAYCONFIG_MODE_INFO
{
    DISPLAYCONFIG_MODE_INFO_TYPE infoType;
    UINT32 id;
    LUID adapterId;
    union
    {
        DISPLAYCONFIG_TARGET_MODE targetMode;
        DISPLAYCONFIG_SOURCE_MODE sourceMode;
    };
} DISPLAYCONFIG_MODE_INFO;



typedef struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
    LUID adapterId;
    UINT32 id;
    UINT32 modeInfoIdx;
    UINT32 statusFlags;
} DISPLAYCONFIG_PATH_SOURCE_INFO;







typedef struct DISPLAYCONFIG_PATH_TARGET_INFO
{
    LUID adapterId;
    UINT32 id;
    UINT32 modeInfoIdx;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    DISPLAYCONFIG_ROTATION rotation;
    DISPLAYCONFIG_SCALING scaling;
    DISPLAYCONFIG_RATIONAL refreshRate;
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
    BOOL targetAvailable;
    UINT32 statusFlags;
} DISPLAYCONFIG_PATH_TARGET_INFO;
# 2957 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct DISPLAYCONFIG_PATH_INFO
{
    DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
    DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
    UINT32 flags;
} DISPLAYCONFIG_PATH_INFO;







typedef enum
{
      DISPLAYCONFIG_TOPOLOGY_INTERNAL = 0x00000001,
      DISPLAYCONFIG_TOPOLOGY_CLONE = 0x00000002,
      DISPLAYCONFIG_TOPOLOGY_EXTEND = 0x00000004,
      DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 0x00000008,
      DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_TOPOLOGY_ID;


typedef enum
{
      DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4,
      DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6,
      DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_DEVICE_INFO_TYPE;
# 2998 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct DISPLAYCONFIG_DEVICE_INFO_HEADER
{
    DISPLAYCONFIG_DEVICE_INFO_TYPE type;
    UINT32 size;
    LUID adapterId;
    UINT32 id;
} DISPLAYCONFIG_DEVICE_INFO_HEADER;







typedef struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR viewGdiDeviceName[32];
} DISPLAYCONFIG_SOURCE_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
    union
    {
        struct
        {
            UINT32 friendlyNameFromEdid : 1;
            UINT32 friendlyNameForced : 1;
            UINT32 edidIdsValid : 1;
            UINT32 reserved : 29;
        };
        UINT32 value;
    };
} DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    UINT16 edidManufactureId;
    UINT16 edidProductCodeId;
    UINT32 connectorInstance;
    WCHAR monitorFriendlyDeviceName[64];
    WCHAR monitorDevicePath[128];
} DISPLAYCONFIG_TARGET_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_TARGET_MODE targetMode;
} DISPLAYCONFIG_TARGET_PREFERRED_MODE;

typedef struct DISPLAYCONFIG_ADAPTER_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR adapterDevicePath[128];
} DISPLAYCONFIG_ADAPTER_NAME;

typedef struct DISPLAYCONFIG_TARGET_BASE_TYPE {
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY baseOutputTechnology;
} DISPLAYCONFIG_TARGET_BASE_TYPE;

typedef struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
            UINT32 bootPersistenceOn : 1;
            UINT32 reserved : 31;
        };
        UINT32 value;
    };
} DISPLAYCONFIG_SET_TARGET_PERSISTENCE;
# 3121 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct _RGNDATAHEADER {
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER rdh;
    char Buffer[1];
} RGNDATA, *PRGNDATA, *NPRGNDATA, *LPRGNDATA;
# 3145 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct _ABC {
    int abcA;
    UINT abcB;
    int abcC;
} ABC, *PABC, *NPABC, *LPABC;

typedef struct _ABCFLOAT {
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
} ABCFLOAT, *PABCFLOAT, *NPABCFLOAT, *LPABCFLOAT;
# 3169 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct _OUTLINETEXTMETRICA {
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
     int otmsCharSlopeRise;
     int otmsCharSlopeRun;
     int otmItalicAngle;
    UINT otmEMSquare;
     int otmAscent;
     int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
     int otmMacAscent;
     int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
     int otmsStrikeoutPosition;
     int otmsUnderscoreSize;
     int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA, *NPOUTLINETEXTMETRICA, *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
     int otmsCharSlopeRise;
     int otmsCharSlopeRun;
     int otmItalicAngle;
    UINT otmEMSquare;
     int otmAscent;
     int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
     int otmMacAscent;
     int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
     int otmsStrikeoutPosition;
     int otmsUnderscoreSize;
     int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW, *NPOUTLINETEXTMETRICW, *LPOUTLINETEXTMETRICW;

typedef OUTLINETEXTMETRICW OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICW POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICW NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICW LPOUTLINETEXTMETRIC;
# 3261 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagPOLYTEXTA
{
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTA, *PPOLYTEXTA, *NPPOLYTEXTA, *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTW, *PPOLYTEXTW, *NPPOLYTEXTW, *LPPOLYTEXTW;

typedef POLYTEXTW POLYTEXT;
typedef PPOLYTEXTW PPOLYTEXT;
typedef NPPOLYTEXTW NPPOLYTEXT;
typedef LPPOLYTEXTW LPPOLYTEXT;
# 3299 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct _FIXED {

    WORD fract;
    short value;




} FIXED;


typedef struct _MAT2 {
     FIXED eM11;
     FIXED eM12;
     FIXED eM21;
     FIXED eM22;
} MAT2, *LPMAT2;



typedef struct _GLYPHMETRICS {
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
} GLYPHMETRICS, *LPGLYPHMETRICS;
# 3357 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD wType;
    WORD cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;
# 3427 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagGCP_RESULTSA
    {
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;

typedef GCP_RESULTSW GCP_RESULTS;
typedef LPGCP_RESULTSW LPGCP_RESULTS;
# 3466 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct _RASTERIZER_STATUS {
    short nSize;
    short wFlags;
    short nLanguageID;
} RASTERIZER_STATUS, *LPRASTERIZER_STATUS;
# 3483 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, *LPPIXELFORMATDESCRIPTOR;
# 3555 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);
# 3572 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;

typedef FONTENUMPROCW FONTENUMPROC;




typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);
# 3603 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
__declspec(dllimport) int __stdcall AddFontResourceA( LPCSTR);
__declspec(dllimport) int __stdcall AddFontResourceW( LPCWSTR);






 __declspec(dllimport) BOOL __stdcall AnimatePalette( HPALETTE hPal, UINT iStartIndex, UINT cEntries, const PALETTEENTRY * ppe);
 __declspec(dllimport) BOOL __stdcall Arc( HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
 __declspec(dllimport) BOOL __stdcall BitBlt( HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
__declspec(dllimport) BOOL __stdcall CancelDC( HDC hdc);
 __declspec(dllimport) BOOL __stdcall Chord( HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
__declspec(dllimport) int __stdcall ChoosePixelFormat( HDC hdc, const PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) HMETAFILE __stdcall CloseMetaFile( HDC hdc);
__declspec(dllimport) int __stdcall CombineRgn( HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, int iMode);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileA( HMETAFILE, LPCSTR);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileW( HMETAFILE, LPCWSTR);





 __declspec(dllimport) HBITMAP __stdcall CreateBitmap( int nWidth, int nHeight, UINT nPlanes, UINT nBitCount, const void *lpBits);
 __declspec(dllimport) HBITMAP __stdcall CreateBitmapIndirect( const BITMAP *pbm);
 __declspec(dllimport) HBRUSH __stdcall CreateBrushIndirect( const LOGBRUSH *plbrush);
__declspec(dllimport) HBITMAP __stdcall CreateCompatibleBitmap( HDC hdc, int cx, int cy);
__declspec(dllimport) HBITMAP __stdcall CreateDiscardableBitmap( HDC hdc, int cx, int cy);
__declspec(dllimport) HDC __stdcall CreateCompatibleDC( HDC hdc);
__declspec(dllimport) HDC __stdcall CreateDCA( LPCSTR pwszDriver, LPCSTR pwszDevice, LPCSTR pszPort, const DEVMODEA * pdm);
__declspec(dllimport) HDC __stdcall CreateDCW( LPCWSTR pwszDriver, LPCWSTR pwszDevice, LPCWSTR pszPort, const DEVMODEW * pdm);





__declspec(dllimport) HBITMAP __stdcall CreateDIBitmap( HDC hdc, const BITMAPINFOHEADER *pbmih, DWORD flInit, const void *pjBits, const BITMAPINFO *pbmi, UINT iUsage);
__declspec(dllimport) HBRUSH __stdcall CreateDIBPatternBrush( HGLOBAL h, UINT iUsage);
 __declspec(dllimport) HBRUSH __stdcall CreateDIBPatternBrushPt( const void *lpPackedDIB, UINT iUsage);
__declspec(dllimport) HRGN __stdcall CreateEllipticRgn( int x1, int y1, int x2, int y2);
__declspec(dllimport) HRGN __stdcall CreateEllipticRgnIndirect( const RECT *lprect);
 __declspec(dllimport) HFONT __stdcall CreateFontIndirectA( const LOGFONTA *lplf);
 __declspec(dllimport) HFONT __stdcall CreateFontIndirectW( const LOGFONTW *lplf);





__declspec(dllimport) HFONT __stdcall CreateFontA( int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
                                  DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
                                  DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName);
__declspec(dllimport) HFONT __stdcall CreateFontW( int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
                                  DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
                                  DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName);






__declspec(dllimport) HBRUSH __stdcall CreateHatchBrush( int iHatch, COLORREF color);
__declspec(dllimport) HDC __stdcall CreateICA( LPCSTR pszDriver, LPCSTR pszDevice, LPCSTR pszPort, const DEVMODEA * pdm);
__declspec(dllimport) HDC __stdcall CreateICW( LPCWSTR pszDriver, LPCWSTR pszDevice, LPCWSTR pszPort, const DEVMODEW * pdm);





__declspec(dllimport) HDC __stdcall CreateMetaFileA( LPCSTR pszFile);
__declspec(dllimport) HDC __stdcall CreateMetaFileW( LPCWSTR pszFile);





 __declspec(dllimport) HPALETTE __stdcall CreatePalette( const LOGPALETTE * plpal);
__declspec(dllimport) HPEN __stdcall CreatePen( int iStyle, int cWidth, COLORREF color);
 __declspec(dllimport) HPEN __stdcall CreatePenIndirect( const LOGPEN *plpen);
__declspec(dllimport) HRGN __stdcall CreatePolyPolygonRgn( const POINT *pptl,
                                                                  const INT *pc,
                                                     int cPoly,
                                                     int iMode);
 __declspec(dllimport) HBRUSH __stdcall CreatePatternBrush( HBITMAP hbm);
__declspec(dllimport) HRGN __stdcall CreateRectRgn( int x1, int y1, int x2, int y2);
__declspec(dllimport) HRGN __stdcall CreateRectRgnIndirect( const RECT *lprect);
__declspec(dllimport) HRGN __stdcall CreateRoundRectRgn( int x1, int y1, int x2, int y2, int w, int h);
__declspec(dllimport) BOOL __stdcall CreateScalableFontResourceA( DWORD fdwHidden, LPCSTR lpszFont, LPCSTR lpszFile, LPCSTR lpszPath);
__declspec(dllimport) BOOL __stdcall CreateScalableFontResourceW( DWORD fdwHidden, LPCWSTR lpszFont, LPCWSTR lpszFile, LPCWSTR lpszPath);





__declspec(dllimport) HBRUSH __stdcall CreateSolidBrush( COLORREF color);

__declspec(dllimport) BOOL __stdcall DeleteDC( HDC hdc);
__declspec(dllimport) BOOL __stdcall DeleteMetaFile( HMETAFILE hmf);
 __declspec(dllimport) BOOL __stdcall DeleteObject( HGDIOBJ ho);
__declspec(dllimport) int __stdcall DescribePixelFormat( HDC hdc,
                                                 int iPixelFormat,
                                                 UINT nBytes,
                                                                           LPPIXELFORMATDESCRIPTOR ppfd);





typedef UINT (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);
# 3797 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesA(
                        LPCSTR pDevice,
                        LPCSTR pPort,
                        WORD fwCapability,
                                         LPSTR pOutput,
                        const DEVMODEA *pDevMode
    );
__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesW(
                        LPCWSTR pDevice,
                        LPCWSTR pPort,
                        WORD fwCapability,
                                         LPWSTR pOutput,
                        const DEVMODEW *pDevMode
    );






__declspec(dllimport) int __stdcall DrawEscape( HDC hdc,
                                         int iEscape,
                                         int cjIn,
                                                               LPCSTR lpIn);

 __declspec(dllimport) BOOL __stdcall Ellipse( HDC hdc, int left, int top, int right, int bottom);


__declspec(dllimport) int __stdcall EnumFontFamiliesExA( HDC hdc, LPLOGFONTA lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam, DWORD dwFlags);
__declspec(dllimport) int __stdcall EnumFontFamiliesExW( HDC hdc, LPLOGFONTW lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam, DWORD dwFlags);







__declspec(dllimport) int __stdcall EnumFontFamiliesA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
__declspec(dllimport) int __stdcall EnumFontFamiliesW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);





__declspec(dllimport) int __stdcall EnumFontsA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
__declspec(dllimport) int __stdcall EnumFontsW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);







__declspec(dllimport) int __stdcall EnumObjects( HDC hdc, int nType, GOBJENUMPROC lpFunc, LPARAM lParam);





__declspec(dllimport) BOOL __stdcall EqualRgn( HRGN hrgn1, HRGN hrgn2);
 __declspec(dllimport) int __stdcall Escape( HDC hdc,
                                     int iEscape,
                                     int cjIn,
                                                           LPCSTR pvIn,
                                          LPVOID pvOut);
__declspec(dllimport) int __stdcall ExtEscape( HDC hdc,
                                         int iEscape,
                                         int cjInput,
                                                                  LPCSTR lpInData,
                                         int cjOutput,
                                                                     LPSTR lpOutData);
 __declspec(dllimport) int __stdcall ExcludeClipRect( HDC hdc, int left, int top, int right, int bottom);
 __declspec(dllimport) HRGN __stdcall ExtCreateRegion( const XFORM * lpx, DWORD nCount, const RGNDATA * lpData);
 __declspec(dllimport) BOOL __stdcall ExtFloodFill( HDC hdc, int x, int y, COLORREF color, UINT type);
 __declspec(dllimport) BOOL __stdcall FillRgn( HDC hdc, HRGN hrgn, HBRUSH hbr);
 __declspec(dllimport) BOOL __stdcall FloodFill( HDC hdc, int x, int y, COLORREF color);
 __declspec(dllimport) BOOL __stdcall FrameRgn( HDC hdc, HRGN hrgn, HBRUSH hbr, int w, int h);
__declspec(dllimport) int __stdcall GetROP2( HDC hdc);
__declspec(dllimport) BOOL __stdcall GetAspectRatioFilterEx( HDC hdc, LPSIZE lpsize);
__declspec(dllimport) COLORREF __stdcall GetBkColor( HDC hdc);


__declspec(dllimport) COLORREF __stdcall GetDCBrushColor( HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetDCPenColor( HDC hdc);


__declspec(dllimport)
int
__stdcall
GetBkMode(
         HDC hdc
    );

__declspec(dllimport)
LONG
__stdcall
GetBitmapBits(
         HBITMAP hbit,
         LONG cb,
                           LPVOID lpvBits
    );

__declspec(dllimport) BOOL __stdcall GetBitmapDimensionEx( HBITMAP hbit, LPSIZE lpsize);
__declspec(dllimport) UINT __stdcall GetBoundsRect( HDC hdc, LPRECT lprect, UINT flags);

__declspec(dllimport) BOOL __stdcall GetBrushOrgEx( HDC hdc, LPPOINT lppt);

__declspec(dllimport) BOOL __stdcall GetCharWidthA( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
__declspec(dllimport) BOOL __stdcall GetCharWidthW( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);





__declspec(dllimport) BOOL __stdcall GetCharWidth32A( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
__declspec(dllimport) BOOL __stdcall GetCharWidth32W( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);





__declspec(dllimport) BOOL __stdcall GetCharWidthFloatA( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
__declspec(dllimport) BOOL __stdcall GetCharWidthFloatW( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);






__declspec(dllimport) BOOL __stdcall GetCharABCWidthsA( HDC hdc,
                                                 UINT wFirst,
                                                 UINT wLast,
                                                                             LPABC lpABC);
__declspec(dllimport) BOOL __stdcall GetCharABCWidthsW( HDC hdc,
                                                 UINT wFirst,
                                                 UINT wLast,
                                                                             LPABC lpABC);






__declspec(dllimport) BOOL __stdcall GetCharABCWidthsFloatA( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
__declspec(dllimport) BOOL __stdcall GetCharABCWidthsFloatW( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);





__declspec(dllimport) int __stdcall GetClipBox( HDC hdc, LPRECT lprect);
__declspec(dllimport) int __stdcall GetClipRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) int __stdcall GetMetaRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) HGDIOBJ __stdcall GetCurrentObject( HDC hdc, UINT type);
__declspec(dllimport) BOOL __stdcall GetCurrentPositionEx( HDC hdc, LPPOINT lppt);
__declspec(dllimport) int __stdcall GetDeviceCaps( HDC hdc, int index);
__declspec(dllimport) int __stdcall GetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines,
              LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage);


__declspec(dllimport) DWORD __stdcall GetFontData ( HDC hdc,
                                             DWORD dwTable,
                                             DWORD dwOffset,
                                                                                    PVOID pvBuffer,
                                             DWORD cjBuffer
                                        );

__declspec(dllimport) DWORD __stdcall GetGlyphOutlineA( HDC hdc,
                                                 UINT uChar,
                                                 UINT fuFormat,
                                                  LPGLYPHMETRICS lpgm,
                                                 DWORD cjBuffer,
                                                                             LPVOID pvBuffer,
                                                 const MAT2 *lpmat2
                                        );
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineW( HDC hdc,
                                                 UINT uChar,
                                                 UINT fuFormat,
                                                  LPGLYPHMETRICS lpgm,
                                                 DWORD cjBuffer,
                                                                             LPVOID pvBuffer,
                                                 const MAT2 *lpmat2
                                        );






__declspec(dllimport) int __stdcall GetGraphicsMode( HDC hdc);
__declspec(dllimport) int __stdcall GetMapMode( HDC hdc);
__declspec(dllimport) UINT __stdcall GetMetaFileBitsEx( HMETAFILE hMF, UINT cbBuffer, LPVOID lpData);
__declspec(dllimport) HMETAFILE __stdcall GetMetaFileA( LPCSTR lpName);
__declspec(dllimport) HMETAFILE __stdcall GetMetaFileW( LPCWSTR lpName);





__declspec(dllimport) COLORREF __stdcall GetNearestColor( HDC hdc, COLORREF color);
__declspec(dllimport) UINT __stdcall GetNearestPaletteIndex( HPALETTE h, COLORREF color);
__declspec(dllimport) DWORD __stdcall GetObjectType( HGDIOBJ h);



__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsA( HDC hdc,
                                                     UINT cjCopy,
                                                                               LPOUTLINETEXTMETRICA potm);
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsW( HDC hdc,
                                                     UINT cjCopy,
                                                                               LPOUTLINETEXTMETRICW potm);
# 4023 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
__declspec(dllimport) UINT __stdcall GetPaletteEntries( HPALETTE hpal,
                                                 UINT iStart,
                                                 UINT cEntries,
                                                                                 LPPALETTEENTRY pPalEntries);
__declspec(dllimport) COLORREF __stdcall GetPixel( HDC hdc, int x, int y);
__declspec(dllimport) int __stdcall GetPixelFormat( HDC hdc);
__declspec(dllimport) int __stdcall GetPolyFillMode( HDC hdc);
__declspec(dllimport) BOOL __stdcall GetRasterizerCaps( LPRASTERIZER_STATUS lpraststat,
                                                 UINT cjBytes);

__declspec(dllimport) int __stdcall GetRandomRgn ( HDC hdc, HRGN hrgn, INT i);
__declspec(dllimport) DWORD __stdcall GetRegionData( HRGN hrgn,
                                             DWORD nCount,
                                                                                  LPRGNDATA lpRgnData);
__declspec(dllimport) int __stdcall GetRgnBox( HRGN hrgn, LPRECT lprc);
__declspec(dllimport) HGDIOBJ __stdcall GetStockObject( int i);
__declspec(dllimport) int __stdcall GetStretchBltMode( HDC hdc);
__declspec(dllimport)
UINT
__stdcall
GetSystemPaletteEntries(
         HDC hdc,
         UINT iStart,
         UINT cEntries,
                               LPPALETTEENTRY pPalEntries
    );

__declspec(dllimport) UINT __stdcall GetSystemPaletteUse( HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharacterExtra( HDC hdc);
__declspec(dllimport) UINT __stdcall GetTextAlign( HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetTextColor( HDC hdc);

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointA(
         HDC hdc,
                  LPCSTR lpString,
         int c,
          LPSIZE lpsz
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointW(
         HDC hdc,
                  LPCWSTR lpString,
         int c,
          LPSIZE lpsz
    );






__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32A(
         HDC hdc,
                  LPCSTR lpString,
         int c,
          LPSIZE psizl
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32W(
         HDC hdc,
                  LPCWSTR lpString,
         int c,
          LPSIZE psizl
    );






__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointA(
         HDC hdc,
                          LPCSTR lpszString,
         int cchString,
         int nMaxExtent,
              LPINT lpnFit,
                                             LPINT lpnDx,
          LPSIZE lpSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointW(
         HDC hdc,
                          LPCWSTR lpszString,
         int cchString,
         int nMaxExtent,
              LPINT lpnFit,
                                             LPINT lpnDx,
          LPSIZE lpSize
    );







__declspec(dllimport) int __stdcall GetTextCharset( HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharsetInfo( HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
__declspec(dllimport) BOOL __stdcall TranslateCharsetInfo( DWORD *lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetFontLanguageInfo( HDC hdc);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementA( HDC hdc, LPCSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSA lpResults, DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementW( HDC hdc, LPCWSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags);
# 4155 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagWCRANGE
{
    WCHAR wcLow;
    USHORT cGlyphs;
} WCRANGE, *PWCRANGE, *LPWCRANGE;


typedef struct tagGLYPHSET
{
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE ranges[1];
} GLYPHSET, *PGLYPHSET, *LPGLYPHSET;
# 4179 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
__declspec(dllimport) DWORD __stdcall GetFontUnicodeRanges( HDC hdc, LPGLYPHSET lpgs);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesA( HDC hdc, LPCSTR lpstr, int c, LPWORD pgi, DWORD fl);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesW( HDC hdc, LPCWSTR lpstr, int c, LPWORD pgi, DWORD fl);





__declspec(dllimport) BOOL __stdcall GetTextExtentPointI( HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize);
__declspec(dllimport) BOOL __stdcall GetTextExtentExPointI ( HDC hdc,
                                                                       LPWORD lpwszString,
                                                     int cwchString,
                                                     int nMaxExtent,
                                                          LPINT lpnFit,
                                                                                         LPINT lpnDx,
                                                      LPSIZE lpSize
                                                );

__declspec(dllimport) BOOL __stdcall GetCharWidthI( HDC hdc,
                                             UINT giFirst,
                                             UINT cgi,
                                                            LPWORD pgi,
                                                          LPINT piWidths
                                        );

__declspec(dllimport) BOOL __stdcall GetCharABCWidthsI( HDC hdc,
                                                 UINT giFirst,
                                                 UINT cgi,
                                                                LPWORD pgi,
                                                              LPABC pabc
                                        );
# 4218 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagDESIGNVECTOR
{
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR, *LPDESIGNVECTOR;

__declspec(dllimport) int __stdcall AddFontResourceExA( LPCSTR name, DWORD fl, PVOID res);
__declspec(dllimport) int __stdcall AddFontResourceExW( LPCWSTR name, DWORD fl, PVOID res);





__declspec(dllimport) BOOL __stdcall RemoveFontResourceExA( LPCSTR name, DWORD fl, PVOID pdv);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceExW( LPCWSTR name, DWORD fl, PVOID pdv);





__declspec(dllimport) HANDLE __stdcall AddFontMemResourceEx( PVOID pFileView,
                                                     DWORD cjSize,
                                                           PVOID pvResrved,
                                                     DWORD* pNumFonts);

__declspec(dllimport) BOOL __stdcall RemoveFontMemResourceEx( HANDLE h);
# 4254 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagAXISINFOA
{
    LONG axMinValue;
    LONG axMaxValue;
    BYTE axAxisName[16];
} AXISINFOA, *PAXISINFOA, *LPAXISINFOA;
typedef struct tagAXISINFOW
{
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR axAxisName[16];
} AXISINFOW, *PAXISINFOW, *LPAXISINFOW;

typedef AXISINFOW AXISINFO;
typedef PAXISINFOW PAXISINFO;
typedef LPAXISINFOW LPAXISINFO;






typedef struct tagAXESLISTA
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA axlAxisInfo[16];
} AXESLISTA, *PAXESLISTA, *LPAXESLISTA;
typedef struct tagAXESLISTW
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW axlAxisInfo[16];
} AXESLISTW, *PAXESLISTW, *LPAXESLISTW;

typedef AXESLISTW AXESLIST;
typedef PAXESLISTW PAXESLIST;
typedef LPAXESLISTW LPAXESLIST;
# 4302 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA, *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW, *LPENUMLOGFONTEXDVW;

typedef ENUMLOGFONTEXDVW ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVW PENUMLOGFONTEXDV;
typedef LPENUMLOGFONTEXDVW LPENUMLOGFONTEXDV;






__declspec(dllimport) HFONT __stdcall CreateFontIndirectExA( const ENUMLOGFONTEXDVA *);
__declspec(dllimport) HFONT __stdcall CreateFontIndirectExW( const ENUMLOGFONTEXDVW *);







typedef struct tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA, *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW, *LPENUMTEXTMETRICW;

typedef ENUMTEXTMETRICW ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICW PENUMTEXTMETRIC;
typedef LPENUMTEXTMETRICW LPENUMTEXTMETRIC;
# 4360 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall GetViewportExtEx( HDC hdc, LPSIZE lpsize);
__declspec(dllimport) BOOL __stdcall GetViewportOrgEx( HDC hdc, LPPOINT lppoint);
__declspec(dllimport) BOOL __stdcall GetWindowExtEx( HDC hdc, LPSIZE lpsize);
__declspec(dllimport) BOOL __stdcall GetWindowOrgEx( HDC hdc, LPPOINT lppoint);

 __declspec(dllimport) int __stdcall IntersectClipRect( HDC hdc, int left, int top, int right, int bottom);
 __declspec(dllimport) BOOL __stdcall InvertRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) BOOL __stdcall LineDDA( int xStart, int yStart, int xEnd, int yEnd, LINEDDAPROC lpProc, LPARAM data);
 __declspec(dllimport) BOOL __stdcall LineTo( HDC hdc, int x, int y);
__declspec(dllimport) BOOL __stdcall MaskBlt( HDC hdcDest, int xDest, int yDest, int width, int height,
                   HDC hdcSrc, int xSrc, int ySrc, HBITMAP hbmMask, int xMask, int yMask, DWORD rop);
__declspec(dllimport) BOOL __stdcall PlgBlt( HDC hdcDest, const POINT * lpPoint, HDC hdcSrc, int xSrc, int ySrc, int width,
                          int height, HBITMAP hbmMask, int xMask, int yMask);

 __declspec(dllimport) int __stdcall OffsetClipRgn( HDC hdc, int x, int y);
__declspec(dllimport) int __stdcall OffsetRgn( HRGN hrgn, int x, int y);
 __declspec(dllimport) BOOL __stdcall PatBlt( HDC hdc, int x, int y, int w, int h, DWORD rop);
 __declspec(dllimport) BOOL __stdcall Pie( HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
__declspec(dllimport) BOOL __stdcall PlayMetaFile( HDC hdc, HMETAFILE hmf);
 __declspec(dllimport) BOOL __stdcall PaintRgn( HDC hdc, HRGN hrgn);
 __declspec(dllimport) BOOL __stdcall PolyPolygon( HDC hdc, const POINT *apt, const INT *asz, int csz);
__declspec(dllimport) BOOL __stdcall PtInRegion( HRGN hrgn, int x, int y);
__declspec(dllimport) BOOL __stdcall PtVisible( HDC hdc, int x, int y);
__declspec(dllimport) BOOL __stdcall RectInRegion( HRGN hrgn, const RECT * lprect);
__declspec(dllimport) BOOL __stdcall RectVisible( HDC hdc, const RECT * lprect);
 __declspec(dllimport) BOOL __stdcall Rectangle( HDC hdc, int left, int top, int right, int bottom);
 __declspec(dllimport) BOOL __stdcall RestoreDC( HDC hdc, int nSavedDC);
 __declspec(dllimport) HDC __stdcall ResetDCA( HDC hdc, const DEVMODEA * lpdm);
 __declspec(dllimport) HDC __stdcall ResetDCW( HDC hdc, const DEVMODEW * lpdm);





 __declspec(dllimport) UINT __stdcall RealizePalette( HDC hdc);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceA( LPCSTR lpFileName);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceW( LPCWSTR lpFileName);





 __declspec(dllimport) BOOL __stdcall RoundRect( HDC hdc, int left, int top, int right, int bottom, int width, int height);
 __declspec(dllimport) BOOL __stdcall ResizePalette( HPALETTE hpal, UINT n);

 __declspec(dllimport) int __stdcall SaveDC( HDC hdc);
 __declspec(dllimport) int __stdcall SelectClipRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) int __stdcall ExtSelectClipRgn( HDC hdc, HRGN hrgn, int mode);
__declspec(dllimport) int __stdcall SetMetaRgn( HDC hdc);
 __declspec(dllimport) HGDIOBJ __stdcall SelectObject( HDC hdc, HGDIOBJ h);
 __declspec(dllimport) HPALETTE __stdcall SelectPalette( HDC hdc, HPALETTE hPal, BOOL bForceBkgd);
 __declspec(dllimport) COLORREF __stdcall SetBkColor( HDC hdc, COLORREF color);


__declspec(dllimport) COLORREF __stdcall SetDCBrushColor( HDC hdc, COLORREF color);
__declspec(dllimport) COLORREF __stdcall SetDCPenColor( HDC hdc, COLORREF color);


 __declspec(dllimport) int __stdcall SetBkMode( HDC hdc, int mode);

__declspec(dllimport)
LONG __stdcall
SetBitmapBits(
         HBITMAP hbm,
         DWORD cb,
                         const void *pvBits);

__declspec(dllimport) UINT __stdcall SetBoundsRect( HDC hdc, const RECT * lprect, UINT flags);
__declspec(dllimport) int __stdcall SetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines, const void *lpBits, const BITMAPINFO * lpbmi, UINT ColorUse);
 __declspec(dllimport) int __stdcall SetDIBitsToDevice( HDC hdc, int xDest, int yDest, DWORD w, DWORD h, int xSrc,
             int ySrc, UINT StartScan, UINT cLines, const void * lpvBits, const BITMAPINFO * lpbmi, UINT ColorUse);
 __declspec(dllimport) DWORD __stdcall SetMapperFlags( HDC hdc, DWORD flags);
__declspec(dllimport) int __stdcall SetGraphicsMode( HDC hdc, int iMode);
 __declspec(dllimport) int __stdcall SetMapMode( HDC hdc, int iMode);


 __declspec(dllimport) DWORD __stdcall SetLayout( HDC hdc, DWORD l);
__declspec(dllimport) DWORD __stdcall GetLayout( HDC hdc);


__declspec(dllimport) HMETAFILE __stdcall SetMetaFileBitsEx( UINT cbBuffer, const BYTE *lpData);
 __declspec(dllimport) UINT __stdcall SetPaletteEntries( HPALETTE hpal,
                                                 UINT iStart,
                                                 UINT cEntries,
                                                                 const PALETTEENTRY *pPalEntries);
 __declspec(dllimport) COLORREF __stdcall SetPixel( HDC hdc, int x, int y, COLORREF color);
__declspec(dllimport) BOOL __stdcall SetPixelV( HDC hdc, int x, int y, COLORREF color);
__declspec(dllimport) BOOL __stdcall SetPixelFormat( HDC hdc, int format, const PIXELFORMATDESCRIPTOR * ppfd);
 __declspec(dllimport) int __stdcall SetPolyFillMode( HDC hdc, int mode);
 __declspec(dllimport) BOOL __stdcall StretchBlt( HDC hdcDest, int xDest, int yDest, int wDest, int hDest, HDC hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, DWORD rop);
__declspec(dllimport) BOOL __stdcall SetRectRgn( HRGN hrgn, int left, int top, int right, int bottom);
 __declspec(dllimport) int __stdcall StretchDIBits( HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight,
                 const void * lpBits, const BITMAPINFO * lpbmi, UINT iUsage, DWORD rop);
 __declspec(dllimport) int __stdcall SetROP2( HDC hdc, int rop2);
 __declspec(dllimport) int __stdcall SetStretchBltMode( HDC hdc, int mode);
__declspec(dllimport) UINT __stdcall SetSystemPaletteUse( HDC hdc, UINT use);
 __declspec(dllimport) int __stdcall SetTextCharacterExtra( HDC hdc, int extra);
 __declspec(dllimport) COLORREF __stdcall SetTextColor( HDC hdc, COLORREF color);
 __declspec(dllimport) UINT __stdcall SetTextAlign( HDC hdc, UINT align);
 __declspec(dllimport) BOOL __stdcall SetTextJustification( HDC hdc, int extra, int count);
__declspec(dllimport) BOOL __stdcall UpdateColors( HDC hdc);
# 4511 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;







typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;







typedef struct _BLENDFUNCTION
{
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
}BLENDFUNCTION,*PBLENDFUNCTION;
# 4575 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall AlphaBlend(
         HDC hdcDest,
         int xoriginDest,
         int yoriginDest,
         int wDest,
         int hDest,
         HDC hdcSrc,
         int xoriginSrc,
         int yoriginSrc,
         int wSrc,
         int hSrc,
         BLENDFUNCTION ftn);

__declspec(dllimport) BOOL __stdcall TransparentBlt(
         HDC hdcDest,
         int xoriginDest,
         int yoriginDest,
         int wDest,
         int hDest,
         HDC hdcSrc,
         int xoriginSrc,
         int yoriginSrc,
         int wSrc,
         int hSrc,
         UINT crTransparent);
# 4611 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
__declspec(dllimport)
BOOL
__stdcall
GradientFill(
         HDC hdc,
                        PTRIVERTEX pVertex,
         ULONG nVertex,
         PVOID pMesh,
         ULONG nMesh,
         ULONG ulMode
    );
# 4634 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall GdiAlphaBlend( HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);

__declspec(dllimport) BOOL __stdcall GdiTransparentBlt( HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc,
                                                int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent);

__declspec(dllimport) BOOL __stdcall GdiGradientFill( HDC hdc,
                                                            PTRIVERTEX pVertex,
                                             ULONG nVertex,
                                             PVOID pMesh,
                                             ULONG nCount,
                                             ULONG ulMode);







__declspec(dllimport) BOOL __stdcall PlayMetaFileRecord( HDC hdc,
                                                               LPHANDLETABLE lpHandleTable,
                                                 LPMETARECORD lpMR,
                                                 UINT noObjs);

typedef int (__stdcall* MFENUMPROC)( HDC hdc, HANDLETABLE * lpht, METARECORD * lpMR, int nObj, LPARAM param);
__declspec(dllimport) BOOL __stdcall EnumMetaFile( HDC hdc, HMETAFILE hmf, MFENUMPROC proc, LPARAM param);

typedef int (__stdcall* ENHMFENUMPROC)( HDC hdc, HANDLETABLE * lpht, const ENHMETARECORD * lpmr, int nHandles, LPARAM data);



__declspec(dllimport) HENHMETAFILE __stdcall CloseEnhMetaFile( HDC hdc);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileA( HENHMETAFILE hEnh, LPCSTR lpFileName);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileW( HENHMETAFILE hEnh, LPCWSTR lpFileName);





__declspec(dllimport) HDC __stdcall CreateEnhMetaFileA( HDC hdc, LPCSTR lpFilename, const RECT *lprc, LPCSTR lpDesc);
__declspec(dllimport) HDC __stdcall CreateEnhMetaFileW( HDC hdc, LPCWSTR lpFilename, const RECT *lprc, LPCWSTR lpDesc);





__declspec(dllimport) BOOL __stdcall DeleteEnhMetaFile( HENHMETAFILE hmf);
__declspec(dllimport) BOOL __stdcall EnumEnhMetaFile( HDC hdc, HENHMETAFILE hmf, ENHMFENUMPROC proc,
                                                 LPVOID param, const RECT * lpRect);
__declspec(dllimport) HENHMETAFILE __stdcall GetEnhMetaFileA( LPCSTR lpName);
__declspec(dllimport) HENHMETAFILE __stdcall GetEnhMetaFileW( LPCWSTR lpName);





__declspec(dllimport) UINT __stdcall GetEnhMetaFileBits( HENHMETAFILE hEMF,
                                                 UINT nSize,
                                                                          LPBYTE lpData);
__declspec(dllimport) UINT __stdcall GetEnhMetaFileDescriptionA( HENHMETAFILE hemf,
                                                         UINT cchBuffer,
                                                                                LPSTR lpDescription);
__declspec(dllimport) UINT __stdcall GetEnhMetaFileDescriptionW( HENHMETAFILE hemf,
                                                         UINT cchBuffer,
                                                                                LPWSTR lpDescription);





__declspec(dllimport) UINT __stdcall GetEnhMetaFileHeader( HENHMETAFILE hemf,
                                                     UINT nSize,
                                                                              LPENHMETAHEADER lpEnhMetaHeader);
__declspec(dllimport) UINT __stdcall GetEnhMetaFilePaletteEntries( HENHMETAFILE hemf,
                                                         UINT nNumEntries,
                                                                                  LPPALETTEENTRY lpPaletteEntries);

__declspec(dllimport) UINT __stdcall GetEnhMetaFilePixelFormat( HENHMETAFILE hemf,
                                                         UINT cbBuffer,
                                                                                     PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) UINT __stdcall GetWinMetaFileBits( HENHMETAFILE hemf,
                                                 UINT cbData16,
                                                                             LPBYTE pData16,
                                                 INT iMapMode,
                                                 HDC hdcRef);
__declspec(dllimport) BOOL __stdcall PlayEnhMetaFile( HDC hdc, HENHMETAFILE hmf, const RECT * lprect);
__declspec(dllimport) BOOL __stdcall PlayEnhMetaFileRecord( HDC hdc,
                                                                LPHANDLETABLE pht,
                                                     const ENHMETARECORD *pmr,
                                                     UINT cht);

__declspec(dllimport) HENHMETAFILE __stdcall SetEnhMetaFileBits( UINT nSize,
                                                                            const BYTE * pb);

__declspec(dllimport) HENHMETAFILE __stdcall SetWinMetaFileBits( UINT nSize,
                                                                            const BYTE *lpMeta16Data,
                                                             HDC hdcRef,
                                                             const METAFILEPICT *lpMFP);
__declspec(dllimport) BOOL __stdcall GdiComment( HDC hdc, UINT nSize, const BYTE *lpData);





__declspec(dllimport) BOOL __stdcall GetTextMetricsA( HDC hdc, LPTEXTMETRICA lptm);
__declspec(dllimport) BOOL __stdcall GetTextMetricsW( HDC hdc, LPTEXTMETRICW lptm);
# 4769 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagDIBSECTION {
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
} DIBSECTION, *LPDIBSECTION, *PDIBSECTION;


__declspec(dllimport) BOOL __stdcall AngleArc( HDC hdc, int x, int y, DWORD r, FLOAT StartAngle, FLOAT SweepAngle);
__declspec(dllimport) BOOL __stdcall PolyPolyline( HDC hdc, const POINT *apt, const DWORD *asz, DWORD csz);
__declspec(dllimport) BOOL __stdcall GetWorldTransform( HDC hdc, LPXFORM lpxf);
__declspec(dllimport) BOOL __stdcall SetWorldTransform( HDC hdc, const XFORM * lpxf);
__declspec(dllimport) BOOL __stdcall ModifyWorldTransform( HDC hdc, const XFORM * lpxf, DWORD mode);
__declspec(dllimport) BOOL __stdcall CombineTransform( LPXFORM lpxfOut, const XFORM *lpxf1, const XFORM *lpxf2);






__declspec(dllimport) HBITMAP __stdcall CreateDIBSection(
                    HDC hdc,
                    const BITMAPINFO *pbmi,
                    UINT usage,


                    void **ppvBits,
                    HANDLE hSection,
                    DWORD offset);



__declspec(dllimport) UINT __stdcall GetDIBColorTable( HDC hdc,
                                             UINT iStart,
                                             UINT cEntries,
                                                                         RGBQUAD *prgbq);
__declspec(dllimport) UINT __stdcall SetDIBColorTable( HDC hdc,
                                             UINT iStart,
                                             UINT cEntries,
                                                             const RGBQUAD *prgbq);
# 4846 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagCOLORADJUSTMENT {
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT, *LPCOLORADJUSTMENT;

__declspec(dllimport) BOOL __stdcall SetColorAdjustment( HDC hdc, const COLORADJUSTMENT *lpca);
__declspec(dllimport) BOOL __stdcall GetColorAdjustment( HDC hdc, LPCOLORADJUSTMENT lpca);
__declspec(dllimport) HPALETTE __stdcall CreateHalftonePalette( HDC hdc);


typedef BOOL (__stdcall* ABORTPROC)( HDC, int);




typedef struct _DOCINFOA {
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;

    LPCSTR lpszDatatype;
    DWORD fwType;

} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;

    LPCWSTR lpszDatatype;
    DWORD fwType;

} DOCINFOW, *LPDOCINFOW;

typedef DOCINFOW DOCINFO;
typedef LPDOCINFOW LPDOCINFO;
# 4902 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
 __declspec(dllimport) int __stdcall StartDocA( HDC hdc, const DOCINFOA *lpdi);
 __declspec(dllimport) int __stdcall StartDocW( HDC hdc, const DOCINFOW *lpdi);





 __declspec(dllimport) int __stdcall EndDoc( HDC hdc);
 __declspec(dllimport) int __stdcall StartPage( HDC hdc);
 __declspec(dllimport) int __stdcall EndPage( HDC hdc);
 __declspec(dllimport) int __stdcall AbortDoc( HDC hdc);
__declspec(dllimport) int __stdcall SetAbortProc( HDC hdc, ABORTPROC proc);

__declspec(dllimport) BOOL __stdcall AbortPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall ArcTo( HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
__declspec(dllimport) BOOL __stdcall BeginPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall CloseFigure( HDC hdc);
__declspec(dllimport) BOOL __stdcall EndPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall FillPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall FlattenPath( HDC hdc);
__declspec(dllimport) int __stdcall GetPath( HDC hdc, LPPOINT apt, LPBYTE aj, int cpt);
__declspec(dllimport) HRGN __stdcall PathToRegion( HDC hdc);
__declspec(dllimport) BOOL __stdcall PolyDraw( HDC hdc, const POINT * apt, const BYTE * aj, int cpt);
__declspec(dllimport) BOOL __stdcall SelectClipPath( HDC hdc, int mode);
__declspec(dllimport) int __stdcall SetArcDirection( HDC hdc, int dir);
__declspec(dllimport) BOOL __stdcall SetMiterLimit( HDC hdc, FLOAT limit, PFLOAT old);
__declspec(dllimport) BOOL __stdcall StrokeAndFillPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall StrokePath( HDC hdc);
__declspec(dllimport) BOOL __stdcall WidenPath( HDC hdc);
__declspec(dllimport) HPEN __stdcall ExtCreatePen( DWORD iPenStyle,
                                         DWORD cWidth,
                                         const LOGBRUSH *plbrush,
                                         DWORD cStyle,
                                                           const DWORD *pstyle);
__declspec(dllimport) BOOL __stdcall GetMiterLimit( HDC hdc, PFLOAT plimit);
__declspec(dllimport) int __stdcall GetArcDirection( HDC hdc);

__declspec(dllimport) int __stdcall GetObjectA( HANDLE h, int c, LPVOID pv);
__declspec(dllimport) int __stdcall GetObjectW( HANDLE h, int c, LPVOID pv);
# 4969 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
 __declspec(dllimport) BOOL __stdcall MoveToEx( HDC hdc, int x, int y, LPPOINT lppt);
 __declspec(dllimport) BOOL __stdcall TextOutA( HDC hdc, int x, int y, LPCSTR lpString, int c);
 __declspec(dllimport) BOOL __stdcall TextOutW( HDC hdc, int x, int y, LPCWSTR lpString, int c);





 __declspec(dllimport) BOOL __stdcall ExtTextOutA( HDC hdc, int x, int y, UINT options, const RECT * lprect, LPCSTR lpString, UINT c, const INT * lpDx);
 __declspec(dllimport) BOOL __stdcall ExtTextOutW( HDC hdc, int x, int y, UINT options, const RECT * lprect, LPCWSTR lpString, UINT c, const INT * lpDx);





__declspec(dllimport) BOOL __stdcall PolyTextOutA( HDC hdc, const POLYTEXTA * ppt, int nstrings);
__declspec(dllimport) BOOL __stdcall PolyTextOutW( HDC hdc, const POLYTEXTW * ppt, int nstrings);






__declspec(dllimport) HRGN __stdcall CreatePolygonRgn( const POINT *pptl,
                                                 int cPoint,
                                                 int iMode);
__declspec(dllimport) BOOL __stdcall DPtoLP( HDC hdc, LPPOINT lppt, int c);
__declspec(dllimport) BOOL __stdcall LPtoDP( HDC hdc, LPPOINT lppt, int c);
 __declspec(dllimport) BOOL __stdcall Polygon( HDC hdc, const POINT *apt, int cpt);
 __declspec(dllimport) BOOL __stdcall Polyline( HDC hdc, const POINT *apt, int cpt);

__declspec(dllimport) BOOL __stdcall PolyBezier( HDC hdc, const POINT * apt, DWORD cpt);
__declspec(dllimport) BOOL __stdcall PolyBezierTo( HDC hdc, const POINT * apt, DWORD cpt);
__declspec(dllimport) BOOL __stdcall PolylineTo( HDC hdc, const POINT * apt, DWORD cpt);

 __declspec(dllimport) BOOL __stdcall SetViewportExtEx( HDC hdc, int x, int y, LPSIZE lpsz);
 __declspec(dllimport) BOOL __stdcall SetViewportOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
 __declspec(dllimport) BOOL __stdcall SetWindowExtEx( HDC hdc, int x, int y, LPSIZE lpsz);
 __declspec(dllimport) BOOL __stdcall SetWindowOrgEx( HDC hdc, int x, int y, LPPOINT lppt);

 __declspec(dllimport) BOOL __stdcall OffsetViewportOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
 __declspec(dllimport) BOOL __stdcall OffsetWindowOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
 __declspec(dllimport) BOOL __stdcall ScaleViewportExtEx( HDC hdc, int xn, int dx, int yn, int yd, LPSIZE lpsz);
 __declspec(dllimport) BOOL __stdcall ScaleWindowExtEx( HDC hdc, int xn, int xd, int yn, int yd, LPSIZE lpsz);
__declspec(dllimport) BOOL __stdcall SetBitmapDimensionEx( HBITMAP hbm, int w, int h, LPSIZE lpsz);
__declspec(dllimport) BOOL __stdcall SetBrushOrgEx( HDC hdc, int x, int y, LPPOINT lppt);

__declspec(dllimport) int __stdcall GetTextFaceA( HDC hdc, int c, LPSTR lpName);
__declspec(dllimport) int __stdcall GetTextFaceW( HDC hdc, int c, LPWSTR lpName);
# 5026 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

__declspec(dllimport) DWORD __stdcall GetKerningPairsA( HDC hdc,
                                                 DWORD nPairs,
                                                                                LPKERNINGPAIR lpKernPair);
__declspec(dllimport) DWORD __stdcall GetKerningPairsW( HDC hdc,
                                                 DWORD nPairs,
                                                                                LPKERNINGPAIR lpKernPair);







__declspec(dllimport) BOOL __stdcall GetDCOrgEx( HDC hdc, LPPOINT lppt);
__declspec(dllimport) BOOL __stdcall FixBrushOrgEx( HDC hdc, int x, int y, LPPOINT ptl);
__declspec(dllimport) BOOL __stdcall UnrealizeObject( HGDIOBJ h);

__declspec(dllimport) BOOL __stdcall GdiFlush(void);
__declspec(dllimport) DWORD __stdcall GdiSetBatchLimit( DWORD dw);
__declspec(dllimport) DWORD __stdcall GdiGetBatchLimit(void);
# 5060 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);






__declspec(dllimport) int __stdcall SetICMMode( HDC hdc, int mode);
__declspec(dllimport) BOOL __stdcall CheckColorsInGamut( HDC hdc,
                                                                       LPRGBTRIPLE lpRGBTriple,
                                                                               LPVOID dlpBuffer,
                                                         DWORD nCount);

__declspec(dllimport) HCOLORSPACE __stdcall GetColorSpace( HDC hdc);
__declspec(dllimport) BOOL __stdcall GetLogColorSpaceA( HCOLORSPACE hColorSpace,
                                                                          LPLOGCOLORSPACEA lpBuffer,
                                                     DWORD nSize);
__declspec(dllimport) BOOL __stdcall GetLogColorSpaceW( HCOLORSPACE hColorSpace,
                                                                          LPLOGCOLORSPACEW lpBuffer,
                                                     DWORD nSize);






__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceA( LPLOGCOLORSPACEA lplcs);
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceW( LPLOGCOLORSPACEW lplcs);





__declspec(dllimport) HCOLORSPACE __stdcall SetColorSpace( HDC hdc, HCOLORSPACE hcs);
__declspec(dllimport) BOOL __stdcall DeleteColorSpace( HCOLORSPACE hcs);
__declspec(dllimport) BOOL __stdcall GetICMProfileA( HDC hdc,
                                                        LPDWORD pBufSize,
                                                                            LPSTR pszFilename);
__declspec(dllimport) BOOL __stdcall GetICMProfileW( HDC hdc,
                                                        LPDWORD pBufSize,
                                                                            LPWSTR pszFilename);






__declspec(dllimport) BOOL __stdcall SetICMProfileA( HDC hdc, LPSTR lpFileName);
__declspec(dllimport) BOOL __stdcall SetICMProfileW( HDC hdc, LPWSTR lpFileName);





__declspec(dllimport) BOOL __stdcall GetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
__declspec(dllimport) BOOL __stdcall SetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
__declspec(dllimport) BOOL __stdcall ColorMatchToTarget( HDC hdc, HDC hdcTarget, DWORD action);
__declspec(dllimport) int __stdcall EnumICMProfilesA( HDC hdc, ICMENUMPROCA proc, LPARAM param);
__declspec(dllimport) int __stdcall EnumICMProfilesW( HDC hdc, ICMENUMPROCW proc, LPARAM param);






__declspec(dllimport) BOOL __stdcall UpdateICMRegKeyA( DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command);

__declspec(dllimport) BOOL __stdcall UpdateICMRegKeyW( DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command);





#pragma deprecated (UpdateICMRegKeyW)
#pragma deprecated (UpdateICMRegKeyA)




__declspec(dllimport) BOOL __stdcall ColorCorrectPalette( HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num);
# 5305 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
typedef struct tagEMR
{
    DWORD iType;
    DWORD nSize;

} EMR, *PEMR;



typedef struct tagEMRTEXT
{
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;

} EMRTEXT, *PEMRTEXT;



typedef struct tagABORTPATH
{
    EMR emr;
} EMRABORTPATH, *PEMRABORTPATH,
  EMRBEGINPATH, *PEMRBEGINPATH,
  EMRENDPATH, *PEMRENDPATH,
  EMRCLOSEFIGURE, *PEMRCLOSEFIGURE,
  EMRFLATTENPATH, *PEMRFLATTENPATH,
  EMRWIDENPATH, *PEMRWIDENPATH,
  EMRSETMETARGN, *PEMRSETMETARGN,
  EMRSAVEDC, *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR emr;
    DWORD iMode;
} EMRSELECTCLIPPATH, *PEMRSELECTCLIPPATH,
  EMRSETBKMODE, *PEMRSETBKMODE,
  EMRSETMAPMODE, *PEMRSETMAPMODE,

  EMRSETLAYOUT, *PEMRSETLAYOUT,

  EMRSETPOLYFILLMODE, *PEMRSETPOLYFILLMODE,
  EMRSETROP2, *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE, *PEMRSETICMMODE,
  EMRSETTEXTALIGN, *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR emr;
    FLOAT eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR emr;
    LONG iRelative;
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR emr;
    DWORD iArcDirection;

} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR emr;
    DWORD dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR emr;
    COLORREF crColor;
} EMRSETBKCOLOR, *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR emr;
    DWORD ihObject;
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;

typedef struct tagEMRSELECTPALETTE
{
    EMR emr;
    DWORD ihPal;
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;


} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR emr;
    POINTL ptl;
} EMRLINETO, *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR emr;
    POINTL ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR emr;
    RECTL rclBounds;
} EMRFILLPATH, *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH, *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR emr;
    RECTL rclClip;
} EMREXCLUDECLIPRECT, *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR emr;
    POINTL ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX, *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX, *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR emr;
    SIZEL szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX, *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX, *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
    DWORD iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR emr;
    RECTL rclBox;
} EMRELLIPSE, *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;


typedef struct tagEMRROUNDRECT
{
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
} EMRARC, *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE, *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
} EMRPOLYLINE, *PEMRPOLYLINE,
  EMRPOLYBEZIER, *PEMRPOLYBEZIER,
  EMRPOLYGON, *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO, *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
} EMRPOLYLINE16, *PEMRPOLYLINE16,
  EMRPOLYBEZIER16, *PEMRPOLYBEZIER16,
  EMRPOLYGON16, *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16, *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
    BYTE abTypes[1];
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
    BYTE abTypes[1];
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD aPolyCounts[1];
    POINTL aptl[1];
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON, *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD aPolyCounts[1];
    POINTS apts[1];
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16, *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN, *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;

} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT aemrtext[1];

} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR emr;
    RECTL rclBounds;
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEMRCREATEPALETTE
{
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;

} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

typedef struct tagEMRCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;


    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN32 elp;
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH32 lb;

} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;


    DWORD offBits;
    DWORD cbBits;
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;

} EMRFORMAT, *PEMRFORMAT;



typedef struct tagEMRGLSRECORD
{
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbData;
    BYTE Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;

typedef struct tagEMRCREATECOLORSPACE
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEA lcs;
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

typedef struct tagEMRSETCOLORSPACE
{
    EMR emr;
    DWORD ihCS;
} EMRSETCOLORSPACE, *PEMRSETCOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;





typedef struct tagEMREXTESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbEscData;
    BYTE EscData[1];
} EMREXTESCAPE, *PEMREXTESCAPE,
  EMRDRAWESCAPE, *PEMRDRAWESCAPE;

typedef struct tagEMRNAMEDESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbDriver;
    INT cbEscData;
    BYTE EscData[1];
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;



typedef struct tagEMRSETICMPROFILE
{
    EMR emr;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
} EMRSETICMPROFILE, *PEMRSETICMPROFILE,
  EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
  EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;



typedef struct tagEMRCREATECOLORSPACEW
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEW lcs;
    DWORD dwFlags;
    DWORD cbData;
    BYTE Data[1];
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;



typedef struct tagCOLORMATCHTOTARGET
{
    EMR emr;
    DWORD dwAction;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;

typedef struct tagCOLORCORRECTPALETTE
{
    EMR emr;
    DWORD ihPalette;
    DWORD nFirstEntry;
    DWORD nPalEntries;
    DWORD nReserved;
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;

typedef struct tagEMRALPHABLEND
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;

typedef struct tagEMRGRADIENTFILL
{
    EMR emr;
    RECTL rclBounds;
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX Ver[1];
}EMRGRADIENTFILL,*PEMRGRADIENTFILL;

typedef struct tagEMRTRANSPARENTBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;
# 6073 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
__declspec(dllimport) HGLRC __stdcall wglCreateContext(HDC);
__declspec(dllimport) HGLRC __stdcall wglCreateLayerContext(HDC, int);
__declspec(dllimport) BOOL __stdcall wglDeleteContext(HGLRC);
__declspec(dllimport) HGLRC __stdcall wglGetCurrentContext(void);
__declspec(dllimport) HDC __stdcall wglGetCurrentDC(void);
__declspec(dllimport) PROC __stdcall wglGetProcAddress(LPCSTR);
__declspec(dllimport) BOOL __stdcall wglMakeCurrent(HDC, HGLRC);
__declspec(dllimport) BOOL __stdcall wglShareLists(HGLRC, HGLRC);
__declspec(dllimport) BOOL __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
__declspec(dllimport) BOOL __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);





__declspec(dllimport) BOOL __stdcall SwapBuffers(HDC);

typedef struct _POINTFLOAT {
    FLOAT x;
    FLOAT y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT {
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT, *LPGLYPHMETRICSFLOAT;



__declspec(dllimport) BOOL __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
__declspec(dllimport) BOOL __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);







typedef struct tagLAYERPLANEDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR, *LPLAYERPLANEDESCRIPTOR;
# 6192 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
__declspec(dllimport) int __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
                                                 const COLORREF *);
__declspec(dllimport) int __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
__declspec(dllimport) BOOL __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
__declspec(dllimport) BOOL __stdcall wglSwapLayerBuffers(HDC, UINT);



typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP, *LPWGLSWAP;



__declspec(dllimport) DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP *);
# 6228 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wingdi.h"
}



#pragma warning(pop)
# 166 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h" 1
# 44 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
extern "C" {
# 62 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;

typedef MENUTEMPLATEW MENUTEMPLATE;



typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;

typedef LPMENUTEMPLATEW LPMENUTEMPLATE;




typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);
# 88 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef INT_PTR (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);







typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);

typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);

typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);


typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
# 161 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef PROPENUMPROCW PROPENUMPROC;
typedef PROPENUMPROCEXW PROPENUMPROCEX;
typedef EDITWORDBREAKPROCW EDITWORDBREAKPROC;
# 172 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA WINSTAENUMPROCA;
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef NAMEENUMPROCW WINSTAENUMPROCW;
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
# 194 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef WINSTAENUMPROCW WINSTAENUMPROC;
typedef DESKTOPENUMPROCW DESKTOPENUMPROC;
# 265 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
#pragma warning(push)
#pragma warning(disable: 4995)





__declspec(dllimport)
int
__stdcall
wvsprintfA(
          LPSTR,
                                LPCSTR,
         va_list arglist);
__declspec(dllimport)
int
__stdcall
wvsprintfW(
          LPWSTR,
                                LPCWSTR,
         va_list arglist);






__declspec(dllimport)
int
__cdecl
wsprintfA(
          LPSTR,
                                LPCSTR,
    ...);
__declspec(dllimport)
int
__cdecl
wsprintfW(
          LPWSTR,
                                LPCWSTR,
    ...);







#pragma warning(pop)
# 772 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;



typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;

typedef CBT_CREATEWNDW CBT_CREATEWND;
typedef LPCBT_CREATEWNDW LPCBT_CREATEWND;
# 796 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagCBTACTIVATESTRUCT
{
    BOOL fMouse;
    HWND hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;
# 813 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagWTSSESSION_NOTIFICATION
{
    DWORD cbSize;
    DWORD dwSessionId;

} WTSSESSION_NOTIFICATION, *PWTSSESSION_NOTIFICATION;
# 964 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct
{
    HWND hwnd;
    RECT rc;
} SHELLHOOKINFO, *LPSHELLHOOKINFO;




typedef struct tagEVENTMSG {
    UINT message;
    UINT paramL;
    UINT paramH;
    DWORD time;
    HWND hwnd;
} EVENTMSG, *PEVENTMSGMSG, *NPEVENTMSGMSG, *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG, *NPEVENTMSG, *LPEVENTMSG;




typedef struct tagCWPSTRUCT {
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
} CWPSTRUCT, *PCWPSTRUCT, *NPCWPSTRUCT, *LPCWPSTRUCT;





typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT, *NPCWPRETSTRUCT, *LPCWPRETSTRUCT;
# 1031 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagKBDLLHOOKSTRUCT {
    DWORD vkCode;
    DWORD scanCode;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;




typedef struct tagMSLLHOOKSTRUCT {
    POINT pt;
    DWORD mouseData;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT, *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;
# 1061 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagDEBUGHOOKINFO
{
    DWORD idThread;
    DWORD idThreadInstaller;
    LPARAM lParam;
    WPARAM wParam;
    int code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO, *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;




typedef struct tagMOUSEHOOKSTRUCT {
    POINT pt;
    HWND hwnd;
    UINT wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT, *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;



typedef struct tagMOUSEHOOKSTRUCTEX : public tagMOUSEHOOKSTRUCT
{
    DWORD mouseData;
} MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX;
# 1099 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagHARDWAREHOOKSTRUCT {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
} HARDWAREHOOKSTRUCT, *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;
# 1150 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutA(
         LPCSTR pwszKLID,
         UINT Flags);
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutW(
         LPCWSTR pwszKLID,
         UINT Flags);
# 1170 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HKL
__stdcall
ActivateKeyboardLayout(
         HKL hkl,
         UINT Flags);
# 1186 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
int
__stdcall
ToUnicodeEx(
         UINT wVirtKey,
         UINT wScanCode,
                          const BYTE *lpKeyState,
                          LPWSTR pwszBuff,
         int cchBuff,
         UINT wFlags,
             HKL dwhkl);


__declspec(dllimport)
BOOL
__stdcall
UnloadKeyboardLayout(
         HKL hkl);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameA(
                                LPSTR pwszKLID);
__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameW(
                                LPWSTR pwszKLID);







__declspec(dllimport)
int
__stdcall
GetKeyboardLayoutList(
         int nBuff,
                                       HKL *lpList);

__declspec(dllimport)
HKL
__stdcall
GetKeyboardLayout(
         DWORD idThread);
# 1246 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagMOUSEMOVEPOINT {
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;
# 1265 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
int
__stdcall
GetMouseMovePointsEx(
         UINT cbSize,
         LPMOUSEMOVEPOINT lppt,
                             LPMOUSEMOVEPOINT lpptBuf,
         int nBufPoints,
         DWORD resolution);
# 1305 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopA(
         LPCSTR lpszDesktop,
               LPCSTR lpszDevice,
               DEVMODEA* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopW(
         LPCWSTR lpszDesktop,
               LPCWSTR lpszDevice,
               DEVMODEW* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);






__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExA(
         LPCSTR lpszDesktop,
               LPCSTR lpszDevice,
               DEVMODEA* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa,
         ULONG ulHeapSize,
               PVOID pvoid);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExW(
         LPCWSTR lpszDesktop,
               LPCWSTR lpszDevice,
               DEVMODEW* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa,
         ULONG ulHeapSize,
               PVOID pvoid);
# 1370 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopA(
         LPCSTR lpszDesktop,
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopW(
         LPCWSTR lpszDesktop,
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);






__declspec(dllimport)
HDESK
__stdcall
OpenInputDesktop(
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);


__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsA(
             HWINSTA hwinsta,
         DESKTOPENUMPROCA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsW(
             HWINSTA hwinsta,
         DESKTOPENUMPROCW lpEnumFunc,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
EnumDesktopWindows(
             HDESK hDesktop,
         WNDENUMPROC lpfn,
         LPARAM lParam);


__declspec(dllimport)
BOOL
__stdcall
SwitchDesktop(
         HDESK hDesktop);


__declspec(dllimport)
BOOL
__stdcall
SetThreadDesktop(
          HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
CloseDesktop(
         HDESK hDesktop);

__declspec(dllimport)
HDESK
__stdcall
GetThreadDesktop(
         DWORD dwThreadId);
# 1491 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationA(
             LPCSTR lpwinsta,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationW(
             LPCWSTR lpwinsta,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);






__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationA(
         LPCSTR lpszWinSta,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationW(
         LPCWSTR lpszWinSta,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);






__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsA(
         WINSTAENUMPROCA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsW(
         WINSTAENUMPROCW lpEnumFunc,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
CloseWindowStation(
         HWINSTA hWinSta);

__declspec(dllimport)
BOOL
__stdcall
SetProcessWindowStation(
         HWINSTA hWinSta);

__declspec(dllimport)
HWINSTA
__stdcall
GetProcessWindowStation(
    void);
# 1579 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetUserObjectSecurity(
         HANDLE hObj,
         PSECURITY_INFORMATION pSIRequested,
         PSECURITY_DESCRIPTOR pSID);

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectSecurity(
         HANDLE hObj,
         PSECURITY_INFORMATION pSIRequested,
                                    PSECURITY_DESCRIPTOR pSID,
         DWORD nLength,
          LPDWORD lpnLengthNeeded);
# 1612 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationA(
         HANDLE hObj,
         int nIndex,
                                    PVOID pvInfo,
         DWORD nLength,
              LPDWORD lpnLengthNeeded);
__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationW(
         HANDLE hObj,
         int nIndex,
                                    PVOID pvInfo,
         DWORD nLength,
              LPDWORD lpnLengthNeeded);






__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationA(
         HANDLE hObj,
         int nIndex,
                              PVOID pvInfo,
         DWORD nLength);
__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationW(
         HANDLE hObj,
         int nIndex,
                              PVOID pvInfo,
         DWORD nLength);
# 1673 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagWNDCLASSEXA {
    UINT cbSize;

    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;

    HICON hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA, *NPWNDCLASSEXA, *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
    UINT cbSize;

    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;

    HICON hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW, *NPWNDCLASSEXW, *LPWNDCLASSEXW;

typedef WNDCLASSEXW WNDCLASSEX;
typedef PWNDCLASSEXW PWNDCLASSEX;
typedef NPWNDCLASSEXW NPWNDCLASSEX;
typedef LPWNDCLASSEXW LPWNDCLASSEX;
# 1718 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagWNDCLASSA {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
} WNDCLASSA, *PWNDCLASSA, *NPWNDCLASSA, *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
} WNDCLASSW, *PWNDCLASSW, *NPWNDCLASSW, *LPWNDCLASSW;

typedef WNDCLASSW WNDCLASS;
typedef PWNDCLASSW PWNDCLASS;
typedef NPWNDCLASSW NPWNDCLASS;
typedef LPWNDCLASSW LPWNDCLASS;







__declspec(dllimport)
BOOL
__stdcall
IsHungAppWindow(
         HWND hwnd);



__declspec(dllimport)
void
__stdcall
DisableProcessWindowsGhosting(
    void);
# 1781 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagMSG {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;



} MSG, *PMSG, *NPMSG, *LPMSG;
# 1939 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;
# 1995 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
                               PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;


typedef struct tagMDINEXTMENU
{
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND hwndNext;
} MDINEXTMENU, * PMDINEXTMENU, * LPMDINEXTMENU;
# 2257 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct {
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR Data[1];
} POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING;
# 2530 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageA(
         LPCSTR lpString);
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageW(
         LPCWSTR lpString);
# 2575 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagWINDOWPOS {
    HWND hwnd;
    HWND hwndInsertAfter;
    int x;
    int y;
    int cx;
    int cy;
    UINT flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;




typedef struct tagNCCALCSIZE_PARAMS {
    RECT rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;
# 2648 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

__declspec(dllimport)
BOOL
__stdcall
TrackMouseEvent(
            LPTRACKMOUSEEVENT lpEventTrack);
# 2866 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawEdge(
         HDC hdc,
            LPRECT qrc,
         UINT edge,
         UINT grfFlags);
# 2929 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawFrameControl(
         HDC,
            LPRECT,
         UINT,
         UINT);
# 2959 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawCaption(
         HWND hwnd,
         HDC hdc,
         const RECT * lprect,
         UINT flags);
# 2978 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawAnimatedRects(
             HWND hwnd,
         int idAni,
         const RECT *lprcFrom,
         const RECT *lprcTo);
# 3061 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagACCEL {

    BYTE fVirt;
    WORD key;
    WORD cmd;





} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT {
    HDC hdc;
    BOOL fErase;
    RECT rcPaint;
    BOOL fRestore;
    BOOL fIncUpdate;
    BYTE rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCREATESTRUCTA {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;

typedef CREATESTRUCTW CREATESTRUCT;
typedef LPCREATESTRUCTW LPCREATESTRUCT;





typedef struct tagWINDOWPLACEMENT {
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;



} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;
# 3145 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagNMHDR
{
    HWND hwndFrom;
    UINT_PTR idFrom;
    UINT code;
} NMHDR;







typedef NMHDR * LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD styleOld;
    DWORD styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;
# 3216 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagMEASUREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    ULONG_PTR itemData;
} MEASUREITEMSTRUCT, *PMEASUREITEMSTRUCT, *LPMEASUREITEMSTRUCT;




typedef struct tagDRAWITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ULONG_PTR itemData;
} DRAWITEMSTRUCT, *PDRAWITEMSTRUCT, *LPDRAWITEMSTRUCT;




typedef struct tagDELETEITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    ULONG_PTR itemData;
} DELETEITEMSTRUCT, *PDELETEITEMSTRUCT, *LPDELETEITEMSTRUCT;




typedef struct tagCOMPAREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    ULONG_PTR itemData1;
    UINT itemID2;
    ULONG_PTR itemData2;
    DWORD dwLocaleId;
} COMPAREITEMSTRUCT, *PCOMPAREITEMSTRUCT, *LPCOMPAREITEMSTRUCT;
# 3277 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetMessageA(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax);
__declspec(dllimport)
BOOL
__stdcall
GetMessageW(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax);
# 3324 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
TranslateMessage(
         const MSG *lpMsg);

__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageA(
         const MSG *lpMsg);
__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageW(
         const MSG *lpMsg);
# 3364 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetMessageQueue(
         int cMessagesMax);

__declspec(dllimport)
BOOL
__stdcall
PeekMessageA(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax,
         UINT wRemoveMsg);
__declspec(dllimport)
BOOL
__stdcall
PeekMessageW(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax,
         UINT wRemoveMsg);
# 3416 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
RegisterHotKey(
             HWND hWnd,
         int id,
         UINT fsModifiers,
         UINT vk);

__declspec(dllimport)
BOOL
__stdcall
UnregisterHotKey(
             HWND hWnd,
         int id);
# 3493 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ExitWindowsEx(
         UINT uFlags,
         DWORD dwReason);

__declspec(dllimport)
BOOL
__stdcall
SwapMouseButton(
         BOOL fSwap);

__declspec(dllimport)
DWORD
__stdcall
GetMessagePos(
    void);

__declspec(dllimport)
LONG
__stdcall
GetMessageTime(
    void);

__declspec(dllimport)
LPARAM
__stdcall
GetMessageExtraInfo(
    void);


__declspec(dllimport)
DWORD
__stdcall
GetUnpredictedMessagePos(
    void);



__declspec(dllimport)
BOOL
__stdcall
IsWow64Message(
    void);



__declspec(dllimport)
LPARAM
__stdcall
SetMessageExtraInfo(
         LPARAM lParam);


__declspec(dllimport)
LRESULT
__stdcall
SendMessageA(
         HWND hWnd,
         UINT Msg,
                                 WPARAM wParam,
                                 LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageW(
         HWND hWnd,
         UINT Msg,
                                 WPARAM wParam,
                                 LPARAM lParam);
# 3596 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         UINT fuFlags,
         UINT uTimeout,
              PDWORD_PTR lpdwResult);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         UINT fuFlags,
         UINT uTimeout,
              PDWORD_PTR lpdwResult);






__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         SENDASYNCPROC lpResultCallBack,
         ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         SENDASYNCPROC lpResultCallBack,
         ULONG_PTR dwData);







typedef struct {
    UINT cbSize;
    HDESK hdesk;
    HWND hwnd;
    LUID luid;
} BSMINFO, *PBSMINFO;

__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExA(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
              PBSMINFO pbsmInfo);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExW(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
              PBSMINFO pbsmInfo);
# 3716 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageA(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageW(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
# 3790 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef PVOID HDEVNOTIFY;
typedef HDEVNOTIFY *PHDEVNOTIFY;







__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationA(
         HANDLE hRecipient,
         LPVOID NotificationFilter,
         DWORD Flags);
__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationW(
         HANDLE hRecipient,
         LPVOID NotificationFilter,
         DWORD Flags);






__declspec(dllimport)
BOOL
__stdcall
UnregisterDeviceNotification(
         HDEVNOTIFY Handle
    );







typedef PVOID HPOWERNOTIFY;
typedef HPOWERNOTIFY *PHPOWERNOTIFY;



__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterPowerSettingNotification(
       HANDLE hRecipient,
       LPCGUID PowerSettingGuid,
       DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterPowerSettingNotification(
       HPOWERNOTIFY Handle
    );

__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterSuspendResumeNotification (
       HANDLE hRecipient,
       DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterSuspendResumeNotification (
       HPOWERNOTIFY Handle
    );
# 3878 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
PostMessageA(
             HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostMessageW(
             HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageA(
         DWORD idThread,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageW(
         DWORD idThread,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
# 3947 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
AttachThreadInput(
         DWORD idAttach,
         DWORD idAttachTo,
         BOOL fAttach);


__declspec(dllimport)
BOOL
__stdcall
ReplyMessage(
         LRESULT lResult);

__declspec(dllimport)
BOOL
__stdcall
WaitMessage(
    void);





__declspec(dllimport)
DWORD
__stdcall
WaitForInputIdle(
         HANDLE hProcess,
         DWORD dwMilliseconds);

__declspec(dllimport)

LRESULT
__stdcall




DefWindowProcA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefWindowProcW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
void
__stdcall
PostQuitMessage(
         int nExitCode);



__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcA(
         WNDPROC lpPrevWndFunc,
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcW(
         WNDPROC lpPrevWndFunc,
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
# 4071 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
InSendMessage(
    void);
# 4085 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
DWORD
__stdcall
InSendMessageEx(
               LPVOID lpReserved);
# 4108 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
GetDoubleClickTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetDoubleClickTime(
         UINT);

__declspec(dllimport)
ATOM
__stdcall
RegisterClassA(
         const WNDCLASSA *lpWndClass);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassW(
         const WNDCLASSW *lpWndClass);






__declspec(dllimport)
BOOL
__stdcall
UnregisterClassA(
         LPCSTR lpClassName,
             HINSTANCE hInstance);
__declspec(dllimport)
BOOL
__stdcall
UnregisterClassW(
         LPCWSTR lpClassName,
             HINSTANCE hInstance);







__declspec(dllimport)
BOOL
__stdcall
GetClassInfoA(
             HINSTANCE hInstance,
         LPCSTR lpClassName,
          LPWNDCLASSA lpWndClass);

__declspec(dllimport)
BOOL
__stdcall
GetClassInfoW(
             HINSTANCE hInstance,
         LPCWSTR lpClassName,
          LPWNDCLASSW lpWndClass);







__declspec(dllimport)
ATOM
__stdcall
RegisterClassExA(
         const WNDCLASSEXA *);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassExW(
         const WNDCLASSEXW *);







__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExA(
             HINSTANCE hInstance,
         LPCSTR lpszClass,
          LPWNDCLASSEXA lpwcx);

__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExW(
             HINSTANCE hInstance,
         LPCWSTR lpszClass,
          LPWNDCLASSEXW lpwcx);
# 4231 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef BOOLEAN (__stdcall * PREGISTERCLASSNAMEW)(LPCWSTR);


__declspec(dllimport)
HWND
__stdcall
CreateWindowExA(
         DWORD dwExStyle,
             LPCSTR lpClassName,
             LPCSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HMENU hMenu,
             HINSTANCE hInstance,
             LPVOID lpParam);
__declspec(dllimport)
HWND
__stdcall
CreateWindowExW(
         DWORD dwExStyle,
             LPCWSTR lpClassName,
             LPCWSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HMENU hMenu,
             HINSTANCE hInstance,
             LPVOID lpParam);
# 4293 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
IsWindow(
             HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
IsMenu(
         HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
IsChild(
         HWND hWndParent,
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
DestroyWindow(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowWindow(
         HWND hWnd,
         int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
AnimateWindow(
         HWND hWnd,
         DWORD dwTime,
         DWORD dwFlags);
# 4345 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindow(
         HWND hWnd,
             HDC hdcDst,
             POINT* pptDst,
             SIZE* psize,
             HDC hdcSrc,
             POINT* pptSrc,
         COLORREF crKey,
             BLENDFUNCTION* pblend,
         DWORD dwFlags);




typedef struct tagUPDATELAYEREDWINDOWINFO
{
    DWORD cbSize;
    HDC hdcDst;
    const POINT* pptDst;
    const SIZE* psize;
    HDC hdcSrc;
    const POINT* pptSrc;
    COLORREF crKey;
    const BLENDFUNCTION* pblend;
    DWORD dwFlags;
    const RECT* prcDirty;
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;





__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindowIndirect(
         HWND hWnd,
         const UPDATELAYEREDWINDOWINFO* pULWInfo);
# 4397 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetLayeredWindowAttributes(
         HWND hwnd,
              COLORREF* pcrKey,
              BYTE* pbAlpha,
              DWORD* pdwFlags);
# 4413 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
PrintWindow(
         HWND hwnd,
         HDC hdcBlt,
         UINT nFlags);
# 4429 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetLayeredWindowAttributes(
         HWND hwnd,
         COLORREF crKey,
         BYTE bAlpha,
         DWORD dwFlags);
# 4459 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ShowWindowAsync(
          HWND hWnd,
          int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
FlashWindow(
          HWND hWnd,
          BOOL bInvert);


typedef struct {
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;

__declspec(dllimport)
BOOL
__stdcall
FlashWindowEx(
         PFLASHWINFO pfwi);
# 4498 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ShowOwnedPopups(
          HWND hWnd,
          BOOL fShow);

__declspec(dllimport)
BOOL
__stdcall
OpenIcon(
          HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
CloseWindow(
          HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
MoveWindow(
         HWND hWnd,
         int X,
         int Y,
         int nWidth,
         int nHeight,
         BOOL bRepaint);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPos(
         HWND hWnd,
             HWND hWndInsertAfter,
         int X,
         int Y,
         int cx,
         int cy,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
GetWindowPlacement(
         HWND hWnd,
            WINDOWPLACEMENT *lpwndpl);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPlacement(
         HWND hWnd,
         const WINDOWPLACEMENT *lpwndpl);






__declspec(dllimport)
BOOL
__stdcall
GetWindowDisplayAffinity(
         HWND hWnd,
          DWORD* pdwAffinity);

__declspec(dllimport)
BOOL
__stdcall
SetWindowDisplayAffinity(
         HWND hWnd,
         DWORD dwAffinity);
# 4583 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HDWP
__stdcall
BeginDeferWindowPos(
         int nNumWindows);

__declspec(dllimport)
HDWP
__stdcall
DeferWindowPos(
         HDWP hWinPosInfo,
         HWND hWnd,
             HWND hWndInsertAfter,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);


__declspec(dllimport)
BOOL
__stdcall
EndDeferWindowPos(
         HDWP hWinPosInfo);
# 4617 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
IsWindowVisible(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsIconic(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
AnyPopup(
    void);

__declspec(dllimport)
BOOL
__stdcall
BringWindowToTop(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsZoomed(
         HWND hWnd);
# 4686 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack2.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack2.h"
#pragma warning(disable: 4103)

#pragma pack(push,2)
# 4686 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h" 2








typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;







typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;

typedef LPDLGTEMPLATEW LPDLGTEMPLATE;
# 4724 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;

typedef LPCDLGTEMPLATEW LPCDLGTEMPLATE;
# 4742 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;

typedef PDLGITEMTEMPLATEW PDLGITEMTEMPLATE;



typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;

typedef LPDLGITEMTEMPLATEW LPDLGITEMTEMPLATE;
# 4770 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 4770 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h" 2





__declspec(dllimport)
HWND
__stdcall
CreateDialogParamA(
             HINSTANCE hInstance,
         LPCSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogParamW(
             HINSTANCE hInstance,
         LPCWSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);






__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamA(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEA lpTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamW(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEW lpTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
# 4843 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamA(
             HINSTANCE hInstance,
         LPCSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamW(
             HINSTANCE hInstance,
         LPCWSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);






__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamA(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEA hDialogTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamW(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEW hDialogTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
# 4911 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
EndDialog(
         HWND hDlg,
         INT_PTR nResult);

__declspec(dllimport)
HWND
__stdcall
GetDlgItem(
             HWND hDlg,
         int nIDDlgItem);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemInt(
         HWND hDlg,
         int nIDDlgItem,
         UINT uValue,
         BOOL bSigned);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemInt(
         HWND hDlg,
         int nIDDlgItem,
              BOOL *lpTranslated,
         BOOL bSigned);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextA(
         HWND hDlg,
         int nIDDlgItem,
         LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextW(
         HWND hDlg,
         int nIDDlgItem,
         LPCWSTR lpString);







__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextA(
         HWND hDlg,
         int nIDDlgItem,
                         LPSTR lpString,
         int cchMax);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextW(
         HWND hDlg,
         int nIDDlgItem,
                         LPWSTR lpString,
         int cchMax);






__declspec(dllimport)
BOOL
__stdcall
CheckDlgButton(
         HWND hDlg,
         int nIDButton,
         UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
CheckRadioButton(
         HWND hDlg,
         int nIDFirstButton,
         int nIDLastButton,
         int nIDCheckButton);

__declspec(dllimport)
UINT
__stdcall
IsDlgButtonChecked(
         HWND hDlg,
         int nIDButton);

__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageA(
         HWND hDlg,
         int nIDDlgItem,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageW(
         HWND hDlg,
         int nIDDlgItem,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
HWND
__stdcall
GetNextDlgGroupItem(
         HWND hDlg,
             HWND hCtl,
         BOOL bPrevious);

__declspec(dllimport)
HWND
__stdcall
GetNextDlgTabItem(
         HWND hDlg,
             HWND hCtl,
         BOOL bPrevious);

__declspec(dllimport)
int
__stdcall
GetDlgCtrlID(
         HWND hWnd);

__declspec(dllimport)
long
__stdcall
GetDialogBaseUnits(void);

__declspec(dllimport)

LRESULT
__stdcall




DefDlgProcA(
         HWND hDlg,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefDlgProcW(
         HWND hDlg,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
# 5113 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterA(
         LPMSG lpMsg,
         int nCode);
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterW(
         LPMSG lpMsg,
         int nCode);
# 5139 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
OpenClipboard(
             HWND hWndNewOwner);

__declspec(dllimport)
BOOL
__stdcall
CloseClipboard(
    void);




__declspec(dllimport)
DWORD
__stdcall
GetClipboardSequenceNumber(
    void);



__declspec(dllimport)
HWND
__stdcall
GetClipboardOwner(
    void);

__declspec(dllimport)
HWND
__stdcall
SetClipboardViewer(
         HWND hWndNewViewer);

__declspec(dllimport)
HWND
__stdcall
GetClipboardViewer(
    void);

__declspec(dllimport)
BOOL
__stdcall
ChangeClipboardChain(
         HWND hWndRemove,
         HWND hWndNewNext);

__declspec(dllimport)
HANDLE
__stdcall
SetClipboardData(
         UINT uFormat,
             HANDLE hMem);

__declspec(dllimport)
HANDLE
__stdcall
GetClipboardData(
         UINT uFormat);

__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatA(
         LPCSTR lpszFormat);
__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatW(
         LPCWSTR lpszFormat);






__declspec(dllimport)
int
__stdcall
CountClipboardFormats(
    void);

__declspec(dllimport)
UINT
__stdcall
EnumClipboardFormats(
         UINT format);

__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameA(
         UINT format,
                              LPSTR lpszFormatName,
         int cchMaxCount);
__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameW(
         UINT format,
                              LPWSTR lpszFormatName,
         int cchMaxCount);






__declspec(dllimport)
BOOL
__stdcall
EmptyClipboard(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsClipboardFormatAvailable(
         UINT format);

__declspec(dllimport)
int
__stdcall
GetPriorityClipboardFormat(
                         UINT *paFormatPriorityList,
         int cFormats);

__declspec(dllimport)
HWND
__stdcall
GetOpenClipboardWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
AddClipboardFormatListener(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
RemoveClipboardFormatListener(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
GetUpdatedClipboardFormats(
                           PUINT lpuiFormats,
         UINT cFormats,
          PUINT pcFormatsOut);
# 5301 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
CharToOemA(
         LPCSTR pSrc,
                                                    LPSTR pDst);
__declspec(dllimport)
BOOL
__stdcall
CharToOemW(
         LPCWSTR pSrc,
                                                    LPSTR pDst);







__declspec(dllimport)
BOOL
__stdcall
OemToCharA(
         LPCSTR pSrc,
                                                    LPSTR pDst);

__declspec(dllimport)
BOOL
__stdcall
OemToCharW(
         LPCSTR pSrc,
                                                    LPWSTR pDst);






__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffA(
         LPCSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffW(
         LPCWSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);






__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffA(
         LPCSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffW(
         LPCSTR lpszSrc,
                               LPWSTR lpszDst,
         DWORD cchDstLength);






__declspec(dllimport)
LPSTR
__stdcall
CharUpperA(
            LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharUpperW(
            LPWSTR lpsz);






__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffA(
                               LPSTR lpsz,
         DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffW(
                               LPWSTR lpsz,
         DWORD cchLength);






__declspec(dllimport)
LPSTR
__stdcall
CharLowerA(
            LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharLowerW(
            LPWSTR lpsz);






__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffA(
                               LPSTR lpsz,
         DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffW(
                               LPWSTR lpsz,
         DWORD cchLength);






__declspec(dllimport)
LPSTR
__stdcall
CharNextA(
         LPCSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharNextW(
         LPCWSTR lpsz);






__declspec(dllimport)
LPSTR
__stdcall
CharPrevA(
         LPCSTR lpszStart,
         LPCSTR lpszCurrent);
__declspec(dllimport)
LPWSTR
__stdcall
CharPrevW(
         LPCWSTR lpszStart,
         LPCWSTR lpszCurrent);







__declspec(dllimport)
LPSTR
__stdcall
CharNextExA(
          WORD CodePage,
          LPCSTR lpCurrentChar,
          DWORD dwFlags);

__declspec(dllimport)
LPSTR
__stdcall
CharPrevExA(
          WORD CodePage,
          LPCSTR lpStart,
          LPCSTR lpCurrentChar,
          DWORD dwFlags);
# 5525 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaW(
         WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericW(
         WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharUpperA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharUpperW(
         WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharLowerA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharLowerW(
         WCHAR ch);
# 5591 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
SetFocus(
             HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetActiveWindow(
    void);

__declspec(dllimport)
HWND
__stdcall
GetFocus(
    void);

__declspec(dllimport)
UINT
__stdcall
GetKBCodePage(
    void);

__declspec(dllimport)
SHORT
__stdcall
GetKeyState(
         int nVirtKey);

__declspec(dllimport)
SHORT
__stdcall
GetAsyncKeyState(
         int vKey);

__declspec(dllimport)

BOOL
__stdcall
GetKeyboardState(
                      PBYTE lpKeyState);

__declspec(dllimport)
BOOL
__stdcall
SetKeyboardState(
                    LPBYTE lpKeyState);

__declspec(dllimport)
int
__stdcall
GetKeyNameTextA(
         LONG lParam,
                          LPSTR lpString,
         int cchSize);
__declspec(dllimport)
int
__stdcall
GetKeyNameTextW(
         LONG lParam,
                          LPWSTR lpString,
         int cchSize);






__declspec(dllimport)
int
__stdcall
GetKeyboardType(
         int nTypeFlag);

__declspec(dllimport)
int
__stdcall
ToAscii(
         UINT uVirtKey,
         UINT uScanCode,
                        const BYTE *lpKeyState,
          LPWORD lpChar,
         UINT uFlags);


__declspec(dllimport)
int
__stdcall
ToAsciiEx(
         UINT uVirtKey,
         UINT uScanCode,
                        const BYTE *lpKeyState,
          LPWORD lpChar,
         UINT uFlags,
             HKL dwhkl);


__declspec(dllimport)
int
__stdcall
ToUnicode(
         UINT wVirtKey,
         UINT wScanCode,
                              const BYTE *lpKeyState,
                          LPWSTR pwszBuff,
         int cchBuff,
         UINT wFlags);

__declspec(dllimport)
DWORD
__stdcall
OemKeyScan(
         WORD wOemChar);

__declspec(dllimport)
SHORT
__stdcall
VkKeyScanA(
         CHAR ch);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanW(
         WCHAR ch);







__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExA(
         CHAR ch,
         HKL dwhkl);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExW(
         WCHAR ch,
         HKL dwhkl);
# 5748 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
void
__stdcall
keybd_event(
         BYTE bVk,
         BYTE bScan,
         DWORD dwFlags,
         ULONG_PTR dwExtraInfo);
# 5782 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
void
__stdcall
mouse_event(
         DWORD dwFlags,
         DWORD dx,
         DWORD dy,
         DWORD dwData,
         ULONG_PTR dwExtraInfo);
# 5800 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagMOUSEINPUT {
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, * LPMOUSEINPUT;

typedef struct tagKEYBDINPUT {
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, * LPKEYBDINPUT;

typedef struct tagHARDWAREINPUT {
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT, * LPHARDWAREINPUT;





typedef struct tagINPUT {
    DWORD type;

    union
    {
        MOUSEINPUT mi;
        KEYBDINPUT ki;
        HARDWAREINPUT hi;
    };
} INPUT, *PINPUT, * LPINPUT;

__declspec(dllimport)
UINT
__stdcall
SendInput(
         UINT cInputs,
                        LPINPUT pInputs,
         int cbSize);
# 5863 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
struct HTOUCHINPUT__{int unused;}; typedef struct HTOUCHINPUT__ *HTOUCHINPUT;

typedef struct tagTOUCHINPUT {
    LONG x;
    LONG y;
    HANDLE hSource;
    DWORD dwID;
    DWORD dwFlags;
    DWORD dwMask;
    DWORD dwTime;
    ULONG_PTR dwExtraInfo;
    DWORD cxContact;
    DWORD cyContact;
} TOUCHINPUT, *PTOUCHINPUT;
typedef TOUCHINPUT const * PCTOUCHINPUT;
# 5910 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetTouchInputInfo(
         HTOUCHINPUT hTouchInput,
         UINT cInputs,
                          PTOUCHINPUT pInputs,
         int cbSize);

__declspec(dllimport)
BOOL
__stdcall
CloseTouchInputHandle(
         HTOUCHINPUT hTouchInput);
# 5946 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
RegisterTouchWindow(
         HWND hwnd,
         ULONG ulFlags);

__declspec(dllimport)
BOOL
__stdcall
UnregisterTouchWindow(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
IsTouchWindow(
         HWND hwnd,
              PULONG pulFlags);
# 5976 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
enum tagPOINTER_INPUT_TYPE {
    PT_POINTER = 0x00000001,
    PT_TOUCH = 0x00000002,
    PT_PEN = 0x00000003,
    PT_MOUSE = 0x00000004,

    PT_TOUCHPAD = 0x00000005,

};
typedef DWORD POINTER_INPUT_TYPE;

typedef UINT32 POINTER_FLAGS;
# 6022 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef enum tagPOINTER_BUTTON_CHANGE_TYPE {
    POINTER_CHANGE_NONE,
    POINTER_CHANGE_FIRSTBUTTON_DOWN,
    POINTER_CHANGE_FIRSTBUTTON_UP,
    POINTER_CHANGE_SECONDBUTTON_DOWN,
    POINTER_CHANGE_SECONDBUTTON_UP,
    POINTER_CHANGE_THIRDBUTTON_DOWN,
    POINTER_CHANGE_THIRDBUTTON_UP,
    POINTER_CHANGE_FOURTHBUTTON_DOWN,
    POINTER_CHANGE_FOURTHBUTTON_UP,
    POINTER_CHANGE_FIFTHBUTTON_DOWN,
    POINTER_CHANGE_FIFTHBUTTON_UP,
} POINTER_BUTTON_CHANGE_TYPE;

typedef struct tagPOINTER_INFO {
    POINTER_INPUT_TYPE pointerType;
    UINT32 pointerId;
    UINT32 frameId;
    POINTER_FLAGS pointerFlags;
    HANDLE sourceDevice;
    HWND hwndTarget;
    POINT ptPixelLocation;
    POINT ptHimetricLocation;
    POINT ptPixelLocationRaw;
    POINT ptHimetricLocationRaw;
    DWORD dwTime;
    UINT32 historyCount;
    INT32 InputData;
    DWORD dwKeyStates;
    UINT64 PerformanceCount;
    POINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
} POINTER_INFO;


typedef UINT32 TOUCH_FLAGS;


typedef UINT32 TOUCH_MASK;





typedef struct tagPOINTER_TOUCH_INFO {
    POINTER_INFO pointerInfo;
    TOUCH_FLAGS touchFlags;
    TOUCH_MASK touchMask;
    RECT rcContact;
    RECT rcContactRaw;
    UINT32 orientation;
    UINT32 pressure;
} POINTER_TOUCH_INFO;

typedef UINT32 PEN_FLAGS;





typedef UINT32 PEN_MASK;






typedef struct tagPOINTER_PEN_INFO {
    POINTER_INFO pointerInfo;
    PEN_FLAGS penFlags;
    PEN_MASK penMask;
    UINT32 pressure;
    UINT32 rotation;
    INT32 tiltX;
    INT32 tiltY;
} POINTER_PEN_INFO;
# 6149 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
InitializeTouchInjection(
         UINT32 maxCount,
         DWORD dwMode);

__declspec(dllimport)
BOOL
__stdcall
InjectTouchInput(
         UINT32 count,
                      const POINTER_TOUCH_INFO *contacts);

__declspec(dllimport)
BOOL
__stdcall
GetPointerType(
         UINT32 pointerId,
          POINTER_INPUT_TYPE *pointerType);

__declspec(dllimport)
BOOL
__stdcall
GetPointerCursorId(
         UINT32 pointerId,
          UINT32 *cursorId);

__declspec(dllimport)
BOOL
__stdcall
GetPointerInfo(
         UINT32 pointerId,
                    POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
                                    POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameInfo(
         UINT32 pointerId,
            UINT32 *pointerCount,
                                    POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
            UINT32 *pointerCount,
                                                    POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerTouchInfo(
         UINT32 pointerId,
                    POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerTouchInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
                                    POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameTouchInfo(
         UINT32 pointerId,
            UINT32 *pointerCount,
                                    POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameTouchInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
            UINT32 *pointerCount,
                                                    POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerPenInfo(
         UINT32 pointerId,
                    POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerPenInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
                                    POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFramePenInfo(
         UINT32 pointerId,
            UINT32 *pointerCount,
                                    POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFramePenInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
            UINT32 *pointerCount,
                                                    POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
SkipPointerFrameMessages(
         UINT32 pointerId);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerInputTarget(
         HWND hwnd,
         POINTER_INPUT_TYPE pointerType);

__declspec(dllimport)
BOOL
__stdcall
UnregisterPointerInputTarget(
         HWND hwnd,
         POINTER_INPUT_TYPE pointerType);


__declspec(dllimport)
BOOL
__stdcall
EnableMouseInPointer(
         BOOL fEnable);

__declspec(dllimport)
BOOL
__stdcall
IsMouseInPointerEnabled(
    void);






__declspec(dllimport)
BOOL
__stdcall
RegisterTouchHitTestingWindow(
         HWND hwnd,
         ULONG value);

typedef struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
{
    UINT16 score;
    POINT adjustedPoint;
} TOUCH_HIT_TESTING_PROXIMITY_EVALUATION, *PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;





typedef struct tagTOUCH_HIT_TESTING_INPUT
{
    UINT32 pointerId;
    POINT point;
    RECT boundingBox;
    RECT nonOccludedBoundingBox;
    UINT32 orientation;
} TOUCH_HIT_TESTING_INPUT, *PTOUCH_HIT_TESTING_INPUT;





__declspec(dllimport)
BOOL
__stdcall
EvaluateProximityToRect(
         const RECT *controlBoundingBox,
         const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
          TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

__declspec(dllimport)
BOOL
__stdcall
EvaluateProximityToPolygon(
    UINT32 numVertices,
                            const POINT *controlPolygon,
         const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
          TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

__declspec(dllimport)
LRESULT
__stdcall
PackTouchHitTestingProximityEvaluation(
         const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
         const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

typedef enum tagFEEDBACK_TYPE {
    FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1,
    FEEDBACK_PEN_BARRELVISUALIZATION = 2,
    FEEDBACK_PEN_TAP = 3,
    FEEDBACK_PEN_DOUBLETAP = 4,
    FEEDBACK_PEN_PRESSANDHOLD = 5,
    FEEDBACK_PEN_RIGHTTAP = 6,
    FEEDBACK_TOUCH_TAP = 7,
    FEEDBACK_TOUCH_DOUBLETAP = 8,
    FEEDBACK_TOUCH_PRESSANDHOLD = 9,
    FEEDBACK_TOUCH_RIGHTTAP = 10,
    FEEDBACK_GESTURE_PRESSANDTAP = 11,
    FEEDBACK_MAX = 0xFFFFFFFF
} FEEDBACK_TYPE;





__declspec(dllimport)
BOOL
__stdcall
GetWindowFeedbackSetting(
         HWND hwnd,
         FEEDBACK_TYPE feedback,
         DWORD dwFlags,
            UINT32* pSize,
                                   void* config);

__declspec(dllimport)
BOOL
__stdcall
SetWindowFeedbackSetting(
         HWND hwnd,
         FEEDBACK_TYPE feedback,
         DWORD dwFlags,
         UINT32 size,
                               const void* configuration);
# 6415 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagINPUT_TRANSFORM {
    union {
        struct {
            float _11, _12, _13, _14;
            float _21, _22, _23, _24;
            float _31, _32, _33, _34;
            float _41, _42, _43, _44;
        };
        float m[4][4];
    };
} INPUT_TRANSFORM;


__declspec(dllimport)
BOOL
__stdcall
GetPointerInputTransform(
         UINT32 pointerId,
         UINT32 historyCount,
                               INPUT_TRANSFORM *inputTransform);
# 6451 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
} LASTINPUTINFO, * PLASTINPUTINFO;

__declspec(dllimport)
BOOL
__stdcall
GetLastInputInfo(
          PLASTINPUTINFO plii);


__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyA(
         UINT uCode,
         UINT uMapType);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyW(
         UINT uCode,
         UINT uMapType);







__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExA(
         UINT uCode,
         UINT uMapType,
             HKL dwhkl);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExW(
         UINT uCode,
         UINT uMapType,
             HKL dwhkl);
# 6511 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetInputState(
    void);

__declspec(dllimport)
DWORD
__stdcall
GetQueueStatus(
         UINT flags);


__declspec(dllimport)
HWND
__stdcall
GetCapture(
    void);

__declspec(dllimport)
HWND
__stdcall
SetCapture(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ReleaseCapture(
    void);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjects(
         DWORD nCount,
                           const HANDLE *pHandles,
         BOOL fWaitAll,
         DWORD dwMilliseconds,
         DWORD dwWakeMask);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjectsEx(
         DWORD nCount,
                           const HANDLE *pHandles,
         DWORD dwMilliseconds,
         DWORD dwWakeMask,
         DWORD dwFlags);
# 6639 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
UINT_PTR
__stdcall
SetTimer(
             HWND hWnd,
         UINT_PTR nIDEvent,
         UINT uElapse,
             TIMERPROC lpTimerFunc);
# 6656 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
UINT_PTR
__stdcall
SetCoalescableTimer(
             HWND hWnd,
         UINT_PTR nIDEvent,
         UINT uElapse,
             TIMERPROC lpTimerFunc,
         ULONG uToleranceDelay);



__declspec(dllimport)
BOOL
__stdcall
KillTimer(
             HWND hWnd,
         UINT_PTR uIDEvent);

__declspec(dllimport)
BOOL
__stdcall
IsWindowUnicode(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
EnableWindow(
         HWND hWnd,
         BOOL bEnable);

__declspec(dllimport)
BOOL
__stdcall
IsWindowEnabled(
         HWND hWnd);

__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsA(
             HINSTANCE hInstance,
         LPCSTR lpTableName);
__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsW(
             HINSTANCE hInstance,
         LPCWSTR lpTableName);






__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableA(
                       LPACCEL paccel,
         int cAccel);
__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableW(
                       LPACCEL paccel,
         int cAccel);






__declspec(dllimport)
BOOL
__stdcall
DestroyAcceleratorTable(
         HACCEL hAccel);

__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableA(
         HACCEL hAccelSrc,
                                               LPACCEL lpAccelDst,
         int cAccelEntries);
__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableW(
         HACCEL hAccelSrc,
                                               LPACCEL lpAccelDst,
         int cAccelEntries);
# 6758 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorA(
         HWND hWnd,
         HACCEL hAccTable,
         LPMSG lpMsg);
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorW(
         HWND hWnd,
         HACCEL hAccTable,
         LPMSG lpMsg);
# 6948 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
int
__stdcall
GetSystemMetrics(
         int nIndex);
# 6965 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HMENU
__stdcall
LoadMenuA(
             HINSTANCE hInstance,
         LPCSTR lpMenuName);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuW(
             HINSTANCE hInstance,
         LPCWSTR lpMenuName);






__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectA(
         const MENUTEMPLATEA *lpMenuTemplate);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectW(
         const MENUTEMPLATEW *lpMenuTemplate);






__declspec(dllimport)
HMENU
__stdcall
GetMenu(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetMenu(
         HWND hWnd,
             HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
ChangeMenuA(
         HMENU hMenu,
         UINT cmd,
             LPCSTR lpszNewItem,
         UINT cmdInsert,
         UINT flags);
__declspec(dllimport)
BOOL
__stdcall
ChangeMenuW(
         HMENU hMenu,
         UINT cmd,
             LPCWSTR lpszNewItem,
         UINT cmdInsert,
         UINT flags);






__declspec(dllimport)
BOOL
__stdcall
HiliteMenuItem(
         HWND hWnd,
         HMENU hMenu,
         UINT uIDHiliteItem,
         UINT uHilite);

__declspec(dllimport)
int
__stdcall
GetMenuStringA(
         HMENU hMenu,
         UINT uIDItem,
                             LPSTR lpString,
         int cchMax,
         UINT flags);
__declspec(dllimport)
int
__stdcall
GetMenuStringW(
         HMENU hMenu,
         UINT uIDItem,
                             LPWSTR lpString,
         int cchMax,
         UINT flags);






__declspec(dllimport)
UINT
__stdcall
GetMenuState(
         HMENU hMenu,
         UINT uId,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DrawMenuBar(
         HWND hWnd);







__declspec(dllimport)
HMENU
__stdcall
GetSystemMenu(
         HWND hWnd,
         BOOL bRevert);


__declspec(dllimport)
HMENU
__stdcall
CreateMenu(
    void);

__declspec(dllimport)
HMENU
__stdcall
CreatePopupMenu(
    void);

__declspec(dllimport)
BOOL
__stdcall
DestroyMenu(
         HMENU hMenu);

__declspec(dllimport)
DWORD
__stdcall
CheckMenuItem(
         HMENU hMenu,
         UINT uIDCheckItem,
         UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
EnableMenuItem(
         HMENU hMenu,
         UINT uIDEnableItem,
         UINT uEnable);

__declspec(dllimport)
HMENU
__stdcall
GetSubMenu(
         HMENU hMenu,
         int nPos);

__declspec(dllimport)
UINT
__stdcall
GetMenuItemID(
         HMENU hMenu,
         int nPos);

__declspec(dllimport)
int
__stdcall
GetMenuItemCount(
             HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
InsertMenuA(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuW(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall
AppendMenuA(
         HMENU hMenu,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
AppendMenuW(
         HMENU hMenu,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall
ModifyMenuA(
         HMENU hMnu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
ModifyMenuW(
         HMENU hMnu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall RemoveMenu(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DeleteMenu(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemBitmaps(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
             HBITMAP hBitmapUnchecked,
             HBITMAP hBitmapChecked);

__declspec(dllimport)
LONG
__stdcall
GetMenuCheckMarkDimensions(
    void);

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenu(
         HMENU hMenu,
         UINT uFlags,
         int x,
         int y,
               int nReserved,
         HWND hWnd,
               const RECT *prcRect);
# 7271 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagTPMPARAMS
{
    UINT cbSize;
    RECT rcExclude;
} TPMPARAMS;
typedef TPMPARAMS *LPTPMPARAMS;

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenuEx(
         HMENU hMenu,
         UINT uFlags,
         int x,
         int y,
         HWND hwnd,
             LPTPMPARAMS lptpm);



__declspec(dllimport)
BOOL
__stdcall
CalculatePopupWindowPosition(
         const POINT *anchorPoint,
         const SIZE *windowSize,
         UINT flags,
             RECT *excludeRect,
          RECT *popupWindowPosition);
# 7319 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagMENUINFO
{
    DWORD cbSize;
    DWORD fMask;
    DWORD dwStyle;
    UINT cyMax;
    HBRUSH hbrBack;
    DWORD dwContextHelpID;
    ULONG_PTR dwMenuData;
} MENUINFO, *LPMENUINFO;
typedef MENUINFO const *LPCMENUINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuInfo(
         HMENU,
            LPMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
SetMenuInfo(
         HMENU,
         LPCMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
EndMenu(
        void);







typedef struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
} MENUGETOBJECTINFO, * PMENUGETOBJECTINFO;
# 7407 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagMENUITEMINFOA
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPSTR dwTypeData;
    UINT cch;

    HBITMAP hbmpItem;

} MENUITEMINFOA, *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPWSTR dwTypeData;
    UINT cch;

    HBITMAP hbmpItem;

} MENUITEMINFOW, *LPMENUITEMINFOW;

typedef MENUITEMINFOW MENUITEMINFO;
typedef LPMENUITEMINFOW LPMENUITEMINFO;




typedef MENUITEMINFOA const *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const *LPCMENUITEMINFOW;

typedef LPCMENUITEMINFOW LPCMENUITEMINFO;





__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemA(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
         LPCMENUITEMINFOA lpmi);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemW(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
         LPCMENUITEMINFOW lpmi);






__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoA(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
            LPMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoW(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
            LPMENUITEMINFOW lpmii);






__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoA(
         HMENU hmenu,
         UINT item,
         BOOL fByPositon,
         LPCMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoW(
         HMENU hmenu,
         UINT item,
         BOOL fByPositon,
         LPCMENUITEMINFOW lpmii);
# 7527 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
GetMenuDefaultItem(
         HMENU hMenu,
         UINT fByPos,
         UINT gmdiFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuDefaultItem(
         HMENU hMenu,
         UINT uItem,
         UINT fByPos);

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemRect(
             HWND hWnd,
         HMENU hMenu,
         UINT uItem,
          LPRECT lprcItem);

__declspec(dllimport)
int
__stdcall
MenuItemFromPoint(
             HWND hWnd,
         HMENU hMenu,
         POINT ptScreen);
# 7612 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagDROPSTRUCT
{
    HWND hwndSource;
    HWND hwndSink;
    DWORD wFmt;
    ULONG_PTR dwData;
    POINT ptDrop;
    DWORD dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;
# 7638 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
DWORD
__stdcall
DragObject(
         HWND hwndParent,
         HWND hwndFrom,
         UINT fmt,
         ULONG_PTR data,
             HCURSOR hcur);

__declspec(dllimport)
BOOL
__stdcall
DragDetect(
         HWND hwnd,
         POINT pt);
# 7663 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawIcon(
         HDC hDC,
         int X,
         int Y,
         HICON hIcon);
# 7714 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagDRAWTEXTPARAMS
{
    UINT cbSize;
    int iTabLength;
    int iLeftMargin;
    int iRightMargin;
    UINT uiLengthDrawn;
} DRAWTEXTPARAMS, *LPDRAWTEXTPARAMS;
# 7740 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)

int
__stdcall
DrawTextA(
         HDC hdc,


    LPCSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format);
__declspec(dllimport)

int
__stdcall
DrawTextW(
         HDC hdc,


    LPCWSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format);
# 7798 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)

int
__stdcall
DrawTextExA(
         HDC hdc,



    LPSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format,
             LPDRAWTEXTPARAMS lpdtp);
__declspec(dllimport)

int
__stdcall
DrawTextExW(
         HDC hdc,



    LPWSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format,
             LPDRAWTEXTPARAMS lpdtp);
# 7841 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GrayStringA(
         HDC hDC,
             HBRUSH hBrush,
             GRAYSTRINGPROC lpOutputFunc,
         LPARAM lpData,
         int nCount,
         int X,
         int Y,
         int nWidth,
         int nHeight);
__declspec(dllimport)
BOOL
__stdcall
GrayStringW(
         HDC hDC,
             HBRUSH hBrush,
             GRAYSTRINGPROC lpOutputFunc,
         LPARAM lpData,
         int nCount,
         int X,
         int Y,
         int nWidth,
         int nHeight);
# 7899 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawStateA(
         HDC hdc,
             HBRUSH hbrFore,
             DRAWSTATEPROC qfnCallBack,
         LPARAM lData,
         WPARAM wData,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);
__declspec(dllimport)
BOOL
__stdcall
DrawStateW(
         HDC hdc,
             HBRUSH hbrFore,
             DRAWSTATEPROC qfnCallBack,
         LPARAM lData,
         WPARAM wData,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);
# 7941 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
LONG
__stdcall
TabbedTextOutA(
         HDC hdc,
         int x,
         int y,
                        LPCSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions,
         int nTabOrigin);
__declspec(dllimport)
LONG
__stdcall
TabbedTextOutW(
         HDC hdc,
         int x,
         int y,
                        LPCWSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions,
         int nTabOrigin);






__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentA(
         HDC hdc,
                        LPCSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions);
__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentW(
         HDC hdc,
                        LPCWSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions);






__declspec(dllimport)
BOOL
__stdcall
UpdateWindow(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetActiveWindow(
         HWND hWnd);


__declspec(dllimport)
HWND
__stdcall
GetForegroundWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
PaintDesktop(
         HDC hdc);

__declspec(dllimport)
void
__stdcall
SwitchToThisWindow(
         HWND hwnd,
         BOOL fUnknown);



__declspec(dllimport)
BOOL
__stdcall
SetForegroundWindow(
         HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
AllowSetForegroundWindow(
         DWORD dwProcessId);



__declspec(dllimport)
BOOL
__stdcall
LockSetForegroundWindow(
         UINT uLockCode);






__declspec(dllimport)
HWND
__stdcall
WindowFromDC(
         HDC hDC);

__declspec(dllimport)
HDC
__stdcall
GetDC(
             HWND hWnd);

__declspec(dllimport)
HDC
__stdcall
GetDCEx(
             HWND hWnd,
             HRGN hrgnClip,
         DWORD flags);
# 8099 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HDC
__stdcall
GetWindowDC(
             HWND hWnd);

__declspec(dllimport)
int
__stdcall
ReleaseDC(
             HWND hWnd,
         HDC hDC);

__declspec(dllimport)
HDC
__stdcall
BeginPaint(
         HWND hWnd,
          LPPAINTSTRUCT lpPaint);

__declspec(dllimport)
BOOL
__stdcall
EndPaint(
         HWND hWnd,
         const PAINTSTRUCT *lpPaint);

__declspec(dllimport)
BOOL
__stdcall
GetUpdateRect(
         HWND hWnd,
              LPRECT lpRect,
         BOOL bErase);

__declspec(dllimport)
int
__stdcall
GetUpdateRgn(
         HWND hWnd,
         HRGN hRgn,
         BOOL bErase);

__declspec(dllimport)
int
__stdcall
SetWindowRgn(
         HWND hWnd,
             HRGN hRgn,
         BOOL bRedraw);
# 8157 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
int
__stdcall
GetWindowRgn(
         HWND hWnd,
         HRGN hRgn);



__declspec(dllimport)
int
__stdcall
GetWindowRgnBox(
         HWND hWnd,
          LPRECT lprc);



__declspec(dllimport)
int
__stdcall
ExcludeUpdateRgn(
         HDC hDC,
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRect(
             HWND hWnd,
             const RECT *lpRect,
         BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRect(
             HWND hWnd,
             const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRgn(
         HWND hWnd,
             HRGN hRgn,
         BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRgn(
         HWND hWnd,
             HRGN hRgn);


__declspec(dllimport)
BOOL
__stdcall
RedrawWindow(
             HWND hWnd,
             const RECT *lprcUpdate,
             HRGN hrgnUpdate,
         UINT flags);
# 8253 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
LockWindowUpdate(
             HWND hWndLock);

__declspec(dllimport)
BOOL
__stdcall
ScrollWindow(
         HWND hWnd,
         int XAmount,
         int YAmount,
             const RECT *lpRect,
             const RECT *lpClipRect);

__declspec(dllimport)
BOOL
__stdcall
ScrollDC(
         HDC hDC,
         int dx,
         int dy,
             const RECT *lprcScroll,
             const RECT *lprcClip,
             HRGN hrgnUpdate,
              LPRECT lprcUpdate);

__declspec(dllimport)
int
__stdcall
ScrollWindowEx(
         HWND hWnd,
         int dx,
         int dy,
             const RECT *prcScroll,
             const RECT *prcClip,
             HRGN hrgnUpdate,
              LPRECT prcUpdate,
         UINT flags);
# 8309 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
int
__stdcall
SetScrollPos(
         HWND hWnd,
         int nBar,
         int nPos,
         BOOL bRedraw);

__declspec(dllimport)
int
__stdcall
GetScrollPos(
         HWND hWnd,
         int nBar);

__declspec(dllimport)
BOOL
__stdcall
SetScrollRange(
         HWND hWnd,
         int nBar,
         int nMinPos,
         int nMaxPos,
         BOOL bRedraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollRange(
         HWND hWnd,
         int nBar,
          LPINT lpMinPos,
          LPINT lpMaxPos);

__declspec(dllimport)
BOOL
__stdcall
ShowScrollBar(
         HWND hWnd,
         int wBar,
         BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
EnableScrollBar(
         HWND hWnd,
         UINT wSBflags,
         UINT wArrows);
# 8379 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetPropA(
         HWND hWnd,
         LPCSTR lpString,
             HANDLE hData);
__declspec(dllimport)
BOOL
__stdcall
SetPropW(
         HWND hWnd,
         LPCWSTR lpString,
             HANDLE hData);






__declspec(dllimport)
HANDLE
__stdcall
GetPropA(
         HWND hWnd,
         LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
GetPropW(
         HWND hWnd,
         LPCWSTR lpString);






__declspec(dllimport)
HANDLE
__stdcall
RemovePropA(
         HWND hWnd,
         LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
RemovePropW(
         HWND hWnd,
         LPCWSTR lpString);






__declspec(dllimport)
int
__stdcall
EnumPropsExA(
         HWND hWnd,
         PROPENUMPROCEXA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
int
__stdcall
EnumPropsExW(
         HWND hWnd,
         PROPENUMPROCEXW lpEnumFunc,
         LPARAM lParam);






__declspec(dllimport)
int
__stdcall
EnumPropsA(
         HWND hWnd,
         PROPENUMPROCA lpEnumFunc);
__declspec(dllimport)
int
__stdcall
EnumPropsW(
         HWND hWnd,
         PROPENUMPROCW lpEnumFunc);






__declspec(dllimport)
BOOL
__stdcall
SetWindowTextA(
         HWND hWnd,
             LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetWindowTextW(
         HWND hWnd,
             LPCWSTR lpString);







__declspec(dllimport)
int
__stdcall
GetWindowTextA(
         HWND hWnd,
                            LPSTR lpString,
         int nMaxCount);

__declspec(dllimport)
int
__stdcall
GetWindowTextW(
         HWND hWnd,
                            LPWSTR lpString,
         int nMaxCount);






__declspec(dllimport)
int
__stdcall
GetWindowTextLengthA(
         HWND hWnd);
__declspec(dllimport)
int
__stdcall
GetWindowTextLengthW(
         HWND hWnd);






__declspec(dllimport)
BOOL
__stdcall
GetClientRect(
         HWND hWnd,
          LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetWindowRect(
         HWND hWnd,
          LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRect(
            LPRECT lpRect,
         DWORD dwStyle,
         BOOL bMenu);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRectEx(
            LPRECT lpRect,
         DWORD dwStyle,
         BOOL bMenu,
         DWORD dwExStyle);
# 8571 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagHELPINFO
{
    UINT cbSize;
    int iContextType;
    int iCtrlId;
    HANDLE hItemHandle;
    DWORD_PTR dwContextId;
    POINT MousePos;
} HELPINFO, *LPHELPINFO;

__declspec(dllimport)
BOOL
__stdcall
SetWindowContextHelpId(
         HWND,
         DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetWindowContextHelpId(
         HWND);

__declspec(dllimport)
BOOL
__stdcall
SetMenuContextHelpId(
         HMENU,
         DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetMenuContextHelpId(
         HMENU);
# 8686 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
int
__stdcall
MessageBoxA(
             HWND hWnd,
             LPCSTR lpText,
             LPCSTR lpCaption,
         UINT uType);
__declspec(dllimport)
int
__stdcall
MessageBoxW(
             HWND hWnd,
             LPCWSTR lpText,
             LPCWSTR lpCaption,
         UINT uType);
# 8732 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
int
__stdcall
MessageBoxExA(
             HWND hWnd,
             LPCSTR lpText,
             LPCSTR lpCaption,
         UINT uType,
         WORD wLanguageId);
__declspec(dllimport)
int
__stdcall
MessageBoxExW(
             HWND hWnd,
             LPCWSTR lpText,
             LPCWSTR lpCaption,
         UINT uType,
         WORD wLanguageId);
# 8758 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpszText;
    LPCSTR lpszCaption;
    DWORD dwStyle;
    LPCSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpszText;
    LPCWSTR lpszCaption;
    DWORD dwStyle;
    LPCWSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;

typedef MSGBOXPARAMSW MSGBOXPARAMS;
typedef PMSGBOXPARAMSW PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSW LPMSGBOXPARAMS;






__declspec(dllimport)
int
__stdcall
MessageBoxIndirectA(
         const MSGBOXPARAMSA * lpmbp);
__declspec(dllimport)
int
__stdcall
MessageBoxIndirectW(
         const MSGBOXPARAMSW * lpmbp);
# 8821 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
MessageBeep(
         UINT uType);
# 8836 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
int
__stdcall
ShowCursor(
         BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
SetCursorPos(
         int X,
         int Y);


__declspec(dllimport)
BOOL
__stdcall
SetPhysicalCursorPos(
         int X,
         int Y);


__declspec(dllimport)
HCURSOR
__stdcall
SetCursor(
             HCURSOR hCursor);

__declspec(dllimport)
BOOL
__stdcall
GetCursorPos(
          LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
GetPhysicalCursorPos(
          LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
ClipCursor(
             const RECT *lpRect);


__declspec(dllimport)
BOOL
__stdcall
GetClipCursor(
          LPRECT lpRect);

__declspec(dllimport)
HCURSOR
__stdcall
GetCursor(
    void);

__declspec(dllimport)
BOOL
__stdcall
CreateCaret(
         HWND hWnd,
             HBITMAP hBitmap,
         int nWidth,
         int nHeight);

__declspec(dllimport)
UINT
__stdcall
GetCaretBlinkTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetCaretBlinkTime(
         UINT uMSeconds);

__declspec(dllimport)
BOOL
__stdcall
DestroyCaret(
    void);

__declspec(dllimport)
BOOL
__stdcall
HideCaret(
             HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowCaret(
             HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetCaretPos(
         int X,
         int Y);

__declspec(dllimport)
BOOL
__stdcall
GetCaretPos(
          LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClientToScreen(
         HWND hWnd,
            LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ScreenToClient(
         HWND hWnd,
            LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
LogicalToPhysicalPoint(
         HWND hWnd,
            LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
PhysicalToLogicalPoint(
         HWND hWnd,
            LPPOINT lpPoint);




__declspec(dllimport)
BOOL
__stdcall
LogicalToPhysicalPointForPerMonitorDPI(
             HWND hWnd,
            LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
PhysicalToLogicalPointForPerMonitorDPI(
             HWND hWnd,
            LPPOINT lpPoint);



__declspec(dllimport)
int
__stdcall
MapWindowPoints(
             HWND hWndFrom,
             HWND hWndTo,
                             LPPOINT lpPoints,
         UINT cPoints);

__declspec(dllimport)
HWND
__stdcall
WindowFromPoint(
         POINT Point);


__declspec(dllimport)
HWND
__stdcall
WindowFromPhysicalPoint(
         POINT Point);


__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPoint(
         HWND hWndParent,
         POINT Point);
# 9039 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPointEx(
         HWND hwnd,
         POINT pt,
         UINT flags);
# 9118 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
DWORD
__stdcall
GetSysColor(
         int nIndex);


__declspec(dllimport)
HBRUSH
__stdcall
GetSysColorBrush(
         int nIndex);




__declspec(dllimport)
BOOL
__stdcall
SetSysColors(
         int cElements,
                          const INT * lpaElements,
                          const COLORREF * lpaRgbValues);
# 9150 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawFocusRect(
         HDC hDC,
         const RECT * lprc);

__declspec(dllimport)
int
__stdcall
FillRect(
         HDC hDC,
         const RECT *lprc,
         HBRUSH hbr);

__declspec(dllimport)
int
__stdcall
FrameRect(
         HDC hDC,
         const RECT *lprc,
         HBRUSH hbr);

__declspec(dllimport)
BOOL
__stdcall
InvertRect(
         HDC hDC,
         const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
SetRect(
          LPRECT lprc,
         int xLeft,
         int yTop,
         int xRight,
         int yBottom);

__declspec(dllimport)
BOOL
__stdcall
SetRectEmpty(
          LPRECT lprc);

__declspec(dllimport)
BOOL
__stdcall
CopyRect(
          LPRECT lprcDst,
         const RECT *lprcSrc);

__declspec(dllimport)
BOOL
__stdcall
InflateRect(
            LPRECT lprc,
         int dx,
         int dy);

__declspec(dllimport)
BOOL
__stdcall
IntersectRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
UnionRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
SubtractRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
OffsetRect(
            LPRECT lprc,
         int dx,
         int dy);

__declspec(dllimport)
BOOL
__stdcall
IsRectEmpty(
         const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
EqualRect(
         const RECT *lprc1,
         const RECT *lprc2);

__declspec(dllimport)
BOOL
__stdcall
PtInRect(
         const RECT *lprc,
         POINT pt);



__declspec(dllimport)
WORD
__stdcall
GetWindowWord(
         HWND hWnd,
         int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetWindowWord(
         HWND hWnd,
         int nIndex,
         WORD wNewWord);

__declspec(dllimport)
LONG
__stdcall
GetWindowLongA(
         HWND hWnd,
         int nIndex);
__declspec(dllimport)
LONG
__stdcall
GetWindowLongW(
         HWND hWnd,
         int nIndex);






__declspec(dllimport)
LONG
__stdcall
SetWindowLongA(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
__declspec(dllimport)
LONG
__stdcall
SetWindowLongW(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
# 9320 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
LONG_PTR
__stdcall
GetWindowLongPtrA(
         HWND hWnd,
         int nIndex);
__declspec(dllimport)
LONG_PTR
__stdcall
GetWindowLongPtrW(
         HWND hWnd,
         int nIndex);






__declspec(dllimport)
LONG_PTR
__stdcall
SetWindowLongPtrA(
         HWND hWnd,
         int nIndex,
         LONG_PTR dwNewLong);
__declspec(dllimport)
LONG_PTR
__stdcall
SetWindowLongPtrW(
         HWND hWnd,
         int nIndex,
         LONG_PTR dwNewLong);
# 9378 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
WORD
__stdcall
GetClassWord(
         HWND hWnd,
         int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetClassWord(
         HWND hWnd,
         int nIndex,
         WORD wNewWord);

__declspec(dllimport)
DWORD
__stdcall
GetClassLongA(
         HWND hWnd,
         int nIndex);
__declspec(dllimport)
DWORD
__stdcall
GetClassLongW(
         HWND hWnd,
         int nIndex);






__declspec(dllimport)
DWORD
__stdcall
SetClassLongA(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
__declspec(dllimport)
DWORD
__stdcall
SetClassLongW(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
# 9433 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
ULONG_PTR
__stdcall
GetClassLongPtrA(
         HWND hWnd,
         int nIndex);
__declspec(dllimport)
ULONG_PTR
__stdcall
GetClassLongPtrW(
         HWND hWnd,
         int nIndex);






__declspec(dllimport)
ULONG_PTR
__stdcall
SetClassLongPtrA(
         HWND hWnd,
         int nIndex,
         LONG_PTR dwNewLong);
__declspec(dllimport)
ULONG_PTR
__stdcall
SetClassLongPtrW(
         HWND hWnd,
         int nIndex,
         LONG_PTR dwNewLong);
# 9494 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetProcessDefaultLayout(
          DWORD *pdwDefaultLayout);

__declspec(dllimport)
BOOL
__stdcall
SetProcessDefaultLayout(
         DWORD dwDefaultLayout);


__declspec(dllimport)
HWND
__stdcall
GetDesktopWindow(
    void);


__declspec(dllimport)
HWND
__stdcall
GetParent(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetParent(
         HWND hWndChild,
             HWND hWndNewParent);

__declspec(dllimport)
BOOL
__stdcall
EnumChildWindows(
             HWND hWndParent,
         WNDENUMPROC lpEnumFunc,
         LPARAM lParam);


__declspec(dllimport)
HWND
__stdcall
FindWindowA(
             LPCSTR lpClassName,
             LPCSTR lpWindowName);
__declspec(dllimport)
HWND
__stdcall
FindWindowW(
             LPCWSTR lpClassName,
             LPCWSTR lpWindowName);







__declspec(dllimport)
HWND
__stdcall
FindWindowExA(
             HWND hWndParent,
             HWND hWndChildAfter,
             LPCSTR lpszClass,
             LPCSTR lpszWindow);
__declspec(dllimport)
HWND
__stdcall
FindWindowExW(
             HWND hWndParent,
             HWND hWndChildAfter,
             LPCWSTR lpszClass,
             LPCWSTR lpszWindow);






__declspec(dllimport)
HWND
__stdcall
GetShellWindow(
    void);




__declspec(dllimport)
BOOL
__stdcall
RegisterShellHookWindow(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
DeregisterShellHookWindow(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
EnumWindows(
         WNDENUMPROC lpEnumFunc,
         LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumThreadWindows(
         DWORD dwThreadId,
         WNDENUMPROC lpfn,
         LPARAM lParam);




__declspec(dllimport)
int
__stdcall
GetClassNameA(
         HWND hWnd,
                                       LPSTR lpClassName,
         int nMaxCount
    );
__declspec(dllimport)
int
__stdcall
GetClassNameW(
         HWND hWnd,
                                       LPWSTR lpClassName,
         int nMaxCount
    );
# 9662 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
GetTopWindow(
             HWND hWnd);





__declspec(dllimport)
DWORD
__stdcall
GetWindowThreadProcessId(
         HWND hWnd,
              LPDWORD lpdwProcessId);


__declspec(dllimport)
BOOL
__stdcall
IsGUIThread(
         BOOL bConvert);







__declspec(dllimport)
HWND
__stdcall
GetLastActivePopup(
         HWND hWnd);
# 9714 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
GetWindow(
         HWND hWnd,
         UINT uCmd);






__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookA(
         int nFilterType,
         HOOKPROC pfnFilterProc);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookW(
         int nFilterType,
         HOOKPROC pfnFilterProc);
# 9766 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHook(
         int nCode,
         HOOKPROC pfnFilterProc);

__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExA(
         int idHook,
         HOOKPROC lpfn,
             HINSTANCE hmod,
         DWORD dwThreadId);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExW(
         int idHook,
         HOOKPROC lpfn,
             HINSTANCE hmod,
         DWORD dwThreadId);






__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHookEx(
         HHOOK hhk);

__declspec(dllimport)
LRESULT
__stdcall
CallNextHookEx(
             HHOOK hhk,
         int nCode,
         WPARAM wParam,
         LPARAM lParam);
# 9905 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
CheckMenuRadioItem(
         HMENU hmenu,
         UINT first,
         UINT last,
         UINT check,
         UINT flags);





typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct {
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;
# 9985 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapA(
             HINSTANCE hInstance,
         LPCSTR lpBitmapName);
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapW(
             HINSTANCE hInstance,
         LPCWSTR lpBitmapName);






__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorA(
             HINSTANCE hInstance,
         LPCSTR lpCursorName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorW(
             HINSTANCE hInstance,
         LPCWSTR lpCursorName);






__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileA(
         LPCSTR lpFileName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileW(
         LPCWSTR lpFileName);






__declspec(dllimport)
HCURSOR
__stdcall
CreateCursor(
             HINSTANCE hInst,
         int xHotSpot,
         int yHotSpot,
         int nWidth,
         int nHeight,
         const void *pvANDPlane,
         const void *pvXORPlane);

__declspec(dllimport)
BOOL
__stdcall
DestroyCursor(
         HCURSOR hCursor);
# 10095 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetSystemCursor(
         HCURSOR hcur,
         DWORD id);

typedef struct _ICONINFO {
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;

__declspec(dllimport)
HICON
__stdcall
LoadIconA(
             HINSTANCE hInstance,
         LPCSTR lpIconName);
__declspec(dllimport)
HICON
__stdcall
LoadIconW(
             HINSTANCE hInstance,
         LPCWSTR lpIconName);







__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsA(
                         LPCSTR szFileName,
         int nIconIndex,
         int cxIcon,
         int cyIcon,
                             HICON *phicon,
                             UINT *piconid,
         UINT nIcons,
         UINT flags);
__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsW(
                         LPCWSTR szFileName,
         int nIconIndex,
         int cxIcon,
         int cyIcon,
                             HICON *phicon,
                             UINT *piconid,
         UINT nIcons,
         UINT flags);






__declspec(dllimport)
HICON
__stdcall
CreateIcon(
             HINSTANCE hInstance,
         int nWidth,
         int nHeight,
         BYTE cPlanes,
         BYTE cBitsPixel,
         const BYTE *lpbANDbits,
         const BYTE *lpbXORbits);

__declspec(dllimport)
BOOL
__stdcall
DestroyIcon(
         HICON hIcon);

__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectory(
                                       PBYTE presbits,
         BOOL fIcon);


__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectoryEx(
                                       PBYTE presbits,
         BOOL fIcon,
         int cxDesired,
         int cyDesired,
         UINT Flags);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResource(
                                PBYTE presbits,
         DWORD dwResSize,
         BOOL fIcon,
         DWORD dwVer);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResourceEx(
                                PBYTE presbits,
         DWORD dwResSize,
         BOOL fIcon,
         DWORD dwVer,
         int cxDesired,
         int cyDesired,
         UINT Flags);


typedef struct tagCURSORSHAPE
{
    int xHotSpot;
    int yHotSpot;
    int cx;
    int cy;
    int cbWidth;
    BYTE Planes;
    BYTE BitsPixel;
} CURSORSHAPE, *LPCURSORSHAPE;
# 10258 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HANDLE
__stdcall
LoadImageA(
             HINSTANCE hInst,
         LPCSTR name,
         UINT type,
         int cx,
         int cy,
         UINT fuLoad);
__declspec(dllimport)
HANDLE
__stdcall
LoadImageW(
             HINSTANCE hInst,
         LPCWSTR name,
         UINT type,
         int cx,
         int cy,
         UINT fuLoad);






__declspec(dllimport)
HANDLE
__stdcall
CopyImage(
         HANDLE h,
         UINT type,
         int cx,
         int cy,
         UINT flags);
# 10303 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport) BOOL __stdcall DrawIconEx(
         HDC hdc,
         int xLeft,
         int yTop,
         HICON hIcon,
         int cxWidth,
         int cyWidth,
         UINT istepIfAniCur,
             HBRUSH hbrFlickerFreeDraw,
         UINT diFlags);
# 10322 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HICON
__stdcall
CreateIconIndirect(
         PICONINFO piconinfo);

__declspec(dllimport)
HICON
__stdcall
CopyIcon(
         HICON hIcon);

__declspec(dllimport)
BOOL
__stdcall
GetIconInfo(
         HICON hIcon,
          PICONINFO piconinfo);


typedef struct _ICONINFOEXA {
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    CHAR szModName[260];
    CHAR szResName[260];
} ICONINFOEXA, *PICONINFOEXA;
typedef struct _ICONINFOEXW {
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    WCHAR szModName[260];
    WCHAR szResName[260];
} ICONINFOEXW, *PICONINFOEXW;

typedef ICONINFOEXW ICONINFOEX;
typedef PICONINFOEXW PICONINFOEX;





__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExA(
         HICON hicon,
            PICONINFOEXA piconinfo);
__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExW(
         HICON hicon,
            PICONINFOEXW piconinfo);
# 10886 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageA(
         HWND hDlg,
         LPMSG lpMsg);
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageW(
         HWND hDlg,
         LPMSG lpMsg);
# 10906 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
MapDialogRect(
         HWND hDlg,
            LPRECT lpRect);

__declspec(dllimport)
int
__stdcall
DlgDirListA(
         HWND hDlg,
            LPSTR lpPathSpec,
         int nIDListBox,
         int nIDStaticPath,
         UINT uFileType);
__declspec(dllimport)
int
__stdcall
DlgDirListW(
         HWND hDlg,
            LPWSTR lpPathSpec,
         int nIDListBox,
         int nIDStaticPath,
         UINT uFileType);
# 10957 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExA(
         HWND hwndDlg,
                          LPSTR lpString,
         int chCount,
         int idListBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExW(
         HWND hwndDlg,
                          LPWSTR lpString,
         int chCount,
         int idListBox);






__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxA(
         HWND hDlg,
            LPSTR lpPathSpec,
         int nIDComboBox,
         int nIDStaticPath,
         UINT uFiletype);
__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxW(
         HWND hDlg,
            LPWSTR lpPathSpec,
         int nIDComboBox,
         int nIDStaticPath,
         UINT uFiletype);






__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExA(
         HWND hwndDlg,
                         LPSTR lpString,
         int cchOut,
         int idComboBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExW(
         HWND hwndDlg,
                         LPWSTR lpString,
         int cchOut,
         int idComboBox);
# 11373 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagSCROLLINFO
{
    UINT cbSize;
    UINT fMask;
    int nMin;
    int nMax;
    UINT nPage;
    int nPos;
    int nTrackPos;
} SCROLLINFO, *LPSCROLLINFO;
typedef SCROLLINFO const *LPCSCROLLINFO;

__declspec(dllimport)
int
__stdcall
SetScrollInfo(
         HWND hwnd,
         int nBar,
         LPCSCROLLINFO lpsi,
         BOOL redraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollInfo(
         HWND hwnd,
         int nBar,
            LPSCROLLINFO lpsi);
# 11430 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagMDICREATESTRUCTA {
    LPCSTR szClass;
    LPCSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
    LPCWSTR szClass;
    LPCWSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;

typedef MDICREATESTRUCTW MDICREATESTRUCT;
typedef LPMDICREATESTRUCTW LPMDICREATESTRUCT;





typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcA(
         HWND hWnd,
             HWND hWndMDIClient,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcW(
         HWND hWnd,
             HWND hWndMDIClient,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)

LRESULT
__stdcall




DefMDIChildProcA(
         HWND hWnd,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefMDIChildProcW(
         HWND hWnd,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
# 11523 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
TranslateMDISysAccel(
         HWND hWndClient,
         LPMSG lpMsg);



__declspec(dllimport)
UINT
__stdcall
ArrangeIconicWindows(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowA(
         LPCSTR lpClassName,
         LPCSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HINSTANCE hInstance,
         LPARAM lParam);
__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowW(
         LPCWSTR lpClassName,
         LPCWSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HINSTANCE hInstance,
         LPARAM lParam);







__declspec(dllimport)
WORD
__stdcall
TileWindows(
             HWND hwndParent,
         UINT wHow,
             const RECT * lpRect,
         UINT cKids,
                          const HWND * lpKids);

__declspec(dllimport)
WORD
__stdcall CascadeWindows(
             HWND hwndParent,
         UINT wHow,
             const RECT * lpRect,
         UINT cKids,
                          const HWND * lpKids);
# 11608 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {

    DWORD mkSize;



    CHAR mkKeylist;
    CHAR szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {

    DWORD mkSize;



    WCHAR mkKeylist;
    WCHAR szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;

typedef MULTIKEYHELPW MULTIKEYHELP;
typedef PMULTIKEYHELPW PMULTIKEYHELP;
typedef LPMULTIKEYHELPW LPMULTIKEYHELP;






typedef struct tagHELPWININFOA {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    CHAR rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    WCHAR rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;

typedef HELPWININFOW HELPWININFO;
typedef PHELPWININFOW PHELPWININFO;
typedef LPHELPWININFOW LPHELPWININFO;
# 11705 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
WinHelpA(
             HWND hWndMain,
             LPCSTR lpszHelp,
         UINT uCommand,
         ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
WinHelpW(
             HWND hWndMain,
             LPCWSTR lpszHelp,
         UINT uCommand,
         ULONG_PTR dwData);
# 11750 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
DWORD
__stdcall
GetGuiResources(
         HANDLE hProcess,
         DWORD uiFlags);
# 11948 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagTouchPredictionParameters
{
    UINT cbSize;
    UINT dwLatency;
    UINT dwSampleTime;
    UINT bUseHWTimeStamp;
} TOUCHPREDICTIONPARAMETERS, *PTOUCHPREDICTIONPARAMETERS;
# 12141 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagNONCLIENTMETRICSA
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;

    int iPaddedBorderWidth;

} NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;

    int iPaddedBorderWidth;

} NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;

typedef NONCLIENTMETRICSW NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSW PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSW LPNONCLIENTMETRICS;
# 12216 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagMINIMIZEDMETRICS
{
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
} MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;



typedef struct tagICONMETRICSA
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
} ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
} ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;

typedef ICONMETRICSW ICONMETRICS;
typedef PICONMETRICSW PICONMETRICS;
typedef LPICONMETRICSW LPICONMETRICS;
# 12255 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagANIMATIONINFO
{
    UINT cbSize;
    int iMinAnimate;
} ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagSERIALKEYSA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszActivePort;
    LPSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszActivePort;
    LPWSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSW, *LPSERIALKEYSW;

typedef SERIALKEYSW SERIALKEYS;
typedef LPSERIALKEYSW LPSERIALKEYS;
# 12295 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagHIGHCONTRASTA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszDefaultScheme;
} HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszDefaultScheme;
} HIGHCONTRASTW, *LPHIGHCONTRASTW;

typedef HIGHCONTRASTW HIGHCONTRAST;
typedef LPHIGHCONTRASTW LPHIGHCONTRAST;
# 12344 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\tvout.h" 1
# 22 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\tvout.h"
typedef struct _VIDEOPARAMETERS {
    GUID Guid;
    ULONG dwOffset;
    ULONG dwCommand;
    ULONG dwFlags;
    ULONG dwMode;
    ULONG dwTVStandard;
    ULONG dwAvailableModes;
    ULONG dwAvailableTVStandard;
    ULONG dwFlickerFilter;
    ULONG dwOverScanX;
    ULONG dwOverScanY;
    ULONG dwMaxUnscaledX;
    ULONG dwMaxUnscaledY;
    ULONG dwPositionX;
    ULONG dwPositionY;
    ULONG dwBrightness;
    ULONG dwContrast;
    ULONG dwCPType;
    ULONG dwCPCommand;
    ULONG dwCPStandard;
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;
    UCHAR bOEMCopyProtection[256];
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;
# 12344 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h" 2
# 12364 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsA(
             DEVMODEA* lpDevMode,
         DWORD dwFlags);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsW(
             DEVMODEW* lpDevMode,
         DWORD dwFlags);






__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExA(
             LPCSTR lpszDeviceName,
             DEVMODEA* lpDevMode,
               HWND hwnd,
         DWORD dwflags,
             LPVOID lParam);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExW(
             LPCWSTR lpszDeviceName,
             DEVMODEW* lpDevMode,
               HWND hwnd,
         DWORD dwflags,
             LPVOID lParam);
# 12410 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsA(
             LPCSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEA* lpDevMode);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsW(
             LPCWSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEW* lpDevMode);
# 12432 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExA(
             LPCSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEA* lpDevMode,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExW(
             LPCWSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEW* lpDevMode,
         DWORD dwFlags);
# 12458 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesA(
             LPCSTR lpDevice,
         DWORD iDevNum,
            PDISPLAY_DEVICEA lpDisplayDevice,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesW(
             LPCWSTR lpDevice,
         DWORD iDevNum,
            PDISPLAY_DEVICEW lpDisplayDevice,
         DWORD dwFlags);
# 12487 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
LONG
__stdcall
GetDisplayConfigBufferSizes(
         UINT32 flags,
          UINT32* numPathArrayElements,
          UINT32* numModeInfoArrayElements);

__declspec(dllimport)
LONG
__stdcall
SetDisplayConfig(
         UINT32 numPathArrayElements,
                                         DISPLAYCONFIG_PATH_INFO* pathArray,
         UINT32 numModeInfoArrayElements,
                                             DISPLAYCONFIG_MODE_INFO* modeInfoArray,
         UINT32 flags);

__declspec(dllimport)
                                   LONG
__stdcall
QueryDisplayConfig(
         UINT32 flags,
            UINT32* numPathArrayElements,
                                                                  DISPLAYCONFIG_PATH_INFO* pathArray,
            UINT32* numModeInfoArrayElements,
                                                                          DISPLAYCONFIG_MODE_INFO* modeInfoArray,


        DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigGetDeviceInfo(
            DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigSetDeviceInfo(
         DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);







__declspec(dllimport)

BOOL
__stdcall
SystemParametersInfoA(
         UINT uiAction,
         UINT uiParam,
                                 PVOID pvParam,
         UINT fWinIni);
__declspec(dllimport)

BOOL
__stdcall
SystemParametersInfoW(
         UINT uiAction,
         UINT uiParam,
                                 PVOID pvParam,
         UINT fWinIni);
# 12572 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagFILTERKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;
    DWORD iDelayMSec;
    DWORD iRepeatMSec;
    DWORD iBounceMSec;
} FILTERKEYS, *LPFILTERKEYS;
# 12599 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagSTICKYKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;
# 12642 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;
# 12678 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagACCESSTIMEOUT
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;
# 12714 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;

typedef SOUNDSENTRYW SOUNDSENTRY;
typedef LPSOUNDSENTRYW LPSOUNDSENTRY;
# 12766 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SoundSentry(void);


typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;
# 12795 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagAUDIODESCRIPTION {
    UINT cbSize;
    BOOL Enabled;
    LCID Locale;
} AUDIODESCRIPTION, *LPAUDIODESCRIPTION;







__declspec(dllimport)
void
__stdcall
SetDebugErrorLevel(
         DWORD dwLevel);
# 12827 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
void
__stdcall
SetLastErrorEx(
         DWORD dwErrCode,
         DWORD dwType);

__declspec(dllimport)
int
__stdcall
InternalGetWindowText(
         HWND hWnd,
                                             LPWSTR pString,
         int cchMaxCount);
# 12853 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
CancelShutdown(
    void);
# 12876 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromPoint(
         POINT pt,
         DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromRect(
         LPCRECT lprc,
         DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromWindow(
         HWND hwnd,
         DWORD dwFlags);
# 12909 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagMONITORINFO
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
} MONITORINFO, *LPMONITORINFO;


typedef struct tagMONITORINFOEXA : public tagMONITORINFO
{
    CHAR szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW : public tagMONITORINFO
{
    WCHAR szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;

typedef MONITORINFOEXW MONITORINFOEX;
typedef LPMONITORINFOEXW LPMONITORINFOEX;
# 12953 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoA(
         HMONITOR hMonitor,
            LPMONITORINFO lpmi);
__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoW(
         HMONITOR hMonitor,
            LPMONITORINFO lpmi);






typedef BOOL (__stdcall* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDisplayMonitors(
             HDC hdc,
             LPCRECT lprcClip,
         MONITORENUMPROC lpfnEnum,
         LPARAM dwData);
# 12994 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
void
__stdcall
NotifyWinEvent(
         DWORD event,
         HWND hwnd,
         LONG idObject,
         LONG idChild);

typedef void (__stdcall* WINEVENTPROC)(
    HWINEVENTHOOK hWinEventHook,
    DWORD event,
    HWND hwnd,
    LONG idObject,
    LONG idChild,
    DWORD idEventThread,
    DWORD dwmsEventTime);

__declspec(dllimport)
HWINEVENTHOOK
__stdcall
SetWinEventHook(
         DWORD eventMin,
         DWORD eventMax,
             HMODULE hmodWinEventProc,
         WINEVENTPROC pfnWinEventProc,
         DWORD idProcess,
         DWORD idThread,
         DWORD dwFlags);


__declspec(dllimport)
BOOL
__stdcall
IsWinEventHookInstalled(
         DWORD event);
# 13046 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
UnhookWinEvent(
         HWINEVENTHOOK hWinEventHook);
# 13664 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagGUITHREADINFO
{
    DWORD cbSize;
    DWORD flags;
    HWND hwndActive;
    HWND hwndFocus;
    HWND hwndCapture;
    HWND hwndMenuOwner;
    HWND hwndMoveSize;
    HWND hwndCaret;
    RECT rcCaret;
} GUITHREADINFO, *PGUITHREADINFO, * LPGUITHREADINFO;
# 13696 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetGUIThreadInfo(
         DWORD idThread,
            PGUITHREADINFO pgui);

__declspec(dllimport)
BOOL
__stdcall
BlockInput(
    BOOL fBlockIt);





__declspec(dllimport)
BOOL
__stdcall
SetProcessDPIAware(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsProcessDPIAware(
    void);



__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameA(
         HWND hwnd,
                                            LPSTR pszFileName,
         UINT cchFileNameMax);
__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameW(
         HWND hwnd,
                                            LPWSTR pszFileName,
         UINT cchFileNameMax);
# 13794 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagCURSORINFO
{
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;






__declspec(dllimport)
BOOL
__stdcall
GetCursorInfo(
            PCURSORINFO pci);




typedef struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;



__declspec(dllimport)
BOOL
__stdcall
GetWindowInfo(
         HWND hwnd,
            PWINDOWINFO pwi);




typedef struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetTitleBarInfo(
         HWND hwnd,
            PTITLEBARINFO pti);


typedef struct tagTITLEBARINFOEX
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
    RECT rgrect[5 + 1];
} TITLEBARINFOEX, *PTITLEBARINFOEX, *LPTITLEBARINFOEX;





typedef struct tagMENUBARINFO
{
    DWORD cbSize;
    RECT rcBar;
    HMENU hMenu;
    HWND hwndMenu;
    BOOL fBarFocused:1;
    BOOL fFocused:1;
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuBarInfo(
         HWND hwnd,
         LONG idObject,
         LONG idItem,
            PMENUBARINFO pmbi);




typedef struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetScrollBarInfo(
         HWND hwnd,
         LONG idObject,
            PSCROLLBARINFO psbi);




typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

__declspec(dllimport)
BOOL
__stdcall
GetComboBoxInfo(
         HWND hwndCombo,
            PCOMBOBOXINFO pcbi);
# 13944 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
GetAncestor(
         HWND hwnd,
         UINT gaFlags);
# 13958 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
RealChildWindowFromPoint(
         HWND hwndParent,
         POINT ptParentClientCoords);






__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassA(
         HWND hwnd,
                                             LPSTR ptszClassName,
         UINT cchClassNameMax);




__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassW(
         HWND hwnd,
                                             LPWSTR ptszClassName,
         UINT cchClassNameMax);
# 13997 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoA(
             HWND hwnd,
         int iItem,
            PALTTABINFO pati,
                                  LPSTR pszItemText,
         UINT cchItemText);
__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoW(
             HWND hwnd,
         int iItem,
            PALTTABINFO pati,
                                  LPWSTR pszItemText,
         UINT cchItemText);
# 14038 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
DWORD
__stdcall
GetListBoxInfo(
         HWND hwnd);
# 14055 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
LockWorkStation(
    void);




__declspec(dllimport)
BOOL
__stdcall
UserHandleGrantAccess(
         HANDLE hUserHandle,
         HANDLE hJob,
         BOOL bGrant);
# 14086 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
struct HRAWINPUT__{int unused;}; typedef struct HRAWINPUT__ *HRAWINPUT;
# 14119 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
} RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER;
# 14142 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagRAWMOUSE {



    USHORT usFlags;




    union {
        ULONG ulButtons;
        struct {
            USHORT usButtonFlags;
            USHORT usButtonData;
        };
    };





    ULONG ulRawButtons;




    LONG lLastX;




    LONG lLastY;




    ULONG ulExtraInformation;

} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;
# 14231 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagRAWKEYBOARD {



    USHORT MakeCode;





    USHORT Flags;

    USHORT Reserved;




    USHORT VKey;
    UINT Message;




    ULONG ExtraInformation;


} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;
# 14284 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagRAWHID {
    DWORD dwSizeHid;
    DWORD dwCount;
    BYTE bRawData[1];
} RAWHID, *PRAWHID, *LPRAWHID;
# 14300 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
        RAWMOUSE mouse;
        RAWKEYBOARD keyboard;
        RAWHID hid;
    } data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;
# 14330 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
GetRawInputData(
         HRAWINPUT hRawInput,
         UINT uiCommand,
                                                LPVOID pData,
            PUINT pcbSize,
         UINT cbSizeHeader);
# 14353 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    BOOL fHasHorizontalWheel;
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE;

typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD;

typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;




    USHORT usUsagePage;
    USHORT usUsage;
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;

typedef struct tagRID_DEVICE_INFO {
    DWORD cbSize;
    DWORD dwType;
    union {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    };
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoA(
             HANDLE hDevice,
         UINT uiCommand,
                                                     LPVOID pData,
            PUINT pcbSize);
__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoW(
             HANDLE hDevice,
         UINT uiCommand,
                                                     LPVOID pData,
            PUINT pcbSize);
# 14417 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
GetRawInputBuffer(
                                     PRAWINPUT pData,
            PUINT pcbSize,
         UINT cbSizeHeader);




typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage;
    USHORT usUsage;
    DWORD dwFlags;
    HWND hwndTarget;
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;

typedef const RAWINPUTDEVICE* PCRAWINPUTDEVICE;
# 14473 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
RegisterRawInputDevices(
                             PCRAWINPUTDEVICE pRawInputDevices,
         UINT uiNumDevices,
         UINT cbSize);

__declspec(dllimport)
UINT
__stdcall
GetRegisteredRawInputDevices(
                                      PRAWINPUTDEVICE pRawInputDevices,
            PUINT puiNumDevices,
         UINT cbSize);


typedef struct tagRAWINPUTDEVICELIST {
    HANDLE hDevice;
    DWORD dwType;
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceList(
                                     PRAWINPUTDEVICELIST pRawInputDeviceList,
            PUINT puiNumDevices,
         UINT cbSize);

__declspec(dllimport)
LRESULT
__stdcall
DefRawInputProc(
                       PRAWINPUT* paRawInput,
         INT nInput,
         UINT cbSizeHeader);
# 14539 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef enum tagPOINTER_DEVICE_TYPE {
    POINTER_DEVICE_TYPE_INTEGRATED_PEN = 0x00000001,
    POINTER_DEVICE_TYPE_EXTERNAL_PEN = 0x00000002,
    POINTER_DEVICE_TYPE_TOUCH = 0x00000003,

    POINTER_DEVICE_TYPE_TOUCH_PAD = 0x00000004,

    POINTER_DEVICE_TYPE_MAX = 0xFFFFFFFF
} POINTER_DEVICE_TYPE;

typedef struct tagPOINTER_DEVICE_INFO {
    DWORD displayOrientation;
    HANDLE device;
    POINTER_DEVICE_TYPE pointerDeviceType;
    HMONITOR monitor;
    ULONG startingCursorId;
    USHORT maxActiveContacts;
    WCHAR productString[520];
} POINTER_DEVICE_INFO;

typedef struct tagPOINTER_DEVICE_PROPERTY {
    INT32 logicalMin;
    INT32 logicalMax;
    INT32 physicalMin;
    INT32 physicalMax;
    UINT32 unit;
    UINT32 unitExponent;
    USHORT usagePageId;
    USHORT usageId;
} POINTER_DEVICE_PROPERTY;

typedef enum tagPOINTER_DEVICE_CURSOR_TYPE {
    POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0x00000000,
    POINTER_DEVICE_CURSOR_TYPE_TIP = 0x00000001,
    POINTER_DEVICE_CURSOR_TYPE_ERASER = 0x00000002,
    POINTER_DEVICE_CURSOR_TYPE_MAX = 0xFFFFFFFF
} POINTER_DEVICE_CURSOR_TYPE;

typedef struct tagPOINTER_DEVICE_CURSOR_INFO {
    UINT32 cursorId;
    POINTER_DEVICE_CURSOR_TYPE cursor;
} POINTER_DEVICE_CURSOR_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetPointerDevices(
            UINT32* deviceCount,
                                   POINTER_DEVICE_INFO *pointerDevices);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDevice(
         HANDLE device,
                    POINTER_DEVICE_INFO *pointerDevice);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceProperties(
         HANDLE device,
            UINT32* propertyCount,
                                     POINTER_DEVICE_PROPERTY *pointerProperties);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerDeviceNotifications(
         HWND window,
         BOOL notifyRange);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceRects(
         HANDLE device,
                    RECT* pointerDeviceRect,
                    RECT* displayRect);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceCursors(
         HANDLE device,
            UINT32* cursorCount,
                                   POINTER_DEVICE_CURSOR_INFO *deviceCursors);

__declspec(dllimport)
BOOL
__stdcall
GetRawPointerDeviceData(
         UINT32 pointerId,
         UINT32 historyCount,
         UINT32 propertiesCount,
                                POINTER_DEVICE_PROPERTY* pProperties,
                                                 LONG* pValues);
# 14656 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilter(
         UINT message,
         DWORD dwFlag);
# 14681 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagCHANGEFILTERSTRUCT {
    DWORD cbSize;
    DWORD ExtStatus;
} CHANGEFILTERSTRUCT, *PCHANGEFILTERSTRUCT;
# 14699 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilterEx(
         HWND hwnd,
         UINT message,
         DWORD action,
                PCHANGEFILTERSTRUCT pChangeFilterStruct);
# 14728 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
struct HGESTUREINFO__{int unused;}; typedef struct HGESTUREINFO__ *HGESTUREINFO;
# 14763 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagGESTUREINFO {
    UINT cbSize;
    DWORD dwFlags;
    DWORD dwID;
    HWND hwndTarget;
    POINTS ptsLocation;
    DWORD dwInstanceID;
    DWORD dwSequenceID;
    ULONGLONG ullArguments;
    UINT cbExtraArgs;
} GESTUREINFO, *PGESTUREINFO;
typedef GESTUREINFO const * PCGESTUREINFO;
# 14784 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagGESTURENOTIFYSTRUCT {
    UINT cbSize;
    DWORD dwFlags;
    HWND hwndTarget;
    POINTS ptsLocation;
    DWORD dwInstanceID;
} GESTURENOTIFYSTRUCT, *PGESTURENOTIFYSTRUCT;
# 14804 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetGestureInfo(
         HGESTUREINFO hGestureInfo,
          PGESTUREINFO pGestureInfo);







__declspec(dllimport)
BOOL
__stdcall
GetGestureExtraArgs(
         HGESTUREINFO hGestureInfo,
         UINT cbExtraArgs,
                                    PBYTE pExtraArgs);
# 14835 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
CloseGestureInfoHandle(
         HGESTUREINFO hGestureInfo);
# 14849 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef struct tagGESTURECONFIG {
    DWORD dwID;
    DWORD dwWant;
    DWORD dwBlock;
} GESTURECONFIG, *PGESTURECONFIG;
# 14903 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetGestureConfig(
         HWND hwnd,
         DWORD dwReserved,
         UINT cIDs,
                     PGESTURECONFIG pGestureConfig,

         UINT cbSize);





__declspec(dllimport)
BOOL
__stdcall
GetGestureConfig(
         HWND hwnd,
         DWORD dwReserved,
         DWORD dwFlags,
         PUINT pcIDs,

                            PGESTURECONFIG pGestureConfig,

         UINT cbSize);
# 14958 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonCreate(
         HWND hWnd,
         LPCWSTR pwszReason);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonQuery(
         HWND hWnd,
                                LPWSTR pwszBuff,
            DWORD *pcchBuff);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonDestroy(
         HWND hWnd);
# 14991 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef enum tagINPUT_MESSAGE_DEVICE_TYPE {
     IMDT_UNAVAILABLE = 0x00000000,
     IMDT_KEYBOARD = 0x00000001,
     IMDT_MOUSE = 0x00000002,
     IMDT_TOUCH = 0x00000004,
     IMDT_PEN = 0x00000008,

     IMDT_TOUCHPAD = 0x00000010,

 } INPUT_MESSAGE_DEVICE_TYPE;

typedef enum tagINPUT_MESSAGE_ORIGIN_ID {
     IMO_UNAVAILABLE = 0x00000000,
     IMO_HARDWARE = 0x00000001,
     IMO_INJECTED = 0x00000002,
     IMO_SYSTEM = 0x00000004,
} INPUT_MESSAGE_ORIGIN_ID;




 typedef struct tagINPUT_MESSAGE_SOURCE {
     INPUT_MESSAGE_DEVICE_TYPE deviceType;
     INPUT_MESSAGE_ORIGIN_ID originId;
 } INPUT_MESSAGE_SOURCE;





__declspec(dllimport)
BOOL
__stdcall
GetCurrentInputMessageSource(
          INPUT_MESSAGE_SOURCE *inputMessageSource);

__declspec(dllimport)
BOOL
__stdcall
GetCIMSSM(
          INPUT_MESSAGE_SOURCE *inputMessageSource);
# 15046 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef enum tagAR_STATE {
    AR_ENABLED = 0x0,
    AR_DISABLED = 0x1,
    AR_SUPPRESSED = 0x2,
    AR_REMOTESESSION = 0x4,
    AR_MULTIMON = 0x8,
    AR_NOSENSOR = 0x10,
    AR_NOT_SUPPORTED = 0x20,
    AR_DOCKED = 0x40,
    AR_LAPTOP = 0x80
} AR_STATE, *PAR_STATE;
# 15065 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
extern "C++" { inline AR_STATE operator | (AR_STATE a, AR_STATE b) { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator |= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE operator & (AR_STATE a, AR_STATE b) { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator &= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE operator ~ (AR_STATE a) { return AR_STATE(~((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a)); } inline AR_STATE operator ^ (AR_STATE a, AR_STATE b) { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator ^= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } };
# 15075 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
typedef enum ORIENTATION_PREFERENCE {
    ORIENTATION_PREFERENCE_NONE = 0x0,
    ORIENTATION_PREFERENCE_LANDSCAPE = 0x1,
    ORIENTATION_PREFERENCE_PORTRAIT = 0x2,
    ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 0x4,
    ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 0x8
} ORIENTATION_PREFERENCE;





extern "C++" { inline ORIENTATION_PREFERENCE operator | (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator |= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE operator & (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator &= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE operator ~ (ORIENTATION_PREFERENCE a) { return ORIENTATION_PREFERENCE(~((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a)); } inline ORIENTATION_PREFERENCE operator ^ (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator ^= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } };


__declspec(dllimport)
BOOL
__stdcall
GetAutoRotationState(
          PAR_STATE pState);

__declspec(dllimport)
BOOL
__stdcall
GetDisplayAutoRotationPreferences(
          ORIENTATION_PREFERENCE *pOrientation);

__declspec(dllimport)
BOOL
__stdcall
GetDisplayAutoRotationPreferencesByProcessId(
         DWORD dwProcessId,
          ORIENTATION_PREFERENCE *pOrientation,
          BOOL *fRotateScreen);

__declspec(dllimport)
BOOL
__stdcall
SetDisplayAutoRotationPreferences(
         ORIENTATION_PREFERENCE orientation);
# 15127 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
IsImmersiveProcess(
         HANDLE hProcess);

__declspec(dllimport)
BOOL
__stdcall
SetProcessRestrictionExemption(
         BOOL fEnableExemption);
# 15154 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winuser.h"
}
# 167 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
extern "C" {






# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\datetimeapi.h" 1
# 37 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\datetimeapi.h"
extern "C" {
# 50 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\datetimeapi.h"
__declspec(dllimport)
int
__stdcall
GetDateFormatA(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpDate,
             LPCSTR lpFormat,
                              LPSTR lpDateStr,
         int cchDate
    );


__declspec(dllimport)
int
__stdcall
GetDateFormatW(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpDate,
             LPCWSTR lpFormat,
                              LPWSTR lpDateStr,
         int cchDate
    );
# 83 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\datetimeapi.h"
__declspec(dllimport)
int
__stdcall
GetTimeFormatA(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpTime,
             LPCSTR lpFormat,
                              LPSTR lpTimeStr,
         int cchTime
    );


__declspec(dllimport)
int
__stdcall
GetTimeFormatW(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpTime,
             LPCWSTR lpFormat,
                              LPWSTR lpTimeStr,
         int cchTime
    );
# 128 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\datetimeapi.h"
__declspec(dllimport)
int
__stdcall
GetTimeFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME * lpTime,
             LPCWSTR lpFormat,
                              LPWSTR lpTimeStr,
         int cchTime
    );


__declspec(dllimport)
int
__stdcall
GetDateFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME * lpDate,
             LPCWSTR lpFormat,
                              LPWSTR lpDateStr,
         int cchDate,
             LPCWSTR lpCalendar
    );
# 166 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\datetimeapi.h"
}
# 30 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h" 2
# 934 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
typedef DWORD LGRPID;




typedef DWORD LCTYPE;




typedef DWORD CALTYPE;





typedef DWORD CALID;






typedef struct _cpinfo {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
} CPINFO, *LPCPINFO;

typedef struct _cpinfoexA {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR CodePageName[260];
} CPINFOEXA, *LPCPINFOEXA;
typedef struct _cpinfoexW {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR CodePageName[260];
} CPINFOEXW, *LPCPINFOEXW;

typedef CPINFOEXW CPINFOEX;
typedef LPCPINFOEXW LPCPINFOEX;
# 992 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
typedef struct _numberfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTW, *LPNUMBERFMTW;

typedef NUMBERFMTW NUMBERFMT;
typedef LPNUMBERFMTW LPNUMBERFMT;
# 1021 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
typedef struct _currencyfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
} CURRENCYFMTW, *LPCURRENCYFMTW;

typedef CURRENCYFMTW CURRENCYFMT;
typedef LPCURRENCYFMTW LPCURRENCYFMT;
# 1053 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
enum SYSNLS_FUNCTION{
    COMPARE_STRING = 0x0001,
};
typedef DWORD NLS_FUNCTION;
# 1071 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
typedef struct _nlsversioninfo{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
} NLSVERSIONINFO, *LPNLSVERSIONINFO;
# 1096 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
typedef struct _nlsversioninfoex{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
} NLSVERSIONINFOEX, *LPNLSVERSIONINFOEX;





typedef LONG GEOID;
typedef DWORD GEOTYPE;
typedef DWORD GEOCLASS;







enum SYSGEOTYPE {
    GEO_NATION = 0x0001,
    GEO_LATITUDE = 0x0002,
    GEO_LONGITUDE = 0x0003,
    GEO_ISO2 = 0x0004,
    GEO_ISO3 = 0x0005,
    GEO_RFC1766 = 0x0006,
    GEO_LCID = 0x0007,
    GEO_FRIENDLYNAME= 0x0008,
    GEO_OFFICIALNAME= 0x0009,
    GEO_TIMEZONES = 0x000A,
    GEO_OFFICIALLANGUAGES = 0x000B,
    GEO_ISO_UN_NUMBER = 0x000C,
    GEO_PARENT = 0x000D
};





enum SYSGEOCLASS {
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
    GEOCLASS_ALL = 0
};






typedef enum _NORM_FORM {
    NormalizationOther = 0,
    NormalizationC = 0x1,
    NormalizationD = 0x2,
    NormalizationKC = 0x5,

    NormalizationKD = 0x6

} NORM_FORM;
# 1179 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);

typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* GEO_ENUMPROC)(GEOID);
# 1262 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
typedef struct _FILEMUIINFO {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFileType;
    BYTE pChecksum[16];
    BYTE pServiceChecksum[16];
    DWORD dwLanguageNameOffset;
    DWORD dwTypeIDMainSize;
    DWORD dwTypeIDMainOffset;
    DWORD dwTypeNameMainOffset;
    DWORD dwTypeIDMUISize;
    DWORD dwTypeIDMUIOffset;
    DWORD dwTypeNameMUIOffset;
    BYTE abBuffer[8];
} FILEMUIINFO, *PFILEMUIINFO;



# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\stringapiset.h" 1
# 20 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\stringapiset.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h" 1
# 20 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\stringapiset.h" 2
# 33 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\stringapiset.h"
extern "C" {
# 43 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\stringapiset.h"
__declspec(dllimport)
int
__stdcall
CompareStringEx(
             LPCWSTR lpLocaleName,
         DWORD dwCmpFlags,
                               LPCWCH lpString1,
         int cchCount1,
                               LPCWCH lpString2,
         int cchCount2,
               LPNLSVERSIONINFO lpVersionInformation,
               LPVOID lpReserved,
               LPARAM lParam
    );


__declspec(dllimport)
int
__stdcall
CompareStringOrdinal(
                               LPCWCH lpString1,
         int cchCount1,
                               LPCWCH lpString2,
         int cchCount2,
         BOOL bIgnoreCase
    );
# 80 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\stringapiset.h"
__declspec(dllimport)
int
__stdcall
CompareStringW(
         LCID Locale,
         DWORD dwCmpFlags,
                               PCNZWCH lpString1,
         int cchCount1,
                               PCNZWCH lpString2,
         int cchCount2
    );





__declspec(dllimport)
int
__stdcall
FoldStringW(
         DWORD dwMapFlags,
                            LPCWCH lpSrcStr,
         int cchSrc,
                              LPWSTR lpDestStr,
         int cchDest
    );
# 118 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\stringapiset.h"
__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExW(
         LCID Locale,
         DWORD dwInfoType,
                            LPCWCH lpSrcStr,
         int cchSrc,
                         LPWORD lpCharType
    );





__declspec(dllimport)
BOOL
__stdcall
GetStringTypeW(
         DWORD dwInfoType,
                            LPCWCH lpSrcStr,
         int cchSrc,
          LPWORD lpCharType
    );







__declspec(dllimport)


int
__stdcall
MultiByteToWideChar(
         UINT CodePage,
         DWORD dwFlags,
                                 LPCCH lpMultiByteStr,
         int cbMultiByte,
                                             LPWSTR lpWideCharStr,
         int cchWideChar
    );


__declspec(dllimport)


int
__stdcall
WideCharToMultiByte(
         UINT CodePage,
         DWORD dwFlags,
                                 LPCWCH lpWideCharStr,
         int cchWideChar,
                                                   LPSTR lpMultiByteStr,
         int cbMultiByte,
             LPCCH lpDefaultChar,
              LPBOOL lpUsedDefaultChar
    );






}
# 1279 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h" 2
# 1345 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
IsValidCodePage(
         UINT CodePage);







__declspec(dllimport)
UINT
__stdcall
GetACP(void);

__declspec(dllimport)
UINT
__stdcall
GetOEMCP(void);







__declspec(dllimport)
BOOL
__stdcall
GetCPInfo(
         UINT CodePage,
          LPCPINFO lpCPInfo);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExA(
         UINT CodePage,
         DWORD dwFlags,
          LPCPINFOEXA lpCPInfoEx);
__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExW(
         UINT CodePage,
         DWORD dwFlags,
          LPCPINFOEXW lpCPInfoEx);
# 1411 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
int
__stdcall
CompareStringA(
         LCID Locale,
         DWORD dwCmpFlags,
                          PCNZCH lpString1,
         int cchCount1,
                          PCNZCH lpString2,
         int cchCount2);
# 1457 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
int
__stdcall
FindNLSString(
                            LCID Locale,
                            DWORD dwFindNLSStringFlags,
                           LPCWSTR lpStringSource,
                            int cchSource,
                           LPCWSTR lpStringValue,
                            int cchValue,
                            LPINT pcchFound);




__declspec(dllimport)
int
__stdcall
LCMapStringW(
         LCID Locale,
         DWORD dwMapFlags,
                       LPCWSTR lpSrcStr,
         int cchSrc,
                                               LPWSTR lpDestStr,
         int cchDest);




__declspec(dllimport)
int
__stdcall
LCMapStringA(
         LCID Locale,
         DWORD dwMapFlags,
                       LPCSTR lpSrcStr,
         int cchSrc,
                                               LPSTR lpDestStr,
         int cchDest);






__declspec(dllimport)
int
__stdcall
GetLocaleInfoW(
         LCID Locale,
         LCTYPE LCType,
                              LPWSTR lpLCData,
         int cchData);





__declspec(dllimport)
int
__stdcall
GetLocaleInfoA(
         LCID Locale,
         LCTYPE LCType,
                              LPSTR lpLCData,
         int cchData
    );





__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoA(
         LCID Locale,
         LCTYPE LCType,
         LPCSTR lpLCData);
__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoW(
         LCID Locale,
         LCTYPE LCType,
         LPCWSTR lpLCData);
# 1552 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
int
__stdcall
GetCalendarInfoA(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
                              LPSTR lpCalData,
         int cchData,
              LPDWORD lpValue);

__declspec(dllimport)
int
__stdcall
GetCalendarInfoW(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
                              LPWSTR lpCalData,
         int cchData,
              LPDWORD lpValue);






__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoA(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
         LPCSTR lpCalData);
__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoW(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
         LPCWSTR lpCalData);
# 1612 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
LoadStringByReference(
               DWORD Flags,
                   PCWSTR Language,
               PCWSTR SourceString,
                                  PWSTR Buffer,
               ULONG cchBuffer,
               PCWSTR Directory,
               PULONG pcchBufferOut
    );



__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByte(
         BYTE TestChar
    );

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByteEx(
         UINT CodePage,
         BYTE TestChar
    );
# 1649 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
int
__stdcall
LCIDToLocaleName(
         LCID Locale,
                              LPWSTR lpName,
         int cchName,
         DWORD dwFlags);

__declspec(dllimport)
LCID
__stdcall
LocaleNameToLCID(
         LPCWSTR lpName,
         DWORD dwFlags);
# 1675 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
int
__stdcall
GetDurationFormat(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME *lpDuration,
         ULONGLONG ullDuration,
             LPCWSTR lpFormat,
                                  LPWSTR lpDurationStr,
         int cchDuration);



__declspec(dllimport)
int
__stdcall
GetNumberFormatA(
         LCID Locale,
         DWORD dwFlags,
         LPCSTR lpValue,
             const NUMBERFMTA *lpFormat,
                                LPSTR lpNumberStr,
         int cchNumber);

__declspec(dllimport)
int
__stdcall
GetNumberFormatW(
         LCID Locale,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const NUMBERFMTW *lpFormat,
                                LPWSTR lpNumberStr,
         int cchNumber);







__declspec(dllimport)
int
__stdcall
GetCurrencyFormatA(
         LCID Locale,
         DWORD dwFlags,
         LPCSTR lpValue,
             const CURRENCYFMTA *lpFormat,
                                  LPSTR lpCurrencyStr,
         int cchCurrency);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatW(
         LCID Locale,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const CURRENCYFMTW *lpFormat,
                                  LPWSTR lpCurrencyStr,
         int cchCurrency);







__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoA(
         CALINFO_ENUMPROCA lpCalInfoEnumProc,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoW(
         CALINFO_ENUMPROCW lpCalInfoEnumProc,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);
# 1770 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExA(
         CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExW(
         CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);
# 1795 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsA(
         TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsW(
         TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);







__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsA(
         DATEFMT_ENUMPROCA lpDateFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsW(
         DATEFMT_ENUMPROCW lpDateFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);
# 1840 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExA(
         DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
         LCID Locale,
         DWORD dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExW(
         DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
         LCID Locale,
         DWORD dwFlags);
# 1863 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
IsValidLanguageGroup(
         LGRPID LanguageGroup,
         DWORD dwFlags);



__declspec(dllimport)
BOOL
__stdcall
GetNLSVersion(
            NLS_FUNCTION Function,
            LCID Locale,
            LPNLSVERSIONINFO lpVersionInformation);

__declspec(dllimport)
BOOL
__stdcall
IsNLSDefinedString(
         NLS_FUNCTION Function,
         DWORD dwFlags,
         LPNLSVERSIONINFO lpVersionInformation,
                       LPCWSTR lpString,
         INT cchStr);


__declspec(dllimport)
BOOL
__stdcall
IsValidLocale(
         LCID Locale,
         DWORD dwFlags);







__declspec(dllimport)
int
__stdcall
GetGeoInfoA(
         GEOID Location,
         GEOTYPE GeoType,
                              LPSTR lpGeoData,
         int cchData,
         LANGID LangId);
__declspec(dllimport)
int
__stdcall
GetGeoInfoW(
         GEOID Location,
         GEOTYPE GeoType,
                              LPWSTR lpGeoData,
         int cchData,
         LANGID LangId);






__declspec(dllimport)
BOOL
__stdcall
EnumSystemGeoID(
         GEOCLASS GeoClass,
         GEOID ParentGeoId,
         GEO_ENUMPROC lpGeoEnumProc);

__declspec(dllimport)
GEOID
__stdcall
GetUserGeoID(
         GEOCLASS GeoClass);







__declspec(dllimport)
BOOL
__stdcall
SetUserGeoID(
         GEOID GeoId);

__declspec(dllimport)
LCID
__stdcall
ConvertDefaultLocale(
         LCID Locale);

__declspec(dllimport)
LCID
__stdcall
GetThreadLocale(void);

__declspec(dllimport)
BOOL
__stdcall
SetThreadLocale(
         LCID Locale
    );


__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultUILanguage(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultUILanguage(void);


__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultLangID(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultLangID(void);

__declspec(dllimport)
LCID
__stdcall
GetSystemDefaultLCID(void);

__declspec(dllimport)
LCID
__stdcall
GetUserDefaultLCID(void);


__declspec(dllimport)
LANGID
__stdcall
SetThreadUILanguage( LANGID LangId);




__declspec(dllimport)
LANGID
__stdcall
GetThreadUILanguage(void);

__declspec(dllimport)
BOOL
__stdcall
GetProcessPreferredUILanguages(
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetProcessPreferredUILanguages(
                DWORD dwFlags,
                PCZZWSTR pwszLanguagesBuffer,
                PULONG pulNumLanguages
);

__declspec(dllimport)
BOOL
__stdcall
GetUserPreferredUILanguages (
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
GetSystemPreferredUILanguages (
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
GetThreadPreferredUILanguages(
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetThreadPreferredUILanguages(
                DWORD dwFlags,
                PCZZWSTR pwszLanguagesBuffer,
                PULONG pulNumLanguages
);

__declspec(dllimport)

BOOL
__stdcall
GetFileMUIInfo(
                        DWORD dwFlags,
                        PCWSTR pcwszFilePath,
                                                                  PFILEMUIINFO pFileMUIInfo,
                        DWORD* pcbFileMUIInfo);

__declspec(dllimport)
BOOL
__stdcall
GetFileMUIPath(
         DWORD dwFlags,
         PCWSTR pcwszFilePath ,
                                             PWSTR pwszLanguage,
            PULONG pcchLanguage,
                                           PWSTR pwszFileMUIPath,
                    PULONG pcchFileMUIPath,
                    PULONGLONG pululEnumerator
);


__declspec(dllimport)
BOOL
__stdcall
GetUILanguageInfo(
         DWORD dwFlags,
         PCZZWSTR pwmszLanguage,
                                             PZZWSTR pwszFallbackLanguages,
                PDWORD pcchFallbackLanguages,
          PDWORD pAttributes
);


__declspec(dllimport)
BOOL
__stdcall
NotifyUILanguageChange(
                DWORD dwFlags,
                    PCWSTR pcwstrNewLanguage,
                PCWSTR pcwstrPreviousLanguage,
                DWORD dwReserved,
                PDWORD pdwStatusRtrn
);







__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExA(
                         LCID Locale,
                         DWORD dwInfoType,
                        LPCSTR lpSrcStr,
                         int cchSrc,
                         LPWORD lpCharType);
# 2157 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
GetStringTypeA(
         LCID Locale,
         DWORD dwInfoType,
                       LPCSTR lpSrcStr,
         int cchSrc,
          LPWORD lpCharType);

__declspec(dllimport)
int
__stdcall
FoldStringA(
         DWORD dwMapFlags,
                       LPCSTR lpSrcStr,
         int cchSrc,
                              LPSTR lpDestStr,
         int cchDest);






__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesA(
         LOCALE_ENUMPROCA lpLocaleEnumProc,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesW(
         LOCALE_ENUMPROCW lpLocaleEnumProc,
         DWORD dwFlags);







__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsA(
         LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsW(
         LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);






__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesA(
         LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
         LGRPID LanguageGroup,
         DWORD dwFlags,
         LONG_PTR lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesW(
         LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
         LGRPID LanguageGroup,
         DWORD dwFlags,
         LONG_PTR lParam);






__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesA(
         UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesW(
         UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);
# 2270 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesA(
         CODEPAGE_ENUMPROCA lpCodePageEnumProc,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesW(
         CODEPAGE_ENUMPROCW lpCodePageEnumProc,
         DWORD dwFlags);
# 2293 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
int
__stdcall NormalizeString( NORM_FORM NormForm,
                                                     LPCWSTR lpSrcString,
                                                      int cwSrcLength,
                                                      LPWSTR lpDstString,
                                                      int cwDstLength );

__declspec(dllimport)
BOOL
__stdcall IsNormalizedString( NORM_FORM NormForm,
                                                 LPCWSTR lpString,
                                                  int cwLength );




__declspec(dllimport)
int
__stdcall IdnToAscii( DWORD dwFlags,
                                               LPCWSTR lpUnicodeCharStr,
                                                int cchUnicodeChar,
                                                 LPWSTR lpASCIICharStr,
                                                int cchASCIIChar);

__declspec(dllimport)
int
__stdcall IdnToNameprepUnicode( DWORD dwFlags,
                                                            LPCWSTR lpUnicodeCharStr,
                                                             int cchUnicodeChar,
                                                                LPWSTR lpNameprepCharStr,
                                                             int cchNameprepChar);

__declspec(dllimport)
int
__stdcall IdnToUnicode( DWORD dwFlags,
                                                  LPCWSTR lpASCIICharStr,
                                                   int cchASCIIChar,
                                                     LPWSTR lpUnicodeCharStr,
                                                   int cchUnicodeChar);

__declspec(dllimport)
BOOL
__stdcall VerifyScripts(
            DWORD dwFlags,
            LPCWSTR lpLocaleScripts,
            int cchLocaleScripts,
            LPCWSTR lpTestScripts,
            int cchTestScripts);

__declspec(dllimport)
int
__stdcall GetStringScripts(
                                     DWORD dwFlags,
                                     LPCWSTR lpString,
                                     int cchString,
                                     LPWSTR lpScripts,
                                     int cchScripts);
# 2370 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
int
__stdcall
GetLocaleInfoEx(
             LPCWSTR lpLocaleName,
         LCTYPE LCType,
                              LPWSTR lpLCData,
         int cchData
);

__declspec(dllimport)
int
__stdcall
GetCalendarInfoEx(
             LPCWSTR lpLocaleName,
         CALID Calendar,
             LPCWSTR lpReserved,
         CALTYPE CalType,
                              LPWSTR lpCalData,
         int cchData,
              LPDWORD lpValue
);

__declspec(dllimport)
int
__stdcall
GetDurationFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME *lpDuration,
         ULONGLONG ullDuration,
             LPCWSTR lpFormat,
                                  LPWSTR lpDurationStr,
         int cchDuration
);

__declspec(dllimport)
int
__stdcall
GetNumberFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const NUMBERFMTW *lpFormat,
                                LPWSTR lpNumberStr,
         int cchNumber
);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const CURRENCYFMTW *lpFormat,
                                  LPWSTR lpCurrencyStr,
         int cchCurrency
);

__declspec(dllimport)
int
__stdcall
GetUserDefaultLocaleName(
                                LPWSTR lpLocaleName,
         int cchLocaleName
);

__declspec(dllimport)
int
__stdcall
GetSystemDefaultLocaleName(
                                LPWSTR lpLocaleName,
         int cchLocaleName
);

__declspec(dllimport)
BOOL
__stdcall
GetNLSVersionEx(
             NLS_FUNCTION function,
                LPCWSTR lpLocaleName,
                LPNLSVERSIONINFOEX lpVersionInformation
);


__declspec(dllimport)
DWORD
__stdcall
IsValidNLSVersion(
                NLS_FUNCTION function,
                LPCWSTR lpLocaleName,
                LPNLSVERSIONINFOEX lpVersionInformation
);


__declspec(dllimport)
int
__stdcall
FindNLSStringEx(
             LPCWSTR lpLocaleName,
         DWORD dwFindNLSStringFlags,
                          LPCWSTR lpStringSource,
         int cchSource,
                         LPCWSTR lpStringValue,
         int cchValue,
              LPINT pcchFound,
             LPNLSVERSIONINFO lpVersionInformation,
             LPVOID lpReserved,
             LPARAM sortHandle
);
# 2489 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
int
__stdcall
LCMapStringEx(
             LPCWSTR lpLocaleName,
         DWORD dwMapFlags,
                       LPCWSTR lpSrcStr,
         int cchSrc,
                              LPWSTR lpDestStr,
         int cchDest,
             LPNLSVERSIONINFO lpVersionInformation,
             LPVOID lpReserved,
             LPARAM sortHandle
);

__declspec(dllimport)
BOOL
__stdcall
IsValidLocaleName(
         LPCWSTR lpLocaleName
);

typedef BOOL (__stdcall* CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExEx(
         CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,
             LPCWSTR lpLocaleName,
         CALID Calendar,
             LPCWSTR lpReserved,
         CALTYPE CalType,
         LPARAM lParam
);

typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExEx(
         DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPARAM lParam
);

typedef BOOL (__stdcall* TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsEx(
         TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPARAM lParam
);

typedef BOOL (__stdcall* LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesEx(
         LOCALE_ENUMPROCEX lpLocaleEnumProcEx,
         DWORD dwFlags,
         LPARAM lParam,
             LPVOID lpReserved
);
# 2571 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
__declspec(dllimport)
int
__stdcall
ResolveLocaleName(
                                    LPCWSTR lpNameToResolve,
                                    LPWSTR lpLocaleName,
                                    int cchLocaleName
);
# 2596 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnls.h"
}
# 169 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2



# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wincon.h" 1
# 30 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wincon.h"
extern "C" {
# 40 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wincon.h"
typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;







typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;







typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;
# 97 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wincon.h"
typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;
# 125 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wincon.h"
typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;
# 164 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wincon.h"
typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;
# 200 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wincon.h"
typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;

typedef struct _CONSOLE_CURSOR_INFO {
    DWORD dwSize;
    BOOL bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;

typedef struct _CONSOLE_FONT_INFO {
    DWORD nFont;
    COORD dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;


typedef struct _CONSOLE_FONT_INFOEX {
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;




typedef struct _CONSOLE_HISTORY_INFO {
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;
# 258 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wincon.h"
typedef struct _CONSOLE_SELECTION_INFO {
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO;
# 285 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wincon.h"
typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
         DWORD CtrlType
    );
# 330 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wincon.h"
__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputW(
         HANDLE hConsoleInput,
                          PINPUT_RECORD lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsRead
    );




__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputA(
         HANDLE hConsoleInput,
                        const INPUT_RECORD *lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputW(
         HANDLE hConsoleInput,
                        const INPUT_RECORD *lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputA(
         HANDLE hConsoleOutput,
                                                  PCHAR_INFO lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpReadRegion
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputW(
         HANDLE hConsoleOutput,
                                                  PCHAR_INFO lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpReadRegion
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputA(
         HANDLE hConsoleOutput,
                                                const CHAR_INFO *lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpWriteRegion
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputW(
         HANDLE hConsoleOutput,
                                                const CHAR_INFO *lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpWriteRegion
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
                          LPSTR lpCharacter,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfCharsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
                          LPWSTR lpCharacter,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfCharsRead
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputAttribute(
         HANDLE hConsoleOutput,
                          LPWORD lpAttribute,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfAttrsRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
                        LPCSTR lpCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
                        LPCWSTR lpCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputAttribute(
         HANDLE hConsoleOutput,
                        const WORD *lpAttribute,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
         CHAR cCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
         WCHAR cCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputAttribute(
         HANDLE hConsoleOutput,
         WORD wAttribute,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfAttrsWritten
    );




__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfo(
         HANDLE hConsoleOutput,
          PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfoEx(
         HANDLE hConsoleOutput,
            PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferInfoEx(
         HANDLE hConsoleOutput,
         PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

__declspec(dllimport)
COORD
__stdcall
GetLargestConsoleWindowSize(
         HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleCursorInfo(
         HANDLE hConsoleOutput,
          PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );



__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFont(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
          PCONSOLE_FONT_INFO lpConsoleCurrentFont
    );


__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFontEx(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
          PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);

__declspec(dllimport)
BOOL
__stdcall
SetCurrentConsoleFontEx(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
         PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);


__declspec(dllimport)
BOOL
__stdcall
GetConsoleHistoryInfo(
          PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleHistoryInfo(
         PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

__declspec(dllimport)
COORD
__stdcall
GetConsoleFontSize(
         HANDLE hConsoleOutput,
         DWORD nFont
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleSelectionInfo(
          PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
          LPDWORD lpNumberOfMouseButtons
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleActiveScreenBuffer(
         HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
FlushConsoleInputBuffer(
         HANDLE hConsoleInput
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferSize(
         HANDLE hConsoleOutput,
         COORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorPosition(
         HANDLE hConsoleOutput,
         COORD dwCursorPosition
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorInfo(
         HANDLE hConsoleOutput,
         const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferA(
         HANDLE hConsoleOutput,
         const SMALL_RECT *lpScrollRectangle,
             const SMALL_RECT *lpClipRectangle,
         COORD dwDestinationOrigin,
         const CHAR_INFO *lpFill
    );
__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferW(
         HANDLE hConsoleOutput,
         const SMALL_RECT *lpScrollRectangle,
             const SMALL_RECT *lpClipRectangle,
         COORD dwDestinationOrigin,
         const CHAR_INFO *lpFill
    );






__declspec(dllimport)
BOOL
__stdcall
SetConsoleWindowInfo(
         HANDLE hConsoleOutput,
         BOOL bAbsolute,
         const SMALL_RECT *lpConsoleWindow
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTextAttribute(
         HANDLE hConsoleOutput,
         WORD wAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
GenerateConsoleCtrlEvent(
         DWORD dwCtrlEvent,
         DWORD dwProcessGroupId);

__declspec(dllimport)
BOOL
__stdcall
FreeConsole(
    void);


__declspec(dllimport)
BOOL
__stdcall
AttachConsole(
         DWORD dwProcessId);





__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleA(
                        LPSTR lpConsoleTitle,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleW(
                        LPWSTR lpConsoleTitle,
         DWORD nSize
    );







__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleA(
                        LPSTR lpConsoleTitle,
         DWORD nSize);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleW(
                        LPWSTR lpConsoleTitle,
         DWORD nSize);







__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleA(
         LPCSTR lpConsoleTitle
    );
__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleW(
         LPCWSTR lpConsoleTitle
    );
# 804 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wincon.h"
typedef struct _CONSOLE_READCONSOLE_CONTROL {
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;








# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\consoleapi.h" 1
# 34 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\consoleapi.h"
extern "C" {






__declspec(dllimport)
BOOL
__stdcall
AllocConsole(
    void
    );


__declspec(dllimport)
UINT
__stdcall
GetConsoleCP(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetConsoleMode(
         HANDLE hConsoleHandle,
          LPDWORD lpMode
    );


__declspec(dllimport)
UINT
__stdcall
GetConsoleOutputCP(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleInputEvents(
         HANDLE hConsoleInput,
          LPDWORD lpNumberOfEvents
    );


__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputA(
         HANDLE hConsoleInput,
                          PINPUT_RECORD lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsRead
    );






__declspec(dllimport)

BOOL
__stdcall
ReadConsoleA(
         HANDLE hConsoleInput,
                                                                                                    LPVOID lpBuffer,
         DWORD nNumberOfCharsToRead,
                                                      LPDWORD lpNumberOfCharsRead,
             PCONSOLE_READCONSOLE_CONTROL pInputControl
    );

__declspec(dllimport)

BOOL
__stdcall
ReadConsoleW(
         HANDLE hConsoleInput,
                                                                                                      LPVOID lpBuffer,
         DWORD nNumberOfCharsToRead,
                                                      LPDWORD lpNumberOfCharsRead,
             PCONSOLE_READCONSOLE_CONTROL pInputControl
    );







__declspec(dllimport)

BOOL
__stdcall
ReadConsoleInputA(
         HANDLE hConsoleInput,
                                                    PINPUT_RECORD lpBuffer,
         DWORD nLength,
                                         LPDWORD lpNumberOfEventsRead
    );

__declspec(dllimport)

BOOL
__stdcall
ReadConsoleInputW(
         HANDLE hConsoleInput,
                                                    PINPUT_RECORD lpBuffer,
         DWORD nLength,
                                         LPDWORD lpNumberOfEventsRead
    );







__declspec(dllimport)
BOOL
__stdcall
SetConsoleCtrlHandler(
             PHANDLER_ROUTINE HandlerRoutine,
         BOOL Add
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleMode(
         HANDLE hConsoleHandle,
         DWORD dwMode
    );


__declspec(dllimport)
BOOL
__stdcall
WriteConsoleA(
         HANDLE hConsoleOutput,
                                      const void * lpBuffer,
         DWORD nNumberOfCharsToWrite,
              LPDWORD lpNumberOfCharsWritten,
               LPVOID lpReserved
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleW(
         HANDLE hConsoleOutput,
                                      const void * lpBuffer,
         DWORD nNumberOfCharsToWrite,
              LPDWORD lpNumberOfCharsWritten,
               LPVOID lpReserved
    );
# 206 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\consoleapi.h"
}
# 817 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wincon.h" 2






__declspec(dllimport)
HANDLE
__stdcall
CreateConsoleScreenBuffer(
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
             const SECURITY_ATTRIBUTES *lpSecurityAttributes,
         DWORD dwFlags,
               LPVOID lpScreenBufferData
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCP(
         UINT wCodePageID
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleOutputCP(
         UINT wCodePageID
    );






__declspec(dllimport)
BOOL
__stdcall
GetConsoleDisplayMode(
          LPDWORD lpModeFlags);




BOOL
__stdcall
SetConsoleDisplayMode(
         HANDLE hConsoleOutput,
         DWORD dwFlags,
              PCOORD lpNewScreenBufferDimensions);

__declspec(dllimport)
HWND
__stdcall
GetConsoleWindow(
    void
    );





__declspec(dllimport)
DWORD
__stdcall
GetConsoleProcessList(
                                 LPDWORD lpdwProcessList,
         DWORD dwProcessCount);





__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasA(
         LPSTR Source,
         LPSTR Target,
         LPSTR ExeName);
__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasW(
         LPWSTR Source,
         LPWSTR Target,
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasA(
         LPSTR Source,
                                     LPSTR TargetBuffer,
         DWORD TargetBufferLength,
         LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasW(
         LPWSTR Source,
                                     LPWSTR TargetBuffer,
         DWORD TargetBufferLength,
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthA(
         LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthW(
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthA(
    void);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthW(
    void);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesA(
                                    LPSTR AliasBuffer,
         DWORD AliasBufferLength,
         LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesW(
                                    LPWSTR AliasBuffer,
         DWORD AliasBufferLength,
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesA(
                                      LPSTR ExeNameBuffer,
         DWORD ExeNameBufferLength);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesW(
                                      LPWSTR ExeNameBuffer,
         DWORD ExeNameBufferLength);
# 1010 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\wincon.h"
}
# 172 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winver.h" 1
# 19 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winver.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\verrsrc.h" 1
# 133 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\verrsrc.h"
extern "C" {
# 147 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\verrsrc.h"
typedef struct tagVS_FIXEDFILEINFO
{
    DWORD dwSignature;
    DWORD dwStrucVersion;
    DWORD dwFileVersionMS;
    DWORD dwFileVersionLS;
    DWORD dwProductVersionMS;
    DWORD dwProductVersionLS;
    DWORD dwFileFlagsMask;
    DWORD dwFileFlags;
    DWORD dwFileOS;
    DWORD dwFileType;
    DWORD dwFileSubtype;
    DWORD dwFileDateMS;
    DWORD dwFileDateLS;
} VS_FIXEDFILEINFO;


}
# 19 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winver.h" 2




extern "C" {
# 34 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winver.h"
DWORD
__stdcall
VerFindFileA(
                                     DWORD uFlags,
                                     LPCSTR szFileName,
                                     LPCSTR szWinDir,
                                     LPCSTR szAppDir,
                                     LPSTR szCurDir,
                                     PUINT puCurDirLen,
                                     LPSTR szDestDir,
                                     PUINT puDestDirLen
        );
DWORD
__stdcall
VerFindFileW(
                                     DWORD uFlags,
                                     LPCWSTR szFileName,
                                     LPCWSTR szWinDir,
                                     LPCWSTR szAppDir,
                                     LPWSTR szCurDir,
                                     PUINT puCurDirLen,
                                     LPWSTR szDestDir,
                                     PUINT puDestDirLen
        );






DWORD
__stdcall
VerInstallFileA(
                                     DWORD uFlags,
                                     LPCSTR szSrcFileName,
                                     LPCSTR szDestFileName,
                                     LPCSTR szSrcDir,
                                     LPCSTR szDestDir,
                                     LPCSTR szCurDir,
                                     LPSTR szTmpFile,
                                     PUINT puTmpFileLen
        );
DWORD
__stdcall
VerInstallFileW(
                                     DWORD uFlags,
                                     LPCWSTR szSrcFileName,
                                     LPCWSTR szDestFileName,
                                     LPCWSTR szSrcDir,
                                     LPCWSTR szDestDir,
                                     LPCWSTR szCurDir,
                                     LPWSTR szTmpFile,
                                     PUINT puTmpFileLen
        );







DWORD
__stdcall
GetFileVersionInfoSizeA(
                    LPCSTR lptstrFilename,
                  LPDWORD lpdwHandle
        );

DWORD
__stdcall
GetFileVersionInfoSizeW(
                    LPCWSTR lptstrFilename,
                  LPDWORD lpdwHandle
        );







BOOL
__stdcall
GetFileVersionInfoA(
                            LPCSTR lptstrFilename,
                            DWORD dwHandle,
                            DWORD dwLen,
                                  LPVOID lpData
        );

BOOL
__stdcall
GetFileVersionInfoW(
                            LPCWSTR lptstrFilename,
                            DWORD dwHandle,
                            DWORD dwLen,
                                  LPVOID lpData
        );






DWORD __stdcall GetFileVersionInfoSizeExA( DWORD dwFlags, LPCSTR lpwstrFilename, LPDWORD lpdwHandle);
DWORD __stdcall GetFileVersionInfoSizeExW( DWORD dwFlags, LPCWSTR lpwstrFilename, LPDWORD lpdwHandle);






BOOL __stdcall GetFileVersionInfoExA( DWORD dwFlags,
                                         LPCSTR lpwstrFilename,
                                               DWORD dwHandle,
                                         DWORD dwLen,
                                                              LPVOID lpData);
BOOL __stdcall GetFileVersionInfoExW( DWORD dwFlags,
                                         LPCWSTR lpwstrFilename,
                                               DWORD dwHandle,
                                         DWORD dwLen,
                                                              LPVOID lpData);







DWORD
__stdcall
VerLanguageNameA(
                              DWORD wLang,
                              LPSTR szLang,
                              DWORD cchLang
        );
DWORD
__stdcall
VerLanguageNameW(
                              DWORD wLang,
                              LPWSTR szLang,
                              DWORD cchLang
        );






BOOL
__stdcall
VerQueryValueA(
             LPCVOID pBlock,
             LPCSTR lpSubBlock,
                                                                                 LPVOID * lplpBuffer,
              PUINT puLen
        );
BOOL
__stdcall
VerQueryValueW(
             LPCVOID pBlock,
             LPCWSTR lpSubBlock,
                                                                                 LPVOID * lplpBuffer,
              PUINT puLen
        );
# 212 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winver.h"
}
# 173 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2



# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h" 1
# 44 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h"
extern "C" {
# 89 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h"
typedef ACCESS_MASK REGSAM;
# 119 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h"
struct val_context {
    int valuelen;
    LPVOID value_context;
    LPVOID val_buff_ptr;
};

typedef struct val_context *PVALCONTEXT;

typedef struct pvalueA {
    LPSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA, *PPVALUEA;
typedef struct pvalueW {
    LPWSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW, *PPVALUEW;

typedef PVALUEW PVALUE;
typedef PPVALUEW PPVALUE;





typedef
DWORD __cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD *total_outlen, DWORD input_blen);

typedef QUERYHANDLER *PQUERYHANDLER;

typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;
    LPVOID pi_key_context;
}REG_PROVIDER;

typedef struct provider_info *PPROVIDER;

typedef struct value_entA {
    LPSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTA, *PVALENTA;
typedef struct value_entW {
    LPWSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTW, *PVALENTW;

typedef VALENTW VALENT;
typedef PVALENTW PVALENT;
# 201 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h"
typedef LONG LSTATUS;

__declspec(dllimport)
LSTATUS
__stdcall
RegCloseKey(
         HKEY hKey
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOverridePredefKey (
         HKEY hKey,
             HKEY hNewHKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenUserClassesRoot(
         HANDLE hToken,
               DWORD dwOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOpenCurrentUser(
         REGSAM samDesired,
          PHKEY phkResult
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCache(
    void
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCacheEx(
    void
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryA (
             LPCSTR lpMachineName,
         HKEY hKey,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryW (
             LPCWSTR lpMachineName,
         HKEY hKey,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExA (
             LPCSTR lpMachineName,
         HKEY hKey,
         ULONG Flags,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExW (
             LPCWSTR lpMachineName,
         HKEY hKey,
         ULONG Flags,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExA(
         HKEY hKey,
         LPCSTR lpSubKey,
               DWORD Reserved,
             LPSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExW(
         HKEY hKey,
         LPCWSTR lpSubKey,
               DWORD Reserved,
             LPWSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedA (
         HKEY hKey,
         LPCSTR lpSubKey,
               DWORD Reserved,
             LPSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedW (
         HKEY hKey,
         LPCWSTR lpSubKey,
               DWORD Reserved,
             LPWSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyA (
         HKEY hKey,
         LPCSTR lpSubKey
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyW (
         HKEY hKey,
         LPCWSTR lpSubKey
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExA(
         HKEY hKey,
         LPCSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExW(
         HKEY hKey,
         LPCWSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedA (
         HKEY hKey,
         LPCSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved,
                HANDLE hTransaction,
               PVOID pExtendedParameter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedW (
         HKEY hKey,
         LPCWSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved,
                HANDLE hTransaction,
               PVOID pExtendedParameter
    );






__declspec(dllimport)
LONG
__stdcall
RegDisableReflectionKey (
         HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegEnableReflectionKey (
         HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegQueryReflectionKey (
         HKEY hBase,
          BOOL *bIsReflectionDisabled
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueA(
         HKEY hKey,
             LPCSTR lpValueName
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueW(
         HKEY hKey,
             LPCWSTR lpValueName
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyA (
         HKEY hKey,
         DWORD dwIndex,
                              LPSTR lpName,
         DWORD cchName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyW (
         HKEY hKey,
         DWORD dwIndex,
                              LPWSTR lpName,
         DWORD cchName
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExA(
         HKEY hKey,
         DWORD dwIndex,
                                                    LPSTR lpName,
            LPDWORD lpcchName,
               LPDWORD lpReserved,
                                                     LPSTR lpClass,
                LPDWORD lpcchClass,
              PFILETIME lpftLastWriteTime
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExW(
         HKEY hKey,
         DWORD dwIndex,
                                                    LPWSTR lpName,
            LPDWORD lpcchName,
               LPDWORD lpReserved,
                                                     LPWSTR lpClass,
                LPDWORD lpcchClass,
              PFILETIME lpftLastWriteTime
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueA(
         HKEY hKey,
         DWORD dwIndex,
                                                              LPSTR lpValueName,
            LPDWORD lpcchValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,
                LPDWORD lpcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueW(
         HKEY hKey,
         DWORD dwIndex,
                                                              LPWSTR lpValueName,
            LPDWORD lpcchValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,
                LPDWORD lpcbData
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegFlushKey(
         HKEY hKey
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegGetKeySecurity(
         HKEY hKey,
         SECURITY_INFORMATION SecurityInformation,
                                                    PSECURITY_DESCRIPTOR pSecurityDescriptor,
            LPDWORD lpcbSecurityDescriptor
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyA(
         HKEY hKey,
             LPCSTR lpSubKey,
         LPCSTR lpFile
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyW(
         HKEY hKey,
             LPCWSTR lpSubKey,
         LPCWSTR lpFile
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegNotifyChangeKeyValue(
         HKEY hKey,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter,
             HANDLE hEvent,
         BOOL fAsynchronous
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExA(
         HKEY hKey,
             LPCSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExW(
         HKEY hKey,
             LPCWSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedA (
         HKEY hKey,
             LPCSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedW (
         HKEY hKey,
             LPCWSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyA(
         HKEY hKey,
                                                      LPSTR lpClass,
                LPDWORD lpcchClass,
               LPDWORD lpReserved,
              LPDWORD lpcSubKeys,
              LPDWORD lpcbMaxSubKeyLen,
              LPDWORD lpcbMaxClassLen,
              LPDWORD lpcValues,
              LPDWORD lpcbMaxValueNameLen,
              LPDWORD lpcbMaxValueLen,
              LPDWORD lpcbSecurityDescriptor,
              PFILETIME lpftLastWriteTime
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyW(
         HKEY hKey,
                                                      LPWSTR lpClass,
                LPDWORD lpcchClass,
               LPDWORD lpReserved,
              LPDWORD lpcSubKeys,
              LPDWORD lpcbMaxSubKeyLen,
              LPDWORD lpcbMaxClassLen,
              LPDWORD lpcValues,
              LPDWORD lpcbMaxValueNameLen,
              LPDWORD lpcbMaxValueLen,
              LPDWORD lpcbSecurityDescriptor,
              PFILETIME lpftLastWriteTime
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueA (
         HKEY hKey,
             LPCSTR lpSubKey,
                                                                                LPSTR lpData,
                PLONG lpcbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueW (
         HKEY hKey,
             LPCWSTR lpSubKey,
                                                                                LPWSTR lpData,
                PLONG lpcbData
    );
# 810 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h"
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesA (
         HKEY hKey,
                           PVALENTA val_list,
         DWORD num_vals,
                                                                                    LPSTR lpValueBuf,
                LPDWORD ldwTotsize
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesW (
         HKEY hKey,
                           PVALENTW val_list,
         DWORD num_vals,
                                                                                    LPWSTR lpValueBuf,
                LPDWORD ldwTotsize
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExA(
         HKEY hKey,
             LPCSTR lpValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,

                                                 LPDWORD lpcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExW(
         HKEY hKey,
             LPCWSTR lpValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,

                                                 LPDWORD lpcbData
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
         LPCSTR lpNewFile,
         LPCSTR lpOldFile
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
         LPCWSTR lpNewFile,
         LPCWSTR lpOldFile
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyA(
         HKEY hKey,
         LPCSTR lpFile,
         DWORD dwFlags
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyW(
         HKEY hKey,
         LPCWSTR lpFile,
         DWORD dwFlags
    );
# 920 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h"
__declspec(dllimport)
LSTATUS
__stdcall
RegRenameKey(
         HKEY hKey,
             LPCWSTR lpSubKeyName,
         LPCWSTR lpNewKeyName
    );



__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyA (
         HKEY hKey,
         LPCSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyW (
         HKEY hKey,
         LPCWSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeySecurity(
         HKEY hKey,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueA (
         HKEY hKey,
             LPCSTR lpSubKey,
         DWORD dwType,
                                 LPCSTR lpData,
         DWORD cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueW (
         HKEY hKey,
             LPCWSTR lpSubKey,
         DWORD dwType,
                                 LPCWSTR lpData,
         DWORD cbData
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExA(
         HKEY hKey,
             LPCSTR lpValueName,
               DWORD Reserved,
         DWORD dwType,
                                 const BYTE * lpData,
         DWORD cbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExW(
         HKEY hKey,
             LPCWSTR lpValueName,
               DWORD Reserved,
         DWORD dwType,
                                 const BYTE * lpData,
         DWORD cbData
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyA(
         HKEY hKey,
             LPCSTR lpSubKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyW(
         HKEY hKey,
             LPCWSTR lpSubKey
    );
# 1047 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h"
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueA (
              HKEY hKey,
              LPCSTR lpSubKey,
              LPCSTR lpValueName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueW (
              HKEY hKey,
              LPCWSTR lpSubKey,
              LPCWSTR lpValueName
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueA (
                HKEY hKey,
                LPCSTR lpSubKey,
                LPCSTR lpValueName,
                DWORD dwType,
                                 LPCVOID lpData,
                DWORD cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueW (
                HKEY hKey,
                LPCWSTR lpSubKey,
                LPCWSTR lpValueName,
                DWORD dwType,
                                 LPCVOID lpData,
                DWORD cbData
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeA(
         HKEY hKey,
             LPCSTR lpSubKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeW(
         HKEY hKey,
             LPCWSTR lpSubKey
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeA (
                HKEY hKeySrc,
                LPCSTR lpSubKey,
                HKEY hKeyDest
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueA(
         HKEY hkey,
             LPCSTR lpSubKey,
             LPCSTR lpValue,
         DWORD dwFlags,
              LPDWORD pdwType,







                                                 PVOID pvData,
                LPDWORD pcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueW(
         HKEY hkey,
             LPCWSTR lpSubKey,
             LPCWSTR lpValue,
         DWORD dwFlags,
              LPDWORD pdwType,







                                                 PVOID pvData,
                LPDWORD pcbData
    );
# 1185 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h"
__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeW(
         HKEY hKeySrc,
             LPCWSTR lpSubKey,
         HKEY hKeyDest
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringA(
         HKEY hKey,
             LPCSTR pszValue,
                                     LPSTR pszOutBuf,
         DWORD cbOutBuf,
              LPDWORD pcbData,
         DWORD Flags,
             LPCSTR pszDirectory
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringW(
         HKEY hKey,
             LPCWSTR pszValue,
                                     LPWSTR pszOutBuf,
         DWORD cbOutBuf,
              LPDWORD pcbData,
         DWORD Flags,
             LPCWSTR pszDirectory
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyA(
         LPCSTR lpFile,
          PHKEY phkResult,
         REGSAM samDesired,
         DWORD dwOptions,
               DWORD Reserved
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyW(
         LPCWSTR lpFile,
          PHKEY phkResult,
         REGSAM samDesired,
         DWORD dwOptions,
               DWORD Reserved
    );
# 1266 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h"
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown
    );

__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown
    );







__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownA(
             LPSTR lpMachineName
    );
__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownW(
             LPWSTR lpMachineName
    );
# 1316 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\reason.h" 1
# 1316 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h" 2
# 1338 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h"
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown,
         DWORD dwReason
    );



__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown,
         DWORD dwReason
    );
# 1385 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h"
__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
             DWORD dwGracePeriod,
             DWORD dwShutdownFlags,
             DWORD dwReason
    );
__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
             DWORD dwGracePeriod,
             DWORD dwShutdownFlags,
             DWORD dwReason
    );






__declspec(dllimport)
DWORD
__stdcall
CheckForHiberboot(
            PBOOLEAN pHiberboot,
         BOOLEAN bClearFlag
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExA(
         HKEY hKey,
         LPCSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD Flags
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExW(
         HKEY hKey,
         LPCWSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD Flags
    );
# 1450 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winreg.h"
}
# 176 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2



# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h" 1
# 32 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
extern "C" {
# 43 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wnnc.h" 1
# 43 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h" 2
# 92 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
typedef struct _NETRESOURCEA {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    LPSTR lpComment ;
    LPSTR lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct _NETRESOURCEW {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    LPWSTR lpComment ;
    LPWSTR lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;

typedef NETRESOURCEW NETRESOURCE;
typedef LPNETRESOURCEW LPNETRESOURCE;
# 150 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
DWORD __stdcall
WNetAddConnectionA(
             LPCSTR lpRemoteName,
             LPCSTR lpPassword,
             LPCSTR lpLocalName
    );

DWORD __stdcall
WNetAddConnectionW(
             LPCWSTR lpRemoteName,
             LPCWSTR lpPassword,
             LPCWSTR lpLocalName
    );







DWORD __stdcall
WNetAddConnection2A(
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserName,
             DWORD dwFlags
    );

DWORD __stdcall
WNetAddConnection2W(
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserName,
             DWORD dwFlags
    );







DWORD __stdcall
WNetAddConnection3A(
             HWND hwndOwner,
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserName,
             DWORD dwFlags
    );

DWORD __stdcall
WNetAddConnection3W(
             HWND hwndOwner,
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserName,
             DWORD dwFlags
    );







DWORD __stdcall
WNetCancelConnectionA(
         LPCSTR lpName,
         BOOL fForce
    );

DWORD __stdcall
WNetCancelConnectionW(
         LPCWSTR lpName,
         BOOL fForce
    );







DWORD __stdcall
WNetCancelConnection2A(
         LPCSTR lpName,
         DWORD dwFlags,
         BOOL fForce
    );

DWORD __stdcall
WNetCancelConnection2W(
         LPCWSTR lpName,
         DWORD dwFlags,
         BOOL fForce
    );







DWORD __stdcall
WNetGetConnectionA(
         LPCSTR lpLocalName,
                                 LPSTR lpRemoteName,
            LPDWORD lpnLength
    );

DWORD __stdcall
WNetGetConnectionW(
         LPCWSTR lpLocalName,
                                 LPWSTR lpRemoteName,
            LPDWORD lpnLength
    );
# 276 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
DWORD __stdcall
WNetRestoreSingleConnectionW(
             HWND hwndParent,
             LPCWSTR lpDevice,
             BOOL fUseUI
    );
# 296 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
DWORD __stdcall
WNetUseConnectionA(
             HWND hwndOwner,
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserId,
             DWORD dwFlags,
                                    LPSTR lpAccessName,
                LPDWORD lpBufferSize,
              LPDWORD lpResult
    );

DWORD __stdcall
WNetUseConnectionW(
             HWND hwndOwner,
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserId,
             DWORD dwFlags,
                                    LPWSTR lpAccessName,
                LPDWORD lpBufferSize,
              LPDWORD lpResult
    );
# 331 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
DWORD __stdcall
WNetConnectionDialog(
         HWND hwnd,
         DWORD dwType
    );


DWORD __stdcall
WNetDisconnectDialog(
             HWND hwnd,
         DWORD dwType
    );


typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
} CONNECTDLGSTRUCTA, *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
} CONNECTDLGSTRUCTW, *LPCONNECTDLGSTRUCTW;

typedef CONNECTDLGSTRUCTW CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTW LPCONNECTDLGSTRUCT;
# 381 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
DWORD __stdcall
WNetConnectionDialog1A(
            LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );

DWORD __stdcall
WNetConnectionDialog1W(
            LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );






typedef struct _DISCDLGSTRUCTA{
    DWORD cbStructure;
    HWND hwndOwner;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    DWORD dwFlags;
} DISCDLGSTRUCTA, *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD cbStructure;
    HWND hwndOwner;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    DWORD dwFlags;
} DISCDLGSTRUCTW, *LPDISCDLGSTRUCTW;

typedef DISCDLGSTRUCTW DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTW LPDISCDLGSTRUCT;
# 422 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
DWORD __stdcall
WNetDisconnectDialog1A(
         LPDISCDLGSTRUCTA lpConnDlgStruct
    );

DWORD __stdcall
WNetDisconnectDialog1W(
         LPDISCDLGSTRUCTW lpConnDlgStruct
    );
# 443 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
DWORD __stdcall
WNetOpenEnumA(
          DWORD dwScope,
          DWORD dwType,
          DWORD dwUsage,
             LPNETRESOURCEA lpNetResource,
          LPHANDLE lphEnum
    );

DWORD __stdcall
WNetOpenEnumW(
          DWORD dwScope,
          DWORD dwType,
          DWORD dwUsage,
             LPNETRESOURCEW lpNetResource,
          LPHANDLE lphEnum
    );







DWORD __stdcall
WNetEnumResourceA(
            HANDLE hEnum,
            LPDWORD lpcCount,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetEnumResourceW(
            HANDLE hEnum,
            LPDWORD lpcCount,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );







DWORD __stdcall
WNetCloseEnum(
         HANDLE hEnum
    );



DWORD __stdcall
WNetGetResourceParentA(
         LPNETRESOURCEA lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer
    );

DWORD __stdcall
WNetGetResourceParentW(
         LPNETRESOURCEW lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer
    );







DWORD __stdcall
WNetGetResourceInformationA(
         LPNETRESOURCEA lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer,
             LPSTR *lplpSystem
    );

DWORD __stdcall
WNetGetResourceInformationW(
         LPNETRESOURCEW lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer,
             LPWSTR *lplpSystem
    );
# 545 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
typedef struct _UNIVERSAL_NAME_INFOA {
    LPSTR lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW {
    LPWSTR lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;

typedef UNIVERSAL_NAME_INFOW UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOW LPUNIVERSAL_NAME_INFO;





typedef struct _REMOTE_NAME_INFOA {
    LPSTR lpUniversalName;
    LPSTR lpConnectionName;
    LPSTR lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW {
    LPWSTR lpUniversalName;
    LPWSTR lpConnectionName;
    LPWSTR lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;

typedef REMOTE_NAME_INFOW REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOW LPREMOTE_NAME_INFO;






DWORD __stdcall
WNetGetUniversalNameA(
         LPCSTR lpLocalPath,
         DWORD dwInfoLevel,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetGetUniversalNameW(
         LPCWSTR lpLocalPath,
         DWORD dwInfoLevel,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );
# 603 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
DWORD __stdcall
WNetGetUserA(
             LPCSTR lpName,
                             LPSTR lpUserName,
             LPDWORD lpnLength
    );




DWORD __stdcall
WNetGetUserW(
             LPCWSTR lpName,
                             LPWSTR lpUserName,
             LPDWORD lpnLength
    );
# 641 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
DWORD __stdcall
WNetGetProviderNameA(
            DWORD dwNetType,
                                LPSTR lpProviderName,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetGetProviderNameW(
            DWORD dwNetType,
                                LPWSTR lpProviderName,
            LPDWORD lpBufferSize
    );






typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT, *LPNETINFOSTRUCT;






DWORD __stdcall
WNetGetNetworkInformationA(
          LPCSTR lpProvider,
          LPNETINFOSTRUCT lpNetInfoStruct
    );

DWORD __stdcall
WNetGetNetworkInformationW(
          LPCWSTR lpProvider,
          LPNETINFOSTRUCT lpNetInfoStruct
    );
# 700 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
DWORD __stdcall
WNetGetLastErrorA(
          LPDWORD lpError,
                                LPSTR lpErrorBuf,
         DWORD nErrorBufSize,
                               LPSTR lpNameBuf,
         DWORD nNameBufSize
    );

DWORD __stdcall
WNetGetLastErrorW(
          LPDWORD lpError,
                                LPWSTR lpErrorBuf,
         DWORD nErrorBufSize,
                               LPWSTR lpNameBuf,
         DWORD nNameBufSize
    );
# 792 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT, *LPNETCONNECTINFOSTRUCT;







DWORD __stdcall
MultinetGetConnectionPerformanceA(
          LPNETRESOURCEA lpNetResource,
          LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );

DWORD __stdcall
MultinetGetConnectionPerformanceW(
          LPNETRESOURCEW lpNetResource,
          LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );
# 829 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winnetwk.h"
}
# 179 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2
# 217 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\stralign.h" 1
# 65 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\stralign.h"
extern "C" {
# 81 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\stralign.h"
#pragma warning(push)
#pragma warning(disable: 4127)
# 151 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\stralign.h"
LPUWSTR
__stdcall
uaw_CharUpperW(
            LPUWSTR String
    );

int
__stdcall
uaw_lstrcmpW(
         PCUWSTR String1,
         PCUWSTR String2
    );

int
__stdcall
uaw_lstrcmpiW(
         PCUWSTR String1,
         PCUWSTR String2
    );

int
__stdcall
uaw_lstrlenW(
         LPCUWSTR String
    );

PUWSTR
__cdecl
uaw_wcschr(
         PCUWSTR String,
         WCHAR Character
    );

PUWSTR
__cdecl
uaw_wcscpy(
                                                       PUWSTR Destination,
          PCUWSTR Source
    );

int
__cdecl
uaw_wcsicmp(
         PCUWSTR String1,
         PCUWSTR String2
    );

size_t
__cdecl
uaw_wcslen(
         PCUWSTR String
    );

PUWSTR
__cdecl
uaw_wcsrchr(
         PCUWSTR String,
         WCHAR Character
    );
# 219 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\stralign.h"
__inline
LPUWSTR
static
ua_CharUpperW(
            LPUWSTR String
    )
{
    if (1) {
        return CharUpperW( (PWSTR)String );
    } else {
        return uaw_CharUpperW( String );
    }
}



__inline
int
static
ua_lstrcmpW(
         LPCUWSTR String1,
         LPCUWSTR String2
    )
{
    if (1 && 1) {
        return lstrcmpW( (LPCWSTR)String1, (LPCWSTR)String2);
    } else {
        return uaw_lstrcmpW( String1, String2 );
    }
}



__inline
int
static
ua_lstrcmpiW(
         LPCUWSTR String1,
         LPCUWSTR String2
    )
{
    if (1 && 1) {
        return lstrcmpiW( (LPCWSTR)String1, (LPCWSTR)String2 );
    } else {
        return uaw_lstrcmpiW( String1, String2 );
    }
}



__inline
int
static
ua_lstrlenW(
         LPCUWSTR String
    )
{
    if (1) {
#pragma warning(suppress: 28750)
 return lstrlenW( (PCWSTR)String );
    } else {
        return uaw_lstrlenW( String );
    }
}
# 472 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\stralign.h"
__inline
int
static
ua_wcsicmp(
         PCUWSTR String1,
         PCUWSTR String2
    )
{
    if (1 && 1) {
        return _wcsicmp( (LPCWSTR)String1, (LPCWSTR)String2 );
    } else {
        return uaw_wcsicmp( String1, String2 );
    }
}
# 674 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\stralign.h"
#pragma warning(pop)






}
# 217 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2
# 230 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h" 1
# 36 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
extern "C" {
# 347 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
extern "C" const GUID NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID;







extern "C" const GUID NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID;
# 366 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
extern "C" const GUID DOMAIN_JOIN_GUID;







extern "C" const GUID DOMAIN_LEAVE_GUID;
# 386 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
extern "C" const GUID FIREWALL_PORT_OPEN_GUID;







extern "C" const GUID FIREWALL_PORT_CLOSE_GUID;
# 406 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
extern "C" const GUID MACHINE_POLICY_PRESENT_GUID;







extern "C" const GUID USER_POLICY_PRESENT_GUID;
# 426 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
extern "C" const GUID RPC_INTERFACE_EVENT_GUID;







extern "C" const GUID NAMED_PIPE_EVENT_GUID;
# 445 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
extern "C" const GUID CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID;
# 456 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
typedef struct
{
    DWORD Data[2];
} SERVICE_TRIGGER_CUSTOM_STATE_ID;

typedef struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
    union {
        SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
        struct {
            DWORD DataOffset;
            BYTE Data[1];
        } s;
    } u;
} SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM, *LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
# 486 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR lpDescription;
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;



typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR lpDescription;
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;

typedef SERVICE_DESCRIPTIONW SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONW LPSERVICE_DESCRIPTION;
# 506 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE = 0,
        SC_ACTION_RESTART = 1,
        SC_ACTION_REBOOT = 2,
        SC_ACTION_RUN_COMMAND = 3
} SC_ACTION_TYPE;

typedef struct _SC_ACTION {
    SC_ACTION_TYPE Type;
    DWORD Delay;
} SC_ACTION, *LPSC_ACTION;

typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD dwResetPeriod;
    LPSTR lpRebootMsg;
    LPSTR lpCommand;



    DWORD cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD dwResetPeriod;
    LPWSTR lpRebootMsg;
    LPWSTR lpCommand;



    DWORD cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;

typedef SERVICE_FAILURE_ACTIONSW SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSW LPSERVICE_FAILURE_ACTIONS;
# 555 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
typedef struct _SERVICE_DELAYED_AUTO_START_INFO {
    BOOL fDelayedAutostart;
} SERVICE_DELAYED_AUTO_START_INFO, *LPSERVICE_DELAYED_AUTO_START_INFO;




typedef struct _SERVICE_FAILURE_ACTIONS_FLAG {
    BOOL fFailureActionsOnNonCrashFailures;
} SERVICE_FAILURE_ACTIONS_FLAG, *LPSERVICE_FAILURE_ACTIONS_FLAG;




typedef struct _SERVICE_SID_INFO {
    DWORD dwServiceSidType;
} SERVICE_SID_INFO, *LPSERVICE_SID_INFO;




typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
    LPSTR pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOA, *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;



typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
    LPWSTR pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOW, *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;

typedef SERVICE_REQUIRED_PRIVILEGES_INFOW SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOW LPSERVICE_REQUIRED_PRIVILEGES_INFO;
# 596 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
typedef struct _SERVICE_PRESHUTDOWN_INFO {
    DWORD dwPreshutdownTimeout;
} SERVICE_PRESHUTDOWN_INFO, *LPSERVICE_PRESHUTDOWN_INFO;




typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
    DWORD dwDataType;



    DWORD cbData;



    PBYTE pData;
} SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;




typedef struct _SERVICE_TRIGGER
{
    DWORD dwTriggerType;
    DWORD dwAction;
    GUID * pTriggerSubtype;





    DWORD cDataItems;



    PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM pDataItems;
} SERVICE_TRIGGER, *PSERVICE_TRIGGER;




typedef struct _SERVICE_TRIGGER_INFO {



    DWORD cTriggers;



    PSERVICE_TRIGGER pTriggers;
    PBYTE pReserved;
} SERVICE_TRIGGER_INFO, *PSERVICE_TRIGGER_INFO;




typedef struct _SERVICE_PREFERRED_NODE_INFO {
    USHORT usPreferredNode;
    BOOLEAN fDelete;
} SERVICE_PREFERRED_NODE_INFO, *LPSERVICE_PREFERRED_NODE_INFO;




typedef struct _SERVICE_TIMECHANGE_INFO {
    LARGE_INTEGER liNewTime;
    LARGE_INTEGER liOldTime;
} SERVICE_TIMECHANGE_INFO, *PSERVICE_TIMECHANGE_INFO;




typedef struct _SERVICE_LAUNCH_PROTECTED_INFO {
    DWORD dwLaunchProtected;
} SERVICE_LAUNCH_PROTECTED_INFO, *PSERVICE_LAUNCH_PROTECTED_INFO;





struct SC_HANDLE__{int unused;}; typedef struct SC_HANDLE__ *SC_HANDLE;
typedef SC_HANDLE *LPSC_HANDLE;

struct SERVICE_STATUS_HANDLE__{int unused;}; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;





typedef enum _SC_STATUS_TYPE {
    SC_STATUS_PROCESS_INFO = 0
} SC_STATUS_TYPE;




typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO = 0
} SC_ENUM_TYPE;






typedef struct _SERVICE_STATUS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;

typedef struct _SERVICE_STATUS_PROCESS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
    DWORD dwProcessId;
    DWORD dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;






typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;

typedef ENUM_SERVICE_STATUSW ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSW LPENUM_SERVICE_STATUS;





typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;

typedef ENUM_SERVICE_STATUS_PROCESSW ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSW LPENUM_SERVICE_STATUS_PROCESS;
# 770 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
typedef LPVOID SC_LOCK;

typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD fIsLocked;
    LPSTR lpLockOwner;
    DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD fIsLocked;
    LPWSTR lpLockOwner;
    DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;

typedef QUERY_SERVICE_LOCK_STATUSW QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSW LPQUERY_SERVICE_LOCK_STATUS;
# 796 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPSTR lpBinaryPathName;
    LPSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPSTR lpDependencies;
    LPSTR lpServiceStartName;
    LPSTR lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPWSTR lpBinaryPathName;
    LPWSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPWSTR lpDependencies;
    LPWSTR lpServiceStartName;
    LPWSTR lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;

typedef QUERY_SERVICE_CONFIGW QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGW LPQUERY_SERVICE_CONFIG;
# 832 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
typedef void __stdcall SERVICE_MAIN_FUNCTIONW (
    DWORD dwNumServicesArgs,
    LPWSTR *lpServiceArgVectors
    );

typedef void __stdcall SERVICE_MAIN_FUNCTIONA (
    DWORD dwNumServicesArgs,
    LPTSTR *lpServiceArgVectors
    );







typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(
    DWORD dwNumServicesArgs,
    LPWSTR *lpServiceArgVectors
    );

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(
    DWORD dwNumServicesArgs,
    LPSTR *lpServiceArgVectors
    );
# 869 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;

typedef SERVICE_TABLE_ENTRYW SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYW LPSERVICE_TABLE_ENTRY;
# 889 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
typedef void __stdcall HANDLER_FUNCTION (
    DWORD dwControl
    );

typedef DWORD __stdcall HANDLER_FUNCTION_EX (
    DWORD dwControl,
    DWORD dwEventType,
    LPVOID lpEventData,
    LPVOID lpContext
    );

typedef void (__stdcall *LPHANDLER_FUNCTION)(
    DWORD dwControl
    );

typedef DWORD (__stdcall *LPHANDLER_FUNCTION_EX)(
    DWORD dwControl,
    DWORD dwEventType,
    LPVOID lpEventData,
    LPVOID lpContext
    );




typedef
void
( __stdcall * PFN_SC_NOTIFY_CALLBACK ) (
         PVOID pParameter
    );




typedef struct _SERVICE_NOTIFY_1 {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_NOTIFY_1, *PSERVICE_NOTIFY_1;

typedef struct _SERVICE_NOTIFY_2A {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPSTR pszServiceNames;
} SERVICE_NOTIFY_2A, *PSERVICE_NOTIFY_2A;
typedef struct _SERVICE_NOTIFY_2W {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPWSTR pszServiceNames;
} SERVICE_NOTIFY_2W, *PSERVICE_NOTIFY_2W;

typedef SERVICE_NOTIFY_2W SERVICE_NOTIFY_2;
typedef PSERVICE_NOTIFY_2W PSERVICE_NOTIFY_2;





typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA, *PSERVICE_NOTIFYA;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW, *PSERVICE_NOTIFYW;

typedef SERVICE_NOTIFYW SERVICE_NOTIFY;
typedef PSERVICE_NOTIFYW PSERVICE_NOTIFY;
# 970 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
    DWORD dwReason;
    LPSTR pszComment;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;



typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
    DWORD dwReason;
    LPWSTR pszComment;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;

typedef SERVICE_CONTROL_STATUS_REASON_PARAMSW SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSW PSERVICE_CONTROL_STATUS_REASON_PARAMS;
# 994 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
typedef struct _SERVICE_START_REASON {
    DWORD dwReason;
} SERVICE_START_REASON, *PSERVICE_START_REASON;





__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigA(
                SC_HANDLE hService,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCSTR lpBinaryPathName,
                LPCSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCSTR lpDependencies,
                LPCSTR lpServiceStartName,
                LPCSTR lpPassword,
                LPCSTR lpDisplayName
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigW(
                SC_HANDLE hService,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCWSTR lpBinaryPathName,
                LPCWSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCWSTR lpDependencies,
                LPCWSTR lpServiceStartName,
                LPCWSTR lpPassword,
                LPCWSTR lpDisplayName
    );






__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2A(
                SC_HANDLE hService,
                DWORD dwInfoLevel,
                LPVOID lpInfo
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2W(
                SC_HANDLE hService,
                DWORD dwInfoLevel,
                LPVOID lpInfo
    );






__declspec(dllimport)
BOOL
__stdcall
CloseServiceHandle(
                SC_HANDLE hSCObject
    );

__declspec(dllimport)
BOOL
__stdcall
ControlService(
                SC_HANDLE hService,
                DWORD dwControl,
                LPSERVICE_STATUS lpServiceStatus
    );


__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceA(
                SC_HANDLE hSCManager,
                LPCSTR lpServiceName,
                LPCSTR lpDisplayName,
                DWORD dwDesiredAccess,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCSTR lpBinaryPathName,
                LPCSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCSTR lpDependencies,
                LPCSTR lpServiceStartName,
                LPCSTR lpPassword
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceW(
                SC_HANDLE hSCManager,
                LPCWSTR lpServiceName,
                LPCWSTR lpDisplayName,
                DWORD dwDesiredAccess,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCWSTR lpBinaryPathName,
                LPCWSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCWSTR lpDependencies,
                LPCWSTR lpServiceStartName,
                LPCWSTR lpPassword
    );






__declspec(dllimport)
BOOL
__stdcall
DeleteService(
                SC_HANDLE hService
    );


__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesA(
                    SC_HANDLE hService,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSA lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned
    );

__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesW(
                    SC_HANDLE hService,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSW lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned
    );







__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusA(
                    SC_HANDLE hSCManager,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSA lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle
    );

__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusW(
                    SC_HANDLE hSCManager,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSW lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle
    );







__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExA(
                    SC_HANDLE hSCManager,
                    SC_ENUM_TYPE InfoLevel,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPBYTE lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle,
                    LPCSTR pszGroupName
    );

__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExW(
                    SC_HANDLE hSCManager,
                    SC_ENUM_TYPE InfoLevel,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPBYTE lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle,
                    LPCWSTR pszGroupName
    );







__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameA(
                    SC_HANDLE hSCManager,
                    LPCSTR lpDisplayName,

                    LPSTR lpServiceName,
                    LPDWORD lpcchBuffer
    );

__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameW(
                    SC_HANDLE hSCManager,
                    LPCWSTR lpDisplayName,

                    LPWSTR lpServiceName,
                    LPDWORD lpcchBuffer
    );







__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameA(
                    SC_HANDLE hSCManager,
                    LPCSTR lpServiceName,

                    LPSTR lpDisplayName,
                    LPDWORD lpcchBuffer
    );

__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameW(
                    SC_HANDLE hSCManager,
                    LPCWSTR lpServiceName,

                    LPWSTR lpDisplayName,
                    LPDWORD lpcchBuffer
    );






__declspec(dllimport)
SC_LOCK
__stdcall
LockServiceDatabase(
                    SC_HANDLE hSCManager
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyBootConfigStatus(
                    BOOL BootAcceptable
    );


__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerA(
                    LPCSTR lpMachineName,
                    LPCSTR lpDatabaseName,
                    DWORD dwDesiredAccess
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerW(
                    LPCWSTR lpMachineName,
                    LPCWSTR lpDatabaseName,
                    DWORD dwDesiredAccess
    );







__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceA(
                    SC_HANDLE hSCManager,
                    LPCSTR lpServiceName,
                    DWORD dwDesiredAccess
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceW(
                    SC_HANDLE hSCManager,
                    LPCWSTR lpServiceName,
                    DWORD dwDesiredAccess
    );







__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigA(
                    SC_HANDLE hService,

                    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigW(
                    SC_HANDLE hService,

                    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );
# 1391 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2A(
                    SC_HANDLE hService,
                    DWORD dwInfoLevel,

                    LPBYTE lpBuffer,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );
# 1410 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\winsvc.h"
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2W(
                    SC_HANDLE hService,
                    DWORD dwInfoLevel,

                    LPBYTE lpBuffer,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );







__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusA(
                    SC_HANDLE hSCManager,

                    LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusW(
                    SC_HANDLE hSCManager,

                    LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );







__declspec(dllimport)
BOOL
__stdcall
QueryServiceObjectSecurity(
                    SC_HANDLE hService,
                    SECURITY_INFORMATION dwSecurityInformation,

                    PSECURITY_DESCRIPTOR lpSecurityDescriptor,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );


__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatus(
                    SC_HANDLE hService,
                    LPSERVICE_STATUS lpServiceStatus
    );


__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatusEx(
                    SC_HANDLE hService,
                    SC_STATUS_TYPE InfoLevel,

                    LPBYTE lpBuffer,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );


__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerA(
            LPCSTR lpServiceName,

            LPHANDLER_FUNCTION lpHandlerProc
    );

__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerW(
            LPCWSTR lpServiceName,

            LPHANDLER_FUNCTION lpHandlerProc
    );







__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExA(
            LPCSTR lpServiceName,

            LPHANDLER_FUNCTION_EX lpHandlerProc,
             LPVOID lpContext
    );

__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExW(
            LPCWSTR lpServiceName,

            LPHANDLER_FUNCTION_EX lpHandlerProc,
             LPVOID lpContext
    );






__declspec(dllimport)
BOOL
__stdcall
SetServiceObjectSecurity(
                SC_HANDLE hService,
                SECURITY_INFORMATION dwSecurityInformation,
                PSECURITY_DESCRIPTOR lpSecurityDescriptor
    );

__declspec(dllimport)
BOOL
__stdcall
SetServiceStatus(
                SERVICE_STATUS_HANDLE hServiceStatus,
                LPSERVICE_STATUS lpServiceStatus
    );

__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherA(
         const SERVICE_TABLE_ENTRYA *lpServiceStartTable
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherW(
         const SERVICE_TABLE_ENTRYW *lpServiceStartTable
    );







__declspec(dllimport)
BOOL
__stdcall
StartServiceA(
                    SC_HANDLE hService,
                    DWORD dwNumServiceArgs,

                    LPCSTR *lpServiceArgVectors
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceW(
                    SC_HANDLE hService,
                    DWORD dwNumServiceArgs,

                    LPCWSTR *lpServiceArgVectors
    );






__declspec(dllimport)
BOOL
__stdcall
UnlockServiceDatabase(
                    SC_LOCK ScLock
    );



__declspec(dllimport)
DWORD
__stdcall
NotifyServiceStatusChangeA (
                SC_HANDLE hService,
                DWORD dwNotifyMask,
                PSERVICE_NOTIFYA pNotifyBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
NotifyServiceStatusChangeW (
                SC_HANDLE hService,
                DWORD dwNotifyMask,
                PSERVICE_NOTIFYW pNotifyBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
ControlServiceExA(
                SC_HANDLE hService,
                DWORD dwControl,
                DWORD dwInfoLevel,
                PVOID pControlParams
    );
__declspec(dllimport)
BOOL
__stdcall
ControlServiceExW(
                SC_HANDLE hService,
                DWORD dwControl,
                DWORD dwInfoLevel,
                PVOID pControlParams
    );






__declspec(dllimport)
BOOL
__stdcall
QueryServiceDynamicInformation (
                SERVICE_STATUS_HANDLE hServiceStatus,
                DWORD dwInfoLevel,
                PVOID * ppDynamicInfo
    );







}
# 230 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2





# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\mcx.h" 1
# 16 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\mcx.h"
typedef struct _MODEMDEVCAPS {
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;


    DWORD dwModemProviderVersion;
    DWORD dwModemManufacturerOffset;
    DWORD dwModemManufacturerSize;
    DWORD dwModemModelOffset;
    DWORD dwModemModelSize;
    DWORD dwModemVersionOffset;
    DWORD dwModemVersionSize;


    DWORD dwDialOptions;
    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwModemOptions;
    DWORD dwMaxDTERate;
    DWORD dwMaxDCERate;


    BYTE abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;


    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwPreferredModemOptions;


    DWORD dwNegotiatedModemOptions;
    DWORD dwNegotiatedDCERate;


    BYTE abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;
# 235 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2




# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\imm.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\imm.h"
extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\imm.h"
struct HIMC__{int unused;}; typedef struct HIMC__ *HIMC;
struct HIMCC__{int unused;}; typedef struct HIMCC__ *HIMCC;
# 39 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\imm.h"
typedef HKL *LPHKL;
typedef UINT *LPUINT;







typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM, *NPCOMPOSITIONFORM, *LPCOMPOSITIONFORM;


typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM, *NPCANDIDATEFORM, *LPCANDIDATEFORM;
# 70 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\imm.h"
typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST, *NPCANDIDATELIST, *LPCANDIDATELIST;
# 87 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\imm.h"
typedef struct tagREGISTERWORDA {
    LPSTR lpReading;
    LPSTR lpWord;
} REGISTERWORDA, *PREGISTERWORDA, *NPREGISTERWORDA, *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR lpReading;
    LPWSTR lpWord;
} REGISTERWORDW, *PREGISTERWORDW, *NPREGISTERWORDW, *LPREGISTERWORDW;

typedef REGISTERWORDW REGISTERWORD;
typedef PREGISTERWORDW PREGISTERWORD;
typedef NPREGISTERWORDW NPREGISTERWORD;
typedef LPREGISTERWORDW LPREGISTERWORD;
# 115 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\imm.h"
typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
} RECONVERTSTRING, *PRECONVERTSTRING, *NPRECONVERTSTRING, *LPRECONVERTSTRING;
# 136 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\imm.h"
typedef struct tagSTYLEBUFA {
    DWORD dwStyle;
    CHAR szDescription[32];
} STYLEBUFA, *PSTYLEBUFA, *NPSTYLEBUFA, *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD dwStyle;
    WCHAR szDescription[32];
} STYLEBUFW, *PSTYLEBUFW, *NPSTYLEBUFW, *LPSTYLEBUFW;

typedef STYLEBUFW STYLEBUF;
typedef PSTYLEBUFW PSTYLEBUF;
typedef NPSTYLEBUFW NPSTYLEBUF;
typedef LPSTYLEBUFW LPSTYLEBUF;
# 173 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\imm.h"
typedef struct tagIMEMENUITEMINFOA {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    CHAR szString[80];
    HBITMAP hbmpItem;
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA, *NPIMEMENUITEMINFOA, *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    WCHAR szString[80];
    HBITMAP hbmpItem;
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW, *NPIMEMENUITEMINFOW, *LPIMEMENUITEMINFOW;

typedef IMEMENUITEMINFOW IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOW PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOW NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOW LPIMEMENUITEMINFO;







typedef struct tagIMECHARPOSITION {
    DWORD dwSize;
    DWORD dwCharPos;
    POINT pt;
    UINT cLineHeight;
    RECT rcDocument;
} IMECHARPOSITION, *PIMECHARPOSITION, *NPIMECHARPOSITION, *LPIMECHARPOSITION;

typedef BOOL (__stdcall* IMCENUMPROC)(HIMC, LPARAM);
# 229 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\imm.h"
HKL __stdcall ImmInstallIMEA( LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText);
HKL __stdcall ImmInstallIMEW( LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText);






HWND __stdcall ImmGetDefaultIMEWnd( HWND);

UINT __stdcall ImmGetDescriptionA( HKL, LPSTR lpszDescription, UINT uBufLen);
UINT __stdcall ImmGetDescriptionW( HKL, LPWSTR lpszDescription, UINT uBufLen);






UINT __stdcall ImmGetIMEFileNameA( HKL, LPSTR lpszFileName, UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW( HKL, LPWSTR lpszFileName, UINT uBufLen);






DWORD __stdcall ImmGetProperty( HKL, DWORD);

BOOL __stdcall ImmIsIME( HKL);

BOOL __stdcall ImmSimulateHotKey( HWND, DWORD);

HIMC __stdcall ImmCreateContext(void);
BOOL __stdcall ImmDestroyContext( HIMC);
HIMC __stdcall ImmGetContext( HWND);
BOOL __stdcall ImmReleaseContext( HWND, HIMC);
HIMC __stdcall ImmAssociateContext( HWND, HIMC);

BOOL __stdcall ImmAssociateContextEx( HWND, HIMC, DWORD);


LONG __stdcall ImmGetCompositionStringA( HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);
LONG __stdcall ImmGetCompositionStringW( HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);






BOOL __stdcall ImmSetCompositionStringA( HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);
BOOL __stdcall ImmSetCompositionStringW( HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);






DWORD __stdcall ImmGetCandidateListCountA( HIMC, LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW( HIMC, LPDWORD lpdwListCount);






DWORD __stdcall ImmGetCandidateListA( HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW( HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);






DWORD __stdcall ImmGetGuideLineA( HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW( HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen);






BOOL __stdcall ImmGetConversionStatus( HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence);
BOOL __stdcall ImmSetConversionStatus( HIMC, DWORD, DWORD);
BOOL __stdcall ImmGetOpenStatus( HIMC);
BOOL __stdcall ImmSetOpenStatus( HIMC, BOOL);


BOOL __stdcall ImmGetCompositionFontA( HIMC, LPLOGFONTA lplf);
BOOL __stdcall ImmGetCompositionFontW( HIMC, LPLOGFONTW lplf);






BOOL __stdcall ImmSetCompositionFontA( HIMC, LPLOGFONTA lplf);
BOOL __stdcall ImmSetCompositionFontW( HIMC, LPLOGFONTW lplf);







BOOL __stdcall ImmConfigureIMEA( HKL, HWND, DWORD, LPVOID);
BOOL __stdcall ImmConfigureIMEW( HKL, HWND, DWORD, LPVOID);






LRESULT __stdcall ImmEscapeA( HKL, HIMC, UINT, LPVOID);
LRESULT __stdcall ImmEscapeW( HKL, HIMC, UINT, LPVOID);






DWORD __stdcall ImmGetConversionListA( HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);
DWORD __stdcall ImmGetConversionListW( HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);






BOOL __stdcall ImmNotifyIME( HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);

BOOL __stdcall ImmGetStatusWindowPos( HIMC, LPPOINT lpptPos);
BOOL __stdcall ImmSetStatusWindowPos( HIMC, LPPOINT lpptPos);
BOOL __stdcall ImmGetCompositionWindow( HIMC, LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmSetCompositionWindow( HIMC, LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmGetCandidateWindow( HIMC, DWORD, LPCANDIDATEFORM lpCandidate);
BOOL __stdcall ImmSetCandidateWindow( HIMC, LPCANDIDATEFORM lpCandidate);

BOOL __stdcall ImmIsUIMessageA( HWND, UINT, WPARAM, LPARAM);
BOOL __stdcall ImmIsUIMessageW( HWND, UINT, WPARAM, LPARAM);







UINT __stdcall ImmGetVirtualKey( HWND);

typedef int (__stdcall *REGISTERWORDENUMPROCA)( LPCSTR lpszReading, DWORD, LPCSTR lpszString, LPVOID);
typedef int (__stdcall *REGISTERWORDENUMPROCW)( LPCWSTR lpszReading, DWORD, LPCWSTR lpszString, LPVOID);






BOOL __stdcall ImmRegisterWordA( HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW( HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister);






BOOL __stdcall ImmUnregisterWordA( HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW( HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister);






UINT __stdcall ImmGetRegisterWordStyleA( HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf);
UINT __stdcall ImmGetRegisterWordStyleW( HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf);






UINT __stdcall ImmEnumRegisterWordA( HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID);
UINT __stdcall ImmEnumRegisterWordW( HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID);







BOOL __stdcall ImmDisableIME( DWORD);
BOOL __stdcall ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
DWORD __stdcall ImmGetImeMenuItemsA( HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize);
DWORD __stdcall ImmGetImeMenuItemsW( HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize);






BOOL __stdcall ImmDisableTextFrameService(DWORD idThread);



BOOL __stdcall ImmDisableLegacyIME();
# 638 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\imm.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\ime_cmodes.h" 1
# 638 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\imm.h" 2
# 776 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\imm.h"
}
# 239 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\windows.h" 2








#pragma warning(pop)
# 12 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 2



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 1
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
 extern "C" {
# 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
         size_t _Count,
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl calloc(
                            size_t _Count,
                            size_t _Size
    );


__declspec(dllimport) int __cdecl _callnewh(
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator)
void* __cdecl _expand(
                            void* _Block,
                            size_t _Size
    );

__declspec(dllimport)
void __cdecl _free_base(
                                   void* _Block
    );

__declspec(dllimport)
void __cdecl free(
                                   void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl malloc(
                            size_t _Size
    );


__declspec(dllimport)
size_t __cdecl _msize(
                  void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
                                    void* _Block,
                                    size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl realloc(
                                   void* _Block,
                                   size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size
    );

__declspec(dllimport)
void __cdecl _aligned_free(
                                   void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
                            size_t _Size,
                            size_t _Alignment
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
                            size_t _Size,
                            size_t _Alignment,
                            size_t _Offset
    );


__declspec(dllimport)
size_t __cdecl _aligned_msize(
                  void* _Block,
                  size_t _Alignment,
                  size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
                                   void* _Block,
                                   size_t _Size,
                                   size_t _Alignment,
                                   size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size,
                                   size_t _Alignment,
                                   size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
                                   void* _Block,
                                   size_t _Size,
                                   size_t _Alignment
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size,
                                   size_t _Alignment
    );
# 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
}
# 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
 extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;





__declspec(dllimport) int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);
# 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) extern unsigned long __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);



}
# 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
#pragma pack(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h" 2


#pragma pack(push, 8)
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
 extern "C" {






    __declspec(dllimport) void* __cdecl bsearch_s(
                                                           void const* _Key,
                                                           void const* _Base,
                                                           rsize_t _NumOfElements,
                                                           rsize_t _SizeOfElements,
             int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                           void* _Context
        );

    __declspec(dllimport) void __cdecl qsort_s(
                                                                void* _Base,
                                                                rsize_t _NumOfElements,
                                                                rsize_t _SizeOfElements,
             int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                                void* _Context
        );






__declspec(dllimport) void* __cdecl bsearch(
                                                       void const* _Key,
                                                       void const* _Base,
                                                       size_t _NumOfElements,
                                                       size_t _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

__declspec(dllimport) void __cdecl qsort(
                                                            void* _Base,
                                                            size_t _NumOfElements,
                                                            size_t _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );


__declspec(dllimport) void* __cdecl _lfind_s(
                                                          void const* _Key,
                                                          void const* _Base,
                                                          unsigned int* _NumOfElements,
                                                          size_t _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                          void* _Context
    );


__declspec(dllimport) void* __cdecl _lfind(
                                                          void const* _Key,
                                                          void const* _Base,
                                                          unsigned int* _NumOfElements,
                                                          unsigned int _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );


__declspec(dllimport) void* __cdecl _lsearch_s(
                                                                void const* _Key,
                                                                void* _Base,
                                                                unsigned int* _NumOfElements,
                                                                size_t _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                                void* _Context
    );


__declspec(dllimport) void* __cdecl _lsearch(
                                                                void const* _Key,
                                                                void* _Base,
                                                                unsigned int* _NumOfElements,
                                                                unsigned int _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );
# 184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lfind" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lfind(
                                                              void const* _Key,
                                                              void const* _Base,
                                                              unsigned int* _NumOfElements,
                                                              unsigned int _SizeOfElements,
             int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lsearch" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lsearch(
                                                                   void const* _Key,
                                                                   void* _Base,
                                                                   unsigned int* _NumOfElements,
                                                                   unsigned int _SizeOfElements,
             int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );





}
# 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
#pragma pack(pop)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
 extern "C" {
# 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _itow_s(
                                 int _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(int _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }






 __declspec(dllimport) wchar_t* __cdecl _itow(int _Value, wchar_t *_Buffer, int _Radix);
# 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ltow_s(
                                 long _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(long _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }






 __declspec(dllimport) wchar_t* __cdecl _ltow(long _Value, wchar_t *_Buffer, int _Radix);







__declspec(dllimport) errno_t __cdecl _ultow_s(
                                 unsigned long _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(unsigned long _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }






 __declspec(dllimport) wchar_t* __cdecl _ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix);







__declspec(dllimport) double __cdecl wcstod(
                             wchar_t const* _String,
                             wchar_t** _EndPtr
    );


__declspec(dllimport) double __cdecl _wcstod_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) long __cdecl wcstol(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long __cdecl _wcstol_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) long long __cdecl wcstoll(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long long __cdecl _wcstoll_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long __cdecl wcstoul(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long __cdecl _wcstoul_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long long __cdecl wcstoull(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long long __cdecl _wcstoull_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) long double __cdecl wcstold(
                             wchar_t const* _String,
                             wchar_t** _EndPtr
    );


__declspec(dllimport) long double __cdecl _wcstold_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) float __cdecl wcstof(
                             wchar_t const* _String,
                             wchar_t** _EndPtr
    );


__declspec(dllimport) float __cdecl _wcstof_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) double __cdecl _wtof(
           wchar_t const* _String
    );


__declspec(dllimport) double __cdecl _wtof_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wtoi(
           wchar_t const* _String
    );


__declspec(dllimport) int __cdecl _wtoi_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) long __cdecl _wtol(
           wchar_t const* _String
    );


__declspec(dllimport) long __cdecl _wtol_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) long long __cdecl _wtoll(
           wchar_t const* _String
    );


__declspec(dllimport) long long __cdecl _wtoll_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) errno_t __cdecl _i64tow_s(
                                 __int64 _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );


__declspec(dllimport) wchar_t* __cdecl _i64tow(
                           __int64 _Value,
                           wchar_t* _Buffer,
                           int _Radix
    );


__declspec(dllimport) errno_t __cdecl _ui64tow_s(
                                 unsigned __int64 _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );


__declspec(dllimport) wchar_t* __cdecl _ui64tow(
                           unsigned __int64 _Value,
                           wchar_t* _Buffer,
                           int _Radix
    );


__declspec(dllimport) __int64 __cdecl _wtoi64(
           wchar_t const* _String
    );


__declspec(dllimport) __int64 __cdecl _wtoi64_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) __int64 __cdecl _wcstoi64(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) __int64 __cdecl _wcstoi64_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );






__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath(
                                     wchar_t* _Buffer,
                                     wchar_t const* _Path,
                                     size_t _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _wmakepath_s(
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 wchar_t const* _Drive,
                                 wchar_t const* _Dir,
                                 wchar_t const* _Filename,
                                 wchar_t const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Drive, wchar_t const* _Dir, wchar_t const* _Filename, wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
# 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
 __declspec(dllimport) void __cdecl _wmakepath( wchar_t *_Buffer, wchar_t const* _Drive, wchar_t const* _Dir, wchar_t const* _Filename, wchar_t const* _Ext);
# 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wperror(
               wchar_t const* _ErrMsg
    );


__declspec(dllimport) void __cdecl _wsplitpath(
                             wchar_t const* _FullPath,
                             wchar_t* _Drive,
                             wchar_t* _Dir,
                             wchar_t* _Filename,
                             wchar_t* _Ext
    );

__declspec(dllimport) errno_t __cdecl _wsplitpath_s(
                                       wchar_t const* _FullPath,
                                       wchar_t* _Drive,
                                       size_t _DriveCount,
                                       wchar_t* _Dir,
                                       size_t _DirCount,
                                       wchar_t* _Filename,
                                       size_t _FilenameCount,
                                       wchar_t* _Ext,
                                       size_t _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s( wchar_t const* _Path, wchar_t (&_Drive)[_DriveSize], wchar_t (&_Dir)[_DirSize], wchar_t (&_Name)[_NameSize], wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
# 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
    __declspec(dllimport) errno_t __cdecl _wdupenv_s(
                                                                                    wchar_t** _Buffer,
                                                                                    size_t* _BufferCount,
                                                                                    wchar_t const* _VarName
        );




    __declspec(dllimport) wchar_t* __cdecl _wgetenv(
               wchar_t const* _VarName
        );



    __declspec(dllimport) errno_t __cdecl _wgetenv_s(
                                         size_t* _RequiredCount,
                                         wchar_t* _Buffer,
                                         size_t _BufferCount,
                                         wchar_t const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wgetenv_s(size_t* _RequiredCount, wchar_t (&_Buffer)[_Size], wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
# 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
    __declspec(dllimport) int __cdecl _wputenv(
               wchar_t const* _EnvString
        );


    __declspec(dllimport) errno_t __cdecl _wputenv_s(
               wchar_t const* _Name,
               wchar_t const* _Value
        );

    __declspec(dllimport) errno_t __cdecl _wsearchenv_s(
                                     wchar_t const* _Filename,
                                     wchar_t const* _VarName,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(wchar_t const* _Filename, wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }






    __declspec(dllimport) void __cdecl _wsearchenv(wchar_t const* _Filename, wchar_t const* _VarName, wchar_t *_ResultPath);






    __declspec(dllimport) int __cdecl _wsystem(
                   wchar_t const* _Command
        );





}
# 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
#pragma pack(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 2

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h" 2 3


#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h" 3
 extern "C" {
# 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h" 3
}
# 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h" 3
#pragma pack(pop)
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 2


#pragma pack(push, 8)
# 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
 extern "C" {
# 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _swab(
                                                                     char* _Buf1,
                                                                     char* _Buf2,
                                                                     int _SizeInBytes
    );
# 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(void);





__declspec(dllimport) unsigned int __cdecl _set_abort_behavior(
         unsigned int _Flags,
         unsigned int _Mask
    );




    typedef int (__cdecl* _onexit_t)(void);
# 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
    int __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit( _onexit_t _Func);


int __cdecl at_quick_exit(void (__cdecl*)(void));
# 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
    typedef void (__cdecl* _purecall_handler)(void);


    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*,
        unsigned int,
        uintptr_t
        );


    __declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(
                 _purecall_handler _Handler
        );

    __declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(void);


    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
                 _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
                 _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
# 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
                   __declspec(dllimport) int __cdecl _set_error_mode( int _Mode);



__declspec(dllimport) int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);

__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


__declspec(dllimport) errno_t __cdecl _set_doserrno( unsigned long _Value);
__declspec(dllimport) errno_t __cdecl _get_doserrno( unsigned long * _Value);


__declspec(dllimport) char** __cdecl __sys_errlist(void);


__declspec(dllimport) int * __cdecl __sys_nerr(void);


__declspec(dllimport) void __cdecl perror( char const* _ErrMsg);




                                              __declspec(dllimport) char** __cdecl __p__pgmptr (void);
                                              __declspec(dllimport) wchar_t** __cdecl __p__wpgmptr(void);
                                              __declspec(dllimport) int* __cdecl __p__fmode (void);
# 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_pgmptr ( char** _Value);


__declspec(dllimport) errno_t __cdecl _get_wpgmptr( wchar_t** _Value);

__declspec(dllimport) errno_t __cdecl _set_fmode ( int _Mode );

__declspec(dllimport) errno_t __cdecl _get_fmode ( int* _PMode);
# 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

               int __cdecl abs ( int _Number);
               long __cdecl labs ( long _Number);
               long long __cdecl llabs ( long long _Number);
               __int64 __cdecl _abs64( __int64 _Number);

               unsigned short __cdecl _byteswap_ushort( unsigned short _Number);
               unsigned long __cdecl _byteswap_ulong ( unsigned long _Number);
               unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64 _Number);

               __declspec(dllimport) div_t __cdecl div ( int _Numerator, int _Denominator);
               __declspec(dllimport) ldiv_t __cdecl ldiv ( long _Numerator, long _Denominator);
               __declspec(dllimport) lldiv_t __cdecl lldiv( long long _Numerator, long long _Denominator);



#pragma warning(push)
#pragma warning(disable: 6540)

unsigned int __cdecl _rotl(
         unsigned int _Value,
         int _Shift
    );


unsigned long __cdecl _lrotl(
         unsigned long _Value,
         int _Shift
    );

unsigned __int64 __cdecl _rotl64(
         unsigned __int64 _Value,
         int _Shift
    );

unsigned int __cdecl _rotr(
         unsigned int _Value,
         int _Shift
    );


unsigned long __cdecl _lrotr(
         unsigned long _Value,
         int _Shift
    );

unsigned __int64 __cdecl _rotr64(
         unsigned __int64 _Value,
         int _Shift
    );

#pragma warning(pop)






__declspec(dllimport) void __cdecl srand( unsigned int _Seed);

               __declspec(dllimport) int __cdecl rand(void);
# 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
# 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma pack(push, 4)
 typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
#pragma pack(pop)
# 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








 __declspec(dllimport) double __cdecl atof ( char const* _String);
                                  __declspec(dllimport) int __cdecl atoi ( char const* _String);
                                  __declspec(dllimport) long __cdecl atol ( char const* _String);
                                  __declspec(dllimport) long long __cdecl atoll ( char const* _String);
                                  __declspec(dllimport) __int64 __cdecl _atoi64( char const* _String);

               __declspec(dllimport) double __cdecl _atof_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _atoi_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) long __cdecl _atol_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) long long __cdecl _atoll_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) __int64 __cdecl _atoi64_l( char const* _String, _locale_t _Locale);

               __declspec(dllimport) int __cdecl _atoflt ( _CRT_FLOAT* _Result, char const* _String);
               __declspec(dllimport) int __cdecl _atodbl ( _CRT_DOUBLE* _Result, char* _String);
               __declspec(dllimport) int __cdecl _atoldbl( _LDOUBLE* _Result, char* _String);


__declspec(dllimport) int __cdecl _atoflt_l(
             _CRT_FLOAT* _Result,
             char const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _atodbl_l(
             _CRT_DOUBLE* _Result,
             char* _String,
             _locale_t _Locale
    );



__declspec(dllimport) int __cdecl _atoldbl_l(
             _LDOUBLE* _Result,
             char* _String,
             _locale_t _Locale
    );


__declspec(dllimport) float __cdecl strtof(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) float __cdecl _strtof_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) double __cdecl strtod(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) double __cdecl _strtod_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) long double __cdecl strtold(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) long double __cdecl _strtold_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) long __cdecl strtol(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long __cdecl _strtol_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) long long __cdecl strtoll(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long long __cdecl _strtoll_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long __cdecl strtoul(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long __cdecl _strtoul_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long long __cdecl strtoull(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long long __cdecl _strtoull_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) __int64 __cdecl _strtoi64(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) __int64 __cdecl _strtoi64_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );
# 617 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _itoa_s(
                                 int _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _itoa_s(int _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }







 __declspec(dllimport) char* __cdecl _itoa(int _Value, char *_Buffer, int _Radix);
# 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ltoa_s(
                                 long _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }






 __declspec(dllimport) char* __cdecl _ltoa(long _Value, char *_Buffer, int _Radix);
# 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ultoa_s(
                                 unsigned long _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(unsigned long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }






 __declspec(dllimport) char* __cdecl _ultoa(unsigned long _Value, char *_Buffer, int _Radix);
# 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _i64toa_s(
                                 __int64 _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );



__declspec(dllimport) char* __cdecl _i64toa(
                           __int64 _Value,
                           char* _Buffer,
                           int _Radix
    );



__declspec(dllimport) errno_t __cdecl _ui64toa_s(
                                 unsigned __int64 _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );


__declspec(dllimport) char* __cdecl _ui64toa(
                           unsigned __int64 _Value,
                           char* _Buffer,
                           int _Radix
    );
# 732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ecvt_s(
                                 char* _Buffer,
          size_t _BufferCount,
          double _Value,
          int _DigitCount,
          int* _PtDec,
          int* _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount, int* _PtDec, int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
# 751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char* __cdecl _ecvt(
          double _Value,
          int _DigitCount,
          int* _PtDec,
          int* _PtSign
    );



__declspec(dllimport) errno_t __cdecl _fcvt_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 double _Value,
                                 int _FractionalDigitCount,
                                 int* _PtDec,
                                 int* _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size], double _Value, int _FractionalDigitCount, int* _PtDec, int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
# 781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char* __cdecl _fcvt(
          double _Value,
          int _FractionalDigitCount,
          int* _PtDec,
          int* _PtSign
    );


__declspec(dllimport) errno_t __cdecl _gcvt_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 double _Value,
                                 int _DigitCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
# 805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char* __cdecl _gcvt(
                           double _Value,
                           int _DigitCount,
                           char* _Buffer
    );
# 843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl mblen(
                                                char const* _Ch,
                                                size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _mblen_l(
                                                char const* _Ch,
                                                size_t _MaxCount,
                                                _locale_t _Locale
    );



__declspec(dllimport) size_t __cdecl _mbstrlen(
           char const* _String
    );



__declspec(dllimport) size_t __cdecl _mbstrlen_l(
             char const* _String,
             _locale_t _Locale
    );



__declspec(dllimport) size_t __cdecl _mbstrnlen(
           char const* _String,
           size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _mbstrnlen_l(
             char const* _String,
             size_t _MaxCount,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl mbtowc(
                                         wchar_t* _DstCh,
                                         char const* _SrcCh,
                                         size_t _SrcSizeInBytes
    );


__declspec(dllimport) int __cdecl _mbtowc_l(
                                         wchar_t* _DstCh,
                                         char const* _SrcCh,
                                         size_t _SrcSizeInBytes,
                                         _locale_t _Locale
    );


__declspec(dllimport) errno_t __cdecl mbstowcs_s(
                                                              size_t* _PtNumOfCharConverted,
                                                              wchar_t* _DstBuf,
                                                              size_t _SizeInWords,
                                                              char const* _SrcBuf,
                                                              size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(size_t* _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], char const* _Source, size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }







 __declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest, char const* _Source, size_t _MaxCount);







__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(
                                                              size_t* _PtNumOfCharConverted,
                                                              wchar_t* _DstBuf,
                                                              size_t _SizeInWords,
                                                              char const* _SrcBuf,
                                                              size_t _MaxCount,
                                                              _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(size_t* _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], char const* _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
# 941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
 __declspec(dllimport) size_t __cdecl _mbstowcs_l( wchar_t *_Dest, char const* _Source, size_t _MaxCount, _locale_t _Locale);
# 954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl wctomb(
                                   char* _MbCh,
                                   wchar_t _WCh
    );


__declspec(dllimport) int __cdecl _wctomb_l(
                             char* _MbCh,
                             wchar_t _WCh,
                             _locale_t _Locale
    );




    __declspec(dllimport) errno_t __cdecl wctomb_s(
                                                                 int* _SizeConverted,
                                                                 char* _MbCh,
                                                                 rsize_t _SizeInBytes,
                                                                 wchar_t _WCh
        );




__declspec(dllimport) errno_t __cdecl _wctomb_s_l(
                                     int* _SizeConverted,
                                     char* _MbCh,
                                     size_t _SizeInBytes,
                                     wchar_t _WCh,
                                     _locale_t _Locale);


__declspec(dllimport) errno_t __cdecl wcstombs_s(
                                                                       size_t* _PtNumOfCharConverted,
                                                                       char* _Dst,
                                                                       size_t _DstSizeInBytes,
                                                                       wchar_t const* _Src,
                                                                       size_t _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(size_t* _PtNumOfCharConverted, char (&_Dest)[_Size], wchar_t const* _Source, size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }







 __declspec(dllimport) size_t __cdecl wcstombs( char *_Dest, wchar_t const* _Source, size_t _MaxCount);







__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(
                                                                       size_t* _PtNumOfCharConverted,
                                                                       char* _Dst,
                                                                       size_t _DstSizeInBytes,
                                                                       wchar_t const* _Src,
                                                                       size_t _MaxCountInBytes,
                                                                       _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(size_t* _PtNumOfCharConverted, char (&_Dest)[_Size], wchar_t const* _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
# 1029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
 __declspec(dllimport) size_t __cdecl _wcstombs_l( char *_Dest, wchar_t const* _Source, size_t _MaxCount, _locale_t _Locale);
# 1059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath(
                                     char* _Buffer,
                                     char const* _Path,
                                     size_t _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _makepath_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 char const* _Drive,
                                 char const* _Dir,
                                 char const* _Filename,
                                 char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size], char const* _Drive, char const* _Dir, char const* _Filename, char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
# 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
 __declspec(dllimport) void __cdecl _makepath( char *_Buffer, char const* _Drive, char const* _Dir, char const* _Filename, char const* _Ext);
# 1096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _splitpath(
                             char const* _FullPath,
                             char* _Drive,
                             char* _Dir,
                             char* _Filename,
                             char* _Ext
    );


__declspec(dllimport) errno_t __cdecl _splitpath_s(
                                       char const* _FullPath,
                                       char* _Drive,
                                       size_t _DriveCount,
                                       char* _Dir,
                                       size_t _DirCount,
                                       char* _Filename,
                                       size_t _FilenameCount,
                                       char* _Ext,
                                       size_t _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s( char const* _Dest, char (&_Drive)[_DriveSize], char (&_Dir)[_DirSize], char (&_Name)[_NameSize], char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
# 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
    __declspec(dllimport) errno_t __cdecl getenv_s(
                                         size_t* _RequiredCount,
                                         char* _Buffer,
                                         rsize_t _BufferCount,
                                         char const* _VarName
        );






    __declspec(dllimport) int* __cdecl __p___argc (void);
    __declspec(dllimport) char*** __cdecl __p___argv (void);
    __declspec(dllimport) wchar_t*** __cdecl __p___wargv(void);
# 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
    __declspec(dllimport) char*** __cdecl __p__environ (void);
    __declspec(dllimport) wchar_t*** __cdecl __p__wenviron(void);
# 1183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
    __declspec(dllimport) char* __cdecl getenv(
               char const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(size_t* _RequiredCount, char (&_Buffer)[_Size], char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
# 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
    __declspec(dllimport) errno_t __cdecl _dupenv_s(
                                                                                    char** _Buffer,
                                                                                    size_t* _BufferCount,
                                                                                    char const* _VarName
        );





    __declspec(dllimport) int __cdecl system(
                   char const* _Command
        );



#pragma warning(push)
#pragma warning(disable: 6540)


 __declspec(dllimport) int __cdecl _putenv(
               char const* _EnvString
        );


    __declspec(dllimport) errno_t __cdecl _putenv_s(
               char const* _Name,
               char const* _Value
        );

#pragma warning(pop)

 __declspec(dllimport) errno_t __cdecl _searchenv_s(
                                     char const* _Filename,
                                     char const* _VarName,
                                     char* _Buffer,
                                     size_t _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(char const* _Filename, char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }






    __declspec(dllimport) void __cdecl _searchenv(char const* _Filename, char const* _VarName, char *_Buffer);







    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _seterrormode(
             int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _beep(
             unsigned _Frequency,
             unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _sleep(
             unsigned long _Duration
        );
# 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ecvt" ". See online help for details."))
    __declspec(dllimport) char* __cdecl ecvt(
              double _Value,
              int _DigitCount,
              int* _PtDec,
              int* _PtSign
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcvt" ". See online help for details."))
    __declspec(dllimport) char* __cdecl fcvt(
              double _Value,
              int _FractionalDigitCount,
              int* _PtDec,
              int* _PtSign
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_gcvt" ". See online help for details."))
    __declspec(dllimport) char* __cdecl gcvt(
                               double _Value,
                               int _DigitCount,
                               char* _DstBuf
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_itoa" ". See online help for details."))
    __declspec(dllimport) char* __cdecl itoa(
                               int _Value,
                               char* _Buffer,
                               int _Radix
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ltoa" ". See online help for details."))
    __declspec(dllimport) char* __cdecl ltoa(
                               long _Value,
                               char* _Buffer,
                               int _Radix
        );


    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_swab" ". See online help for details."))
    __declspec(dllimport) void __cdecl swab(
                                        char* _Buf1,
                                        char* _Buf2,
                                        int _SizeInBytes
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ultoa" ". See online help for details."))
    __declspec(dllimport) char* __cdecl ultoa(
                               unsigned long _Value,
                               char* _Buffer,
                               int _Radix
        );





                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putenv" ". See online help for details."))
        __declspec(dllimport) int __cdecl putenv(
                   char const* _EnvString
            );



#pragma warning(pop)

 _onexit_t __cdecl onexit( _onexit_t _Func);





}
# 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma pack(pop)
# 15 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
 extern "C" {
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
typedef struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
} _HEAPINFO;
# 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
void* __cdecl _alloca( size_t _Size);





    __declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);


    __declspec(dllimport) int __cdecl _heapmin(void);


        __declspec(dllimport) int __cdecl _heapwalk( _HEAPINFO* _EntryInfo);



                       __declspec(dllimport) int __cdecl _heapchk(void);
        __declspec(dllimport) int __cdecl _resetstkoflw(void);
# 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
    typedef char __static_assert_t[(sizeof(unsigned int) <= 16) != 0];


#pragma warning(push)
#pragma warning(disable: 6540)

 __inline void* _MarkAllocaS( void* _Ptr, unsigned int _Marker)
    {
        if (_Ptr)
        {
            *((unsigned int*)_Ptr) = _Marker;
            _Ptr = (char*)_Ptr + 16;
        }
        return _Ptr;
    }

    __inline size_t _MallocaComputeSize(size_t _Size)
    {
        size_t _MarkedSize = _Size + 16;
        return _MarkedSize > _Size ? _MarkedSize : 0;
    }

#pragma warning(pop)
# 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable: 6014)
 __inline void __cdecl _freea( void* _Memory)
    {
        unsigned int _Marker;
        if (_Memory)
        {
            _Memory = (char*)_Memory - 16;
            _Marker = *(unsigned int*)_Memory;
            if (_Marker == 0xDDDD)
            {
                free(_Memory);
            }






        }
    }
#pragma warning(pop)
# 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
}
# 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#pragma pack(pop)
# 16 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\memory.h" 1
# 17 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h" 1
# 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h"
#pragma warning(disable: 4514)
# 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h"
extern "C" {








#pragma deprecated("_ftcscat")
#pragma deprecated("_ftcschr")
#pragma deprecated("_ftcscpy")
#pragma deprecated("_ftcscspn")
#pragma deprecated("_ftcslen")
#pragma deprecated("_ftcsncat")
#pragma deprecated("_ftcsncpy")
#pragma deprecated("_ftcspbrk")
#pragma deprecated("_ftcsrchr")
#pragma deprecated("_ftcsspn")
#pragma deprecated("_ftcsstr")
#pragma deprecated("_ftcstok")
#pragma deprecated("_ftcsdup")
#pragma deprecated("_ftcsnset")
#pragma deprecated("_ftcsrev")
#pragma deprecated("_ftcsset")
#pragma deprecated("_ftcscmp")
#pragma deprecated("_ftcsicmp")
#pragma deprecated("_ftcsnccmp")
#pragma deprecated("_ftcsncmp")
#pragma deprecated("_ftcsncicmp")
#pragma deprecated("_ftcsnicmp")
#pragma deprecated("_ftcscoll")
#pragma deprecated("_ftcsicoll")
#pragma deprecated("_ftcsnccoll")
#pragma deprecated("_ftcsncoll")
#pragma deprecated("_ftcsncicoll")
#pragma deprecated("_ftcsnicoll")
#pragma deprecated("_ftcsclen")
#pragma deprecated("_ftcsnccat")
#pragma deprecated("_ftcsnccpy")
#pragma deprecated("_ftcsncset")
#pragma deprecated("_ftcsdec")
#pragma deprecated("_ftcsinc")
#pragma deprecated("_ftcsnbcnt")
#pragma deprecated("_ftcsnccnt")
#pragma deprecated("_ftcsnextc")
#pragma deprecated("_ftcsninc")
#pragma deprecated("_ftcsspnp")
#pragma deprecated("_ftcslwr")
#pragma deprecated("_ftcsupr")
#pragma deprecated("_ftclen")
#pragma deprecated("_ftccpy")
#pragma deprecated("_ftccmp")
# 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h"
}





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 1
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h" 1
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
 extern "C" {
# 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")






__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}




__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}
# 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
}
# 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h" 2


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
 extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    __declspec(dllimport) errno_t __cdecl _cgetws_s(
                                                  wchar_t* _Buffer,
                                                  size_t _BufferCount,
                                                  size_t* _SizeRead
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _cgetws_s(wchar_t (&_Buffer)[_Size], size_t* _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }







    __declspec(dllimport) int __cdecl _cputws(
               wchar_t const* _Buffer
        );

                       __declspec(dllimport) wint_t __cdecl _getwch (void);
                       __declspec(dllimport) wint_t __cdecl _getwche (void);
                       __declspec(dllimport) wint_t __cdecl _putwch ( wchar_t _Character);
                       __declspec(dllimport) wint_t __cdecl _ungetwch( wint_t _Character);

                       __declspec(dllimport) wint_t __cdecl _getwch_nolock (void);
                       __declspec(dllimport) wint_t __cdecl _getwche_nolock (void);
                       __declspec(dllimport) wint_t __cdecl _putwch_nolock ( wchar_t _Character);
                       __declspec(dllimport) wint_t __cdecl _ungetwch_nolock( wint_t _Character);
# 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __inline int __cdecl _vcwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _vcwprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf_s((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf_s(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_s_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _vcwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf_p((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf_p(
                                      const wchar_t* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_p_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _cwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_s(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_p(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    __declspec(dllimport) int __cdecl __conio_common_vcwscanf(
                                               unsigned __int64 _Options,
                                               wchar_t const* _Format,
                                               _locale_t _Locale,
                                               va_list _ArgList
        );


    __inline int __cdecl _vcwscanf_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
                                               va_list _ArgList
        )



    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()),
            _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwscanf(
                                               wchar_t const* const _Format,
                                               va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vcwscanf_l(_Format, 0, _ArgList);
#pragma warning(pop)
 }



    __inline int __cdecl _vcwscanf_s_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
                                               va_list _ArgList
        )



    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwscanf_s(
                                               wchar_t const* const _Format,
                                               va_list _ArgList
        )



    {
        return _vcwscanf_s_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _cwscanf_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vcwscanf_l(_Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwscanf(
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vcwscanf_l(_Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwscanf_s_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwscanf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwscanf_s(
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwscanf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }






}
# 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
#pragma pack(pop)
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
 extern "C" {
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd(
                                     wchar_t* _DstBuf,
                                     int _SizeInWords
    );



__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd(
                                     int _Drive,
                                     wchar_t* _DstBuf,
                                     int _SizeInWords
    );







__declspec(dllimport) int __cdecl _wchdir(
           wchar_t const* _Path
    );


__declspec(dllimport) int __cdecl _wmkdir(
           wchar_t const* _Path
    );


__declspec(dllimport) int __cdecl _wrmdir(
           wchar_t const* _Path
    );



}
# 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
#pragma pack(pop)
# 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h" 1
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_share.h" 1
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h" 2


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
 extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)
# 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
typedef unsigned long _fsize_t;

struct _wfinddata32_t
{
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
};

struct _wfinddata32i64_t
{
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __int64 size;
    wchar_t name[260];
};

struct _wfinddata64i32_t
{
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
};

struct _wfinddata64_t
{
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __int64 size;
    wchar_t name[260];
};
# 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _waccess(
           wchar_t const* _FileName,
           int _AccessMode
    );


__declspec(dllimport) errno_t __cdecl _waccess_s(
           wchar_t const* _FileName,
           int _AccessMode
    );


__declspec(dllimport) int __cdecl _wchmod(
           wchar_t const* _FileName,
           int _Mode
    );


__declspec(dllimport) int __cdecl _wcreat(
           wchar_t const* _FileName,
           int _PermissionMode
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst32(
           wchar_t const* _FileName,
           struct _wfinddata32_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext32(
          intptr_t _FindHandle,
          struct _wfinddata32_t* _FindData
    );

__declspec(dllimport) int __cdecl _wunlink(
           wchar_t const* _FileName
    );


__declspec(dllimport) int __cdecl _wrename(
           wchar_t const* _OldFileName,
           wchar_t const* _NewFileName
    );

__declspec(dllimport) errno_t __cdecl _wmktemp_s(
                                    wchar_t* _TemplateName,
                                    size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }





 __declspec(dllimport) wchar_t* __cdecl _wmktemp( wchar_t *_TemplateName);






__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(
           wchar_t const* _FileName,
           struct _wfinddata32i64_t* _FindData
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(
           wchar_t const* _FileName,
           struct _wfinddata64i32_t* _FindData
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst64(
           wchar_t const* _FileName,
           struct _wfinddata64_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext32i64(
          intptr_t _FindHandle,
          struct _wfinddata32i64_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext64i32(
          intptr_t _FindHandle,
          struct _wfinddata64i32_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext64(
          intptr_t _FindHandle,
          struct _wfinddata64_t* _FindData
    );


__declspec(dllimport) errno_t __cdecl _wsopen_s(
           int* _FileHandle,
           wchar_t const* _FileName,
           int _OpenFlag,
           int _ShareFlag,
           int _PermissionFlag
    );

__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(
           wchar_t const* _FileName,
           int _OFlag,
           int _ShFlag,
           int _PMode,
           int* _PFileHandle,
           int _BSecure
    );






    extern "C++"
    inline int __cdecl _wopen(
               wchar_t const* _FileName,
               int _OFlag,
               int _PMode = 0
        )
    {
        int _FileHandle;

        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, 0x40, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

    extern "C++"
    inline int __cdecl _wsopen(
               wchar_t const* _FileName,
               int _OFlag,
               int _ShFlag,
               int _PMode = 0
        )
    {
        int _FileHandle;

        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }
# 273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
#pragma warning(pop)



}
# 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
#pragma pack(pop)
# 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
 extern "C" {





    __declspec(dllimport) intptr_t __cdecl _wexecl(
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexecle(
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexeclp(
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexeclpe(
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexecv(
               wchar_t const* _FileName,
               wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wexecve(
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList,
                   wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wexecvp(
               wchar_t const* _FileName,
               wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wexecvpe(
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList,
                   wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnl(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnle(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnlp(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnlpe(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnv(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnve(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList,
                   wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnvp(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnvpe(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList,
                   wchar_t const* const* _Env
        );

    __declspec(dllimport) int __cdecl _wsystem(
                   wchar_t const* _Command
        );





}
# 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
#pragma pack(pop)
# 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h" 1
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma pack(push, 8)
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
 extern "C" {
# 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;


__declspec(dllimport) FILE* __cdecl __acrt_iob_func(unsigned);
# 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl fgetwc(
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _fgetwchar(void);


__declspec(dllimport) wint_t __cdecl fputwc(
            wchar_t _Character,
            FILE* _Stream);


__declspec(dllimport) wint_t __cdecl _fputwchar(
         wchar_t _Character
    );


__declspec(dllimport) wint_t __cdecl getwc(
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl getwchar(void);




__declspec(dllimport) wchar_t* __cdecl fgetws(
                                 wchar_t* _Buffer,
                                 int _BufferCount,
                                 FILE* _Stream
    );


__declspec(dllimport) int __cdecl fputws(
            wchar_t const* _Buffer,
            FILE* _Stream
    );



__declspec(dllimport) wchar_t* __cdecl _getws_s(
                                 wchar_t* _Buffer,
                                 size_t _BufferCount
    );

extern "C++" { template <size_t _Size> inline wchar_t* __cdecl _getws_s(wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }






__declspec(dllimport) wint_t __cdecl putwc(
            wchar_t _Character,
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl putwchar(
         wchar_t _Character
    );


__declspec(dllimport) int __cdecl _putws(
           wchar_t const* _Buffer
    );


__declspec(dllimport) wint_t __cdecl ungetwc(
            wint_t _Character,
            FILE* _Stream
    );


__declspec(dllimport) FILE * __cdecl _wfdopen(
           int _FileHandle,
           wchar_t const* _Mode
    );


__declspec(dllimport) FILE* __cdecl _wfopen(
           wchar_t const* _FileName,
           wchar_t const* _Mode
    );


__declspec(dllimport) errno_t __cdecl _wfopen_s(
                              FILE** _Stream,
                              wchar_t const* _FileName,
                              wchar_t const* _Mode
    );



__declspec(dllimport) FILE* __cdecl _wfreopen(
            wchar_t const* _FileName,
            wchar_t const* _Mode,
            FILE* _OldStream
    );


__declspec(dllimport) errno_t __cdecl _wfreopen_s(
                              FILE** _Stream,
                              wchar_t const* _FileName,
                              wchar_t const* _Mode,
                              FILE* _OldStream
    );


__declspec(dllimport) FILE* __cdecl _wfsopen(
           wchar_t const* _FileName,
           wchar_t const* _Mode,
           int _ShFlag
    );

__declspec(dllimport) void __cdecl _wperror(
               wchar_t const* _ErrorMessage
    );




    __declspec(dllimport) FILE* __cdecl _wpopen(
               wchar_t const* _Command,
               wchar_t const* _Mode
        );



__declspec(dllimport) int __cdecl _wremove(
           wchar_t const* _FileName
    );





__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam(
               wchar_t const* _Directory,
               wchar_t const* _FilePrefix
    );





__declspec(dllimport) errno_t __cdecl _wtmpnam_s(
                                 wchar_t* _Buffer,
                                 size_t _BufferCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }




 __declspec(dllimport) wchar_t* __cdecl _wtmpnam( wchar_t *_Buffer);
# 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fgetwc_nolock(
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _fputwc_nolock(
            wchar_t _Character,
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _getwc_nolock(
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _putwc_nolock(
            wchar_t _Character,
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _ungetwc_nolock(
            wint_t _Character,
            FILE* _Stream
    );
# 267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__inline int __cdecl _vfwprintf_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfwprintf(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfwprintf_s_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}





    __inline int __cdecl vfwprintf_s(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
    }





__inline int __cdecl _vfwprintf_p_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl _vfwprintf_p(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vwprintf_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vwprintf(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _vwprintf_s_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}





    __inline int __cdecl vwprintf_s(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }





__inline int __cdecl _vwprintf_p_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl _vwprintf_p(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _fwprintf_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl fwprintf(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fwprintf_s_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl fwprintf_s(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _fwprintf_p_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fwprintf_p(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wprintf_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl wprintf(
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wprintf_s_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl wprintf_s(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _wprintf_p_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wprintf_p(
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
# 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwscanf(
                                           unsigned __int64 _Options,
                                           FILE* _Stream,
                                           wchar_t const* _Format,
                                           _locale_t _Locale,
                                           va_list _ArgList
    );


__inline int __cdecl _vfwscanf_l(
            FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfwscanf(
            FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfwscanf_s_l(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}





    __inline int __cdecl vfwscanf_s(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
    }




__inline int __cdecl _vwscanf_l(
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vwscanf(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}



__inline int __cdecl _vwscanf_s_l(
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}





    __inline int __cdecl vwscanf_s(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }





__inline int __cdecl _fwscanf_l(
                                           FILE* const _Stream,
                                           wchar_t const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl fwscanf(
                                 FILE* const _Stream,
                                 wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fwscanf_s_l(
                                             FILE* const _Stream,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl fwscanf_s(
                                       FILE* const _Stream,
                                       wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _wscanf_l(
                                           wchar_t const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl wscanf(
                                 wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wscanf_s_l(
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl wscanf_s(
                                       wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 1001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswprintf(
                                            unsigned __int64 _Options,
                                            wchar_t* _Buffer,
                                            size_t _BufferCount,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );



__declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(
                                            unsigned __int64 _Options,
                                            wchar_t* _Buffer,
                                            size_t _BufferCount,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );



__declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(
                                            unsigned __int64 _Options,
                                            wchar_t* _Buffer,
                                            size_t _BufferCount,
                                            size_t _MaxCount,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );



__declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(
                                            unsigned __int64 _Options,
                                            wchar_t* _Buffer,
                                            size_t _BufferCount,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );



__inline int __cdecl _vsnwprintf_l(
                                                wchar_t* const _Buffer,
                                                size_t const _BufferCount,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


#pragma warning(push)
#pragma warning(disable: 4793)



__inline int __cdecl _vsnwprintf_s_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            size_t const _MaxCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsnwprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsnwprintf_s(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  size_t const _MaxCount,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}


 __inline int __cdecl _snwprintf( wchar_t *_Buffer, size_t _BufferCount, wchar_t const* _Format, ...); __inline int __cdecl _vsnwprintf( wchar_t *_Buffer, size_t _BufferCount, wchar_t const* _Format, va_list _Args);








#pragma warning(pop)



__inline int __cdecl _vsnwprintf(
                                             wchar_t* _Buffer,
                                             size_t _BufferCount,
                                             wchar_t const* _Format,
                                             va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)
}


extern "C++" { template <size_t _Size> inline int __cdecl _vsnwprintf_s(wchar_t (&_Buffer)[_Size], size_t _BufferCount, wchar_t const* _Format, va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vswprintf_c(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}




__inline int __cdecl _vswprintf_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)
}




__inline int __cdecl __vswprintf_l(
                                            wchar_t* const _Buffer,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}




__inline int __cdecl _vswprintf(
                                  wchar_t* const _Buffer,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
}




__inline int __cdecl vswprintf(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            va_list _ArgList
    )



{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}




__inline int __cdecl _vswprintf_s_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}





    __inline int __cdecl vswprintf_s(
                                      wchar_t* const _Buffer,
                                      size_t const _BufferCount,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }




extern "C++" { template <size_t _Size> inline int __cdecl vswprintf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
# 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vswprintf_p(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}




__inline int __cdecl _vscwprintf_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vscwprintf(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vscwprintf_l(_Format, 0, _ArgList);
}




__inline int __cdecl _vscwprintf_p_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vscwprintf_p(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vscwprintf_p_l(_Format, 0, _ArgList);
}




__inline int __cdecl __swprintf_l(
                                            wchar_t* const _Buffer,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf(
                                  wchar_t* const _Buffer,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl swprintf(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


#pragma warning(push)


#pragma warning(disable: 4793 4996)

 __inline int __cdecl __swprintf_l( wchar_t *_Buffer, wchar_t const* _Format, _locale_t _Locale, ...); __inline int __cdecl __vswprintf_l( wchar_t *_Buffer, wchar_t const* _Format, _locale_t _Locale, va_list _Args);
# 1495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
 __inline int __cdecl _swprintf( wchar_t *_Buffer, wchar_t const* _Format, ...); __inline int __cdecl _vswprintf( wchar_t *_Buffer, wchar_t const* _Format, va_list _Args);






#pragma warning(pop)



__inline int __cdecl _swprintf_s_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl swprintf_s(
                                      wchar_t* const _Buffer,
                                      size_t const _BufferCount,
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




extern "C++" {
# 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
# 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
;
# 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(disable: 4793)
# 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
; template <size_t _Size> inline int __cdecl swprintf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); }
# 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
# 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
; }
# 1557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf_p(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf_c_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf_c(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwprintf_l(
                                             wchar_t* const _Buffer,
                                             size_t const _BufferCount,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwprintf(
                                             wchar_t* _Buffer,
                                             size_t _BufferCount,
                                             wchar_t const* _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwprintf_s_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            size_t const _MaxCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwprintf_s(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  size_t const _MaxCount,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


extern "C++" {
# 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
# 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
;
# 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(disable: 4793)
# 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
; template <size_t _Size> inline int __cdecl _snwprintf_s(wchar_t (&_Buffer)[_Size], size_t _BufferCount, wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); }
# 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
# 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
; }
# 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _scwprintf(
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscwprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _scwprintf_p_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _scwprintf_p(
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscwprintf_p_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




#pragma warning(push)
#pragma warning(disable: 4141 4412 4793 4996 6054)



 extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS."))
        inline int swprintf(
                                          wchar_t* const _Buffer,
                                          wchar_t const* const _Format,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress: 28719)
 _Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS."))
        inline int __cdecl vswprintf(
                                          wchar_t* const _Buffer,
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            ) throw()
        {
#pragma warning(suppress: 28719)
 return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS."))
        inline int _swprintf_l(
                                                    wchar_t* const _Buffer,
                                                    wchar_t const* const _Format,
                                                    _locale_t const _Locale,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
            _Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS."))
        inline int __cdecl _vswprintf_l(
                                                    wchar_t* const _Buffer,
                                                    wchar_t const* const _Format,
                                                    _locale_t const _Locale,
                                                    va_list _ArgList
            ) throw()
        {
            return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
        }



#pragma warning(pop)
# 1890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswscanf(
                                           unsigned __int64 _Options,
                                           wchar_t const* _Buffer,
                                           size_t _BufferCount,
                                           wchar_t const* _Format,
                                           _locale_t _Locale,
                                           va_list _ArgList
    );



__inline int __cdecl _vswscanf_l(
                                  wchar_t const* const _Buffer,
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}




__inline int __cdecl vswscanf(
                                  wchar_t const* _Buffer,
                                  wchar_t const* _Format,
                                  va_list _ArgList
    )



{
    return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
}




__inline int __cdecl _vswscanf_s_l(
                                  wchar_t const* const _Buffer,
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}






    __inline int __cdecl vswscanf_s(
                                      wchar_t const* const _Buffer,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }




extern "C++" { template <size_t _Size> inline int __cdecl vswscanf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, va_list _Args) throw() { return vswscanf_s(_Buffer, _Size, _Format, _Args); } }
# 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_l(
                                           wchar_t const* const _Buffer,
                                           size_t const _BufferCount,
                                           wchar_t const* const _Format,
                                           _locale_t const _Locale,
                                           va_list _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}




__inline int __cdecl _vsnwscanf_s_l(
                                             wchar_t const* const _Buffer,
                                             size_t const _BufferCount,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
                                             va_list _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}




__inline int __cdecl _swscanf_l(
                                           wchar_t const* const _Buffer,
                                           wchar_t const* const _Format,
                                           _locale_t _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl swscanf(
                                 wchar_t const* const _Buffer,
                                 wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swscanf_s_l(
                                             wchar_t const* const _Buffer,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}






    __inline int __cdecl swscanf_s(
                                       wchar_t const* const _Buffer,
                                       wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }






__inline int __cdecl _snwscanf_l(
                                           wchar_t const* const _Buffer,
                                           size_t const _BufferCount,
                                           wchar_t const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwscanf(
                                     wchar_t const* const _Buffer,
                                     size_t const _BufferCount,
                                     wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwscanf_s_l(
                                             wchar_t const* const _Buffer,
                                             size_t const _BufferCount,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwscanf_s(
                                      wchar_t const* const _Buffer,
                                      size_t const _BufferCount,
                                      wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
# 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
}
# 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma pack(pop)
# 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
 extern "C" {
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
struct tm
{
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
};
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) wchar_t* __cdecl _wasctime(
         struct tm const* _Tm
    );



__declspec(dllimport) errno_t __cdecl _wasctime_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wasctime_s(wchar_t (&_Buffer)[_Size], struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
# 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) size_t __cdecl wcsftime(
                                  wchar_t* _Buffer,
                                  size_t _SizeInWords,
                                  wchar_t const* _Format,
                                  struct tm const* _Tm
    );



__declspec(dllimport) size_t __cdecl _wcsftime_l(
                                  wchar_t* _Buffer,
                                  size_t _SizeInWords,
                                  wchar_t const* _Format,
                                  struct tm const* _Tm,
                                  _locale_t _Locale
    );



__declspec(dllimport) wchar_t* __cdecl _wctime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime32_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(wchar_t (&_Buffer)[_Size], __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
# 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) wchar_t* __cdecl _wctime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime64_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(wchar_t (&_Buffer)[_Size], __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }






__declspec(dllimport) errno_t __cdecl _wstrdate_s(
                                                         wchar_t* _Buffer,
                                                         size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }




 __declspec(dllimport) wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);





__declspec(dllimport) errno_t __cdecl _wstrtime_s(
                                                         wchar_t* _Buffer,
                                                         size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }




 __declspec(dllimport) wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
# 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
#pragma warning(push)
#pragma warning(disable: 4996)
# 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
 static __inline wchar_t * __cdecl _wctime(
                 time_t const* const _Time)
        {
            return _wctime64(_Time);
        }


        static __inline errno_t __cdecl _wctime_s(
                                                                wchar_t* const _Buffer,
                                                                size_t const _SizeInWords,
                                                                time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }



#pragma warning(pop)




}
# 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
#pragma pack(pop)
# 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h" 1
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h" 1
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
    typedef unsigned short _ino_t;


        typedef _ino_t ino_t;
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
    typedef unsigned int _dev_t;


        typedef _dev_t dev_t;
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
    typedef long _off_t;


        typedef _off_t off_t;
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h" 2


#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
 extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)








struct _stat32
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
};

struct _stat32i64
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
};

struct _stat64i32
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
};

struct _stat64
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
};




    struct stat
    {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;
        time_t st_mtime;
        time_t st_ctime;
    };
# 157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _fstat32(
          int _FileHandle,
          struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat32i64(
          int _FileHandle,
          struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64i32(
          int _FileHandle,
          struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64(
          int _FileHandle,
          struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _stat32(
           char const* _FileName,
           struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _stat32i64(
           char const* _FileName,
           struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _stat64i32(
           char const* _FileName,
           struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _stat64(
           char const* _FileName,
           struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32(
           wchar_t const* _FileName,
           struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32i64(
           wchar_t const* _FileName,
           struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64i32(
           wchar_t const* _FileName,
           struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64(
           wchar_t const* _FileName,
           struct _stat64* _Stat
    );
# 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
        static __inline int __cdecl fstat(int const _FileHandle, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _fstat64i32(_FileHandle, (struct _stat64i32*)_Stat);
        }
        static __inline int __cdecl stat(char const* const _FileName, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _stat64i32(_FileName, (struct _stat64i32*)_Stat);
        }






#pragma warning(pop)



}
# 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
#pragma pack(pop)
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2




#pragma pack(push, 8)
# 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
 extern "C" {
# 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
typedef wchar_t _Wint_t;




__declspec(dllimport) wchar_t* __cdecl _wsetlocale(
               int _Category,
               wchar_t const* _Locale
    );


__declspec(dllimport) _locale_t __cdecl _wcreate_locale(
           int _Category,
           wchar_t const* _Locale
    );



__declspec(dllimport) wint_t __cdecl btowc(
         int _Ch
    );

__declspec(dllimport) size_t __cdecl mbrlen(
                                                   char const* _Ch,
                                                   size_t _SizeInBytes,
                                                   mbstate_t* _State
    );

__declspec(dllimport) size_t __cdecl mbrtowc(
                                                   wchar_t* _DstCh,
                                                   char const* _SrcCh,
                                                   size_t _SizeInBytes,
                                                   mbstate_t* _State
    );


__declspec(dllimport) errno_t __cdecl mbsrtowcs_s(
                                      size_t* _Retval,
                                      wchar_t* _Dst,
                                      size_t _Size,
                                      char const** _PSrc,
                                      size_t _N,
                                      mbstate_t* _State
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbsrtowcs_s(size_t* _Retval, wchar_t (&_Dest)[_Size], char const** _PSource, size_t _Count, mbstate_t* _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
# 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
 __declspec(dllimport) size_t __cdecl mbsrtowcs( wchar_t *_Dest, char const** _PSrc, size_t _Count, mbstate_t* _State);
# 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) errno_t __cdecl wcrtomb_s(
                                     size_t* _Retval,
                                     char* _Dst,
                                     size_t _SizeInBytes,
                                     wchar_t _Ch,
                                     mbstate_t* _State
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcrtomb_s(size_t* _Retval, char (&_Dest)[_Size], wchar_t _Source, mbstate_t* _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
# 118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
 __declspec(dllimport) size_t __cdecl wcrtomb( char *_Dest, wchar_t _Source, mbstate_t* _State);







__declspec(dllimport) errno_t __cdecl wcsrtombs_s(
                                                      size_t* _Retval,
                                                      char* _Dst,
                                                      size_t _SizeInBytes,
                                                      wchar_t const** _Src,
                                                      size_t _Size,
                                                      mbstate_t* _State
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsrtombs_s(size_t* _Retval, char (&_Dest)[_Size], wchar_t const** _PSrc, size_t _Count, mbstate_t* _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
# 145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
 __declspec(dllimport) size_t __cdecl wcsrtombs( char *_Dest, wchar_t const** _PSource, size_t _Count, mbstate_t* _State);







__declspec(dllimport) int __cdecl wctob(
         wint_t _WCh
    );
# 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
        errno_t __cdecl wmemcpy_s(
                                         wchar_t* _S1,
                                         rsize_t _N1,
                                         wchar_t const* _S2,
                                         rsize_t _N
            );


        errno_t __cdecl wmemmove_s(
                                         wchar_t* _S1,
                                         rsize_t _N1,
                                         wchar_t const* _S2,
                                         rsize_t _N
            );



    __inline int __cdecl fwide(
                 FILE* _F,
                 int _M
        )
    {
        (void)_F;
        return (_M);
    }

    __inline int __cdecl mbsinit(
                 mbstate_t const* _P
        )
    {
        return _P == 0 || _P->_Wchar == 0;
    }

    __inline wchar_t const* __cdecl wmemchr(
                       wchar_t const* _S,
                       wchar_t _C,
                       size_t _N
        )
    {
        for (; 0 < _N; ++_S, --_N)
            if (*_S == _C)
                return (wchar_t const*)_S;

        return 0;
    }

    __inline int __cdecl wmemcmp(
                       wchar_t const* _S1,
                       wchar_t const* _S2,
                       size_t _N
        )
    {
        for (; 0 < _N; ++_S1, ++_S2, --_N)
            if (*_S1 != *_S2)
                return *_S1 < *_S2 ? -1 : 1;

        return 0;
    }



    __inline
    wchar_t* __cdecl wmemcpy(
                             wchar_t* _S1,
                             wchar_t const* _S2,
                             size_t _N
        )
    {
#pragma warning(push)
#pragma warning(disable: 4995 4996 6386)
 return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning(pop)
 }

    __inline
    wchar_t* __cdecl wmemmove(
                                 wchar_t* _S1,
                                 wchar_t const* _S2,
                                 size_t _N
        )
    {
#pragma warning(push)
#pragma warning(disable: 4996 6386)
 return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning(pop)
 }



    __inline wchar_t* __cdecl wmemset(
                             wchar_t* _S,
                             wchar_t _C,
                             size_t _N
        )
    {
        wchar_t *_Su = _S;
        for (; 0 < _N; ++_Su, --_N)
        {
            *_Su = _C;
        }
        return _S;
    }



        extern "C++" inline wchar_t* __cdecl wmemchr(
                           wchar_t* _S,
                           wchar_t _C,
                           size_t _N
            )
        {
            wchar_t const* const _SC = _S;
            return const_cast<wchar_t*>(wmemchr(_SC, _C, _N));
        }







}
# 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
#pragma pack(pop)
# 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h" 2



extern "C" {



typedef wchar_t _TCHAR;
typedef wchar_t _TSCHAR;
typedef wchar_t _TUCHAR;
typedef wchar_t _TXCHAR;
typedef wint_t _TINT;
# 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h"
               __inline size_t __cdecl _tclen( const wchar_t *_Cpc)
{

    (void *)_Cpc;
    return 1;
}
__inline void __cdecl _tccpy( wchar_t *_Pc1, const wchar_t *_Cpc2) { *_Pc1 = (wchar_t)*_Cpc2; }
__inline void __cdecl _tccpy_l( wchar_t *_Pc1, const wchar_t *_Cpc2, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 28719)
 _tccpy(_Pc1, _Cpc2);
#pragma warning(pop)
}
               __inline int __cdecl _tccmp( const wchar_t *_Cpc1, const wchar_t *_Cpc2) { return (int) ((*_Cpc1)-(*_Cpc2)); }
# 720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h"
               __inline wchar_t * __cdecl _wcsdec( const wchar_t * _Cpc1, const wchar_t * _Cpc2) { return (wchar_t *)((_Cpc1)>=(_Cpc2) ? 0 : ((_Cpc2)-1)); }
               __inline wchar_t * __cdecl _wcsinc( const wchar_t * _Pc) { return (wchar_t *)(_Pc+1); }
               __inline unsigned int __cdecl _wcsnextc( const wchar_t * _Cpc) { return (unsigned int)*_Cpc; }
               __inline wchar_t * __cdecl _wcsninc( const wchar_t * _Pc, size_t _Sz) { return (wchar_t *)(_Pc+_Sz); }
               __inline size_t __cdecl _wcsncnt( const wchar_t * _String, size_t _Cnt)
{
        size_t n = _Cnt;
        wchar_t *cp = (wchar_t *)_String;
        while (n-- && *cp)
                cp++;
        return _Cnt - n - 1;
}
               __inline wchar_t * __cdecl _wcsspnp
(
           const wchar_t * _Cpc1,
           const wchar_t * _Cpc2
)
{
    return _Cpc1==0 ? 0 : ((*(_Cpc1 += wcsspn(_Cpc1,_Cpc2))!='\0') ? (wchar_t*)_Cpc1 : 0);
}


                   __inline errno_t __cdecl _wcsncpy_s_l( wchar_t *_Destination, size_t _Destination_size_chars, const wchar_t *_Source, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
    return wcsncpy_s(_Destination, _Destination_size_chars, _Source, _Count);
}


extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsncpy_s_l(wchar_t (&_Dest)[_Size], const wchar_t * _Source, size_t _Count, _locale_t _Locale) throw() { return _wcsncpy_s_l(_Dest, _Size, _Source, _Count, _Locale); } }

 __inline wchar_t * __cdecl _wcsncpy_l(wchar_t *_Dst, const wchar_t * _Source, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996 6054 28719)
 return wcsncpy(_Dst, _Source, _Count);
#pragma warning(pop)
}




                   __inline errno_t __cdecl _wcsncat_s_l( wchar_t *_Destination, size_t _Destination_size_chars, const wchar_t *_Source, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
    return wcsncat_s(_Destination, _Destination_size_chars, _Source, _Count);
}


extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsncat_s_l(wchar_t (&_Dest)[_Size], const wchar_t * _Source, size_t _Count, _locale_t _Locale) throw() { return _wcsncat_s_l(_Dest, _Size, _Source, _Count, _Locale); } }

 __inline wchar_t * __cdecl _wcsncat_l(wchar_t *_Dst, const wchar_t * _Source, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996 6054 6059 28719)

 return wcsncat(_Dst, _Source, _Count);
#pragma warning(pop)
}



                                     __inline wchar_t * _wcstok_l( wchar_t * _String, const wchar_t * _Delimiters, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996 28727)



 return wcstok(_String,_Delimiters,0);

#pragma warning(pop)
}


__inline wchar_t * _wcstok_s_l( wchar_t * _String, const wchar_t * _Delimiters, wchar_t **_Current_position, _locale_t _Locale)
{
    (void)_Locale;
    return wcstok_s(_String, _Delimiters, _Current_position);
}


                   __inline errno_t _wcsnset_s_l( wchar_t * _Destination, size_t _Destination_size_chars, wchar_t _Value, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
    return _wcsnset_s(_Destination, _Destination_size_chars, _Value, _Count);
}

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s_l(wchar_t (&_Dest)[_Size], wchar_t _Value, size_t _Count, _locale_t _Locale) throw() { return _wcsnset_s_l(_Dest, _Size, _Value, _Count, _Locale); } }

 __inline wchar_t * __cdecl _wcsnset_l(wchar_t *_Dst, wchar_t _Value, size_t _MaxCount, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996)
 return _wcsnset(_Dst, _Value, _MaxCount);
#pragma warning(pop)
}



                   __inline errno_t _wcsset_s_l( wchar_t * _Destination, size_t _Destination_size_chars, wchar_t _Value, _locale_t _Locale)
{
    (void)_Locale;
    return _wcsset_s(_Destination, _Destination_size_chars, _Value);
}

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s_l(wchar_t (&_Dest)[_Size], wchar_t _Value, _locale_t _Locale) throw() { return _wcsset_s_l(_Dest, _Size, _Value, _Locale); } }

 __inline wchar_t * __cdecl _wcsset_l(wchar_t *_Dst, wchar_t _Value, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996)
 return _wcsset(_Dst, _Value);
#pragma warning(pop)
}
# 2414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h"
}
# 18 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 2

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iostream" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\climits" 1 3




# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 1 3






# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h" 1 3
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h" 1 3








# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h" 2 3
# 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 2 3


#pragma pack(push,8)
# 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
#pragma detect_mismatch("_MSC_VER", "1900")



#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "2")
# 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
#pragma detect_mismatch("RuntimeLibrary", "MDd_DynamicDebug")
# 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h" 1 3
# 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h" 3
#pragma comment(lib, "msvcprt" "d" "")
# 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 2 3
# 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
typedef long long _Longlong;
typedef unsigned long long _ULonglong;
# 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
namespace std {
enum _Uninitialized
 {
 _Noinit
 };



#pragma warning(push)
#pragma warning(disable: 4412)
class __declspec(dllimport) _Lockit
 {
public:
# 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
 __thiscall _Lockit();
 explicit __thiscall _Lockit(int);
 __thiscall ~_Lockit() noexcept;


 static void __cdecl _Lockit_ctor(int);
 static void __cdecl _Lockit_dtor(int);

private:
 static void __cdecl _Lockit_ctor(_Lockit *);
 static void __cdecl _Lockit_ctor(_Lockit *, int);
 static void __cdecl _Lockit_dtor(_Lockit *);

public:
                    _Lockit(const _Lockit&) = delete;
 _Lockit& operator=(const _Lockit&) = delete;

private:
 int _Locktype;
# 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
 };
# 764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
class __declspec(dllimport) _Init_locks
 {
public:
# 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
 __thiscall _Init_locks();
 __thiscall ~_Init_locks() noexcept;


private:
 static void __cdecl _Init_locks_ctor(_Init_locks *);
 static void __cdecl _Init_locks_dtor(_Init_locks *);
# 797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
 };

#pragma warning(pop)
}
# 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void));

typedef unsigned long _Uint32t;





#pragma pack(pop)
# 5 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\climits" 2 3
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath" 1 3
# 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
 extern "C" {



#pragma warning(push)
#pragma warning(disable: 4738)
#pragma warning(disable: 4820)






 struct _exception
    {
        int type;
        char* name;
        double arg1;
        double arg2;
        double retval;
    };






        struct _complex
        {
            double x, y;
        };
# 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
typedef float float_t;
typedef double double_t;
# 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
        extern double const _HUGE;
# 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
void __cdecl _fperrraise( int _Except);

               __declspec(dllimport) short __cdecl _dclass( double _X);
               __declspec(dllimport) short __cdecl _ldclass( long double _X);
               __declspec(dllimport) short __cdecl _fdclass( float _X);

               __declspec(dllimport) int __cdecl _dsign( double _X);
               __declspec(dllimport) int __cdecl _ldsign( long double _X);
               __declspec(dllimport) int __cdecl _fdsign( float _X);

               __declspec(dllimport) int __cdecl _dpcomp( double _X, double _Y);
               __declspec(dllimport) int __cdecl _ldpcomp( long double _X, long double _Y);
               __declspec(dllimport) int __cdecl _fdpcomp( float _X, float _Y);

               __declspec(dllimport) short __cdecl _dtest( double* _Px);
               __declspec(dllimport) short __cdecl _ldtest( long double* _Px);
               __declspec(dllimport) short __cdecl _fdtest( float* _Px);

__declspec(dllimport) short __cdecl _d_int( double* _Px, short _Xexp);
__declspec(dllimport) short __cdecl _ld_int( long double* _Px, short _Xexp);
__declspec(dllimport) short __cdecl _fd_int( float* _Px, short _Xexp);

__declspec(dllimport) short __cdecl _dscale( double* _Px, long _Lexp);
__declspec(dllimport) short __cdecl _ldscale( long double* _Px, long _Lexp);
__declspec(dllimport) short __cdecl _fdscale( float* _Px, long _Lexp);

__declspec(dllimport) short __cdecl _dunscale( short* _Pex, double* _Px);
__declspec(dllimport) short __cdecl _ldunscale( short* _Pex, long double* _Px);
__declspec(dllimport) short __cdecl _fdunscale( short* _Pex, float* _Px);

               __declspec(dllimport) short __cdecl _dexp( double* _Px, double _Y, long _Eoff);
               __declspec(dllimport) short __cdecl _ldexp( long double* _Px, long double _Y, long _Eoff);
               __declspec(dllimport) short __cdecl _fdexp( float* _Px, float _Y, long _Eoff);

               __declspec(dllimport) short __cdecl _dnorm( unsigned short* _Ps);
               __declspec(dllimport) short __cdecl _fdnorm( unsigned short* _Ps);

               __declspec(dllimport) double __cdecl _dpoly( double _X, double const* _Tab, int _N);
               __declspec(dllimport) long double __cdecl _ldpoly( long double _X, long double const* _Tab, int _N);
               __declspec(dllimport) float __cdecl _fdpoly( float _X, float const* _Tab, int _N);

               __declspec(dllimport) double __cdecl _dlog( double _X, int _Baseflag);
               __declspec(dllimport) long double __cdecl _ldlog( long double _X, int _Baseflag);
               __declspec(dllimport) float __cdecl _fdlog( float _X, int _Baseflag);

               __declspec(dllimport) double __cdecl _dsin( double _X, unsigned int _Qoff);
               __declspec(dllimport) long double __cdecl _ldsin( long double _X, unsigned int _Qoff);
               __declspec(dllimport) float __cdecl _fdsin( float _X, unsigned int _Qoff);


typedef union
{
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C, _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double _Zero_C, _Xbig_C;
extern const float _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;
# 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
extern "C++"
{
                   inline int fpclassify( float _X) throw()
    {
        return _fdtest(&_X);
    }

                   inline int fpclassify( double _X) throw()
    {
        return _dtest(&_X);
    }

                   inline int fpclassify( long double _X) throw()
    {
        return _ldtest(&_X);
    }

                   inline bool signbit( float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

                   inline bool signbit( double _X) throw()
    {
        return _dsign(_X) != 0;
    }

                   inline bool signbit( long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

                   inline int _fpcomp( float _X, float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

                   inline int _fpcomp( double _X, double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

                   inline int _fpcomp( long double _X, long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {
        typedef double _Type;
    };

    template <> struct _Real_type<float>
    {
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {
        typedef long double _Type;
    };

    template <class _T1, class _T2>
                   inline int _fpcomp( _T1 _X, _T2 _Y) throw()
    {
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
                   inline bool isfinite( _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
                   inline bool isinf( _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
                   inline bool isnan( _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
                   inline bool isnormal( _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
                   inline bool isgreater( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isgreaterequal( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isless( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool islessequal( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool islessgreater( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isunordered( _Ty1 _X, _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}






               int __cdecl abs( int _X);
               long __cdecl labs( long _X);
               long long __cdecl llabs( long long _X);

               double __cdecl acos( double _X);
               double __cdecl asin( double _X);
               double __cdecl atan( double _X);
               double __cdecl atan2( double _Y, double _X);

               double __cdecl cos( double _X);
               double __cdecl cosh( double _X);
               double __cdecl exp( double _X);
                                  double __cdecl fabs( double _X);
               double __cdecl fmod( double _X, double _Y);
               double __cdecl log( double _X);
               double __cdecl log10( double _X);
               double __cdecl pow( double _X, double _Y);
               double __cdecl sin( double _X);
               double __cdecl sinh( double _X);
                                  double __cdecl sqrt( double _X);
               double __cdecl tan( double _X);
               double __cdecl tanh( double _X);

               __declspec(dllimport) double __cdecl acosh( double _X);
               __declspec(dllimport) double __cdecl asinh( double _X);
               __declspec(dllimport) double __cdecl atanh( double _X);
               __declspec(dllimport) double __cdecl atof( char const* _String);
               __declspec(dllimport) double __cdecl _atof_l( char const* _String, _locale_t _Locale);
               __declspec(dllimport) double __cdecl _cabs( struct _complex _Complex_value);
               __declspec(dllimport) double __cdecl cbrt( double _X);
               __declspec(dllimport) double __cdecl ceil( double _X);
               __declspec(dllimport) double __cdecl _chgsign( double _X);
               __declspec(dllimport) double __cdecl copysign( double _Number, double _Sign);
               __declspec(dllimport) double __cdecl _copysign( double _Number, double _Sign);
               __declspec(dllimport) double __cdecl erf( double _X);
               __declspec(dllimport) double __cdecl erfc( double _X);
               __declspec(dllimport) double __cdecl exp2( double _X);
               __declspec(dllimport) double __cdecl expm1( double _X);
               __declspec(dllimport) double __cdecl fdim( double _X, double _Y);
               __declspec(dllimport) double __cdecl floor( double _X);
               __declspec(dllimport) double __cdecl fma( double _X, double _Y, double _Z);
               __declspec(dllimport) double __cdecl fmax( double _X, double _Y);
               __declspec(dllimport) double __cdecl fmin( double _X, double _Y);
               __declspec(dllimport) double __cdecl frexp( double _X, int* _Y);
               __declspec(dllimport) double __cdecl hypot( double _X, double _Y);
               __declspec(dllimport) double __cdecl _hypot( double _X, double _Y);
               __declspec(dllimport) int __cdecl ilogb( double _X);
               __declspec(dllimport) double __cdecl ldexp( double _X, int _Y);
               __declspec(dllimport) double __cdecl lgamma( double _X);
               __declspec(dllimport) long long __cdecl llrint( double _X);
               __declspec(dllimport) long long __cdecl llround( double _X);
               __declspec(dllimport) double __cdecl log1p( double _X);
               __declspec(dllimport) double __cdecl log2( double _X);
               __declspec(dllimport) double __cdecl logb( double _X);
               __declspec(dllimport) long __cdecl lrint( double _X);
               __declspec(dllimport) long __cdecl lround( double _X);

int __cdecl _matherr( struct _exception* _Except);

               __declspec(dllimport) double __cdecl modf( double _X, double* _Y);
               __declspec(dllimport) double __cdecl nan( char const*);
               __declspec(dllimport) double __cdecl nearbyint( double _X);
               __declspec(dllimport) double __cdecl nextafter( double _X, double _Y);
               __declspec(dllimport) double __cdecl nexttoward( double _X, long double _Y);
               __declspec(dllimport) double __cdecl remainder( double _X, double _Y);
               __declspec(dllimport) double __cdecl remquo( double _X, double _Y, int* _Z);
               __declspec(dllimport) double __cdecl rint( double _X);
               __declspec(dllimport) double __cdecl round( double _X);
               __declspec(dllimport) double __cdecl scalbln( double _X, long _Y);
               __declspec(dllimport) double __cdecl scalbn( double _X, int _Y);
               __declspec(dllimport) double __cdecl tgamma( double _X);
               __declspec(dllimport) double __cdecl trunc( double _X);
               __declspec(dllimport) double __cdecl _j0( double _X );
               __declspec(dllimport) double __cdecl _j1( double _X );
               __declspec(dllimport) double __cdecl _jn(int _X, double _Y);
               __declspec(dllimport) double __cdecl _y0( double _X);
               __declspec(dllimport) double __cdecl _y1( double _X);
               __declspec(dllimport) double __cdecl _yn( int _X, double _Y);

               __declspec(dllimport) float __cdecl acoshf( float _X);
               __declspec(dllimport) float __cdecl asinhf( float _X);
               __declspec(dllimport) float __cdecl atanhf( float _X);
               __declspec(dllimport) float __cdecl cbrtf( float _X);
               __declspec(dllimport) float __cdecl _chgsignf( float _X);
               __declspec(dllimport) float __cdecl copysignf( float _Number, float _Sign);
               __declspec(dllimport) float __cdecl _copysignf( float _Number, float _Sign);
               __declspec(dllimport) float __cdecl erff( float _X);
               __declspec(dllimport) float __cdecl erfcf( float _X);
               __declspec(dllimport) float __cdecl expm1f( float _X);
               __declspec(dllimport) float __cdecl exp2f( float _X);
               __declspec(dllimport) float __cdecl fdimf( float _X, float _Y);
               __declspec(dllimport) float __cdecl fmaf( float _X, float _Y, float _Z);
               __declspec(dllimport) float __cdecl fmaxf( float _X, float _Y);
               __declspec(dllimport) float __cdecl fminf( float _X, float _Y);
               __declspec(dllimport) float __cdecl _hypotf( float _X, float _Y);
               __declspec(dllimport) int __cdecl ilogbf( float _X);
               __declspec(dllimport) float __cdecl lgammaf( float _X);
               __declspec(dllimport) long long __cdecl llrintf( float _X);
               __declspec(dllimport) long long __cdecl llroundf( float _X);
               __declspec(dllimport) float __cdecl log1pf( float _X);
               __declspec(dllimport) float __cdecl log2f( float _X);
               __declspec(dllimport) float __cdecl logbf( float _X);
               __declspec(dllimport) long __cdecl lrintf( float _X);
               __declspec(dllimport) long __cdecl lroundf( float _X);
               __declspec(dllimport) float __cdecl nanf( char const*);
               __declspec(dllimport) float __cdecl nearbyintf( float _X);
               __declspec(dllimport) float __cdecl nextafterf( float _X, float _Y);
               __declspec(dllimport) float __cdecl nexttowardf( float _X, long double _Y);
               __declspec(dllimport) float __cdecl remainderf( float _X, float _Y);
               __declspec(dllimport) float __cdecl remquof( float _X, float _Y, int* _Z);
               __declspec(dllimport) float __cdecl rintf( float _X);
               __declspec(dllimport) float __cdecl roundf( float _X);
               __declspec(dllimport) float __cdecl scalblnf( float _X, long _Y);
               __declspec(dllimport) float __cdecl scalbnf( float _X, int _Y);
               __declspec(dllimport) float __cdecl tgammaf( float _X);
               __declspec(dllimport) float __cdecl truncf( float _X);







                   __declspec(dllimport) float __cdecl _logbf( float _X);
                   __declspec(dllimport) float __cdecl _nextafterf( float _X, float _Y);
                   __declspec(dllimport) int __cdecl _finitef( float _X);
                   __declspec(dllimport) int __cdecl _isnanf( float _X);
                   __declspec(dllimport) int __cdecl _fpclassf( float _X);

                   __declspec(dllimport) int __cdecl _set_FMA3_enable( int _Flag);
                   __declspec(dllimport) int __cdecl _get_FMA3_enable(void);
# 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
                   __declspec(dllimport) float __cdecl acosf( float _X);
                   __declspec(dllimport) float __cdecl asinf( float _X);
                   __declspec(dllimport) float __cdecl atan2f( float _Y, float _X);
                   __declspec(dllimport) float __cdecl atanf( float _X);
                   __declspec(dllimport) float __cdecl ceilf( float _X);
                   __declspec(dllimport) float __cdecl cosf( float _X);
                   __declspec(dllimport) float __cdecl coshf( float _X);
                   __declspec(dllimport) float __cdecl expf( float _X);
# 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
                   __inline float __cdecl fabsf( float _X)
    {
        return (float)fabs(_X);
    }





                   __declspec(dllimport) float __cdecl floorf( float _X);
                   __declspec(dllimport) float __cdecl fmodf( float _X, float _Y);
# 682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
               __inline float __cdecl frexpf( float _X, int *_Y)
{
    return (float)frexp(_X, _Y);
}

               __inline float __cdecl hypotf( float _X, float _Y)
{
    return _hypotf(_X, _Y);
}

               __inline float __cdecl ldexpf( float _X, int _Y)
{
    return (float)ldexp(_X, _Y);
}



                   __declspec(dllimport) float __cdecl log10f( float _X);
                   __declspec(dllimport) float __cdecl logf( float _X);
                   __declspec(dllimport) float __cdecl modff( float _X, float *_Y);
                   __declspec(dllimport) float __cdecl powf( float _X, float _Y);
                   __declspec(dllimport) float __cdecl sinf( float _X);
                   __declspec(dllimport) float __cdecl sinhf( float _X);
                   __declspec(dllimport) float __cdecl sqrtf( float _X);
                   __declspec(dllimport) float __cdecl tanf( float _X);
                   __declspec(dllimport) float __cdecl tanhf( float _X);
# 761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
               __declspec(dllimport) long double __cdecl acoshl( long double _X);

               __inline long double __cdecl acosl( long double _X)
{
    return acos((double)_X);
}

               __declspec(dllimport) long double __cdecl asinhl( long double _X);

               __inline long double __cdecl asinl( long double _X)
{
    return asin((double)_X);
}

               __inline long double __cdecl atan2l( long double _Y, long double _X)
{
    return atan2((double)_Y, (double)_X);
}

               __declspec(dllimport) long double __cdecl atanhl( long double _X);

               __inline long double __cdecl atanl( long double _X)
{
    return atan((double)_X);
}

               __declspec(dllimport) long double __cdecl cbrtl( long double _X);

               __inline long double __cdecl ceill( long double _X)
{
    return ceil((double)_X);
}

               __inline long double __cdecl _chgsignl( long double _X)
{
    return _chgsign((double)_X);
}

               __declspec(dllimport) long double __cdecl copysignl( long double _Number, long double _Sign);

               __inline long double __cdecl _copysignl( long double _Number, long double _Sign)
{
    return _copysign((double)_Number, (double)_Sign);
}

               __inline long double __cdecl coshl( long double _X)
{
    return cosh((double)_X);
}

               __inline long double __cdecl cosl( long double _X)
{
    return cos((double)_X);
}

               __declspec(dllimport) long double __cdecl erfl( long double _X);
               __declspec(dllimport) long double __cdecl erfcl( long double _X);

               __inline long double __cdecl expl( long double _X)
{
    return exp((double)_X);
}

               __declspec(dllimport) long double __cdecl exp2l( long double _X);
               __declspec(dllimport) long double __cdecl expm1l( long double _X);

               __inline long double __cdecl fabsl( long double _X)
{
    return fabs((double)_X);
}

               __declspec(dllimport) long double __cdecl fdiml( long double _X, long double _Y);

               __inline long double __cdecl floorl( long double _X)
{
    return floor((double)_X);
}

               __declspec(dllimport) long double __cdecl fmal( long double _X, long double _Y, long double _Z);
               __declspec(dllimport) long double __cdecl fmaxl( long double _X, long double _Y);
               __declspec(dllimport) long double __cdecl fminl( long double _X, long double _Y);

               __inline long double __cdecl fmodl( long double _X, long double _Y)
{
    return fmod((double)_X, (double)_Y);
}

               __inline long double __cdecl frexpl( long double _X, int *_Y)
{
    return frexp((double)_X, _Y);
}

               __declspec(dllimport) int __cdecl ilogbl( long double _X);

               __inline long double __cdecl _hypotl( long double _X, long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

               __inline long double __cdecl hypotl( long double _X, long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

               __inline long double __cdecl ldexpl( long double _X, int _Y)
{
    return ldexp((double)_X, _Y);
}

               __declspec(dllimport) long double __cdecl lgammal( long double _X);
               __declspec(dllimport) long long __cdecl llrintl( long double _X);
               __declspec(dllimport) long long __cdecl llroundl( long double _X);

               __inline long double __cdecl logl( long double _X)
{
    return log((double)_X);
}

               __inline long double __cdecl log10l( long double _X)
{
    return log10((double)_X);
}

               __declspec(dllimport) long double __cdecl log1pl( long double _X);
               __declspec(dllimport) long double __cdecl log2l( long double _X);
               __declspec(dllimport) long double __cdecl logbl( long double _X);
               __declspec(dllimport) long __cdecl lrintl( long double _X);
               __declspec(dllimport) long __cdecl lroundl( long double _X);

               __inline long double __cdecl modfl( long double _X, long double* _Y)
{
    double _F, _I;
    _F = modf((double)_X, &_I);
    *_Y = _I;
    return _F;
}

               __declspec(dllimport) long double __cdecl nanl( char const*);
               __declspec(dllimport) long double __cdecl nearbyintl( long double _X);
               __declspec(dllimport) long double __cdecl nextafterl( long double _X, long double _Y);
               __declspec(dllimport) long double __cdecl nexttowardl( long double _X, long double _Y);

               __inline long double __cdecl powl( long double _X, long double _Y)
{
    return pow((double)_X, (double)_Y);
}

               __declspec(dllimport) long double __cdecl remainderl( long double _X, long double _Y);
               __declspec(dllimport) long double __cdecl remquol( long double _X, long double _Y, int* _Z);
               __declspec(dllimport) long double __cdecl rintl( long double _X);
               __declspec(dllimport) long double __cdecl roundl( long double _X);
               __declspec(dllimport) long double __cdecl scalblnl( long double _X, long _Y);
               __declspec(dllimport) long double __cdecl scalbnl( long double _X, int _Y);

               __inline long double __cdecl sinhl( long double _X)
{
    return sinh((double)_X);
}

               __inline long double __cdecl sinl( long double _X)
{
    return sin((double)_X);
}

               __inline long double __cdecl sqrtl( long double _X)
{
    return sqrt((double)_X);
}

               __inline long double __cdecl tanhl( long double _X)
{
    return tanh((double)_X);
}

               __inline long double __cdecl tanl( long double _X)
{
    return tan((double)_X);
}

               __declspec(dllimport) long double __cdecl tgammal( long double _X);
               __declspec(dllimport) long double __cdecl truncl( long double _X);
# 963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
            extern double HUGE;




        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j0" ". See online help for details.")) __declspec(dllimport) double __cdecl j0( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j1" ". See online help for details.")) __declspec(dllimport) double __cdecl j1( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_jn" ". See online help for details.")) __declspec(dllimport) double __cdecl jn( int _X, double _Y);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y0" ". See online help for details.")) __declspec(dllimport) double __cdecl y0( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y1" ". See online help for details.")) __declspec(dllimport) double __cdecl y1( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_yn" ". See online help for details.")) __declspec(dllimport) double __cdecl yn( int _X, double _Y);





#pragma warning(pop)



}
# 983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath" 2 3





               inline double abs( double _Xx) noexcept
 {
 return (:: fabs(_Xx));
 }

               inline double pow( double _Xx, int _Yx) noexcept
 {
 if (_Yx == 2)
  return (_Xx * _Xx);

 return (:: pow(_Xx, static_cast<double>(_Yx)));
 }

               inline float abs( float _Xx) noexcept
 {
 return (:: fabsf(_Xx));
 }

               inline float acos( float _Xx) noexcept
 {
 return (:: acosf(_Xx));
 }

               inline float acosh( float _Xx) noexcept
 {
 return (:: acoshf(_Xx));
 }

               inline float asin( float _Xx) noexcept
 {
 return (:: asinf(_Xx));
 }

               inline float asinh( float _Xx) noexcept
 {
 return (:: asinhf(_Xx));
 }

               inline float atan( float _Xx) noexcept
 {
 return (:: atanf(_Xx));
 }

               inline float atanh( float _Xx) noexcept
 {
 return (:: atanhf(_Xx));
 }

               inline float atan2( float _Yx, float _Xx) noexcept
 {
 return (:: atan2f(_Yx, _Xx));
 }

               inline float cbrt( float _Xx) noexcept
 {
 return (:: cbrtf(_Xx));
 }

               inline float ceil( float _Xx) noexcept
 {
 return (:: ceilf(_Xx));
 }

               inline float copysign( float _Number,
      float _Sign) noexcept
 {
 return (:: copysignf(_Number, _Sign));
 }

               inline float cos( float _Xx) noexcept
 {
 return (:: cosf(_Xx));
 }

               inline float cosh( float _Xx) noexcept
 {
 return (:: coshf(_Xx));
 }

               inline float erf( float _Xx) noexcept
 {
 return (:: erff(_Xx));
 }

               inline float erfc( float _Xx) noexcept
 {
 return (:: erfcf(_Xx));
 }

               inline float exp( float _Xx) noexcept
 {
 return (:: expf(_Xx));
 }

               inline float exp2( float _Xx) noexcept
 {
 return (:: exp2f(_Xx));
 }

               inline float expm1( float _Xx) noexcept
 {
 return (:: expm1f(_Xx));
 }

               inline float fabs( float _Xx) noexcept
 {
 return (:: fabsf(_Xx));
 }

               inline float fdim( float _Xx, float _Yx) noexcept
 {
 return (:: fdimf(_Xx, _Yx));
 }

               inline float floor( float _Xx) noexcept
 {
 return (:: floorf(_Xx));
 }

               inline float fma( float _Xx, float _Yx,
      float _Zx) noexcept
 {
 return (:: fmaf(_Xx, _Yx, _Zx));
 }

               inline float fmax( float _Xx, float _Yx) noexcept
 {
 return (:: fmaxf(_Xx, _Yx));
 }

               inline float fmin( float _Xx, float _Yx) noexcept
 {
 return (:: fminf(_Xx, _Yx));
 }

               inline float fmod( float _Xx, float _Yx) noexcept
 {
 return (:: fmodf(_Xx, _Yx));
 }

               inline float frexp( float _Xx, int* _Yx) noexcept
 {
 return (:: frexpf(_Xx, _Yx));
 }

               inline float hypot( float _Xx, float _Yx) noexcept
 {
 return (:: hypotf(_Xx, _Yx));
 }

               inline int ilogb( float _Xx) noexcept
 {
 return (:: ilogbf(_Xx));
 }

               inline float ldexp( float _Xx, int _Yx) noexcept
 {
 return (:: ldexpf(_Xx, _Yx));
 }

               inline float lgamma( float _Xx) noexcept
 {
 return (:: lgammaf(_Xx));
 }

               inline long long llrint( float _Xx) noexcept
 {
 return (:: llrintf(_Xx));
 }

               inline long long llround( float _Xx) noexcept
 {
 return (:: llroundf(_Xx));
 }

               inline float log( float _Xx) noexcept
 {
 return (:: logf(_Xx));
 }

               inline float log10( float _Xx) noexcept
 {
 return (:: log10f(_Xx));
 }

               inline float log1p( float _Xx) noexcept
 {
 return (:: log1pf(_Xx));
 }

               inline float log2( float _Xx) noexcept
 {
 return (:: log2f(_Xx));
 }

               inline float logb( float _Xx) noexcept
 {
 return (:: logbf(_Xx));
 }

               inline long lrint( float _Xx) noexcept
 {
 return (:: lrintf(_Xx));
 }

               inline long lround( float _Xx) noexcept
 {
 return (:: lroundf(_Xx));
 }

               inline float modf( float _Xx, float* _Yx) noexcept
 {
 return (:: modff(_Xx, _Yx));
 }

               inline float nearbyint( float _Xx) noexcept
 {
 return (:: nearbyintf(_Xx));
 }

               inline float nextafter( float _Xx, float _Yx) noexcept
 {
 return (:: nextafterf(_Xx, _Yx));
 }

               inline float nexttoward( float _Xx,
      long double _Yx) noexcept
 {
 return (:: nexttowardf(_Xx, _Yx));
 }

               inline float pow( float _Xx,
      float _Yx) noexcept
 {
 return (:: powf(_Xx, _Yx));
 }

               inline float pow( float _Xx, int _Yx) noexcept
 {
 if (_Yx == 2)
  return (_Xx * _Xx);

 return (:: powf(_Xx, static_cast<float>(_Yx)));
 }

               inline float remainder( float _Xx, float _Yx) noexcept
 {
 return (:: remainderf(_Xx, _Yx));
 }

               inline float remquo( float _Xx, float _Yx,
       int *_Zx) noexcept
 {
 return (:: remquof(_Xx, _Yx, _Zx));
 }

               inline float rint( float _Xx) noexcept
 {
 return (:: rintf(_Xx));
 }

               inline float round( float _Xx) noexcept
 {
 return (:: roundf(_Xx));
 }

               inline float scalbln( float _Xx, long _Yx) noexcept
 {
 return (:: scalblnf(_Xx, _Yx));
 }

               inline float scalbn( float _Xx, int _Yx) noexcept
 {
 return (:: scalbnf(_Xx, _Yx));
 }

               inline float sin( float _Xx) noexcept
 {
 return (:: sinf(_Xx));
 }

               inline float sinh( float _Xx) noexcept
 {
 return (:: sinhf(_Xx));
 }

               inline float sqrt( float _Xx) noexcept
 {
 return (:: sqrtf(_Xx));
 }

               inline float tan( float _Xx) noexcept
 {
 return (:: tanf(_Xx));
 }

               inline float tanh( float _Xx) noexcept
 {
 return (:: tanhf(_Xx));
 }

               inline float tgamma( float _Xx) noexcept
 {
 return (:: tgammaf(_Xx));
 }

               inline float trunc( float _Xx) noexcept
 {
 return (:: truncf(_Xx));
 }

               inline long double abs( long double _Xx) noexcept
 {
 return (:: fabsl(_Xx));
 }

               inline long double acos( long double _Xx) noexcept
 {
 return (:: acosl(_Xx));
 }

               inline long double acosh( long double _Xx) noexcept
 {
 return (:: acoshl(_Xx));
 }

               inline long double asin( long double _Xx) noexcept
 {
 return (:: asinl(_Xx));
 }

               inline long double asinh( long double _Xx) noexcept
 {
 return (:: asinhl(_Xx));
 }

               inline long double atan( long double _Xx) noexcept
 {
 return (:: atanl(_Xx));
 }

               inline long double atanh( long double _Xx) noexcept
 {
 return (:: atanhl(_Xx));
 }

               inline long double atan2( long double _Yx,
      long double _Xx) noexcept
 {
 return (:: atan2l(_Yx, _Xx));
 }

               inline long double cbrt( long double _Xx) noexcept
 {
 return (:: cbrtl(_Xx));
 }

               inline long double ceil( long double _Xx) noexcept
 {
 return (:: ceill(_Xx));
 }

               inline long double copysign( long double _Number,
      long double _Sign) noexcept
 {
 return (:: copysignl(_Number, _Sign));
 }

               inline long double cos( long double _Xx) noexcept
 {
 return (:: cosl(_Xx));
 }

               inline long double cosh( long double _Xx) noexcept
 {
 return (:: coshl(_Xx));
 }

               inline long double erf( long double _Xx) noexcept
 {
 return (:: erfl(_Xx));
 }

               inline long double erfc( long double _Xx) noexcept
 {
 return (:: erfcl(_Xx));
 }

               inline long double exp( long double _Xx) noexcept
 {
 return (:: expl(_Xx));
 }

               inline long double exp2( long double _Xx) noexcept
 {
 return (:: exp2l(_Xx));
 }

               inline long double expm1( long double _Xx) noexcept
 {
 return (:: expm1l(_Xx));
 }

               inline long double fabs( long double _Xx) noexcept
 {
 return (:: fabsl(_Xx));
 }

               inline long double fdim( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fdiml(_Xx, _Yx));
 }

               inline long double floor( long double _Xx) noexcept
 {
 return (:: floorl(_Xx));
 }

               inline long double fma( long double _Xx,
      long double _Yx, long double _Zx) noexcept
 {
 return (:: fmal(_Xx, _Yx, _Zx));
 }

               inline long double fmax( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fmaxl(_Xx, _Yx));
 }

               inline long double fmin( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fminl(_Xx, _Yx));
 }

               inline long double fmod( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fmodl(_Xx, _Yx));
 }

               inline long double frexp( long double _Xx,
       int* _Yx) noexcept
 {
 return (:: frexpl(_Xx, _Yx));
 }

               inline long double hypot( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: hypotl(_Xx, _Yx));
 }

               inline int ilogb( long double _Xx) noexcept
 {
 return (:: ilogbl(_Xx));
 }

               inline long double ldexp( long double _Xx,
      int _Yx) noexcept
 {
 return (:: ldexpl(_Xx, _Yx));
 }

               inline long double lgamma( long double _Xx) noexcept
 {
 return (:: lgammal(_Xx));
 }

               inline long long llrint( long double _Xx) noexcept
 {
 return (:: llrintl(_Xx));
 }

               inline long long llround( long double _Xx) noexcept
 {
 return (:: llroundl(_Xx));
 }

               inline long double log( long double _Xx) noexcept
 {
 return (:: logl(_Xx));
 }

               inline long double log10( long double _Xx) noexcept
 {
 return (:: log10l(_Xx));
 }

               inline long double log1p( long double _Xx) noexcept
 {
 return (:: log1pl(_Xx));
 }

               inline long double log2( long double _Xx) noexcept
 {
 return (:: log2l(_Xx));
 }

               inline long double logb( long double _Xx) noexcept
 {
 return (:: logbl(_Xx));
 }

               inline long lrint( long double _Xx) noexcept
 {
 return (:: lrintl(_Xx));
 }

               inline long lround( long double _Xx) noexcept
 {
 return (:: lroundl(_Xx));
 }

               inline long double modf( long double _Xx,
       long double* _Yx) noexcept
 {
 return (:: modfl(_Xx, _Yx));
 }

               inline long double nearbyint( long double _Xx) noexcept
 {
 return (:: nearbyintl(_Xx));
 }

               inline long double nextafter( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: nextafterl(_Xx, _Yx));
 }

               inline long double nexttoward( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: nexttowardl(_Xx, _Yx));
 }

               inline long double pow( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: powl(_Xx, _Yx));
 }

               inline long double pow( long double _Xx,
      int _Yx) noexcept
 {
 if (_Yx == 2)
  return (_Xx * _Xx);

 return (:: powl(_Xx, static_cast<long double>(_Yx)));
 }

               inline long double remainder( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: remainderl(_Xx, _Yx));
 }

               inline long double remquo( long double _Xx,
      long double _Yx, int *_Zx) noexcept
 {
 return (:: remquol(_Xx, _Yx, _Zx));
 }

               inline long double rint( long double _Xx) noexcept
 {
 return (:: rintl(_Xx));
 }

               inline long double round( long double _Xx) noexcept
 {
 return (:: roundl(_Xx));
 }

               inline long double scalbln( long double _Xx,
      long _Yx) noexcept
 {
 return (:: scalblnl(_Xx, _Yx));
 }

               inline long double scalbn( long double _Xx,
      int _Yx) noexcept
 {
 return (:: scalbnl(_Xx, _Yx));
 }

               inline long double sin( long double _Xx) noexcept
 {
 return (:: sinl(_Xx));
 }

               inline long double sinh( long double _Xx) noexcept
 {
 return (:: sinhl(_Xx));
 }

               inline long double sqrt( long double _Xx) noexcept
 {
 return (:: sqrtl(_Xx));
 }

               inline long double tan( long double _Xx) noexcept
 {
 return (:: tanl(_Xx));
 }

               inline long double tanh( long double _Xx) noexcept
 {
 return (:: tanhl(_Xx));
 }

               inline long double tgamma( long double _Xx) noexcept
 {
 return (:: tgammal(_Xx));
 }

               inline long double trunc( long double _Xx) noexcept
 {
 return (:: truncl(_Xx));
 }
# 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h" 1 3







# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib" 1 3
# 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib" 3
namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;


using :: getenv;
using :: system;


using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;

using :: _Exit; using :: at_quick_exit; using :: quick_exit;
}
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

struct _Nil
 {
 };


template<class _Ty,
 _Ty _Val>
 struct integral_constant
 {
 static constexpr _Ty value = _Val;

 typedef _Ty value_type;
 typedef integral_constant<_Ty, _Val> type;

 constexpr operator value_type() const noexcept
  {
  return (value);
  }

 constexpr value_type operator()() const noexcept
  {
  return (value);
  }
 };

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;


template<bool _Val>
 using bool_constant = integral_constant<bool, _Val>;


template<bool _Val>
 struct _Cat_base
  : integral_constant<bool, _Val>
 {
 };


template<bool _Test,
 class _Ty = void>
 struct enable_if
 {
 };

template<class _Ty>
 struct enable_if<true, _Ty>
 {
 typedef _Ty type;
 };


template<bool _Test,
 class _Ty1,
 class _Ty2>
 struct conditional
 {
 typedef _Ty2 type;
 };

template<class _Ty1,
 class _Ty2>
 struct conditional<true, _Ty1, _Ty2>
 {
 typedef _Ty1 type;
 };


template<class _Ty1,
 class _Ty2>
 struct is_same
  : false_type
 {
 };

template<class _Ty1>
 struct is_same<_Ty1, _Ty1>
  : true_type
 {
 };


template<class _Ty,
 class _Uty>
 constexpr bool is_same_v = is_same<_Ty, _Uty>::value;



template<class _Ty>
 struct remove_const
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_const<const _Ty>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct remove_volatile
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_volatile<volatile _Ty>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct remove_cv
 {
 typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
  type;
 };


template<class _Ty>
 struct _Is_integral
  : false_type
 {
 };

template<>
 struct _Is_integral<bool>
  : true_type
 {
 };

template<>
 struct _Is_integral<char>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned char>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed char>
  : true_type
 {
 };


template<>
 struct _Is_integral<wchar_t>
  : true_type
 {
 };


template<>
 struct _Is_integral<unsigned short>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed short>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned int>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed int>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned long>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed long>
  : true_type
 {
 };

template<>
 struct _Is_integral<char16_t>
  : true_type
 {
 };

template<>
 struct _Is_integral<char32_t>
  : true_type
 {
 };

template<>
 struct _Is_integral<long long>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned long long>
  : true_type
 {
 };


template<class _Ty>
 struct is_integral
  : _Is_integral<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 constexpr bool is_integral_v = is_integral<_Ty>::value;



template<class _Ty>
 struct _Is_floating_point
  : false_type
 {
 };

template<>
 struct _Is_floating_point<float>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<double>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<long double>
  : true_type
 {
 };


template<class _Ty>
 struct is_floating_point
  : _Is_floating_point<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 constexpr bool is_floating_point_v = is_floating_point<_Ty>::value;



template<class _Ty>
 struct is_arithmetic
  : _Cat_base<is_integral<_Ty>::value
   || is_floating_point<_Ty>::value>
 {
 };


template<class _Ty>
 constexpr bool is_arithmetic_v = is_arithmetic<_Ty>::value;



template<class _Ty>
 struct remove_reference
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_reference<_Ty&>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_reference<_Ty&&>
 {
 typedef _Ty type;
 };


struct _Wrap_int
 {
 _Wrap_int(int)
  {
  }
 };

template<class _Ty>
 struct _Identity
 {
 typedef _Ty type;
 };
# 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
template<class _Ty>
 struct _Promote_to_float
 {
 typedef typename conditional<is_integral<_Ty>::value,
  double, _Ty>::type type;
 };

template<class _Ty1,
 class _Ty2>
 struct _Common_float_type
 {
 typedef typename _Promote_to_float<_Ty1>::type _Ty1f;
 typedef typename _Promote_to_float<_Ty2>::type _Ty2f;
 typedef typename conditional<is_same<_Ty1f, long double>::value
  || is_same<_Ty2f, long double>::value, long double,
  typename conditional<is_same<_Ty1f, double>::value
   || is_same<_Ty2f, double>::value, double,
   float>::type>::type type;
 };
}
# 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h" 3
template<class _Ty1,
 class _Ty2> inline
 typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value
  && ::std:: is_arithmetic<_Ty2>::value,
  typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type
 pow(const _Ty1 _Left, const _Ty2 _Right)
 {
 typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
 return (:: pow(type(_Left), type(_Right)));
 }


extern "C" double __cdecl acos( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acos(_Ty _Left) { return (:: acos((double)_Left)); }
extern "C" double __cdecl asin( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asin(_Ty _Left) { return (:: asin((double)_Left)); }
extern "C" double __cdecl atan( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atan(_Ty _Left) { return (:: atan((double)_Left)); }
extern "C" double __cdecl atan2( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type atan2(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: atan2((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl ceil( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ceil(_Ty _Left) { return (:: ceil((double)_Left)); }
extern "C" double __cdecl cos( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cos(_Ty _Left) { return (:: cos((double)_Left)); }
extern "C" double __cdecl cosh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cosh(_Ty _Left) { return (:: cosh((double)_Left)); }
extern "C" double __cdecl exp( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp(_Ty _Left) { return (:: exp((double)_Left)); }

extern "C" double __cdecl fabs( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type fabs(_Ty _Left) { return (:: fabs((double)_Left)); }

extern "C" __declspec(dllimport) double __cdecl floor( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type floor(_Ty _Left) { return (:: floor((double)_Left)); }
extern "C" double __cdecl fmod( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmod(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmod((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl frexp( double, int *); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type frexp(_Ty _Left, int * _Arg2) { return (:: frexp((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl ldexp( double, int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ldexp(_Ty _Left, int _Arg2) { return (:: ldexp((double)_Left, _Arg2)); }
extern "C" double __cdecl log( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log(_Ty _Left) { return (:: log((double)_Left)); }
extern "C" double __cdecl log10( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log10(_Ty _Left) { return (:: log10((double)_Left)); }


extern "C" double __cdecl sin( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sin(_Ty _Left) { return (:: sin((double)_Left)); }
extern "C" double __cdecl sinh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sinh(_Ty _Left) { return (:: sinh((double)_Left)); }
extern "C" double __cdecl sqrt( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sqrt(_Ty _Left) { return (:: sqrt((double)_Left)); }
extern "C" double __cdecl tan( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tan(_Ty _Left) { return (:: tan((double)_Left)); }
extern "C" double __cdecl tanh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tanh(_Ty _Left) { return (:: tanh((double)_Left)); }
# 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h" 3
inline float _Fma(float _Left, float _Middle, float _Right)
 {
 return (:: fmaf(_Left, _Middle, _Right));
 }

inline double _Fma(double _Left, double _Middle, double _Right)
 {
 return (:: fma(_Left, _Middle, _Right));
 }

inline long double _Fma(long double _Left, long double _Middle,
 long double _Right)
 {
 return (:: fmal(_Left, _Middle, _Right));
 }

template<class _Ty1,
 class _Ty2,
 class _Ty3> inline
 typename ::std:: _Common_float_type<_Ty1,
  typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type
 fma(_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right)
 {
 typedef typename ::std:: _Common_float_type<_Ty1,
  typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type type;
 return (_Fma((type)_Left, (type)_Middle, (type)_Right));
 }



inline float _Remquo(float _Left, float _Right, int *_Pquo)
 {
 return (:: remquof(_Left, _Right, _Pquo));
 }

inline double _Remquo(double _Left, double _Right, int *_Pquo)
 {
 return (:: remquo(_Left, _Right, _Pquo));
 }

inline long double _Remquo(long double _Left, long double _Right, int *_Pquo)
 {
 return (:: remquol(_Left, _Right, _Pquo));
 }

template<class _Ty1,
 class _Ty2> inline
 typename ::std:: _Common_float_type<_Ty1, _Ty2>::type
 remquo(_Ty1 _Left, _Ty2 _Right, int *_Pquo)
 {
 typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
 return (_Remquo((type)_Left, (type)_Right, _Pquo));
 }

extern "C" __declspec(dllimport) double __cdecl acosh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acosh(_Ty _Left) { return (:: acosh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl asinh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asinh(_Ty _Left) { return (:: asinh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl atanh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atanh(_Ty _Left) { return (:: atanh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl cbrt( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cbrt(_Ty _Left) { return (:: cbrt((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl copysign( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type copysign(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: copysign((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl erf( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erf(_Ty _Left) { return (:: erf((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl erfc( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erfc(_Ty _Left) { return (:: erfc((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl expm1( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type expm1(_Ty _Left) { return (:: expm1((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl exp2( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp2(_Ty _Left) { return (:: exp2((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl fdim( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fdim(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fdim((type)_Left, (type)_Right)); }

extern "C" __declspec(dllimport) double __cdecl fmax( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmax(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmax((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl fmin( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmin(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmin((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl hypot( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type hypot(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: hypot((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) int __cdecl ilogb( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, int>::type ilogb(_Ty _Left) { return (:: ilogb((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl lgamma( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type lgamma(_Ty _Left) { return (:: lgamma((double)_Left)); }
extern "C" __declspec(dllimport) long long __cdecl llrint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llrint(_Ty _Left) { return (:: llrint((double)_Left)); }
extern "C" __declspec(dllimport) long long __cdecl llround( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llround(_Ty _Left) { return (:: llround((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl log1p( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log1p(_Ty _Left) { return (:: log1p((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl log2( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log2(_Ty _Left) { return (:: log2((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl logb( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type logb(_Ty _Left) { return (:: logb((double)_Left)); }
extern "C" __declspec(dllimport) long __cdecl lrint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lrint(_Ty _Left) { return (:: lrint((double)_Left)); }
extern "C" __declspec(dllimport) long __cdecl lround( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lround(_Ty _Left) { return (:: lround((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl nearbyint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nearbyint(_Ty _Left) { return (:: nearbyint((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl nextafter( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type nextafter(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: nextafter((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl nexttoward( double, long double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nexttoward(_Ty _Left, long double _Arg2) { return (:: nexttoward((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl remainder( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type remainder(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: remainder((type)_Left, (type)_Right)); }

extern "C" __declspec(dllimport) double __cdecl rint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type rint(_Ty _Left) { return (:: rint((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl round( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type round(_Ty _Left) { return (:: round((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl scalbln( double, long); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbln(_Ty _Left, long _Arg2) { return (:: scalbln((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl scalbn( double, int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbn(_Ty _Left, int _Arg2) { return (:: scalbn((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl tgamma( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tgamma(_Ty _Left) { return (:: tgamma((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl trunc( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type trunc(_Ty _Left) { return (:: trunc((double)_Left)); }


#pragma warning(pop)
#pragma pack(pop)
# 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath" 2 3




namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;

using :: fpclassify; using :: signbit;
using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal;
using :: islessgreater; using :: isunordered;
}
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio" 1 3
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
 extern "C" {
# 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
typedef __int64 fpos_t;




__declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(
              FILE* _Stream,
              char*** _Base,
              char*** _Pointer,
              int** _Count
    );
# 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
    __declspec(dllimport) errno_t __cdecl clearerr_s(
                FILE* _Stream
        );


    __declspec(dllimport) errno_t __cdecl fopen_s(
                                  FILE** _Stream,
                                  char const* _FileName,
                                  char const* _Mode
        );



    __declspec(dllimport) size_t __cdecl fread_s(
                                                                           void* _Buffer,
                                                                           size_t _BufferSize,
                                                                           size_t _ElementSize,
                                                                           size_t _ElementCount,
                                                                           FILE* _Stream
        );


    __declspec(dllimport) errno_t __cdecl freopen_s(
                                  FILE** _Stream,
                                  char const* _FileName,
                                  char const* _Mode,
                                  FILE* _OldStream
        );


    __declspec(dllimport) char* __cdecl gets_s(
                              char* _Buffer,
                              rsize_t _Size
        );


    __declspec(dllimport) errno_t __cdecl tmpfile_s(
                                     FILE** _Stream
        );



    __declspec(dllimport) errno_t __cdecl tmpnam_s(
                              char* _Buffer,
                              rsize_t _Size
        );



__declspec(dllimport) void __cdecl clearerr(
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl fclose(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fcloseall(void);


__declspec(dllimport) FILE* __cdecl _fdopen(
           int _FileHandle,
           char const* _Mode
    );


__declspec(dllimport) int __cdecl feof(
         FILE* _Stream
    );


__declspec(dllimport) int __cdecl ferror(
         FILE* _Stream
    );


__declspec(dllimport) int __cdecl fflush(
                FILE* _Stream
    );



__declspec(dllimport) int __cdecl fgetc(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fgetchar(void);



__declspec(dllimport) int __cdecl fgetpos(
            FILE* _Stream,
            fpos_t* _Position
    );



__declspec(dllimport) char* __cdecl fgets(
                              char* _Buffer,
                              int _MaxCount,
                              FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fileno(
         FILE* _Stream
    );


__declspec(dllimport) int __cdecl _flushall(void);


__declspec(dllimport) FILE* __cdecl fopen(
           char const* _FileName,
           char const* _Mode
    );




__declspec(dllimport) int __cdecl fputc(
            int _Character,
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fputchar(
         int _Character
    );



__declspec(dllimport) int __cdecl fputs(
            char const* _Buffer,
            FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl fread(
                                                     void* _Buffer,
                                                     size_t _ElementSize,
                                                     size_t _ElementCount,
                                                     FILE* _Stream
    );



__declspec(dllimport) FILE* __cdecl freopen(
            char const* _FileName,
            char const* _Mode,
            FILE* _Stream
    );


__declspec(dllimport) FILE* __cdecl _fsopen(
           char const* _FileName,
           char const* _Mode,
           int _ShFlag
    );



__declspec(dllimport) int __cdecl fsetpos(
            FILE* _Stream,
            fpos_t const* _Position
    );



__declspec(dllimport) int __cdecl fseek(
            FILE* _Stream,
            long _Offset,
            int _Origin
    );



__declspec(dllimport) int __cdecl _fseeki64(
            FILE* _Stream,
            __int64 _Offset,
            int _Origin
    );



__declspec(dllimport) long __cdecl ftell(
            FILE* _Stream
    );



__declspec(dllimport) __int64 __cdecl _ftelli64(
            FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl fwrite(
                                                   void const* _Buffer,
                                                   size_t _ElementSize,
                                                   size_t _ElementCount,
                                                   FILE* _Stream
    );



__declspec(dllimport) int __cdecl getc(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl getchar(void);


__declspec(dllimport) int __cdecl _getmaxstdio(void);

extern "C++" { template <size_t _Size> inline char* __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }




__declspec(dllimport) int __cdecl _getw(
            FILE* _Stream
    );

__declspec(dllimport) void __cdecl perror(
               char const* _ErrorMessage
    );





    __declspec(dllimport) int __cdecl _pclose(
                FILE* _Stream
        );


    __declspec(dllimport) FILE* __cdecl _popen(
               char const* _Command,
               char const* _Mode
        );





__declspec(dllimport) int __cdecl putc(
            int _Character,
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl putchar(
         int _Character
    );


__declspec(dllimport) int __cdecl puts(
           char const* _Buffer
    );



__declspec(dllimport) int __cdecl _putw(
            int _Word,
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl remove(
           char const* _FileName
    );


__declspec(dllimport) int __cdecl rename(
           char const* _OldFileName,
           char const* _NewFileName
    );

__declspec(dllimport) int __cdecl _unlink(
           char const* _FileName
    );



    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_unlink" ". See online help for details."))
    __declspec(dllimport) int __cdecl unlink(
               char const* _FileName
        );





__declspec(dllimport) void __cdecl rewind(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _rmtmp(void);


__declspec(dllimport) void __cdecl setbuf(
                                                        FILE* _Stream,
                                                        char* _Buffer
    );


__declspec(dllimport) int __cdecl _setmaxstdio(
         int _Maximum
    );



__declspec(dllimport) int __cdecl setvbuf(
                                 FILE* _Stream,
                                 char* _Buffer,
                                 int _Mode,
                                 size_t _Size
    );







__declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam(
               char const* _DirectoryName,
               char const* _FilePrefix
    );






__declspec(dllimport) FILE* __cdecl tmpfile(void);

extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }




 __declspec(dllimport) char* __cdecl tmpnam( char *_Buffer);







__declspec(dllimport) int __cdecl ungetc(
            int _Character,
            FILE* _Stream
    );
# 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
__declspec(dllimport) void __cdecl _lock_file(
            FILE* _Stream
    );

__declspec(dllimport) void __cdecl _unlock_file(
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl _fclose_nolock(
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl _fflush_nolock(
                FILE* _Stream
    );



__declspec(dllimport) int __cdecl _fgetc_nolock(
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl _fputc_nolock(
            int _Character,
            FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl _fread_nolock(
                                                     void* _Buffer,
                                                     size_t _ElementSize,
                                                     size_t _ElementCount,
                                                     FILE* _Stream
    );



__declspec(dllimport) size_t __cdecl _fread_nolock_s(
                                                                     void* _Buffer,
                                                                     size_t _BufferSize,
                                                                     size_t _ElementSize,
                                                                     size_t _ElementCount,
                                                                     FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fseek_nolock(
            FILE* _Stream,
            long _Offset,
            int _Origin
    );


__declspec(dllimport) int __cdecl _fseeki64_nolock(
            FILE* _Stream,
            __int64 _Offset,
            int _Origin
    );


__declspec(dllimport) long __cdecl _ftell_nolock(
            FILE* _Stream
    );


__declspec(dllimport) __int64 __cdecl _ftelli64_nolock(
            FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl _fwrite_nolock(
                                                   void const* _Buffer,
                                                   size_t _ElementSize,
                                                   size_t _ElementCount,
                                                   FILE* _Stream
    );


__declspec(dllimport) int __cdecl _getc_nolock(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _putc_nolock(
            int _Character,
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _ungetc_nolock(
            int _Character,
            FILE* _Stream
    );
# 583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
__declspec(dllimport) int* __cdecl __p__commode(void);
# 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
__declspec(dllimport) int __cdecl __stdio_common_vfprintf(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );

__declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__inline int __cdecl _vfprintf_l(
             FILE* const _Stream,
             char const* const _Format,
             _locale_t const _Locale,
             va_list _ArgList
    )



{
    return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfprintf(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfprintf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfprintf_s_l(
             FILE* const _Stream,
             char const* const _Format,
             _locale_t const _Locale,
             va_list _ArgList
    )



{
    return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}





    __inline int __cdecl vfprintf_s(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
    }





__inline int __cdecl _vfprintf_p_l(
             FILE* const _Stream,
             char const* const _Format,
             _locale_t const _Locale,
             va_list _ArgList
    )



{
    return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl _vfprintf_p(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vprintf_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vprintf(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _vprintf_s_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}





    __inline int __cdecl vprintf_s(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }





__inline int __cdecl _vprintf_p_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl _vprintf_p(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _fprintf_l(
                                            FILE* const _Stream,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl fprintf(
                                  FILE* const _Stream,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


__declspec(dllimport) int __cdecl _set_printf_count_output(
         int _Value
    );

__declspec(dllimport) int __cdecl _get_printf_count_output(void);


__inline int __cdecl _fprintf_s_l(
                                            FILE* const _Stream,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl fprintf_s(
                                      FILE* const _Stream,
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _fprintf_p_l(
                                            FILE* const _Stream,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fprintf_p(
                                  FILE* const _Stream,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _printf_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl printf(
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _printf_s_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl printf_s(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _printf_p_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _printf_p(
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
# 1040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
__declspec(dllimport) int __cdecl __stdio_common_vfscanf(
                                           unsigned __int64 _Options,
                                           FILE* _Stream,
                                           char const* _Format,
                                           _locale_t _Locale,
                                           va_list _Arglist
    );


__inline int __cdecl _vfscanf_l(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfscanf(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfscanf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfscanf_s_l(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}






    __inline int __cdecl vfscanf_s(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
    }





__inline int __cdecl _vscanf_l(
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vscanf(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}



__inline int __cdecl _vscanf_s_l(
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}





    __inline int __cdecl vscanf_s(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }





__inline int __cdecl _fscanf_l(
                                           FILE* const _Stream,
                                           char const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl fscanf(
                                 FILE* const _Stream,
                                 char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fscanf_s_l(
                                             FILE* const _Stream,
                                             char const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl fscanf_s(
                                       FILE* const _Stream,
                                       char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _scanf_l(
                                           char const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl scanf(
                                 char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _scanf_s_l(
                                             char const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl scanf_s(
                                       char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 1333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
__declspec(dllimport) int __cdecl __stdio_common_vsprintf(
                                            unsigned __int64 _Options,
                                            char* _Buffer,
                                            size_t _BufferCount,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(
                                            unsigned __int64 _Options,
                                            char* _Buffer,
                                            size_t _BufferCount,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(
                                            unsigned __int64 _Options,
                                            char* _Buffer,
                                            size_t _BufferCount,
                                            size_t _MaxCount,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(
                                            unsigned __int64 _Options,
                                            char* _Buffer,
                                            size_t _BufferCount,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );



__inline int __cdecl _vsnprintf_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsnprintf(
                                             char* const _Buffer,
                                             size_t const _BufferCount,
                                             char const* const _Format,
                                             va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)
}
# 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
__inline int __cdecl vsnprintf(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsprintf_l(
                           char* const _Buffer,
                           char const* const _Format,
                           _locale_t const _Locale,
                           va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
#pragma warning(pop)
}




__inline int __cdecl vsprintf(
                                  char* const _Buffer,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
#pragma warning(pop)
}




__inline int __cdecl _vsprintf_s_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}






    __inline int __cdecl vsprintf_s(
                                      char* const _Buffer,
                                      size_t const _BufferCount,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }


    extern "C++" { template <size_t _Size> inline int __cdecl vsprintf_s(char (&_Buffer)[_Size], char const* _Format, va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
# 1532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
__inline int __cdecl _vsprintf_p_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsprintf_p(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}




__inline int __cdecl _vsnprintf_s_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            size_t const _MaxCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsnprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsnprintf_s(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  size_t const _MaxCount,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}


extern "C++" { template <size_t _Size> inline int __cdecl _vsnprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
    __inline int __cdecl vsnprintf_s(
                                      char* const _Buffer,
                                      size_t const _BufferCount,
                                      size_t const _MaxCount,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }


    extern "C++" { template <size_t _Size> inline int __cdecl vsnprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
__inline int __cdecl _vscprintf_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}



__inline int __cdecl _vscprintf(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vscprintf_l(_Format, 0, _ArgList);
}



__inline int __cdecl _vscprintf_p_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}



__inline int __cdecl _vscprintf_p(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vscprintf_p_l(_Format, 0, _ArgList);
}



__inline int __cdecl _vsnprintf_c_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsnprintf_c(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}



__inline int __cdecl _sprintf_l(
                                            char* const _Buffer,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl sprintf(
                                  char* const _Buffer,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}


#pragma warning(push)
#pragma warning(disable: 4996)
 int __cdecl sprintf( char *_Buffer, char const* _Format, ...); int __cdecl vsprintf( char *_Buffer, char const* _Format, va_list _Args);





#pragma warning(pop)



__inline int __cdecl _sprintf_s_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}






    __inline int __cdecl sprintf_s(
                                      char* const _Buffer,
                                      size_t const _BufferCount,
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




extern "C++" {
# 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
#pragma warning(push)
# 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
;
# 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
#pragma warning(disable: 4793)
# 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
; template <size_t _Size> inline int __cdecl sprintf_s(char (&_Buffer)[_Size], char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); }
# 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
#pragma warning(pop)
# 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
; }







__inline int __cdecl _sprintf_p_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _sprintf_p(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snprintf_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}
# 1932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
__inline int __cdecl snprintf(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress: 28719)
 _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _snprintf(
                                             char* const _Buffer,
                                             size_t const _BufferCount,
                                             char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress: 28719)
 _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


 int __cdecl _snprintf( char *_Buffer, size_t _BufferCount, char const* _Format, ...); int __cdecl _vsnprintf( char *_Buffer, size_t _BufferCount, char const* _Format, va_list _Args);
# 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
__inline int __cdecl _snprintf_c_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snprintf_c(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snprintf_s_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            size_t const _MaxCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snprintf_s(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  size_t const _MaxCount,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


extern "C++" {
# 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
#pragma warning(push)
# 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
;
# 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
#pragma warning(disable: 4793)
# 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
; template <size_t _Size> inline int __cdecl _snprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); }
# 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
#pragma warning(pop)
# 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
; }
# 2073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
__inline int __cdecl _scprintf_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _scprintf(
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _scprintf_p_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _scprintf_p(
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscprintf_p(_Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}







__declspec(dllimport) int __cdecl __stdio_common_vsscanf(
                                           unsigned __int64 _Options,
                                           char const* _Buffer,
                                           size_t _BufferCount,
                                           char const* _Format,
                                           _locale_t _Locale,
                                           va_list _ArgList
    );


__inline int __cdecl _vsscanf_l(
                                  char const* const _Buffer,
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}



__inline int __cdecl vsscanf(
                                  char const* const _Buffer,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
}



__inline int __cdecl _vsscanf_s_l(
                                  char const* const _Buffer,
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}




#pragma warning(push)
#pragma warning(disable: 6530)


 __inline int __cdecl vsscanf_s(
                                      char const* const _Buffer,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }


    extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(char const (&_Buffer)[_Size], char const* _Format, va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }






#pragma warning(pop)




__inline int __cdecl _sscanf_l(
                                           char const* const _Buffer,
                                           char const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl sscanf(
                                 char const* const _Buffer,
                                 char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _sscanf_s_l(
                                             char const* const _Buffer,
                                             char const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl sscanf_s(
                                       char const* const _Buffer,
                                       char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = vsscanf_s(_Buffer, _Format, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }




#pragma warning(push)
#pragma warning(disable: 6530)


__inline int __cdecl _snscanf_l(
                                           char const* const _Buffer,
                                           size_t const _BufferCount,
                                           char const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _snscanf(
                                           char const* const _Buffer,
                                           size_t const _BufferCount,
                                           char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snscanf_s_l(
                                             char const* const _Buffer,
                                             size_t const _BufferCount,
                                             char const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _snscanf_s(
                                           char const* const _Buffer,
                                           size_t const _BufferCount,
                                           char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}


#pragma warning(pop)
# 2437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tempnam" ". See online help for details."))
    __declspec(dllimport) char* __cdecl tempnam(
                   char const* _Directory,
                   char const* _FilePrefix
        );





                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcloseall" ". See online help for details.")) __declspec(dllimport) int __cdecl fcloseall(void);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fdopen" ". See online help for details.")) __declspec(dllimport) FILE* __cdecl fdopen( int _FileHandle, char const* _Format);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fgetchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fgetchar(void);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fileno" ". See online help for details.")) __declspec(dllimport) int __cdecl fileno( FILE* _Stream);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_flushall" ". See online help for details.")) __declspec(dllimport) int __cdecl flushall(void);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fputchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fputchar( int _Ch);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_getw" ". See online help for details.")) __declspec(dllimport) int __cdecl getw( FILE* _Stream);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putw" ". See online help for details.")) __declspec(dllimport) int __cdecl putw( int _Ch, FILE* _Stream);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_rmtmp" ". See online help for details.")) __declspec(dllimport) int __cdecl rmtmp(void);





}
# 2461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 3
#pragma pack(pop)
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio" 2 3
# 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio" 3
typedef FILE FILE;


namespace std {
using :: FILE; using :: _Mbstatet;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;

using :: snprintf; using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;
}
# 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum" 2 3


# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 1 3






# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring" 1 3
# 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring" 3
namespace std {
using :: size_t; using :: memchr; using :: memcmp;
using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;
}
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception" 1 3






# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef" 1 3
# 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef" 3
namespace std {
using :: ptrdiff_t; using :: size_t;
}



namespace std {
typedef double max_align_t;
}

using ::std:: max_align_t;
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 2 3



# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Elem>
 class initializer_list
 {
public:
 typedef _Elem value_type;
 typedef const _Elem& reference;
 typedef const _Elem& const_reference;
 typedef size_t size_type;

 typedef const _Elem* iterator;
 typedef const _Elem* const_iterator;

 constexpr initializer_list() noexcept
  : _First(0), _Last(0)
  {
  }

 constexpr initializer_list(const _Elem *_First_arg,
  const _Elem *_Last_arg) noexcept
  : _First(_First_arg), _Last(_Last_arg)
  {
  }

 constexpr const _Elem *begin() const noexcept
  {
  return (_First);
  }

 constexpr const _Elem *end() const noexcept
  {
  return (_Last);
  }

 constexpr size_t size() const noexcept
  {
  return ((size_t)(_Last - _First));
  }

private:
 const _Elem *_First;
 const _Elem *_Last;
 };


template<class _Elem> inline
 constexpr const _Elem *begin(initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.begin());
 }


template<class _Elem> inline
 constexpr const _Elem *end(initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.end());
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)
# 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 3
namespace std {
# 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 3
template<bool,
 class _Ty1,
 class _Ty2>
 struct _If
 {
 typedef _Ty2 type;
 };

template<class _Ty1,
 class _Ty2>
 struct _If<true, _Ty1, _Ty2>
 {
 typedef _Ty1 type;
 };

template<class _Ty>
 struct _Always_false
 {
 static constexpr bool value = false;
 };





template<class _Arg,
 class _Result>
 struct unary_function
 {
 typedef _Arg argument_type;
 typedef _Result result_type;
 };


template<class _Arg1,
 class _Arg2,
 class _Result>
 struct binary_function
 {
 typedef _Arg1 first_argument_type;
 typedef _Arg2 second_argument_type;
 typedef _Result result_type;
 };



template<class _Ty = void>
 struct plus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left + _Right);
  }
 };


template<class _Ty = void>
 struct minus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left - _Right);
  }
 };


template<class _Ty = void>
 struct multiplies
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left * _Right);
  }
 };


template<class _Ty = void>
 struct equal_to
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left == _Right);
  }
 };


template<class _Ty = void>
 struct less
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left < _Right);
  }
 };


template<>
 struct plus<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   + static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   + static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct minus<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   - static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   - static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct multiplies<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   * static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   * static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct equal_to<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   == static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   == static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct less<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   < static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   < static_cast<_Ty2&&>(_Right));
  }
 };


}



namespace std {

inline size_t _Hash_seq(const unsigned char *_First, size_t _Count)
 {

 static_assert(sizeof(size_t) == 8, "This code is for 64-bit size_t.");
 const size_t _FNV_offset_basis = 14695981039346656037ULL;
 const size_t _FNV_prime = 1099511628211ULL;







 size_t _Val = _FNV_offset_basis;
 for (size_t _Next = 0; _Next < _Count; ++_Next)
  {
  _Val ^= (size_t)_First[_Next];
  _Val *= _FNV_prime;
  }
 return (_Val);
 }


template<class _Kty>
 struct _Bitwise_hash
 {
 typedef _Kty argument_type;
 typedef size_t result_type;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Hash_seq((const unsigned char *)&_Keyval, sizeof (_Kty)));
  }
 };


template<class _Kty>
 struct hash
  : public _Bitwise_hash<_Kty>
 {
 static constexpr bool _Value = __is_enum(_Kty);
 static_assert(_Value,
  "The C++ Standard doesn't provide a hash for this type.");
 };
template<>
 struct hash<bool>
  : public _Bitwise_hash<bool>
 {
 };

template<>
 struct hash<char>
  : public _Bitwise_hash<char>
 {
 };

template<>
 struct hash<signed char>
  : public _Bitwise_hash<signed char>
 {
 };

template<>
 struct hash<unsigned char>
  : public _Bitwise_hash<unsigned char>
 {
 };

template<>
 struct hash<char16_t>
  : public _Bitwise_hash<char16_t>
 {
 };

template<>
 struct hash<char32_t>
  : public _Bitwise_hash<char32_t>
 {
 };


template<>
 struct hash<wchar_t>
  : public _Bitwise_hash<wchar_t>
 {
 };


template<>
 struct hash<short>
  : public _Bitwise_hash<short>
 {
 };

template<>
 struct hash<unsigned short>
  : public _Bitwise_hash<unsigned short>
 {
 };

template<>
 struct hash<int>
  : public _Bitwise_hash<int>
 {
 };

template<>
 struct hash<unsigned int>
  : public _Bitwise_hash<unsigned int>
 {
 };

template<>
 struct hash<long>
  : public _Bitwise_hash<long>
 {
 };

template<>
 struct hash<unsigned long>
  : public _Bitwise_hash<unsigned long>
 {
 };

template<>
 struct hash<long long>
  : public _Bitwise_hash<long long>
 {
 };

template<>
 struct hash<unsigned long long>
  : public _Bitwise_hash<unsigned long long>
 {
 };

template<>
 struct hash<float>
  : public _Bitwise_hash<float>
 {
 typedef float _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<>
 struct hash<double>
  : public _Bitwise_hash<double>
 {
 typedef double _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<>
 struct hash<long double>
  : public _Bitwise_hash<long double>
 {
 typedef long double _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<class _Ty>
 struct hash<_Ty *>
  : public _Bitwise_hash<_Ty *>
 {
 };
}



namespace std {
namespace tr1 {
using ::std:: hash;
}
}
# 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 3
namespace std {

template<class... _Types>
 struct _Arg_types
 {
 };

template<class _Ty1>
 struct _Arg_types<_Ty1>
 {
 typedef _Ty1 argument_type;
 };

template<class _Ty1,
 class _Ty2>
 struct _Arg_types<_Ty1, _Ty2>
 {
 typedef _Ty1 first_argument_type;
 typedef _Ty2 second_argument_type;
 };


template<class _Ty>
 struct _Is_function
 {
 typedef false_type _Bool_type;
 static constexpr bool _Weird = false;
 };
# 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 3
template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };
# 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 3
template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };


template<class _Ty>
 struct is_function
  : _Is_function<_Ty>::_Bool_type
 {
 };


template<class _Ty>
 constexpr bool is_function_v = is_function<_Ty>::value;
# 722 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 3
template<class _Ty> inline
 constexpr _Ty *addressof(_Ty& _Val) noexcept
 {
 return (__builtin_addressof(_Val));
 }




template<class _Ptrty> inline
 auto _Unfancy(_Ptrty _Ptr)
 {
 return (::std:: addressof(*_Ptr));
 }

template<class _Ty> inline
 _Ty * _Unfancy(_Ty * _Ptr)
 {
 return (_Ptr);
 }

}

#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4180 4296)

namespace std {
template<class _Ty>
 struct _Is_memfunptr
 {
 typedef false_type _Bool_type;
 };
# 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 3
template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };
# 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 3
template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };



template<class _Ty>
 struct is_void
  : false_type
 {
 };
# 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 3
template<> struct is_void< void> : true_type { }; template<> struct is_void<const void> : true_type { }; template<> struct is_void<volatile void> : true_type { }; template<> struct is_void<const volatile void> : true_type { };




template<class _Ty>
 struct add_const
 {
 typedef const _Ty type;
 };


template<class _Ty>
 struct add_volatile
 {
 typedef volatile _Ty type;
 };


template<class _Ty>
 struct add_cv
 {
 typedef const volatile _Ty type;
 };


template<class _Ty,
 bool = _Is_function<_Ty>::_Weird || is_void<_Ty>::value>
 struct _Add_reference
 {
 typedef _Ty _Lvalue;
 typedef _Ty _Rvalue;
 };

template<class _Ty>
 struct _Add_reference<_Ty, false>
 {
 typedef _Ty& _Lvalue;
 typedef _Ty&& _Rvalue;
 };


template<class _Ty>
 struct add_lvalue_reference
 {
 typedef typename _Add_reference<_Ty>::_Lvalue type;
 };


template<class _Ty>
 struct add_rvalue_reference
 {
 typedef typename _Add_reference<_Ty>::_Rvalue type;
 };


template<class _Ty>
 typename add_rvalue_reference<_Ty>::type
  declval() noexcept;


template<class _Ty>
 struct remove_extent
 {
 typedef _Ty type;
 };

template<class _Ty, size_t _Ix>
 struct remove_extent<_Ty[_Ix]>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_extent<_Ty[]>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct remove_all_extents
 {
 typedef _Ty type;
 };

template<class _Ty, size_t _Ix>
 struct remove_all_extents<_Ty[_Ix]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };

template<class _Ty>
 struct remove_all_extents<_Ty[]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };


template<class _Ty>
 struct remove_pointer
 {
 typedef _Ty type;
 };
# 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 3
template<class _Ty> struct remove_pointer<_Ty *> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *volatile> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const volatile> { typedef _Ty type; };



template<class _Ty,
 bool = _Is_function<_Ty>::_Weird>
 struct _Add_pointer
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct _Add_pointer<_Ty, false>
 {
 typedef typename remove_reference<_Ty>::type *type;
 };

template<class _Ty>
 struct add_pointer
 {
 typedef typename _Add_pointer<_Ty>::type type;
 };



template<class _Ty>
 struct is_array
  : false_type
 {
 };

template<class _Ty, size_t _Nx>
 struct is_array<_Ty[_Nx]>
  : true_type
 {
 };

template<class _Ty>
 struct is_array<_Ty[]>
  : true_type
 {
 };


template<class _Ty>
 struct is_lvalue_reference
  : false_type
 {
 };

template<class _Ty>
 struct is_lvalue_reference<_Ty&>
  : true_type
 {
 };


template<class _Ty>
 struct is_rvalue_reference
  : false_type
 {
 };

template<class _Ty>
 struct is_rvalue_reference<_Ty&&>
  : true_type
 {
 };


template<class _Ty>
 struct is_reference
  : _Cat_base<is_lvalue_reference<_Ty>::value
  || is_rvalue_reference<_Ty>::value>
 {
 };



template<class _Ty,
 bool _Pmf = _Is_memfunptr<_Ty>::_Bool_type::value>
 struct _Is_member_object_pointer
  : false_type
 {
 };

template<class _Ty1,
 class _Ty2>
 struct _Is_member_object_pointer<_Ty1 _Ty2::*, false>
  : true_type
 {
 typedef _Ty2 _Class_type;
 };

template<class _Ty>
 struct is_member_object_pointer
  : _Is_member_object_pointer<typename remove_cv<_Ty>::type>::type
 {
 };


template<class _Ty>
 struct is_member_function_pointer
  : _Is_memfunptr<typename remove_cv<_Ty>::type>::_Bool_type
 {
 };


template<class _Ty>
 struct _Is_pointer
  : false_type
 {
 };

template<class _Ty>
 struct _Is_pointer<_Ty *>
  : _Cat_base<!is_member_object_pointer<_Ty *>::value
  && !is_member_function_pointer<_Ty *>::value>
 {
 };

template<class _Ty>
 struct is_pointer
  : _Is_pointer<typename remove_cv<_Ty>::type>
 {
 };



template<class _Ty>
 struct is_null_pointer
  : _Cat_base<is_same<typename remove_cv<_Ty>::type, nullptr_t>::value>
 {
 };


template<class _Ty>
 struct is_union
  : _Cat_base<__is_union(_Ty)>
 {
 };


template<class _Ty>
 struct is_class
  : _Cat_base<__is_class(_Ty)>
 {
 };


template<class _Ty>
 struct is_fundamental
  : _Cat_base<is_arithmetic<_Ty>::value
  || is_void<_Ty>::value
  || is_null_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_object
  : _Cat_base<!is_function<_Ty>::value
  && !is_reference<_Ty>::value
  && !is_void<_Ty>::value>
 {
 };



template<class _From,
 class _To>
 struct is_convertible
  : _Cat_base<__is_convertible_to(_From, _To)>
 {
 };


template<class _Ty>
 struct is_enum
  : _Cat_base<__is_enum(_Ty)>
 {
 };


template<class _Ty>
 struct is_compound
  : _Cat_base<!is_fundamental<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_member_pointer
  : _Cat_base<is_member_object_pointer<_Ty>::value
  || is_member_function_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_scalar
  : _Cat_base<is_arithmetic<_Ty>::value
  || is_enum<_Ty>::value
  || is_pointer<_Ty>::value
  || is_member_pointer<_Ty>::value
  || is_null_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_const
  : false_type
 {
 };

template<class _Ty>
 struct is_const<const _Ty>
  : true_type
 {
 };


template<class _Ty>
 struct is_volatile
  : false_type
 {
 };

template<class _Ty>
 struct is_volatile<volatile _Ty>
  : true_type
 {
 };


template<class _Ty>
 struct is_pod
  : _Cat_base<__is_pod(_Ty)>
 {
 };


template<class _Ty>
 struct is_empty
  : _Cat_base<__is_empty(_Ty)>
 {
 };


template<class _Ty>
 struct is_polymorphic
  : _Cat_base<__is_polymorphic(_Ty)>
 {
 };


template<class _Ty>
 struct is_abstract
  : _Cat_base<__is_abstract(_Ty)>
 {
 };


template<class _Ty>
 struct is_final
  : _Cat_base<__is_final(_Ty)>
 {
 };


template<class _Ty>
 struct is_standard_layout
  : _Cat_base<__is_standard_layout(_Ty)>
 {
 };


template<class _Ty>
 struct is_literal_type
  : _Cat_base<__is_literal_type(_Ty)>
 {
 };


template<class _Ty>
 struct is_trivial
  : _Cat_base<__is_trivial(_Ty)>
 {
 };


template<class _Ty>
 struct is_trivially_copyable
  : _Cat_base<__is_trivially_copyable(_Ty)>
 {
 };


template<class _Ty>
 struct has_virtual_destructor
  : _Cat_base<__has_virtual_destructor(_Ty)>
 {
 };




template<class _Ty,
 class... _Args>
 struct is_constructible
  : _Cat_base<__is_constructible(_Ty, _Args...)>
 {
 };


template<class _Ty>
 struct is_copy_constructible
  : is_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_default_constructible
  : is_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_move_constructible
  : is_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _To,
 class _From>
 struct is_assignable
  : integral_constant<bool, __is_assignable(_To, _From)>
 {
 };


template<class _Ty>
 struct is_copy_assignable
  : is_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_move_assignable
  : is_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _Ty>
 struct is_destructible
  : _Cat_base<__is_destructible(_Ty)>
 {
 };




template<class _Ty,
 class... _Args>
 struct is_trivially_constructible
  : _Cat_base<__is_trivially_constructible(_Ty, _Args...)>
 {
 };


template<class _Ty>
 struct is_trivially_copy_constructible
  : is_trivially_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_trivially_default_constructible
  : is_trivially_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_trivially_move_constructible
  : is_trivially_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _To,
 class _From>
 struct is_trivially_assignable
  : _Cat_base<__is_trivially_assignable(_To, _From)>
 {
 };


template<class _Ty>
 struct is_trivially_copy_assignable
  : is_trivially_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_trivially_move_assignable
  : is_trivially_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _Ty>
 struct is_trivially_destructible
  : _Cat_base<__has_trivial_destructor(_Ty)>
 {
 };




template<class _Ty,
 class... _Args>
 struct is_nothrow_constructible
  : _Cat_base<__is_nothrow_constructible(_Ty, _Args...)>
 {
 };


template<class _Ty>
 struct is_nothrow_copy_constructible
  : is_nothrow_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_nothrow_default_constructible
  : is_nothrow_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_nothrow_move_constructible
  : is_nothrow_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _To,
 class _From>
 struct is_nothrow_assignable
  : _Cat_base<__is_nothrow_assignable(_To, _From)>
 {
 };


template<class _Ty>
 struct is_nothrow_copy_assignable
  : is_nothrow_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_nothrow_move_assignable
  : is_nothrow_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _Ty>
 struct is_nothrow_destructible
  : _Cat_base<__is_nothrow_destructible(_Ty)>
 {
 };


template<class _Ty,
 bool = is_integral<_Ty>::value>
 struct _Sign_base
 {
 typedef typename remove_cv<_Ty>::type _Uty;
 typedef _Cat_base<_Uty(-1) < _Uty(0)> _Signed;
 typedef _Cat_base<_Uty(0) < _Uty(-1)> _Unsigned;
 };

template<class _Ty>
 struct _Sign_base<_Ty, false>
 {

 typedef is_floating_point<_Ty> _Signed;
 typedef false_type _Unsigned;
 };

template<class _Ty>
 struct is_signed
  : _Sign_base<_Ty>::_Signed
 {
 };


template<class _Ty>
 struct is_unsigned
  : _Sign_base<_Ty>::_Unsigned
 {
 };


template<class _Ty>
 struct _Change_sign
 {
 static_assert(
  ((is_integral<_Ty>::value || is_enum<_Ty>::value)
   && !is_same<_Ty, bool>::value),
  "make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
  "cv-qualified) integral type or enumeration but not a bool type.");

 typedef
  typename _If<is_same<_Ty, signed char>::value
   || is_same<_Ty, unsigned char >::value, signed char,
  typename _If<is_same<_Ty, short >::value
   || is_same<_Ty, unsigned short >::value, short,
  typename _If<is_same<_Ty, int >::value
   || is_same<_Ty, unsigned int >::value, int,
  typename _If<is_same<_Ty, long >::value
   || is_same<_Ty, unsigned long >::value, long,
  typename _If<is_same<_Ty, long long >::value
   || is_same<_Ty, unsigned long long>::value, long long,
  typename _If<sizeof (_Ty) == sizeof (signed char), signed char,
  typename _If<sizeof (_Ty) == sizeof (short ), short,
  typename _If<sizeof (_Ty) == sizeof (int ), int,
  typename _If<sizeof (_Ty) == sizeof (long ), long,
   long long
  >::type>::type>::type>::type>::type>::type>::type>::type>::type
   _Signed;

 typedef
  typename _If<is_same<_Signed, signed char>::value, unsigned char,
  typename _If<is_same<_Signed, short >::value, unsigned short,
  typename _If<is_same<_Signed, int >::value, unsigned int,
  typename _If<is_same<_Signed, long >::value, unsigned long,
   unsigned long long
  >::type>::type>::type>::type
   _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<const _Ty>
 {
 typedef const typename _Change_sign<_Ty>::_Signed _Signed;
 typedef const typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<volatile _Ty>
 {
 typedef volatile typename _Change_sign<_Ty>::_Signed _Signed;
 typedef volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<const volatile _Ty>
 {
 typedef const volatile typename _Change_sign<_Ty>::_Signed _Signed;
 typedef const volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };


template<class _Ty>
 struct make_signed
 {
 typedef typename _Change_sign<_Ty>::_Signed type;
 };


template<class _Ty>
 struct make_unsigned
 {
 typedef typename _Change_sign<_Ty>::_Unsigned type;
 };



template<class _Ty>
 struct alignment_of
  : integral_constant<size_t, alignof(_Ty)>
 {
 };






template<class _Ty,
 size_t _Len>
 union _Align_type
 {
 _Ty _Val;
 char _Pad[_Len];
 };

template<size_t _Len,
 size_t _Align,
 class _Ty,
 bool _Ok>
 struct _Aligned;

template<size_t _Len,
 size_t _Align,
 class _Ty>
 struct _Aligned<_Len, _Align, _Ty, true>
 {
 typedef _Align_type<_Ty, _Len> type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, double, false>
 {
 typedef _Align_type<max_align_t, _Len> type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, int, false>
 {
 typedef typename _Aligned<_Len, _Align, double, _Align <= alignment_of<double>::value>::type type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, short, false>
 {
 typedef typename _Aligned<_Len, _Align, int, _Align <= alignment_of<int>::value>::type type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, char, false>
 {
 typedef typename _Aligned<_Len, _Align, short, _Align <= alignment_of<short>::value>::type type;
 };

template<size_t _Len,
 size_t _Align = alignment_of<max_align_t>::value>
 struct aligned_storage
 {
 typedef typename _Aligned<_Len, _Align, char, _Align <= alignment_of<char>::value>::type type;
 };





template<size_t... _Vals>
 struct _Maximum;

template<>
 struct _Maximum<>
 {
 static constexpr size_t value = 0;
 };

template<size_t _Val>
 struct _Maximum<_Val>
 {
 static constexpr size_t value = _Val;
 };

template<size_t _First,
 size_t _Second,
 size_t... _Rest>
 struct _Maximum<_First, _Second, _Rest...>
  : _Maximum<(_First < _Second ? _Second : _First), _Rest...>
 {
 };

template<size_t _Len,
 class... _Types>
 struct aligned_union
 {
 static constexpr size_t _Max_len = _Maximum<
  _Len, sizeof(_Types)...>::value;
 static constexpr size_t alignment_value = _Maximum<
  alignment_of<_Types>::value...>::value;
 typedef typename aligned_storage<_Max_len, alignment_value>::type type;
 };


template<class _Ty>
 struct underlying_type
 {
 typedef __underlying_type(_Ty) type;
 };


template<class _Ty>
 struct rank
  : integral_constant<size_t, 0>
 {
 };

template<class _Ty, size_t _Ix>
 struct rank<_Ty[_Ix]>
  : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };

template<class _Ty>
 struct rank<_Ty[]>
  : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };


template<class _Ty, unsigned int _Nx>
 struct _Extent
  : integral_constant<size_t, 0>
 {
 };

template<class _Ty, size_t _Ix>
 struct _Extent<_Ty[_Ix], 0>
  : integral_constant<size_t, _Ix>
 {
 };

template<class _Ty, unsigned int _Nx, size_t _Ix>
 struct _Extent<_Ty[_Ix], _Nx>
  : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx>
 struct _Extent<_Ty[], _Nx>
  : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx = 0>
 struct extent
  : _Extent<_Ty, _Nx>
 {
 };


template<class _Base,
 class _Der>
 struct is_base_of
  : _Cat_base<__is_base_of(_Base, _Der)>
 {
 };


template<class _Ty>
 struct decay
 {
 typedef typename remove_reference<_Ty>::type _Ty1;

 typedef typename _If<is_array<_Ty1>::value,
  typename remove_extent<_Ty1>::type *,
  typename _If<is_function<_Ty1>::value,
   typename add_pointer<_Ty1>::type,
   typename remove_cv<_Ty1>::type>::type>::type type;
 };


template<class...>
 struct _Conjunction;

template<bool,
 class _Lhs,
 class... _Traits>
 struct _Choose_conjunction
 {
 typedef _Lhs type;
 };

template<class _Lhs,
 class... _Traits>
 struct _Choose_conjunction<true, _Lhs, _Traits...>
 {
 typedef typename _Conjunction<_Traits...>::type type;
 };

template<>
 struct _Conjunction<>
 {
 typedef true_type type;
 };

template<class _Trait>
 struct _Conjunction<_Trait>
 {
 typedef _Trait type;
 };

template<class _Lhs,
 class... _Traits>
 struct _Conjunction<_Lhs, _Traits...>
 {
 typedef typename _Choose_conjunction<_Lhs::value, _Lhs, _Traits...>::type type;
 };

template<class... _Traits>
 struct conjunction
  : _Conjunction<_Traits...>::type
 {


 };


template<class...>
 struct _Disjunction;

template<bool,
 class _Lhs,
 class... _Traits>
 struct _Choose_disjunction
 {
 typedef _Lhs type;
 };

template<class _Lhs,
 class... _Traits>
 struct _Choose_disjunction<false, _Lhs, _Traits...>
 {
 typedef typename _Disjunction<_Traits...>::type type;
 };

template<>
 struct _Disjunction<>
 {
 typedef false_type type;
 };

template<class _Trait>
 struct _Disjunction<_Trait>
 {
 typedef _Trait type;
 };

template<class _Lhs,
 class... _Traits>
 struct _Disjunction<_Lhs, _Traits...>
 {
 typedef typename _Choose_disjunction<_Lhs::value, _Lhs, _Traits...>::type type;
 };

template<class... _Traits>
 struct disjunction
  : _Disjunction<_Traits...>::type
 {


 };


template<class _Trait>
 struct negation
  : bool_constant<!_Trait::value>
 {
 };


namespace tr1 {
using ::std:: add_const;
using ::std:: add_cv;
using ::std:: add_pointer;
using ::std:: add_volatile;
using ::std:: aligned_storage;
using ::std:: alignment_of;
using ::std:: conditional;
using ::std:: decay;
using ::std:: enable_if;
using ::std:: extent;
using ::std:: false_type;
using ::std:: has_virtual_destructor;
using ::std:: integral_constant;
using ::std:: is_abstract;
using ::std:: is_arithmetic;
using ::std:: is_array;
using ::std:: is_base_of;
using ::std:: is_class;
using ::std:: is_compound;
using ::std:: is_const;
using ::std:: is_convertible;
using ::std:: is_empty;
using ::std:: is_enum;
using ::std:: is_floating_point;
using ::std:: is_function;
using ::std:: is_fundamental;
using ::std:: is_integral;
using ::std:: is_member_function_pointer;
using ::std:: is_member_object_pointer;
using ::std:: is_member_pointer;
using ::std:: is_object;
using ::std:: is_pod;
using ::std:: is_pointer;
using ::std:: is_polymorphic;
using ::std:: is_reference;
using ::std:: is_same;
using ::std:: is_scalar;
using ::std:: is_signed;
using ::std:: is_union;
using ::std:: is_unsigned;
using ::std:: is_void;
using ::std:: is_volatile;
using ::std:: make_signed;
using ::std:: make_unsigned;
using ::std:: rank;
using ::std:: remove_all_extents;
using ::std:: remove_const;
using ::std:: remove_cv;
using ::std:: remove_extent;
using ::std:: remove_pointer;
using ::std:: remove_reference;
using ::std:: remove_volatile;
using ::std:: true_type;
 }



template<class... _Ty>
 struct common_type;

template<class _Ty>
 struct common_type<_Ty>
 {
 typedef typename decay<_Ty>::type type;
 };

template<class _Ty0,
 class _Ty1>
 struct common_type<_Ty0, _Ty1>
 {
 typedef typename decay<
  decltype(_Always_false<_Ty0>::value
   ? ::std:: declval<_Ty0>()
   : ::std:: declval<_Ty1>())
 >::type type;
 };

template<class _Ty0,
 class _Ty1,
 class... _Ty>
 struct common_type<_Ty0, _Ty1, _Ty...>
 {
 typedef typename common_type<
  typename common_type<_Ty0, _Ty1>::type, _Ty...
 >::type type;
 };


template<class _Ty,
 _Ty... _Vals>
 struct integer_sequence
 {
 static_assert(is_integral<_Ty>::value,
  "integer_sequence<T, I...> requires T to be an integral type.");

 typedef integer_sequence<_Ty, _Vals...> type;
 typedef _Ty value_type;

 static constexpr size_t size() noexcept
  {
  return (sizeof...(_Vals));
  }
 };
# 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 3
template<class _Ty,
 _Ty _Size>
 using make_integer_sequence = __make_integer_seq<integer_sequence, _Ty, _Size>;


template<size_t... _Vals>
 using index_sequence = integer_sequence<size_t, _Vals...>;

template<size_t _Size>
 using make_index_sequence = make_integer_sequence<size_t, _Size>;

template<class... _Types>
 using index_sequence_for = make_index_sequence<sizeof...(_Types)>;



template<class _Ty>
 struct identity
 {
 typedef _Ty type;

 const _Ty& operator()(const _Ty& _Left) const
  {
  return (_Left);
  }
 };



template<class _Ty> inline
 constexpr _Ty&& forward(
  typename remove_reference<_Ty>::type& _Arg) noexcept
 {
 return (static_cast<_Ty&&>(_Arg));
 }

template<class _Ty> inline
 constexpr _Ty&& forward(
  typename remove_reference<_Ty>::type&& _Arg) noexcept
 {
 static_assert(!is_lvalue_reference<_Ty>::value, "bad forward call");
 return (static_cast<_Ty&&>(_Arg));
 }


template<class _Ty> inline
 constexpr typename remove_reference<_Ty>::type&&
  move(_Ty&& _Arg) noexcept
 {
 return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));
 }


template<class _Ty> inline
 constexpr typename _If<!is_nothrow_move_constructible<_Ty>::value
  && is_copy_constructible<_Ty>::value,
   const _Ty&, _Ty&&>::type
 move_if_noexcept(_Ty& _Arg) noexcept
 {
 return (::std:: move(_Arg));
 }


template<class...>
 struct _Param_tester
 {
 typedef void type;
 };


template<class... _Types>
 using void_t = typename _Param_tester<_Types...>::type;


struct _Invoker_pmf_object
 {
 template<class _Decayed,
  class _Ty1,
  class... _Types2>
  static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
  -> decltype((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...))
  {
  return ((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...));
  }
 };

struct _Invoker_pmf_pointer
 {
 template<class _Decayed,
  class _Ty1,
  class... _Types2>
  static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
  -> decltype(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...))
  {
  return (((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...));
  }
 };

struct _Invoker_pmd_object
 {
 template<class _Decayed,
  class _Ty1>
  static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
  -> decltype(::std:: forward<_Ty1>(_Arg1).*_Pmd)
  {
  return (::std:: forward<_Ty1>(_Arg1).*_Pmd);
  }
 };

struct _Invoker_pmd_pointer
 {
 template<class _Decayed,
  class _Ty1>
  static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
  -> decltype((*::std:: forward<_Ty1>(_Arg1)).*_Pmd)
  {
  return ((*::std:: forward<_Ty1>(_Arg1)).*_Pmd);
  }
 };

struct _Invoker_functor
 {
 template<class _Callable,
  class... _Types>
  static auto _Call(_Callable&& _Obj, _Types&&... _Args)
  -> decltype(::std:: forward<_Callable>(_Obj)(
   ::std:: forward<_Types>(_Args)...))
  {
  return (::std:: forward<_Callable>(_Obj)(
   ::std:: forward<_Types>(_Args)...));
  }
 };

template<class _Callable,
 class _Ty1,
 class _Decayed = typename decay<_Callable>::type,
 bool _Is_pmf = is_member_function_pointer<_Decayed>::value,
 bool _Is_pmd = is_member_object_pointer<_Decayed>::value>
 struct _Invoker1;

template<class _Callable,
 class _Ty1,
 class _Decayed>
 struct _Invoker1<_Callable, _Ty1, _Decayed, true, false>
  : _If<is_base_of<
   typename _Is_memfunptr<_Decayed>::_Class_type,
   typename decay<_Ty1>::type>::value,
  _Invoker_pmf_object,
  _Invoker_pmf_pointer>::type
 {
 };

template<class _Callable,
 class _Ty1,
 class _Decayed>
 struct _Invoker1<_Callable, _Ty1, _Decayed, false, true>
  : _If<is_base_of<
   typename _Is_member_object_pointer<_Decayed>::_Class_type,
   typename decay<_Ty1>::type>::value,
  _Invoker_pmd_object,
  _Invoker_pmd_pointer>::type
 {
 };

template<class _Callable,
 class _Ty1,
 class _Decayed>
 struct _Invoker1<_Callable, _Ty1, _Decayed, false, false>
  : _Invoker_functor
 {
 };

template<class _Callable,
 class... _Types>
 struct _Invoker;

template<class _Callable>
 struct _Invoker<_Callable>
  : _Invoker_functor
 {
 };

template<class _Callable,
 class _Ty1,
 class... _Types2>
 struct _Invoker<_Callable, _Ty1, _Types2...>
  : _Invoker1<_Callable, _Ty1>
 {
 };

template<class _Callable,
 class... _Types> inline
 auto invoke(_Callable&& _Obj, _Types&&... _Args)
 -> decltype(_Invoker<_Callable, _Types...>::_Call(
  ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...))
 {
 return (_Invoker<_Callable, _Types...>::_Call(
  ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...));
 }

template<class _Rx,
 bool = is_void<_Rx>::value>
 struct _Forced
 {
 };

struct _Unforced
 {
 };

template<class _Cv_void,
 class... _Valtys> inline
 void _Invoke_ret(_Forced<_Cv_void, true>, _Valtys&&... _Vals)
 {
 ::std:: invoke(::std:: forward<_Valtys>(_Vals)...);
 }

template<class _Rx,
 class... _Valtys> inline
 _Rx _Invoke_ret(_Forced<_Rx, false>, _Valtys&&... _Vals)
 {
 return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
 }

template<class... _Valtys> inline
 auto _Invoke_ret(_Forced<_Unforced, false>, _Valtys&&... _Vals)
 -> decltype(::std:: invoke(::std:: forward<_Valtys>(_Vals)...))
 {
 return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
 }


struct _Unique_tag_result_of
 {
 };

template<class _Void,
 class... _Types>
 struct _Result_of
 {
 };

template<class... _Types>
 struct _Result_of<
  void_t<
   _Unique_tag_result_of,
   decltype(::std:: invoke(::std:: declval<_Types>()...))>,
  _Types...>
 {
 typedef decltype(::std:: invoke(::std:: declval<_Types>()...)) type;
 };

template<class _Fty>
 struct result_of
 {
 static_assert(_Always_false<_Fty>::value,
  "result_of<CallableType> is invalid; use "
  "result_of<CallableType(zero or more argument types)> instead.");
 };
# 1515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 3
template<class _Fty, class... _Args> struct result_of<_Fty __cdecl (_Args...)> : _Result_of<void, _Fty, _Args...> { }; template<class _Fty, class... _Args> struct result_of<_Fty __vectorcall (_Args...)> : _Result_of<void, _Fty, _Args...> { };



template<class _Ty,
 class = void>
 struct _Weak_result_type
 {
 };

template<class _Ty>
 struct _Weak_result_type<_Ty, void_t<
  typename _Ty::result_type> >
 {
 typedef typename _Ty::result_type result_type;
 };

template<class _Ty,
 class = void>
 struct _Weak_argument_type
  : _Weak_result_type<_Ty>
 {
 };

template<class _Ty>
 struct _Weak_argument_type<_Ty, void_t<
  typename _Ty::argument_type> >
  : _Weak_result_type<_Ty>
 {
 typedef typename _Ty::argument_type argument_type;
 };

template<class _Ty,
 class = void>
 struct _Weak_binary_args
  : _Weak_argument_type<_Ty>
 {
 };

template<class _Ty>
 struct _Weak_binary_args<_Ty, void_t<
  typename _Ty::first_argument_type,
  typename _Ty::second_argument_type> >
  : _Weak_argument_type<_Ty>
 {
 typedef typename _Ty::first_argument_type first_argument_type;
 typedef typename _Ty::second_argument_type second_argument_type;
 };

template<class _Ty>
 struct _Weak_types
 {
 typedef _Is_function<typename remove_pointer<_Ty>::type> _Is_f_or_pf;
 typedef _Is_memfunptr<typename remove_cv<_Ty>::type> _Is_pmf;
 typedef typename _If<_Is_f_or_pf::_Bool_type::value, _Is_f_or_pf,
  typename _If<_Is_pmf::_Bool_type::value, _Is_pmf,
  _Weak_binary_args<_Ty> >::type>::type type;
 };


template<class _Ty>
 class reference_wrapper
  : public _Weak_types<_Ty>::type
 {
public:
 static_assert(is_object<_Ty>::value || is_function<_Ty>::value,
  "reference_wrapper<T> requires T to be an object type "
  "or a function type.");

 typedef _Ty type;

 reference_wrapper(_Ty& _Val) noexcept
  : _Ptr(::std:: addressof(_Val))
  {
  }

 operator _Ty&() const noexcept
  {
  return (*_Ptr);
  }

 _Ty& get() const noexcept
  {
  return (*_Ptr);
  }

 template<class... _Types>
  auto operator()(_Types&&... _Args) const
  -> decltype(::std:: invoke(get(), ::std:: forward<_Types>(_Args)...))
  {
  return (::std:: invoke(get(), ::std:: forward<_Types>(_Args)...));
  }

 reference_wrapper(_Ty&&) = delete;

private:
 _Ty *_Ptr;
 };


template<class _Ty> inline
 reference_wrapper<_Ty>
  ref(_Ty& _Val) noexcept
 {
 return (reference_wrapper<_Ty>(_Val));
 }

template<class _Ty>
 void ref(const _Ty&&) = delete;

template<class _Ty> inline
 reference_wrapper<_Ty>
  ref(reference_wrapper<_Ty> _Val) noexcept
 {
 return (::std:: ref(_Val.get()));
 }

template<class _Ty> inline
 reference_wrapper<const _Ty>
  cref(const _Ty& _Val) noexcept
 {
 return (reference_wrapper<const _Ty>(_Val));
 }

template<class _Ty>
 void cref(const _Ty&&) = delete;

template<class _Ty> inline
 reference_wrapper<const _Ty>
  cref(reference_wrapper<_Ty> _Val) noexcept
 {
 return (::std:: cref(_Val.get()));
 }


template<class _Ty>
 struct _Unrefwrap_helper
 {
 typedef _Ty type;
 static constexpr bool _Is_refwrap = false;
 };

template<class _Ty>
 struct _Unrefwrap_helper<reference_wrapper<_Ty> >
 {
 typedef _Ty& type;
 static constexpr bool _Is_refwrap = true;
 };

template<class _Ty>
 struct _Unrefwrap
 {
 typedef typename decay<_Ty>::type _Ty1;
 typedef typename _Unrefwrap_helper<_Ty1>::type type;
 static constexpr bool _Is_refwrap = _Unrefwrap_helper<_Ty1>::_Is_refwrap;
 };


namespace tr1 {
using ::std:: cref;
using ::std:: ref;
using ::std:: reference_wrapper;
using ::std:: result_of;
 }



template<class _Ty>
 struct _Is_swappable;


template<class _Ty>
 struct _Is_nothrow_swappable;







template<class _Ty,
 class = void> inline

 void swap(_Ty&, _Ty&)
  noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value);


template<class _Ty,
 size_t _Size,
 class = typename enable_if<_Is_swappable<_Ty>::value>::type> inline
 void swap(_Ty (&)[_Size], _Ty (&)[_Size])
  noexcept(_Is_nothrow_swappable<_Ty>::value);


template<class _Ty1,
 class _Ty2,
 class = void>
 struct _Swappable_with_helper
  : false_type
 {
 };

struct _Swappable_with_helper_unique_type {};
template<class _Ty1,
 class _Ty2>
 struct _Swappable_with_helper<_Ty1, _Ty2, void_t<
  _Swappable_with_helper_unique_type,
  decltype(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))>>
  : true_type
 {
 };


template<class _Ty1,
 class _Ty2>
 struct _Is_swappable_with
  : conjunction<
   _Swappable_with_helper<_Ty1, _Ty2>,
   _Swappable_with_helper<_Ty2, _Ty1>>::type
 {

 };


template<class _Ty>
 struct _Is_swappable
  : _Is_swappable_with<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<_Ty>::type>::type
 {
 };


template<class _Ty1,
 class _Ty2>
 struct _Swap_cannot_throw
 {



 static constexpr bool value =
  noexcept(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))
  && noexcept(swap(::std:: declval<_Ty2>(), ::std:: declval<_Ty1>()));



 using type = bool_constant<value>;
 };


template<class _Ty1,
 class _Ty2>
 struct _Is_nothrow_swappable_with
  : conjunction<
   _Is_swappable_with<_Ty1, _Ty2>,
   _Swap_cannot_throw<_Ty1, _Ty2>>::type
 {

 };


template<class _Ty>
 struct _Is_nothrow_swappable
  : _Is_nothrow_swappable_with<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<_Ty>::type>::type
 {
 };
# 1819 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 3
template<class _Ty>
 using remove_const_t = typename remove_const<_Ty>::type;

template<class _Ty>
 using remove_volatile_t = typename remove_volatile<_Ty>::type;

template<class _Ty>
 using remove_cv_t = typename remove_cv<_Ty>::type;

template<class _Ty>
 using add_const_t = typename add_const<_Ty>::type;

template<class _Ty>
 using add_volatile_t = typename add_volatile<_Ty>::type;

template<class _Ty>
 using add_cv_t = typename add_cv<_Ty>::type;

template<class _Ty>
 using remove_reference_t = typename remove_reference<_Ty>::type;

template<class _Ty>
 using add_lvalue_reference_t = typename add_lvalue_reference<_Ty>::type;

template<class _Ty>
 using add_rvalue_reference_t = typename add_rvalue_reference<_Ty>::type;

template<class _Ty>
 using make_signed_t = typename make_signed<_Ty>::type;

template<class _Ty>
 using make_unsigned_t = typename make_unsigned<_Ty>::type;

template<class _Ty>
 using remove_extent_t = typename remove_extent<_Ty>::type;

template<class _Ty>
 using remove_all_extents_t = typename remove_all_extents<_Ty>::type;

template<class _Ty>
 using remove_pointer_t = typename remove_pointer<_Ty>::type;

template<class _Ty>
 using add_pointer_t = typename add_pointer<_Ty>::type;

template<size_t _Len,
 size_t _Align = alignment_of<max_align_t>::value>
 using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

template<size_t _Len,
 class... _Types>
 using aligned_union_t = typename aligned_union<_Len, _Types...>::type;

template<class _Ty>
 using decay_t = typename decay<_Ty>::type;

template<bool _Test,
 class _Ty = void>
 using enable_if_t = typename enable_if<_Test, _Ty>::type;

template<bool _Test,
 class _Ty1,
 class _Ty2>
 using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

template<class... _Ty>
 using common_type_t = typename common_type<_Ty...>::type;

template<class _Ty>
 using underlying_type_t = typename underlying_type<_Ty>::type;

template<class _Ty>
 using result_of_t = typename result_of<_Ty>::type;



template<class _Ty>
 constexpr bool is_void_v = is_void<_Ty>::value;
template<class _Ty>
 constexpr bool is_null_pointer_v = is_null_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_array_v = is_array<_Ty>::value;
template<class _Ty>
 constexpr bool is_pointer_v = is_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_lvalue_reference_v = is_lvalue_reference<_Ty>::value;
template<class _Ty>
 constexpr bool is_rvalue_reference_v = is_rvalue_reference<_Ty>::value;
template<class _Ty>
 constexpr bool is_member_object_pointer_v = is_member_object_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_member_function_pointer_v = is_member_function_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_enum_v = is_enum<_Ty>::value;
template<class _Ty>
 constexpr bool is_union_v = is_union<_Ty>::value;
template<class _Ty>
 constexpr bool is_class_v = is_class<_Ty>::value;
template<class _Ty>
 constexpr bool is_reference_v = is_reference<_Ty>::value;
template<class _Ty>
 constexpr bool is_fundamental_v = is_fundamental<_Ty>::value;
template<class _Ty>
 constexpr bool is_object_v = is_object<_Ty>::value;
template<class _Ty>
 constexpr bool is_scalar_v = is_scalar<_Ty>::value;
template<class _Ty>
 constexpr bool is_compound_v = is_compound<_Ty>::value;
template<class _Ty>
 constexpr bool is_member_pointer_v = is_member_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_const_v = is_const<_Ty>::value;
template<class _Ty>
 constexpr bool is_volatile_v = is_volatile<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivial_v = is_trivial<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_copyable_v = is_trivially_copyable<_Ty>::value;
template<class _Ty>
 constexpr bool is_standard_layout_v = is_standard_layout<_Ty>::value;
template<class _Ty>
 constexpr bool is_pod_v = is_pod<_Ty>::value;
template<class _Ty>
 constexpr bool is_literal_type_v = is_literal_type<_Ty>::value;
template<class _Ty>
 constexpr bool is_empty_v = is_empty<_Ty>::value;
template<class _Ty>
 constexpr bool is_polymorphic_v = is_polymorphic<_Ty>::value;
template<class _Ty>
 constexpr bool is_abstract_v = is_abstract<_Ty>::value;
template<class _Ty>
 constexpr bool is_final_v = is_final<_Ty>::value;
template<class _Ty>
 constexpr bool is_signed_v = is_signed<_Ty>::value;
template<class _Ty>
 constexpr bool is_unsigned_v = is_unsigned<_Ty>::value;
template<class _Ty,
 class... _Args>
 constexpr bool is_constructible_v = is_constructible<_Ty, _Args...>::value;
template<class _Ty>
 constexpr bool is_default_constructible_v = is_default_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_copy_constructible_v = is_copy_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_move_constructible_v = is_move_constructible<_Ty>::value;
template<class _Ty,
 class _Uty>
 constexpr bool is_assignable_v = is_assignable<_Ty, _Uty>::value;
template<class _Ty>
 constexpr bool is_copy_assignable_v = is_copy_assignable<_Ty>::value;
template<class _Ty>
 constexpr bool is_move_assignable_v = is_move_assignable<_Ty>::value;







template<class _Ty>
 constexpr bool is_destructible_v = is_destructible<_Ty>::value;
template<class _Ty,
 class... _Args>
 constexpr bool is_trivially_constructible_v = is_trivially_constructible<_Ty, _Args...>::value;
template<class _Ty>
 constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<_Ty>::value;
template<class _Ty,
 class _Uty>
 constexpr bool is_trivially_assignable_v = is_trivially_assignable<_Ty, _Uty>::value;
template<class _Ty>
 constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_destructible_v = is_trivially_destructible<_Ty>::value;
template<class _Ty,
 class... _Args>
 constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<_Ty, _Args...>::value;
template<class _Ty>
 constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<_Ty>::value;
template<class _Ty,
 class _Uty>
 constexpr bool is_nothrow_assignable_v = is_nothrow_assignable<_Ty, _Uty>::value;
template<class _Ty>
 constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<_Ty>::value;
template<class _Ty>
 constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<_Ty>::value;







template<class _Ty>
 constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<_Ty>::value;
template<class _Ty>
 constexpr bool has_virtual_destructor_v = has_virtual_destructor<_Ty>::value;
template<class _Ty>
 constexpr size_t alignment_of_v = alignment_of<_Ty>::value;
template<class _Ty>
 constexpr size_t rank_v = rank<_Ty>::value;
template<class _Ty,
 unsigned int _Ix = 0>
 constexpr size_t extent_v = extent<_Ty, _Ix>::value;
template<class _Base,
 class _Derived>
 constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;
template<class _From,
 class _To>
 constexpr bool is_convertible_v = is_convertible<_From, _To>::value;
template<class... _Traits>
 constexpr bool conjunction_v = conjunction<_Traits...>::value;
template<class... _Traits>
 constexpr bool disjunction_v = disjunction<_Traits...>::value;
template<class _Trait>
 constexpr bool negation_v = negation<_Trait>::value;


}


#pragma warning(pop)
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
# 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception" 3
__declspec(dllimport) bool __cdecl uncaught_exception() noexcept;
__declspec(dllimport) int __cdecl uncaught_exceptions() noexcept;

}





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h" 3
 extern "C" {



typedef void (__cdecl* terminate_handler )();
typedef void (__cdecl* terminate_function)();
# 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h" 3
    __declspec(dllimport) __declspec(noreturn) void __cdecl abort();
    __declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw();



        __declspec(dllimport) terminate_handler __cdecl set_terminate(
                     terminate_handler _NewTerminateHandler
            ) throw();

        __declspec(dllimport) terminate_handler __cdecl _get_terminate();





}
# 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h" 3
#pragma pack(pop)
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h" 2 3




#pragma pack(push, 8)
# 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h" 3
 extern "C" {



typedef void (__cdecl* unexpected_handler )();
typedef void (__cdecl* unexpected_function)();






struct _EXCEPTION_POINTERS;



    __declspec(dllimport) __declspec(noreturn) void __cdecl unexpected() throw(...);



        __declspec(dllimport) unexpected_handler __cdecl set_unexpected(
                     unexpected_handler _NewUnexpectedHandler
            ) throw();

        __declspec(dllimport) unexpected_handler __cdecl _get_unexpected();

        typedef void (__cdecl* _se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);

        __declspec(dllimport) _se_translator_function __cdecl _set_se_translator(
                     _se_translator_function _NewSETranslator
            );



    class type_info;

    __declspec(dllimport) int __cdecl _is_exception_typeof(
             type_info const& _Type,
             _EXCEPTION_POINTERS* _ExceptionPtr
        );

    __declspec(dllimport) bool __cdecl __uncaught_exception();
    __declspec(dllimport) int __cdecl __uncaught_exceptions();



}
# 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h" 3
#pragma pack(pop)
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h" 2 3






#pragma pack(push, 8)


#pragma pack(push, 8)
# 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h" 3
 extern "C" {

struct __std_exception_data
{
    char const* _What;
    bool _DoFree;
};

__declspec(dllimport) void __cdecl __std_exception_copy(
          __std_exception_data const* _From,
          __std_exception_data* _To
    );

__declspec(dllimport) void __cdecl __std_exception_destroy(
            __std_exception_data* _Data
    );

}
# 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h" 3
#pragma pack(pop)



namespace std {

class exception
{
public:

    exception() throw()
        : _Data()
    {
    }

    explicit exception(char const* const _Message) throw()
        : _Data()
    {
        __std_exception_data _InitData = { _Message, true };
        __std_exception_copy(&_InitData, &_Data);
    }

    exception(char const* const _Message, int) throw()
        : _Data()
    {
        _Data._What = _Message;
    }

    exception(exception const& _Other) throw()
        : _Data()
    {
        __std_exception_copy(&_Other._Data, &_Data);
    }

    exception& operator=(exception const& _Other) throw()
    {
        if (this == &_Other)
        {
            return *this;
        }

        __std_exception_destroy(&_Data);
        __std_exception_copy(&_Other._Data, &_Data);
        return *this;
    }

    virtual ~exception() throw()
    {
        __std_exception_destroy(&_Data);
    }

    virtual char const* what() const
    {
        return _Data._What ? _Data._What : "Unknown exception";
    }

private:

    __std_exception_data _Data;
};

class bad_exception
    : public exception
{
public:

    bad_exception() throw()
        : exception("bad exception", 1)
    {
    }
};

class bad_alloc
    : public exception
{
public:

    bad_alloc() throw()
        : exception("bad allocation", 1)
    {
    }

private:

    friend class bad_array_new_length;

    bad_alloc(char const* const _Message) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_array_new_length
    : public bad_alloc
{
public:

    bad_array_new_length() throw()
        : bad_alloc("bad array new length")
    {
    }
};

}


#pragma pack(pop)
# 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception" 2 3


namespace std {

using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);


inline terminate_handler __cdecl get_terminate() noexcept
 {
 return (_get_terminate());
 }

inline unexpected_handler __cdecl get_unexpected() noexcept
 {
 return (_get_unexpected());
 }


}
# 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception" 3
__declspec(dllimport) void __cdecl __ExceptionPtrCreate( void*);
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy( void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopy( void*, const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrAssign( void*, const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare( const void*, const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrToBool( const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrSwap( void*, void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException( void*);
[[noreturn]] __declspec(dllimport) void __cdecl __ExceptionPtrRethrow( const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException(
         void*, const void*, const void*);

namespace std {

class exception_ptr
 {
public:
 exception_ptr() throw ()
  {
  __ExceptionPtrCreate(this);
  }

 exception_ptr(nullptr_t) throw ()
  {
  __ExceptionPtrCreate(this);
  }

 ~exception_ptr() throw ()
  {
  __ExceptionPtrDestroy(this);
  }

 exception_ptr(const exception_ptr& _Rhs) throw ()
  {
  __ExceptionPtrCopy(this, &_Rhs);
  }

 exception_ptr& operator=(const exception_ptr& _Rhs) throw ()
  {
  __ExceptionPtrAssign(this, &_Rhs);
  return *this;
  }

 exception_ptr& operator=(nullptr_t) throw ()
  {
  exception_ptr _Ptr;
  __ExceptionPtrAssign(this, &_Ptr);
  return *this;
  }

 explicit operator bool() const throw ()
  {
  return __ExceptionPtrToBool(this);
  }

 [[noreturn]] void _RethrowException() const
  {
  __ExceptionPtrRethrow(this);
  }

 static exception_ptr _Current_exception() throw ()
  {
  exception_ptr _Retval;
  __ExceptionPtrCurrentException(&_Retval);
  return _Retval;
  }

 static exception_ptr _Copy_exception( void* _Except, const void* _Ptr)
  {
  exception_ptr _Retval = 0;
  if (!_Ptr)
   {

   return _Retval;
   }
  __ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
  return _Retval;
  }

private:
 void* _Data1;
 void* _Data2;
 };

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs) throw ()
 {
 __ExceptionPtrSwap(&_Lhs, &_Rhs);
 }

inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
 {
 return __ExceptionPtrCompare(&_Lhs, &_Rhs);
 }

inline bool operator==(nullptr_t, const exception_ptr& _Rhs) throw ()
 {
 return !_Rhs;
 }

inline bool operator==(const exception_ptr& _Lhs, nullptr_t) throw ()
 {
 return !_Lhs;
 }

inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
 {
 return !(_Lhs == _Rhs);
 }

inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs) throw ()
 {
 return !(_Lhs == _Rhs);
 }

inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs) throw ()
 {
 return !(_Lhs == _Rhs);
 }

inline exception_ptr current_exception() noexcept
 {
 return exception_ptr::_Current_exception();
 }

[[noreturn]] inline void rethrow_exception( exception_ptr _Ptr)
 {
 _Ptr._RethrowException();
 }

template<class _Ex> void *__GetExceptionInfo(_Ex);

template<class _Ex> exception_ptr make_exception_ptr(_Ex _Except) noexcept
 {
 return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
 }


class nested_exception
 {
public:
 nested_exception() noexcept
  : _Exc(::std:: current_exception())
  {
  }

 nested_exception(const nested_exception&) noexcept = default;
 nested_exception& operator=(const nested_exception&) noexcept = default;
 virtual ~nested_exception() noexcept = default;

 [[noreturn]] void rethrow_nested() const
  {
  if (_Exc)
   ::std:: rethrow_exception(_Exc);
  else
   ::std:: terminate();
  }

 ::std:: exception_ptr nested_ptr() const noexcept
  {
  return (_Exc);
  }

private:
 ::std:: exception_ptr _Exc;
 };


template<class _Ty,
 class _Uty>
 struct _With_nested
  : _Uty, nested_exception
 {
 explicit _With_nested(_Ty&& _Arg)
  : _Uty(::std:: forward<_Ty>(_Arg)), nested_exception()
  {
  }
 };

template<class _Ty>
 [[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, true_type)
 {
 typedef typename remove_reference<_Ty>::type _Uty;
 typedef _With_nested<_Ty, _Uty> _Glued;

 throw _Glued(::std:: forward<_Ty>(_Arg));
 }

template<class _Ty>
 [[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, false_type)
 {
 typedef typename decay<_Ty>::type _Decayed;

 throw _Decayed(::std:: forward<_Ty>(_Arg));
 }

template<class _Ty>
 [[noreturn]] inline void throw_with_nested(_Ty&& _Arg)
 {
 typedef typename remove_reference<_Ty>::type _Uty;

 integral_constant<bool,
  is_class<_Uty>::value
  && !is_base_of<nested_exception, _Uty>::value
  && !is_final<_Uty>::value> _Tag;

 _Throw_with_nested(::std:: forward<_Ty>(_Arg), _Tag);
 }


template<class _Ty> inline
 void _Rethrow_if_nested(const _Ty *_Ptr, true_type)
 {
 const auto _Nested = dynamic_cast<const nested_exception *>(_Ptr);

 if (_Nested)
  _Nested->rethrow_nested();
 }

template<class _Ty> inline
 void _Rethrow_if_nested(const _Ty *, false_type)
 {
 }

template<class _Ty> inline
 void rethrow_if_nested(const _Ty& _Arg)
 {
 integral_constant<bool,
  is_polymorphic<_Ty>::value
  && (!is_base_of<nested_exception, _Ty>::value
   || is_convertible<_Ty *, nested_exception *>::value)> _Tag;

 _Rethrow_if_nested(::std:: addressof(_Arg), _Tag);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint" 1 3
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h" 1 3
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h" 2 3




typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long long int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long intmax_t;
typedef unsigned long long uintmax_t;
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint" 2 3




namespace std {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;


 namespace tr1 {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;
 }

}
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 2 3


# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)






extern "C" {
# 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h" 3
void __cdecl _Feraise(int);

typedef union
 {
 unsigned short _Word[8];
 float _Float;
 double _Double;
 long double _Long_double;
 } _Dconst;


__declspec(dllimport) double __cdecl _Cosh(double, double);
__declspec(dllimport) short __cdecl _Dtest(double *);
__declspec(dllimport) double __cdecl _Sinh(double, double);

__declspec(dllimport) short __cdecl _Exp(double *, double, short);
extern __declspec(dllimport) _Dconst _Denorm, _Hugeval, _Inf,
 _Nan, _Snan;


__declspec(dllimport) float __cdecl _FCosh(float, float);
__declspec(dllimport) short __cdecl _FDtest(float *);
__declspec(dllimport) float __cdecl _FSinh(float, float);

__declspec(dllimport) short __cdecl _FExp(float *, float, short);
extern __declspec(dllimport) _Dconst _FDenorm, _FInf, _FNan, _FSnan;


__declspec(dllimport) long double __cdecl _LCosh(long double, long double);
__declspec(dllimport) short __cdecl _LDtest(long double *);
__declspec(dllimport) long double __cdecl _LSinh(long double, long double);

__declspec(dllimport) short __cdecl _LExp(long double *, long double, short);
extern __declspec(dllimport) _Dconst _LDenorm, _LInf, _LNan, _LSnan;



}




#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cfloat" 1 3






# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
 extern "C" {
# 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
__declspec(dllimport) unsigned int __cdecl _clearfp(void);

#pragma warning(push)
#pragma warning(disable: 4141)


__declspec(dllimport) unsigned int __cdecl _controlfp(
         unsigned int _NewValue,
         unsigned int _Mask
    );

#pragma warning(pop)


__declspec(dllimport) void __cdecl _set_controlfp(
         unsigned int _NewValue,
         unsigned int _Mask
    );


__declspec(dllimport) errno_t __cdecl _controlfp_s(
              unsigned int* _CurrentState,
              unsigned int _NewValue,
              unsigned int _Mask
    );


__declspec(dllimport) unsigned int __cdecl _statusfp(void);


__declspec(dllimport) void __cdecl _fpreset(void);
# 272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
__declspec(dllimport) unsigned int __cdecl _control87(
         unsigned int _NewValue,
         unsigned int _Mask
    );
# 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
__declspec(dllimport) int* __cdecl __fpecode(void);




__declspec(dllimport) int __cdecl __fpe_flt_rounds(void);
# 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
               __declspec(dllimport) double __cdecl _copysign( double _Number, double _Sign);
               __declspec(dllimport) double __cdecl _chgsign( double _X);
               __declspec(dllimport) double __cdecl _scalb( double _X, long _Y);
               __declspec(dllimport) double __cdecl _logb( double _X);
               __declspec(dllimport) double __cdecl _nextafter( double _X, double _Y);
               __declspec(dllimport) int __cdecl _finite( double _X);
               __declspec(dllimport) int __cdecl _isnan( double _X);
               __declspec(dllimport) int __cdecl _fpclass( double _X);


                   __declspec(dllimport) float __cdecl _scalbf( float _X, long _Y);
# 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
    __declspec(dllimport) void __cdecl fpreset(void);
# 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
}
# 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cfloat" 2 3
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits" 2 3



# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar" 1 3
# 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar" 3
typedef mbstate_t _Mbstatet;


namespace std {
using :: _Mbstatet;

using :: mbstate_t; using :: size_t; using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;
using :: wcstod; using :: wcstoul; using :: wcsstr;
using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;

using :: vfwscanf; using :: vswscanf; using :: vwscanf;
using :: wcstof; using :: wcstold;
using :: wcstoll; using :: wcstoull;
}
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
# 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits" 3
typedef enum
 {
 denorm_indeterminate = -1,
 denorm_absent = 0,
 denorm_present = 1}
  float_denorm_style;


typedef enum
 {
 round_indeterminate = -1,
 round_toward_zero = 0,
 round_to_nearest = 1,
 round_toward_infinity = 2,
 round_toward_neg_infinity = 3}
  float_round_style;


struct _Num_base
 {
 static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
 static constexpr bool has_denorm_loss = (bool)(false);
 static constexpr bool has_infinity = (bool)(false);
 static constexpr bool has_quiet_NaN = (bool)(false);
 static constexpr bool has_signaling_NaN = (bool)(false);
 static constexpr bool is_bounded = (bool)(false);
 static constexpr bool is_exact = (bool)(false);
 static constexpr bool is_iec559 = (bool)(false);
 static constexpr bool is_integer = (bool)(false);
 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(false);
 static constexpr bool is_specialized = (bool)(false);
 static constexpr bool tinyness_before = (bool)(false);
 static constexpr bool traps = (bool)(false);
 static constexpr float_round_style round_style = (float_round_style)(round_toward_zero);
 static constexpr int digits = (int)(0);
 static constexpr int digits10 = (int)(0);

 static constexpr int max_digits10 = (int)(0);

 static constexpr int max_exponent = (int)(0);
 static constexpr int max_exponent10 = (int)(0);
 static constexpr int min_exponent = (int)(0);
 static constexpr int min_exponent10 = (int)(0);
 static constexpr int radix = (int)(0);
 };


template<class _Ty>
 class numeric_limits
  : public _Num_base
 {
public:
 static constexpr _Ty (min)() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty (max)() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty lowest() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty round_error() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty infinity() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (_Ty());
  }
 };

template<class _Ty>
 class numeric_limits<const _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<const volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };


struct _Num_int_base
 : public _Num_base
 {
 static constexpr bool is_bounded = (bool)(true);
 static constexpr bool is_exact = (bool)(true);
 static constexpr bool is_integer = (bool)(true);
 static constexpr bool is_modulo = (bool)(true);
 static constexpr bool is_specialized = (bool)(true);
 static constexpr int radix = (int)(2);
 };


struct _Num_float_base
 : public _Num_base
 {
 static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
 static constexpr bool has_denorm_loss = (bool)(true);
 static constexpr bool has_infinity = (bool)(true);
 static constexpr bool has_quiet_NaN = (bool)(true);
 static constexpr bool has_signaling_NaN = (bool)(true);
 static constexpr bool is_bounded = (bool)(true);
 static constexpr bool is_exact = (bool)(false);
 static constexpr bool is_iec559 = (bool)(true);
 static constexpr bool is_integer = (bool)(false);
 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(true);
 static constexpr bool is_specialized = (bool)(true);
 static constexpr bool tinyness_before = (bool)(true);
 static constexpr bool traps = (bool)(false);
 static constexpr float_round_style round_style = (float_round_style)(round_to_nearest);
 static constexpr int radix = (int)(2);
 };


template<> class numeric_limits<char>
 : public _Num_int_base
 {
public:
 typedef char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-128));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (127);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)((-128) != 0);
 static constexpr int digits = (int)(8 - ((-128) != 0 ? 1 : 0));
 static constexpr int digits10 = (int)((8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);

 };


template<> class numeric_limits<wchar_t>
 : public _Num_int_base
 {
public:
 typedef wchar_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((_Ty)0x0000);
  }

 static constexpr _Ty (max)() noexcept
  {
  return ((_Ty)0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(0x0000 != 0);
 static constexpr int digits = (int)(8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0));

 static constexpr int digits10 = (int)((8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);

 };


template<> class numeric_limits<bool>
 : public _Num_int_base
 {
public:
 typedef bool _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (false);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (true);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(1);
 static constexpr int digits10 = (int)(0);
 };


template<> class numeric_limits<signed char>
 : public _Num_int_base
 {
public:
 typedef signed char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-128));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (127);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 - 1);
 static constexpr int digits10 = (int)((8 - 1) * 301L / 1000);
 };


template<> class numeric_limits<unsigned char>
 : public _Num_int_base
 {
public:
 typedef unsigned char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8);
 static constexpr int digits10 = (int)(8 * 301L / 1000);
 };


template<> class numeric_limits<short>
 : public _Num_int_base
 {
public:
 typedef short _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-32768));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (32767);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (short) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000);

 };



template<> class numeric_limits<unsigned short>
 : public _Num_int_base
 {
public:
 typedef unsigned short _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned short));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000);

 };



template<> class numeric_limits<char16_t>
 : public _Num_int_base
 {
public:
 typedef char16_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (char16_t));
 static constexpr int digits10 = (int)(8 * sizeof (char16_t) * 301L / 1000);

 };


template<> class numeric_limits<int>
 : public _Num_int_base
 {
public:
 typedef int _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-2147483647 - 1));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (2147483647);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (int) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned int>
 : public _Num_int_base
 {
public:
 typedef unsigned int _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned int));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000);

 };


template<> class numeric_limits<long>
 : public _Num_int_base
 {
public:
 typedef long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-2147483647L - 1));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (2147483647L);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (long) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned long>
 : public _Num_int_base
 {
public:
 typedef unsigned long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffffUL);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned long));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000);

 };


template<> class numeric_limits<char32_t>
 : public _Num_int_base
 {
public:
 typedef char32_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (char32_t));
 static constexpr int digits10 = (int)(8 * sizeof (char32_t) * 301L / 1000);

 };


template<> class numeric_limits<long long>
 : public _Num_int_base
 {
public:
 typedef long long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (-0x7fffffffffffffff - 1);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0x7fffffffffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (long long) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (long long) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned long long>
 : public _Num_int_base
 {
public:
 typedef unsigned long long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffffffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned long long));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned long long) * 301L / 1000);

 };


template<> class numeric_limits<float>
 : public _Num_float_base
 {
public:
 typedef float _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (1.175494351e-38F);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (3.402823466e+38F);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (1.192092896e-07F);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5F);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (1.401298464e-45F);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (__builtin_huge_valf());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (__builtin_nanf("0"));
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (__builtin_nansf("1"));
  }

 static constexpr int digits = (int)(24);
 static constexpr int digits10 = (int)(6);

 static constexpr int max_digits10 = (int)(2 + 24 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)128);
 static constexpr int max_exponent10 = (int)((int)38);
 static constexpr int min_exponent = (int)((int)(-125));
 static constexpr int min_exponent10 = (int)((int)(-37));
 };


template<> class numeric_limits<double>
 : public _Num_float_base
 {
public:
 typedef double _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (2.2250738585072014e-308);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (1.7976931348623158e+308);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (2.2204460492503131e-016);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (4.9406564584124654e-324);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (__builtin_huge_val());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (__builtin_nan("0"));
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (__builtin_nans("1"));
  }

 static constexpr int digits = (int)(53);
 static constexpr int digits10 = (int)(15);

 static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)1024);
 static constexpr int max_exponent10 = (int)((int)308);
 static constexpr int min_exponent = (int)((int)(-1021));
 static constexpr int min_exponent10 = (int)((int)(-307));
 };


template<> class numeric_limits<long double>
 : public _Num_float_base
 {
public:
 typedef long double _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (2.2250738585072014e-308);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (1.7976931348623158e+308);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (2.2204460492503131e-016);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5L);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (4.9406564584124654e-324);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (__builtin_huge_val());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (__builtin_nan("0"));
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (__builtin_nans("1"));
  }

 static constexpr int digits = (int)(53);
 static constexpr int digits10 = (int)(15);

 static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)1024);
 static constexpr int max_exponent10 = (int)((int)308);
 static constexpr int min_exponent = (int)((int)(-1021));
 static constexpr int min_exponent10 = (int)((int)(-307));
 };
# 1481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new" 1 3






# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h" 2 3



extern "C++" {

#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4985)






 namespace std
    {
        struct nothrow_t { };

        extern nothrow_t const nothrow;
    }



__declspec(allocator) void* __cdecl operator new(
    size_t _Size
    );


__declspec(allocator) void* __cdecl operator new(
    size_t _Size,
    std::nothrow_t const&
    ) throw();


__declspec(allocator) void* __cdecl operator new[](
    size_t _Size
    );


__declspec(allocator) void* __cdecl operator new[](
    size_t _Size,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block
    ) throw();

void __cdecl operator delete(
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete[](
    void* _Block
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block,
    size_t _Size
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) throw();




    inline void* __cdecl operator new(size_t _Size, void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) throw()
    {
        return;
    }





    inline void* __cdecl operator new[](size_t _Size, void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) throw()
    {
    }




#pragma warning(pop)
#pragma pack(pop)

}
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)






namespace std {




typedef void (__cdecl * new_handler) ();



__declspec(dllimport) new_handler __cdecl set_new_handler( new_handler)
 noexcept;

__declspec(dllimport) new_handler __cdecl get_new_handler()
 noexcept;
}


#pragma warning(pop)
#pragma pack(pop)
# 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 1 3







# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility" 1 3






# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h" 1 3
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h" 3
extern "C++" {

#pragma pack(push, 8)







 __declspec(allocator) void* __cdecl operator new(
               size_t _Size,
               int _BlockUse,
               char const* _FileName,
               int _LineNumber
        );


    __declspec(allocator) void* __cdecl operator new[](
               size_t _Size,
               int _BlockUse,
               char const* _FileName,
               int _LineNumber
        );

    void __cdecl operator delete(
        void* _Block,
        int _BlockUse,
        char const* _FileName,
        int _LineNumber
        ) throw();

    void __cdecl operator delete[](
        void* _Block,
        int _BlockUse,
        char const* _FileName,
        int _LineNumber
        ) throw();





#pragma pack(pop)

}
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 2 3


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
 extern "C" {



typedef void* _HFILE;
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
typedef int (__cdecl* _CRT_REPORT_HOOK )(int, char*, int*);
typedef int (__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);





typedef int (__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);
# 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
typedef void (__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);





struct _CrtMemBlockHeader;

typedef struct _CrtMemState
{
    struct _CrtMemBlockHeader* pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
} _CrtMemState;
# 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
        __declspec(dllimport) int* __cdecl __p__crtDbgFlag(void);
        __declspec(dllimport) long* __cdecl __p__crtBreakAlloc(void);




        __declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtGetAllocHook(void);

        __declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtSetAllocHook(
                     _CRT_ALLOC_HOOK _PfnNewHook
            );

        __declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtGetDumpClient(void);

        __declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtSetDumpClient(
                     _CRT_DUMP_CLIENT _PFnNewDump
            );



    __declspec(dllimport) int __cdecl _CrtCheckMemory(void);

    typedef void (__cdecl* _CrtDoForAllClientObjectsCallback)(void*, void*);

    __declspec(dllimport) void __cdecl _CrtDoForAllClientObjects(
             _CrtDoForAllClientObjectsCallback _Callback,
             void* _Context
        );

    __declspec(dllimport) int __cdecl _CrtDumpMemoryLeaks(void);

    __declspec(dllimport) int __cdecl _CrtIsMemoryBlock(
                  void const* _Block,
                  unsigned int _Size,
                  long* _RequestNumber,
                  char** _FileName,
                  int* _LineNumber
        );


    __declspec(dllimport) int __cdecl _CrtIsValidHeapPointer(
                 void const* _Pointer
        );


    __declspec(dllimport) int __cdecl _CrtIsValidPointer(
                 void const* _Pointer,
                 unsigned int _Size,
                 int _ReadWrite
        );

    __declspec(dllimport) void __cdecl _CrtMemCheckpoint(
              _CrtMemState* _State
        );

    __declspec(dllimport) int __cdecl _CrtMemDifference(
              _CrtMemState* _State,
              _CrtMemState const* _OldState,
              _CrtMemState const* _NewState
        );

    __declspec(dllimport) void __cdecl _CrtMemDumpAllObjectsSince(
                 _CrtMemState const* _State
        );

    __declspec(dllimport) void __cdecl _CrtMemDumpStatistics(
             _CrtMemState const* _State
        );


    __declspec(dllimport) int __cdecl _CrtReportBlockType(
                 void const* _Block
        );

    __declspec(dllimport) long __cdecl _CrtSetBreakAlloc(
             long _NewValue
        );

    __declspec(dllimport) int __cdecl _CrtSetDbgFlag(
             int _NewFlag
        );
# 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
    __declspec(dllimport) void __cdecl _aligned_free_dbg(
                                       void* _Block
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_malloc_dbg(
                   size_t _Size,
                   size_t _Alignment,
                   char const* _FileName,
                   int _LineNumber
        );

    __declspec(dllimport) size_t __cdecl _aligned_msize_dbg(
                      void* _Block,
                      size_t _Alignment,
                      size_t _Offset
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_malloc_dbg(
                   size_t _Size,
                   size_t _Alignment,
                   size_t _Offset,
                   char const* _FileName,
                   int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_realloc_dbg(
                                       void* _Block,
                                       size_t _Size,
                                       size_t _Alignment,
                                       size_t _Offset,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_recalloc_dbg(
                                       void* _Block,
                                       size_t _Count,
                                       size_t _Size,
                                       size_t _Alignment,
                                       size_t _Offset,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_realloc_dbg(
                                       void* _Block,
                                       size_t _Size,
                                       size_t _Alignment,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_recalloc_dbg(
                                       void* _Block,
                                       size_t _Count,
                                       size_t _Size,
                                       size_t _Alignment,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _calloc_dbg(
                   size_t _Count,
                   size_t _Size,
                   int _BlockUse,
                   char const* _FileName,
                   int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _expand_dbg(
                      void* _Block,
                      size_t _Size,
                      int _BlockUse,
                      char const* _FileName,
                      int _LineNumber
        );

    __declspec(dllimport) void __cdecl _free_dbg(
                                       void* _Block,
                                       int _BlockUse
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _malloc_dbg(
                   size_t _Size,
                   int _BlockUse,
                   char const* _FileName,
                   int _LineNumber
        );

    __declspec(dllimport) size_t __cdecl _msize_dbg(
                      void* _Block,
                      int _BlockUse
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _realloc_dbg(
                                       void* _Block,
                                       size_t _Size,
                                       int _BlockUse,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _recalloc_dbg(
                                       void* _Block,
                                       size_t _Count,
                                       size_t _Size,
                                       int _BlockUse,
                                       char const* _FileName,
                                       int _LineNumber
        );



    __declspec(dllimport) errno_t __cdecl _dupenv_s_dbg(
                                                                              char** _PBuffer,
                                       size_t* _PBufferSizeInBytes,
                                       char const* _VarName,
                                       int _BlockType,
                                       char const* _FileName,
                                       int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath_dbg(
                                         char* _FullPath,
                                         char const* _Path,
                                         size_t _SizeInBytes,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) char* __cdecl _getcwd_dbg(
                                         char* _DstBuf,
                                         int _SizeInBytes,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );




    __declspec(dllimport) __declspec(allocator) char* __cdecl _getdcwd_dbg(
                                         int _Drive,
                                         char* _DstBuf,
                                         int _SizeInBytes,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) char* __cdecl _strdup_dbg(
                   char const* _String,
                   int _BlockUse,
                   char const* _FileName,
                   int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam_dbg(
                   char const* _DirName,
                   char const* _FilePrefix,
                   int _BlockType,
                   char const* _FileName,
                   int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup_dbg(
                   wchar_t const* _String,
                   int _BlockUse,
                   char const* _FileName,
                   int _LineNumber
        );



    __declspec(dllimport) errno_t __cdecl _wdupenv_s_dbg(
                                                                              wchar_t** _PBuffer,
                                         size_t* _PBufferSizeInWords,
                                         wchar_t const* _VarName,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath_dbg(
                                         wchar_t* _FullPath,
                                         wchar_t const* _Path,
                                         size_t _SizeInWords,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd_dbg(
                                         wchar_t* _DstBuf,
                                         int _SizeInWords,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd_dbg(
                                         int _Drive,
                                         wchar_t* _DstBuf,
                                         int _SizeInWords,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam_dbg(
                   wchar_t const* _DirName,
                   wchar_t const* _FilePrefix,
                   int _BlockType,
                   char const* _FileName,
                   int _LineNumber
        );
# 606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
    __declspec(dllimport) int __cdecl _CrtDbgReport(
                   int _ReportType,
                   char const* _FileName,
                   int _Linenumber,
                   char const* _ModuleName,
                   char const* _Format,
        ...);

    __declspec(dllimport) int __cdecl _CrtDbgReportW(
                   int _ReportType,
                   wchar_t const* _FileName,
                   int _LineNumber,
                   wchar_t const* _ModuleName,
                   wchar_t const* _Format,
        ...);


    __declspec(dllimport) int __cdecl _VCrtDbgReportA(
                   int _ReportType,
                   void* _ReturnAddress,
                   char const* _FileName,
                   int _LineNumber,
                   char const* _ModuleName,
                   char const* _Format,
                   va_list _ArgList
        );

    __declspec(dllimport) int __cdecl _VCrtDbgReportW(
                   int _ReportType,
                   void* _ReturnAddress,
                   wchar_t const* _FileName,
                   int _LineNumber,
                   wchar_t const* _ModuleName,
                   wchar_t const* _Format,
                   va_list _ArgList
        );

    __declspec(dllimport) size_t __cdecl _CrtSetDebugFillThreshold(
             size_t _NewDebugFillThreshold
        );

    __declspec(dllimport) size_t __cdecl _CrtGetDebugFillThreshold(void);

    __declspec(dllimport) _HFILE __cdecl _CrtSetReportFile(
                 int _ReportType,
                 _HFILE _ReportFile
        );

    __declspec(dllimport) int __cdecl _CrtSetReportMode(
             int _ReportType,
             int _ReportMode
        );



        extern long _crtAssertBusy;

        __declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtGetReportHook(void);




        __declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtSetReportHook(
                     _CRT_REPORT_HOOK _PFnNewHook
            );

        __declspec(dllimport) int __cdecl _CrtSetReportHook2(
                     int _Mode,
                     _CRT_REPORT_HOOK _PFnNewHook
            );

        __declspec(dllimport) int __cdecl _CrtSetReportHookW2(
                     int _Mode,
                     _CRT_REPORT_HOOKW _PFnNewHook
            );
# 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
}
# 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
#pragma pack(pop)
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {


typedef _Longlong streamoff;
typedef _Longlong streamsize;
# 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd" 3
extern __declspec(dllimport) const streamoff _BADOFF;



template<class _Statetype>
 class fpos
 {
 typedef fpos<_Statetype> _Myt;

public:
                    fpos(streamoff _Off = 0)
  : _Myoff(_Off), _Fpos(0), _Mystate()
  {
  }

                    fpos(_Statetype _State, fpos_t _Fileposition)
  : _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
  {
  }

 _Statetype state() const
  {
  return (_Mystate);
  }

 void state(_Statetype _State)
  {
  _Mystate = _State;
  }

 fpos_t seekpos() const
  {
  return (_Fpos);
  }

                    operator streamoff() const
  {
  return ((streamoff)(_Myoff + ((long long)(_Fpos))));
  }

 streamoff operator-(const _Myt& _Right) const
  {
  return ((streamoff)*this - (streamoff)_Right);
  }

 _Myt& operator+=(streamoff _Off)
  {
  _Myoff += _Off;
  return (*this);
  }

 _Myt& operator-=(streamoff _Off)
  {
  _Myoff -= _Off;
  return (*this);
  }

 _Myt operator+(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt operator-(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 bool operator==(const _Myt& _Right) const
  {
  return ((streamoff)*this == (streamoff)_Right);
  }

 bool operator==(streamoff _Right) const
  {
  return ((streamoff)*this == _Right);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

private:
 streamoff _Myoff;
 fpos_t _Fpos;
 _Statetype _Mystate;
 };






typedef fpos<_Mbstatet> streampos;

typedef streampos wstreampos;


template<class _Elem,
 class _Int_type>
 struct _Char_traits
 {
 typedef _Elem char_type;
 typedef _Int_type int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(
                     const _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  for (; 0 < _Count; --_Count, ++_First1, ++_First2)
   if (!eq(*_First1, *_First2))
    return (lt(*_First1, *_First2) ? -1 : +1);
  return (0);
  }

 static size_t __cdecl length( const _Elem *_First)
  {
  size_t _Count;
  for (_Count = 0; !eq(*_First, _Elem()); ++_First)
   ++_Count;
  return (_Count);
  }

 static _Elem *__cdecl copy(
                       _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  for (; 0 < _Count; --_Count, ++_Next, ++_First2)
   assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *__cdecl _Copy_s(
                           _Elem *_First1, size_t _Dest_size,
                     const _Elem *_First2, size_t _Count)
  {
  { if (!(_Count <= _Dest_size)) { (void)( (!!(("_Count <= _Dest_size" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd", 173, 0, L"%ls", L"\"_Count <= _Dest_size\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"_Count <= _Dest_size", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd", 173, 0); return (0); } };
  return (copy(_First1, _First2, _Count));
  }

 static const _Elem *__cdecl find(
                     const _Elem *_First,
  size_t _Count, const _Elem& _Ch)
  {
  for (; 0 < _Count; --_Count, ++_First)
   if (eq(*_First, _Ch))
    return (_First);
  return (0);
  }

 static _Elem *__cdecl move(
                       _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  if (_First2 < _Next && _Next < _First2 + _Count)
   for (_Next += _Count, _First2 += _Count; 0 < _Count; --_Count)
    assign(*--_Next, *--_First2);
  else
   for (; 0 < _Count; --_Count, ++_Next, ++_First2)
    assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *__cdecl assign(
                       _Elem *_First,
  size_t _Count, _Elem _Ch)
  {
  _Elem *_Next = _First;
  for (; 0 < _Count; --_Count, ++_Next)
   assign(*_Next, _Ch);
  return (_First);
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left < _Right);
  }

 static constexpr _Elem __cdecl to_char_type(
  const int_type& _Meta) noexcept
  {
  return ((_Elem)_Meta);
  }

 static constexpr int_type __cdecl to_int_type(
  const _Elem& _Ch) noexcept
  {
  return ((int_type)_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(
  const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? (int_type)_Meta : (int_type)!eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return ((int_type)(-1));
  }
 };


template<class _Elem>
 struct char_traits
  : public _Char_traits<_Elem, long>
 {
 };


template<>
 struct char_traits<char16_t>
 : public _Char_traits<char16_t, unsigned short>
 {
 };

typedef streampos u16streampos;


template<>
 struct char_traits<char32_t>
 : public _Char_traits<char32_t, unsigned int>
 {
 };

typedef streampos u32streampos;


template<>
 struct char_traits<wchar_t>
 {
 typedef wchar_t _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: wmemcmp(_First1, _First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: wcslen(_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemcpy(_First1, _First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_words,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::wmemcpy_s((_First1), (_Size_in_words), (_First2), (_Count));
  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: wmemchr(_First, _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemmove(_First1, _First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: wmemset(_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left < _Right);
  }

 static constexpr _Elem __cdecl to_char_type(
  const int_type& _Meta) noexcept
  {
  return (_Meta);
  }

 static constexpr int_type __cdecl to_int_type(
  const _Elem& _Ch) noexcept
  {
  return (_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(
  const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return (((wint_t)(0xFFFF)));
  }
 };



template<>
 struct char_traits<unsigned short>
 {
 typedef unsigned short _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: wmemcmp((const wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: wcslen((const wchar_t *)_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemcpy((wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_words,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::wmemcpy_s(((wchar_t *)_First1), (_Size_in_words), ((const wchar_t *)_First2), (_Count));

  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: wmemchr((const wchar_t *)_First,
    _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemmove((wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: wmemset((wchar_t *)_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left < _Right);
  }

 static constexpr _Elem __cdecl to_char_type(const int_type& _Meta)
  noexcept
  {
  return (_Meta);
  }

 static constexpr int_type __cdecl to_int_type(const _Elem& _Ch)
  noexcept
  {
  return (_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(const int_type& _Meta)
  noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return (((wint_t)(0xFFFF)));
  }
 };



template<> struct char_traits<char>
 {
 typedef char _Elem;
 typedef _Elem char_type;
 typedef int int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: memcmp(_First1, _First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: strlen(_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: memcpy(_First1, _First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_bytes,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::memcpy_s((_First1), (_Size_in_bytes), (_First2), (_Count));
  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: memchr(_First, _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: memmove(_First1, _First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: memset(_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return ((unsigned char)_Left < (unsigned char)_Right);
  }

 static constexpr _Elem __cdecl to_char_type(
  const int_type& _Meta) noexcept
  {
  return ((_Elem)_Meta);
  }

 static constexpr int_type __cdecl to_int_type(
  const _Elem& _Ch) noexcept
  {
  return ((unsigned char)_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(
  const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return ((-1));
  }
 };


template<class _Ty>
 class allocator;
class ios_base;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ios;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class istreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class ostreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_streambuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_istream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ostream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_iostream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringbuf;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_istringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_ostringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_filebuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ifstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ofstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_fstream;


template<class _Elem,
 class _InIt >
 class num_get;
template<class _Elem,
 class _OutIt >
 class num_put;
template<class _Elem>
 class collate;



typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
 allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
 allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
 allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
 allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;


typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
 wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;
# 737 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd" 3
typedef num_get<char, istreambuf_iterator<char, char_traits<char> > >
 numget;
typedef num_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >
 wnumget;
typedef num_put<char, ostreambuf_iterator<char, char_traits<char> > >
 numput;
typedef num_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >
 wnumput;
typedef collate<char> ncollate;
typedef collate<wchar_t> wcollate;

}


#pragma warning(pop)
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4180 4512)

namespace std {

template<class _FwdIt1,
 class _FwdIt2> inline
 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
 {
 swap(*_Left, *_Right);
 }


template<class _Ty,
 size_t _Size,
 class> inline
 void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
  noexcept(_Is_nothrow_swappable<_Ty>::value)
 {
 if (&_Left != &_Right)
  {
  _Ty *_First1 = _Left;
  _Ty *_Last1 = _First1 + _Size;
  _Ty *_First2 = _Right;
  for (; _First1 != _Last1; ++_First1, ++_First2)
   ::std:: iter_swap(_First1, _First2);
  }
 }

template<class _Ty,
 class> inline
 void swap(_Ty& _Left, _Ty& _Right)
  noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value)

 {
 _Ty _Tmp = ::std:: move(_Left);
 _Left = ::std:: move(_Right);
 _Right = ::std:: move(_Tmp);
 }


template<class _Ty> inline
 void _Swap_adl(_Ty& _Left, _Ty& _Right)
  noexcept(_Is_nothrow_swappable<_Ty>::value)
 {
 swap(_Left, _Right);
 }


struct piecewise_construct_t
 {
 };

constexpr piecewise_construct_t piecewise_construct{};


template<class...>
 class tuple;

template<class _Ty1,
 class _Ty2>
 struct pair
 {
 typedef pair<_Ty1, _Ty2> _Myt;
 typedef _Ty1 first_type;
 typedef _Ty2 second_type;

 template<class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t<is_default_constructible<_Uty1>::value
      && is_default_constructible<_Uty2>::value> >
  constexpr pair()
  : first(), second()
  {
  }

 template<class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t<is_copy_constructible<_Uty1>::value
      && is_copy_constructible<_Uty2>::value>,
  enable_if_t<is_convertible<const _Uty1&, _Uty1>::value
    && is_convertible<const _Uty2&, _Uty2>::value, int> = 0>
  constexpr pair(const _Ty1& _Val1, const _Ty2& _Val2)
  : first(_Val1), second(_Val2)
  {
  }

 template<class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t<is_copy_constructible<_Uty1>::value
      && is_copy_constructible<_Uty2>::value>,
  enable_if_t<!is_convertible<const _Uty1&, _Uty1>::value
    || !is_convertible<const _Uty2&, _Uty2>::value, int> = 0>
  constexpr explicit pair(const _Ty1& _Val1, const _Ty2& _Val2)
  : first(_Val1), second(_Val2)
  {
  }

 pair(const pair&) = default;
 pair(pair&&) = default;

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, const _Other1&>::value
      && is_constructible<_Ty2, const _Other2&>::value>,
  enable_if_t<is_convertible<const _Other1&, _Ty1>::value
    && is_convertible<const _Other2&, _Ty2>::value, int> = 0>
  constexpr pair(const pair<_Other1, _Other2>& _Right)
  : first(_Right.first), second(_Right.second)
  {
  }

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, const _Other1&>::value
      && is_constructible<_Ty2, const _Other2&>::value>,
  enable_if_t<!is_convertible<const _Other1&, _Ty1>::value
    || !is_convertible<const _Other2&, _Ty2>::value, int> = 0>
  constexpr explicit pair(const pair<_Other1, _Other2>& _Right)
  : first(_Right.first), second(_Right.second)
  {
  }

 template<class _Other1,
  class _Other2>
  _Myt& operator=(const pair<_Other1, _Other2>& _Right)
  {
  first = _Right.first;
  second = _Right.second;
  return (*this);
  }

 template<class _Tuple1,
  class _Tuple2,
  size_t... _Indexes1,
  size_t... _Indexes2> inline
  pair(_Tuple1& _Val1,
   _Tuple2& _Val2,
   integer_sequence<size_t, _Indexes1...>,
   integer_sequence<size_t, _Indexes2...>);

 template<class... _Types1,
  class... _Types2> inline
  pair(piecewise_construct_t,
   tuple<_Types1...> _Val1,
   tuple<_Types2...> _Val2);

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, _Other1>::value
      && is_constructible<_Ty2, _Other2>::value>,
  enable_if_t<is_convertible<_Other1, _Ty1>::value
    && is_convertible<_Other2, _Ty2>::value, int> = 0>
  constexpr pair(_Other1&& _Val1, _Other2&& _Val2)
   noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))

  : first(::std:: forward<_Other1>(_Val1)),
    second(::std:: forward<_Other2>(_Val2))
  {
  }

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, _Other1>::value
      && is_constructible<_Ty2, _Other2>::value>,
  enable_if_t<!is_convertible<_Other1, _Ty1>::value
    || !is_convertible<_Other2, _Ty2>::value, int> = 0>
  constexpr explicit pair(_Other1&& _Val1, _Other2&& _Val2)
   noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))

  : first(::std:: forward<_Other1>(_Val1)),
    second(::std:: forward<_Other2>(_Val2))
  {
  }

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, _Other1>::value
      && is_constructible<_Ty2, _Other2>::value>,
  enable_if_t<is_convertible<_Other1, _Ty1>::value
    && is_convertible<_Other2, _Ty2>::value, int> = 0>
  constexpr pair(pair<_Other1, _Other2>&& _Right)
   noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))

  : first(::std:: forward<_Other1>(_Right.first)),
   second(::std:: forward<_Other2>(_Right.second))
  {
  }

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, _Other1>::value
      && is_constructible<_Ty2, _Other2>::value>,
  enable_if_t<!is_convertible<_Other1, _Ty1>::value
    || !is_convertible<_Other2, _Ty2>::value, int> = 0>
  constexpr explicit pair(pair<_Other1, _Other2>&& _Right)
   noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))

  : first(::std:: forward<_Other1>(_Right.first)),
   second(::std:: forward<_Other2>(_Right.second))
  {
  }

 template<class _Other1,
  class _Other2>
  _Myt& operator=(pair<_Other1, _Other2>&& _Right)
  {
  first = ::std:: forward<_Other1>(_Right.first);
  second = ::std:: forward<_Other2>(_Right.second);
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept((is_nothrow_move_assignable<_Ty1>::value && is_nothrow_move_assignable<_Ty2>::value))

  {
  first = ::std:: forward<_Ty1>(_Right.first);
  second = ::std:: forward<_Ty2>(_Right.second);
  return (*this);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  first = _Right.first;
  second = _Right.second;
  return (*this);
  }

 _Ty1 first;
 _Ty2 second;

 void swap(_Myt& _Right)
  noexcept(_Is_nothrow_swappable<_Ty1>::value && _Is_nothrow_swappable<_Ty2>::value)

  {
  if (this != &_Right)
   {
   _Swap_adl(first, _Right.first);
   _Swap_adl(second, _Right.second);
   }
  }
 };



template<class _Ty1,
 class _Ty2,
 class = enable_if_t<_Is_swappable<_Ty1>::value && _Is_swappable<_Ty2>::value>> inline
 void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator==(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first == _Right.first && _Left.second == _Right.second);
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator!=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator<(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first < _Right.first ||
  (!(_Right.first < _Left.first) && _Left.second < _Right.second));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator>(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator<=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator>=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left < _Right));
 }



template<class _Ty1,
 class _Ty2> inline
 constexpr pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type>
  make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
 {
 typedef pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type> _Mypair;
 return (_Mypair(::std:: forward<_Ty1>(_Val1),
  ::std:: forward<_Ty2>(_Val2)));
 }


 namespace rel_ops
  {
template<class _Ty> inline
 bool operator!=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty> inline
 bool operator>(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty> inline
 bool operator<=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty> inline
 bool operator>=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left < _Right));
 }
  }
}

namespace std {
template<class _Ty,
 size_t _Size>
 class array;


template<class _Tuple>
 struct tuple_size;

template<class _Ty,
 size_t _Size>
 struct tuple_size<array<_Ty, _Size> >
  : integral_constant<size_t, _Size>
 {
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_size<pair<_Ty1, _Ty2> >
 : integral_constant<size_t, 2>
 {
 };

template<class... _Types>
 struct tuple_size<tuple<_Types...> >
 : integral_constant<size_t, sizeof...(_Types)>
 {
 };


template<class _Tuple>
 struct tuple_size<const _Tuple>
 : tuple_size<_Tuple>
 {
 };

template<class _Tuple>
 struct tuple_size<volatile _Tuple>
 : tuple_size<_Tuple>
 {
 };

template<class _Tuple>
 struct tuple_size<const volatile _Tuple>
 : tuple_size<_Tuple>
 {
 };


template<class _Ty>
 constexpr size_t tuple_size_v = tuple_size<_Ty>::value;



template<size_t _Index,
 class _Tuple>
 struct tuple_element;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 struct tuple_element<_Idx, array<_Ty, _Size> >
 {
 static_assert(_Idx < _Size, "array index out of bounds");

 typedef _Ty type;
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<0, pair<_Ty1, _Ty2> >
 {
 typedef _Ty1 type;
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<1, pair<_Ty1, _Ty2> >
 {
 typedef _Ty2 type;
 };

template<size_t _Index>
 struct tuple_element<_Index, tuple<> >
 {
 static_assert(_Always_false<integral_constant<size_t, _Index> >::value,
  "tuple index out of bounds");
 };

template<class _This,
 class... _Rest>
 struct tuple_element<0, tuple<_This, _Rest...> >
 {
 typedef _This type;
 typedef tuple<_This, _Rest...> _Ttype;
 };

template<size_t _Index,
 class _This,
 class... _Rest>
 struct tuple_element<_Index, tuple<_This, _Rest...> >
  : public tuple_element<_Index - 1, tuple<_Rest...> >
 {
 };


template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, const _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_const<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, volatile _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_volatile<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, const volatile _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_cv<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 using tuple_element_t = typename tuple_element<_Index, _Tuple>::type;


template<class _Ret,
 class _Pair> inline
 constexpr _Ret _Pair_get(_Pair& _Pr,
  integral_constant<size_t, 0>) noexcept
 {
 return (_Pr.first);
 }

template<class _Ret,
 class _Pair> inline
 constexpr _Ret _Pair_get(_Pair& _Pr,
  integral_constant<size_t, 1>) noexcept
 {
 return (_Pr.second);
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2> inline
 constexpr typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
  get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 typedef typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type& _Rtype;
 return (_Pair_get<_Rtype>(_Pr, integral_constant<size_t, _Idx>()));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr _Ty1& get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<0>(_Pr));
 }

template<class _Ty2,
 class _Ty1> inline
 constexpr _Ty2& get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<1>(_Pr));
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2> inline
 constexpr const typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
  get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 typedef const typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
  _Ctype;
 return (_Pair_get<_Ctype>(_Pr, integral_constant<size_t, _Idx>()));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr const _Ty1& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<0>(_Pr));
 }

template<class _Ty2,
 class _Ty1> inline
 constexpr const _Ty2& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<1>(_Pr));
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2> inline
 constexpr typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&&
  get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 typedef typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&& _RRtype;
 return (::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr)));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr _Ty1&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 return (::std:: get<0>(::std:: move(_Pr)));
 }

template<class _Ty2,
 class _Ty1> inline
 constexpr _Ty2&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 return (::std:: get<1>(::std:: move(_Pr)));
 }


template<class _Ty,
 class _Other = _Ty> inline
 _Ty exchange(_Ty& _Val, _Other&& _New_val)
 {
 _Ty _Old_val = ::std:: move(_Val);
 _Val = ::std:: forward<_Other>(_New_val);
 return (_Old_val);
 }


template<class _Ty> inline
 constexpr add_const_t<_Ty>& as_const(_Ty& _Val) noexcept
 {
 return (_Val);
 }

template<class _Ty>
 void as_const(const _Ty&&) = delete;
}


namespace std {
namespace tr1 {
using ::std:: get;
using ::std:: tuple_element;
using ::std:: tuple_size;
}
}



#pragma warning(pop)
#pragma pack(pop)
# 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
# 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
typedef const wchar_t *_Dbfile_t;
typedef unsigned int _Dbline_t;

__declspec(dllimport) void __cdecl _Debug_message(const wchar_t *,
 const wchar_t *, unsigned int);






struct _Container_proxy;
struct _Container_base12;
struct _Iterator_base12;

struct _Container_base0
 {
 void _Orphan_all()
  {
  }

 void _Swap_all(_Container_base0&)
  {
  }
 };

struct _Iterator_base0
 {
 void _Adopt(const void *)
  {
  }

 const _Container_base0 *_Getcont() const
  {
  return (0);
  }
 };


struct _Container_proxy
 {
 _Container_proxy()
  : _Mycont(0), _Myfirstiter(0)
  {
  }

 const _Container_base12 *_Mycont;
 _Iterator_base12 *_Myfirstiter;
 };

struct _Container_base12
 {
public:
 _Container_base12()
  : _Myproxy(0)
  {
  }

 _Container_base12(const _Container_base12&)
  : _Myproxy(0)
  {
  }

 _Container_base12& operator=(const _Container_base12&)
  {
  return (*this);
  }

 ~_Container_base12() noexcept
  {
  _Orphan_all();
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
  }

 void _Orphan_all();
 void _Swap_all(_Container_base12&);

 _Container_proxy *_Myproxy;
 };

struct _Iterator_base12
 {
public:
 _Iterator_base12()
  : _Myproxy(0), _Mynextiter(0)
  {
  }

 _Iterator_base12(const _Iterator_base12& _Right)
  : _Myproxy(0), _Mynextiter(0)
  {
  *this = _Right;
  }

 _Iterator_base12& operator=(const _Iterator_base12& _Right)
  {
  if (_Myproxy == _Right._Myproxy)
   ;
  else if (_Right._Myproxy != 0)
   _Adopt(_Right._Myproxy->_Mycont);
  else
   {

   _Lockit _Lock(3);
   _Orphan_me();

   }

  return (*this);
  }

 ~_Iterator_base12() noexcept
  {

  _Lockit _Lock(3);
  _Orphan_me();

  }

 void _Adopt(const _Container_base12 *_Parent)
  {
  if (_Parent == 0)
   {

   _Lockit _Lock(3);
   _Orphan_me();

   }
  else
   {
   _Container_proxy *_Parent_proxy = _Parent->_Myproxy;


   if (_Myproxy != _Parent_proxy)
    {
    _Lockit _Lock(3);
    _Orphan_me();
    _Mynextiter = _Parent_proxy->_Myfirstiter;
    _Parent_proxy->_Myfirstiter = this;
    _Myproxy = _Parent_proxy;
    }




   }
  }

 void _Clrcont()
  {
  _Myproxy = 0;
  }

 const _Container_base12 *_Getcont() const
  {
  return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
  }

 _Iterator_base12 **_Getpnext()
  {
  return (&_Mynextiter);
  }

 void _Orphan_me()
  {

  if (_Myproxy != 0)
   {
   _Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
   while (*_Pnext != 0 && *_Pnext != this)
    _Pnext = &(*_Pnext)->_Mynextiter;

   if (*_Pnext == 0)
    _Debug_message(L"ITERATOR LIST CORRUPTED!", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 202);
   *_Pnext = _Mynextiter;
   _Myproxy = 0;
   }

  }

 _Container_proxy *_Myproxy;
 _Iterator_base12 *_Mynextiter;
 };


inline void _Container_base12::_Orphan_all()
 {

 if (_Myproxy != 0)
  {
  _Lockit _Lock(3);

  for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
   *_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)
   (*_Pnext)->_Myproxy = 0;
  _Myproxy->_Myfirstiter = 0;
  }

 }

inline void _Container_base12::_Swap_all(_Container_base12& _Right)
 {

 _Lockit _Lock(3);


 _Container_proxy *_Temp = _Myproxy;
 _Myproxy = _Right._Myproxy;
 _Right._Myproxy = _Temp;

 if (_Myproxy != 0)
  _Myproxy->_Mycont = (_Container_base12 *)this;
 if (_Right._Myproxy != 0)
  _Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
 }






typedef _Container_base12 _Container_base;
typedef _Iterator_base12 _Iterator_base;



struct _Zero_then_variadic_args_t
 {
 };

struct _One_then_variadic_args_t
 {
 };

template<class _Ty1,
 class _Ty2,
 bool = is_empty<_Ty1>::value && !is_final<_Ty1>::value>
 class _Compressed_pair final
  : private _Ty1

 {
private:
 _Ty2 _Myval2;

 typedef _Ty1 _Mybase;

public:
 template<class... _Other2>
  constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
   _Other2&&... _Val2)
  : _Ty1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }

 template<class _Other1,
  class... _Other2>
  _Compressed_pair(_One_then_variadic_args_t,
   _Other1&& _Val1, _Other2&&... _Val2)
  : _Ty1(::std:: forward<_Other1>(_Val1)),
   _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }


 _Ty1& _Get_first() noexcept
  {
  return (*this);
  }

 const _Ty1& _Get_first() const noexcept
  {
  return (*this);
  }

 volatile _Ty1& _Get_first() volatile noexcept
  {
  return (*this);
  }

 const volatile _Ty1& _Get_first() const volatile noexcept
  {
  return (*this);
  }

 _Ty2& _Get_second() noexcept
  {
  return (_Myval2);
  }

 const _Ty2& _Get_second() const noexcept
  {
  return (_Myval2);
  }

 volatile _Ty2& _Get_second() volatile noexcept
  {
  return (_Myval2);
  }

 const volatile _Ty2& _Get_second() const volatile noexcept
  {
  return (_Myval2);
  }
 };

template<class _Ty1,
 class _Ty2>
 class _Compressed_pair<_Ty1, _Ty2, false> final

 {
private:
 _Ty1 _Myval1;
 _Ty2 _Myval2;

public:
 template<class... _Other2>
  constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
   _Other2&&... _Val2)
  : _Myval1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }

 template<class _Other1,
  class... _Other2>
  _Compressed_pair(_One_then_variadic_args_t,
   _Other1&& _Val1, _Other2&&... _Val2)
  : _Myval1(::std:: forward<_Other1>(_Val1)),
   _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }


 _Ty1& _Get_first() noexcept
  {
  return (_Myval1);
  }

 const _Ty1& _Get_first() const noexcept
  {
  return (_Myval1);
  }

 volatile _Ty1& _Get_first() volatile noexcept
  {
  return (_Myval1);
  }

 const volatile _Ty1& _Get_first() const volatile noexcept
  {
  return (_Myval1);
  }

 _Ty2& _Get_second() noexcept
  {
  return (_Myval2);
  }

 const _Ty2& _Get_second() const noexcept
  {
  return (_Myval2);
  }

 volatile _Ty2& _Get_second() volatile noexcept
  {
  return (_Myval2);
  }

 const volatile _Ty2& _Get_second() const volatile noexcept
  {
  return (_Myval2);
  }
 };


template<class _Ty,
 class = void>
 struct _Is_checked_helper
  : false_type
 {
 };

template<class _Ty>
 struct _Is_checked_helper<_Ty, void_t<
  typename _Ty::_Unchecked_type> >
  : true_type
 {
 };


template<class _Iter> inline
 typename _Is_checked_helper<_Iter>::type _Is_checked(_Iter)
 {
 return {};
 }


template<class _Iter> inline
 _Iter _Unchecked(_Iter _Src)
 {
 return (_Src);
 }
# 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
template<class _Iter> inline
 _Iter _Unchecked_idl0(_Iter _Src)
 {
 return (_Src);
 }




template<class _Iter,
 class _UIter> inline
 _Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
 {
 _Dest = _Src;
 return (_Dest);
 }
# 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
struct input_iterator_tag
 {
 };

struct _Mutable_iterator_tag
 {
 };

struct output_iterator_tag
 : _Mutable_iterator_tag
 {
 };

struct forward_iterator_tag
 : input_iterator_tag, _Mutable_iterator_tag
 {
 };

struct bidirectional_iterator_tag
 : forward_iterator_tag
 {
 };

struct random_access_iterator_tag
 : bidirectional_iterator_tag
 {
 };


struct _General_ptr_iterator_tag
 {
 };

struct _Trivially_copyable_ptr_iterator_tag
 : _General_ptr_iterator_tag
 {
 };

struct _Really_trivial_ptr_iterator_tag
 : _Trivially_copyable_ptr_iterator_tag
 {
 };


struct _Any_tag
 {
 constexpr _Any_tag() noexcept = default;
 template<class _Ty>
  constexpr _Any_tag(_Ty&&) noexcept {}
 };


template<class _Category,
 class _Ty,
 class _Diff = ptrdiff_t,
 class _Pointer = _Ty *,
 class _Reference = _Ty&>
 struct iterator
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;

 typedef _Pointer pointer;
 typedef _Reference reference;
 };

template<class _Category,
 class _Ty,
 class _Diff,
 class _Pointer,
 class _Reference,
 class _Base>
 struct _Iterator012
  : public _Base
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;

 typedef _Pointer pointer;
 typedef _Reference reference;
 };


typedef iterator<output_iterator_tag, void, void, void, void> _Outit;


template<class,
 class = void>
 struct _Iterator_traits_base
 {
 };

template<class _Iter>
 struct _Iterator_traits_base<_Iter, void_t<
  typename _Iter::iterator_category,
  typename _Iter::value_type,
  typename _Iter::difference_type,
  typename _Iter::pointer,
  typename _Iter::reference
  > >
 {
 typedef typename _Iter::iterator_category iterator_category;
 typedef typename _Iter::value_type value_type;
 typedef typename _Iter::difference_type difference_type;

 typedef typename _Iter::pointer pointer;
 typedef typename _Iter::reference reference;
 };

template<class _Iter>
 struct iterator_traits
  : _Iterator_traits_base<_Iter>
 {
 };

template<class _Ty>
 struct iterator_traits<_Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;

 typedef _Ty *pointer;
 typedef _Ty& reference;
 };

template<class _Ty>
 struct iterator_traits<const _Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;

 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 };


template<class _Iter>
 using _Iter_value_t = typename iterator_traits<_Iter>::value_type;


template<class _Iter>
 using _Iter_diff_t = typename iterator_traits<_Iter>::difference_type;


template<class _Iter>
 using _Iter_cat_t = typename iterator_traits<_Iter>::iterator_category;


template<class _Ty,
 class = void>
 struct _Is_iterator
  : false_type
 {
 };

template<class _Ty>
 struct _Is_iterator<_Ty, void_t<
  typename iterator_traits<_Ty>::iterator_category
  > >
  : true_type
 {
 };
# 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
template<class _Iter,
 class _Diff> inline
 auto _Unchecked_n1(_Iter _Src, _Diff, false_type)
 {
 return (_Src);
 }

template<class _Iter,
 class _Diff> inline
 auto _Unchecked_n1(_Iter _Src, _Diff _Count, true_type)
 {
 if (0 < _Count)
  {
  static_cast<void>((_Src) + (_Count));
  }

 return (_Unchecked(_Src));
 }

template<class _Iter,
 class _Diff> inline
 auto _Unchecked_n(_Iter _Src, _Diff _Count)
 {
 return (_Unchecked_n1(_Src, _Count, is_base_of<random_access_iterator_tag, _Iter_cat_t<_Iter>>()));
 }




template<class _Ty1,
 class _Ty2>
 struct _Is_same_size
  : bool_constant<sizeof(_Ty1) == sizeof(_Ty2)>
 {
 };


template<class _Elem,
 bool _Is_enum = is_enum<_Elem>::value>
 struct _Unwrap_enum
 {
 typedef underlying_type_t<_Elem> type;
 };

template<class _Elem>
 struct _Unwrap_enum<_Elem, false>
 {
 typedef _Elem type;
 };


template<class _Ty1,
 class _Ty2>
 struct _Both_or_neither_bool
  : bool_constant<is_same<bool, _Ty1>::value == is_same<bool, _Ty2>::value>
 {
 };


template<class _Source,
 class _Dest>
 struct _Ptr_cat_helper
 {
 typedef typename _Unwrap_enum<_Source>::type _USource;
 typedef typename _Unwrap_enum<_Dest>::type _UDest;
 typedef conditional_t<
  conjunction<
   _Is_same_size<_USource, _UDest>,
   is_integral<_USource>,
   is_integral<_UDest>,
   _Both_or_neither_bool<_USource, _UDest>,

   negation<is_volatile<_Source>>,
   negation<is_volatile<_Dest>>
  >::value,
  _Really_trivial_ptr_iterator_tag,
  _General_ptr_iterator_tag> type;
 };

template<class _Elem>
 struct _Ptr_cat_helper<_Elem, _Elem>
 {
 typedef conditional_t<
  is_trivially_copyable<_Elem>::value,
  conditional_t<is_trivial<_Elem>::value,
   _Really_trivial_ptr_iterator_tag,
   _Trivially_copyable_ptr_iterator_tag>,
  _General_ptr_iterator_tag> type;
 };

template<class _Anything>
 struct _Ptr_cat_helper<_Anything *, const _Anything *>
 {
 typedef _Really_trivial_ptr_iterator_tag type;
 };

template<class _Source,
 class _Dest> inline
 _General_ptr_iterator_tag _Ptr_copy_cat(const _Source&, const _Dest&)
 {
 return {};
 }

template<class _Source,
 class _Dest> inline
 conditional_t<is_trivially_assignable<_Dest&, _Source&>::value,
  typename _Ptr_cat_helper<remove_const_t<_Source>, _Dest>::type,
  _General_ptr_iterator_tag>
  _Ptr_copy_cat(_Source * const&, _Dest * const&)
 {
 return {};
 }

template<class _Source,
 class _Dest> inline
 _General_ptr_iterator_tag _Ptr_move_cat(const _Source&, const _Dest&)
 {
 return {};
 }

template<class _Source,
 class _Dest> inline
 conditional_t<is_trivially_assignable<_Dest&, _Source>::value,
  typename _Ptr_cat_helper<remove_const_t<_Source>, _Dest>::type,
  _General_ptr_iterator_tag>
  _Ptr_move_cat(_Source * const&, _Dest * const&)
 {
 return {};
 }
# 887 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
template<class _Pr,
 class _Ty1,
 class _Ty2> inline
 constexpr bool _Debug_lt_pred(_Pr&& _Pred,
  _Ty1&& _Left, _Ty2&& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
  noexcept(noexcept(!_Pred(_Left, _Right)) && noexcept(_Pred(_Right, _Left)))

 {
 return (!_Pred(_Left, _Right)
  ? false
  : _Pred(_Right, _Left)
   ? (_Debug_message(L"invalid comparator", _File, _Line), true)
   : true);
 }


template<class _Ty1,
 class _Ty2> inline
 constexpr bool _Debug_lt(_Ty1&& _Left, _Ty2&& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
  noexcept(noexcept(!(_Left < _Right)) && noexcept(_Right < _Left))

 {
 return (_Debug_lt_pred(less<>(),
  ::std:: forward<_Ty1>(_Left), ::std:: forward<_Ty2>(_Right), _File, _Line));
 }


template<class _InIt> inline
 void _Debug_pointer(_InIt&, _Dbfile_t, _Dbline_t)
 {
 }

template<class _Ty> inline
 void _Debug_pointer(_Ty *_Ptr, _Dbfile_t _File, _Dbline_t _Line)
 {
 if (_Ptr == 0)
  _Debug_message(L"invalid null pointer", _File, _Line);
 }


template<class _InIt> inline
 void _Debug_pointer_if(bool, _InIt&, _Dbfile_t, _Dbline_t)
 {
 }

template<class _Ty> inline
 void _Debug_pointer_if(bool _Test, _Ty *_Ptr,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 if (_Test && _Ptr == 0)
  _Debug_message(L"invalid null pointer", _File, _Line);
 }


template<class _InIt> inline
 void _Debug_range2(_InIt _First, _InIt _Last,
  _Dbfile_t, _Dbline_t, input_iterator_tag)
 {
 static_cast<void>(_First == _Last);
 }

template<class _RanIt> inline
 void _Debug_range2(_RanIt _First, _RanIt _Last,
  _Dbfile_t _File, _Dbline_t _Line, random_access_iterator_tag)
 {
 if (_First != _Last)
  {
  _Debug_pointer(_First, _File, _Line);
  _Debug_pointer(_Last, _File, _Line);
  if (_Last < _First)
   _Debug_message(L"invalid iterator range", _File, _Line);
  }
 }

template<class _InIt> inline
 void _Debug_range(_InIt _First, _InIt _Last,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range2(_First, _Last, _File, _Line, _Iter_cat_t<_InIt>());
 }


template<class _InIt,
 class _Pty> inline
 void _Debug_range_ptr2(_InIt _First, _InIt _Last, _Pty& _Ptr,
  _Dbfile_t _File, _Dbline_t _Line, input_iterator_tag)
 {
 if (_First != _Last)
  _Debug_pointer(_Ptr, _File, _Line);
 }

template<class _RanIt,
 class _Pty> inline
 void _Debug_range_ptr2(_RanIt _First, _RanIt _Last, _Pty& _Ptr,
  _Dbfile_t _File, _Dbline_t _Line, random_access_iterator_tag)
 {
 if (_First != _Last)
  {
  _Debug_pointer(_First, _File, _Line);
  _Debug_pointer(_Last, _File, _Line);
  if (_Last < _First)
   _Debug_message(L"invalid iterator range", _File, _Line);
  _Debug_pointer(_Ptr, _File, _Line);
  }
 }

template<class _InIt,
 class _Pty> inline
 void _Debug_range_ptr(_InIt _First, _InIt _Last, _Pty& _Ptr,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range_ptr2(_First, _Last, _Ptr, _File, _Line, _Iter_cat_t<_InIt>());
 }


template<class _InIt,
 class _Pr> inline
 void _Debug_order2(_InIt, _InIt, _Pr&,
  _Dbfile_t, _Dbline_t, input_iterator_tag)
 {
 }

template<class _FwdIt,
 class _Pr> inline
 void _Debug_order2(_FwdIt _First, _FwdIt _Last, _Pr& _Pred,
  _Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag)
 {
 for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)
  if (_Debug_lt_pred(_Pred, *_Next, *_First, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1017))
   _Debug_message(L"sequence not ordered", _File, _Line);
 }

template<class _InIt,
 class _Pr> inline
 void _Debug_order(_InIt _First, _InIt _Last, _Pr&& _Pred,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range_ptr(_First, _Last, _Pred, _File, _Line);
 _Debug_order2(_First, _Last, _Pred, _File, _Line, _Iter_cat_t<_InIt>());
 }
# 1043 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
template<class _Ty,
 size_t _Actual,
 class _Diff> inline
 void _Debug_array_size2(_Ty (&)[_Actual], _Diff _Desired,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 if (_Actual < _Desired)
  _Debug_message(L"array too small", _File, _Line);
 }





template<class _InIt,
 class _Diff> inline
 void _Advance1(_InIt& _Where, _Diff _Off, input_iterator_tag)
 {

 if (_Off < 0)
  _Debug_message(L"negative offset in advance", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1063);


 for (; 0 < _Off; --_Off)
  ++_Where;
 }

template<class _BidIt,
 class _Diff> inline
 void _Advance1(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
 {
 for (; 0 < _Off; --_Off)
  ++_Where;
 for (; _Off < 0; ++_Off)
  --_Where;
 }

template<class _RanIt,
 class _Diff> inline
 void _Advance1(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
 {
 _Where += _Off;
 }

template<class _InIt,
 class _Diff> inline
 void advance(_InIt& _Where, _Diff _Off)
 {

 _Advance1(_Where, _Off, _Iter_cat_t<remove_const_t<_InIt>>());
 }


template<class _InIt> inline
 _Iter_diff_t<_InIt>
  _Distance1(_InIt _First, _InIt _Last, input_iterator_tag)
 {
 _Iter_diff_t<_InIt> _Off = 0;
 for (; _First != _Last; ++_First)
  ++_Off;

 return (_Off);
 }

template<class _RanIt> inline
 _Iter_diff_t<_RanIt>
  _Distance1(_RanIt _First, _RanIt _Last, random_access_iterator_tag)
 {

 if (_First != _Last)
  {
  _Debug_pointer(_First, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1114);
  _Debug_pointer(_Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1115);
  }


 return (_Last - _First);
 }

template<class _InIt> inline
 _Iter_diff_t<_InIt>
  distance(_InIt _First, _InIt _Last)
 {
 return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));
 }


template<class _InIt> inline
 _InIt next(_InIt _First, _Iter_diff_t<_InIt> _Off = 1)
 {
 static_assert(is_base_of<input_iterator_tag,
  typename iterator_traits<_InIt>::iterator_category>::value,
  "next requires input iterator");

 ::std:: advance(_First, _Off);
 return (_First);
 }


template<class _BidIt> inline
 _BidIt prev(_BidIt _First, _Iter_diff_t<_BidIt> _Off = 1)
 {
 static_assert(is_base_of<bidirectional_iterator_tag,
  typename iterator_traits<_BidIt>::iterator_category>::value,
  "prev requires bidirectional iterator");

 ::std:: advance(_First, -_Off);
 return (_First);
 }


template<class _Ty>
 struct pointer_traits;

template<class _RanIt>
 class reverse_iterator
  : public iterator<
   typename iterator_traits<_RanIt>::iterator_category,
   typename iterator_traits<_RanIt>::value_type,
   typename iterator_traits<_RanIt>::difference_type,
   typename iterator_traits<_RanIt>::pointer,
   typename iterator_traits<_RanIt>::reference>
 {
 typedef reverse_iterator<_RanIt> _Myt;

public:
 typedef typename iterator_traits<_RanIt>::difference_type difference_type;
 typedef typename iterator_traits<_RanIt>::pointer pointer;
 typedef typename iterator_traits<_RanIt>::reference reference;
 typedef _RanIt iterator_type;

 reverse_iterator()
  : current()
  {
  }

 explicit reverse_iterator(_RanIt _Right)
  : current(_Right)
  {
  }

 template<class _Other>
  reverse_iterator(const reverse_iterator<_Other>& _Right)
  : current(_Right.base())
  {
  }

 template<class _Other>
  _Myt& operator=(const reverse_iterator<_Other>& _Right)
  {
  current = _Right.base();
  return (*this);
  }

 _RanIt base() const
  {
  return (current);
  }

 reference operator*() const
  {
  _RanIt _Tmp = current;
  return (*--_Tmp);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  --current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  ++current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }



 _Myt& operator+=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  return (_Myt(current - _Off));
  }

 _Myt& operator-=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  return (_Myt(current + _Off));
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

protected:
 _RanIt current;
 };

template<class _RanIt>
 struct _Is_checked_helper<reverse_iterator<_RanIt> >
  : public _Is_checked_helper<_RanIt>
 {
 };


template<class _RanIt> inline
 reverse_iterator<_RanIt> operator+(
  typename reverse_iterator<_RanIt>::difference_type _Off,
  const reverse_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2>
 auto inline operator-(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
   -> decltype(_Right.base() - _Left.base())
 {
 return (_Right.base() - _Left.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator==(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Left.base() == _Right.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator!=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right.base() < _Left.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt> inline
 reverse_iterator<_RanIt> make_reverse_iterator(_RanIt _Iter)
 {
 return (reverse_iterator<_RanIt>(_Iter));
 }



template<class _Container>
 auto inline begin(_Container& _Cont) -> decltype(_Cont.begin())
 {
 return (_Cont.begin());
 }

template<class _Container>
 auto inline begin(const _Container& _Cont) -> decltype(_Cont.begin())
 {
 return (_Cont.begin());
 }

template<class _Container>
 auto inline end(_Container& _Cont) -> decltype(_Cont.end())
 {
 return (_Cont.end());
 }

template<class _Container>
 auto inline end(const _Container& _Cont) -> decltype(_Cont.end())
 {
 return (_Cont.end());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr _Ty *begin(_Ty (&_Array)[_Size]) noexcept
 {
 return (_Array);
 }

template<class _Ty,
 size_t _Size> inline
 constexpr _Ty *end(_Ty (&_Array)[_Size]) noexcept
 {
 return (_Array + _Size);
 }


template<class _Container>
 constexpr auto inline cbegin(const _Container& _Cont)
  noexcept(noexcept(::std:: begin(_Cont)))
  -> decltype(::std:: begin(_Cont))
 {
 return (::std:: begin(_Cont));
 }

template<class _Container>
 constexpr auto inline cend(const _Container& _Cont)
  noexcept(noexcept(::std:: end(_Cont)))
  -> decltype(::std:: end(_Cont))
 {
 return (::std:: end(_Cont));
 }


template<class _Container>
 auto inline rbegin(_Container& _Cont) -> decltype(_Cont.rbegin())
 {
 return (_Cont.rbegin());
 }

template<class _Container>
 auto inline rbegin(const _Container& _Cont) -> decltype(_Cont.rbegin())
 {
 return (_Cont.rbegin());
 }

template<class _Container>
 auto inline rend(_Container& _Cont) -> decltype(_Cont.rend())
 {
 return (_Cont.rend());
 }

template<class _Container>
 auto inline rend(const _Container& _Cont) -> decltype(_Cont.rend())
 {
 return (_Cont.rend());
 }

template<class _Ty,
 size_t _Size> inline
 reverse_iterator<_Ty *> rbegin(_Ty (&_Array)[_Size])
 {
 return (reverse_iterator<_Ty *>(_Array + _Size));
 }

template<class _Ty,
 size_t _Size> inline
 reverse_iterator<_Ty *> rend(_Ty (&_Array)[_Size])
 {
 return (reverse_iterator<_Ty *>(_Array));
 }

template<class _Elem> inline
 reverse_iterator<const _Elem *>
  rbegin(::std:: initializer_list<_Elem> _Ilist)
 {
 return (reverse_iterator<const _Elem *>(_Ilist.end()));
 }

template<class _Elem> inline
 reverse_iterator<const _Elem *>
  rend(::std:: initializer_list<_Elem> _Ilist)
 {
 return (reverse_iterator<const _Elem *>(_Ilist.begin()));
 }


template<class _Container>
 auto inline crbegin(const _Container& _Cont)
  -> decltype(::std:: rbegin(_Cont))
 {
 return (::std:: rbegin(_Cont));
 }

template<class _Container>
 auto inline crend(const _Container& _Cont)
  -> decltype(::std:: rend(_Cont))
 {
 return (::std:: rend(_Cont));
 }


template<class _Container>
 constexpr auto inline size(const _Container& _Cont)
  -> decltype(_Cont.size())
 {
 return (_Cont.size());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr size_t size(const _Ty(&)[_Size]) noexcept
 {
 return (_Size);
 }

template<class _Container>
 constexpr auto inline empty(const _Container& _Cont)
  -> decltype(_Cont.empty())
 {
 return (_Cont.empty());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr bool empty(const _Ty(&)[_Size]) noexcept
 {
 return (false);
 }

template<class _Elem> inline
 constexpr bool empty(
  ::std:: initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.size() == 0);
 }

template<class _Container>
 constexpr auto inline data(_Container& _Cont)
  -> decltype(_Cont.data())
 {
 return (_Cont.data());
 }

template<class _Container>
 constexpr auto inline data(const _Container& _Cont)
  -> decltype(_Cont.data())
 {
 return (_Cont.data());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr _Ty *data(_Ty(&_Array)[_Size]) noexcept
 {
 return (_Array);
 }

template<class _Elem> inline
 constexpr const _Elem *data(
  ::std:: initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.begin());
 }


template<class _Ty,
 size_t _Size>
 class _Array_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   _Ty,
   ptrdiff_t,
   const _Ty *,
   const _Ty&,
   _Iterator_base>
 {
public:
 typedef _Array_const_iterator<_Ty, _Size> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 enum {_EEN_SIZE = _Size};
# 1687 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
 _Array_const_iterator()
  : _Ptr(),
  _Idx(0)
  {
  }

 explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
  : _Ptr(_Parg),
  _Idx(_Off)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  _Idx = _Right - _Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Ptr + _Idx);
  }

 reference operator*() const
  {

  if (_Ptr == 0
   || _Size <= _Idx)
   {
   _Debug_message(L"array iterator not dereferencable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1718);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1719, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1719, 0); };
   }






                              ;

  return (_Ptr[_Idx]);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  if (_Ptr == 0
   || _Size <= _Idx)
   {
   _Debug_message(L"array iterator not incrementable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1743);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1744, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1744, 0); };
   }






  ++_Idx;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (_Ptr == 0
   || _Idx <= 0)
   {
   _Debug_message(L"array iterator not decrementable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1769);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1770, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1770, 0); };
   }






  --_Idx;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  if (_Size < _Idx + _Off)
   {
   _Debug_message(L"array iterator + offset out of range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1794);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1795, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1795, 0); };
   }





  _Idx += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx < _Right._Idx
   ? -(difference_type)(_Right._Idx - _Idx)
   : (difference_type)_Idx - _Right._Idx);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx == _Right._Idx);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx < _Right._Idx);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  if (_Ptr != _Right._Ptr)
   {
   _Debug_message(L"array iterators incompatible", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1873);
   { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1874, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1874, 0); };
   }
  }
# 1885 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
 pointer _Ptr;
 size_t _Idx;

 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size>&
  _Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
   typename _Array_const_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size> operator+(
  typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
  _Array_const_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }


template<class _Ty,
 size_t _Size>
 class _Array_iterator
  : public _Array_const_iterator<_Ty, _Size>
 {
public:
 typedef _Array_iterator<_Ty, _Size> _Myiter;
 typedef _Array_const_iterator<_Ty, _Size> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef _Ty *pointer;
 typedef _Ty& reference;

 _Array_iterator()
  {
  }

 explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
  : _Mybase(_Parg, _Off)
  {
  }
 enum {_EEN_SIZE = _Size};
 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  ((_Mybase *)this)->_Rechecked(_Right);
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return ((pointer)((_Mybase *)this)->_Unchecked());
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size>&
  _Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
   typename _Array_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size> operator+(
  typename _Array_iterator<_Ty, _Size>::difference_type _Off,
  _Array_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }


template<class _RanIt>
 class move_iterator
 {
public:
 typedef move_iterator<_RanIt> _Myt;
 typedef typename iterator_traits<_RanIt>::iterator_category
  iterator_category;
 typedef typename iterator_traits<_RanIt>::value_type
  value_type;
 typedef typename iterator_traits<_RanIt>::difference_type
  difference_type;
 typedef _RanIt pointer;
 typedef typename iterator_traits<_RanIt>::reference _Ref0;
 typedef conditional_t<is_reference<_Ref0>::value,
  remove_reference_t<_Ref0>&&, _Ref0> reference;
 typedef _RanIt iterator_type;

 move_iterator()
  : current()
  {
  }

 explicit move_iterator(iterator_type _Right)
  : current(_Right)
  {
  }

 template<class _RanIt2>
  move_iterator(const move_iterator<_RanIt2>& _Right)
  : current(_Right.base())
  {
  }

 template<class _RanIt2>
  _Myt& operator=(const move_iterator<_RanIt2>& _Right)
  {
  current = _Right.base();
  return (*this);
  }

 _RanIt base() const
  {
  return (current);
  }

 reference operator*() const
  {
  return (static_cast<reference>(*current));
  }

 pointer operator->() const
  {
  return (current);
  }

 _Myt& operator++()
  {
  ++current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  --current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 template<class _RanIt2>
  bool _Equal(const move_iterator<_RanIt2>& _Right) const
  {
  return (current == _Right.base());
  }



 _Myt& operator+=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  return (_Myt(current + _Off));
  }

 _Myt& operator-=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  return (_Myt(current - _Off));
  }

 reference operator[](difference_type _Off) const
  {
  return (::std:: move(current[_Off]));
  }

 template<class _RanIt2>
  bool _Less(const move_iterator<_RanIt2>& _Right) const
  {
  return (current < _Right.base());
  }

 difference_type operator-(const _Myt& _Right) const
  {
  return (current - _Right.base());
  }

protected:
 iterator_type current;
 };

template<class _RanIt>
 struct _Is_checked_helper<move_iterator<_RanIt> >
  : public _Is_checked_helper<_RanIt>
 {
 };


template<class _RanIt,
 class _Diff> inline
 move_iterator<_RanIt>
  operator+(_Diff _Off,
  const move_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2>
 auto inline operator-(
  move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
   -> decltype(_Left.base() - _Right.base())
 {
 return (_Left.base() - _Right.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator==(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator!=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt> inline
 move_iterator<_RanIt> make_move_iterator(_RanIt _Iter)
 {
 return (move_iterator<_RanIt>(_Iter));
 }


template<class _Traits>
 struct _Char_traits_eq
 {
 typedef typename _Traits::char_type _Elem;

 bool operator()(_Elem _Left, _Elem _Right) const
  {
  return (_Traits::eq(_Left, _Right));
  }
 };


template<class _Traits>
 struct _Char_traits_lt
 {
 typedef typename _Traits::char_type _Elem;

 bool operator()(_Elem _Left, _Elem _Right) const
  {
  return (_Traits::lt(_Left, _Right));
  }
 };


template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_memmove(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 const char * const _First_ch = reinterpret_cast<const char *>(_First);
 const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
 char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
 const size_t _Count = _Last_ch - _First_ch;
 :: memmove(_Dest_ch, _First_ch, _Count);
 return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, (void)++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {

 return (_Copy_unchecked1(_First, _Last,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) + ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Copy_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2362);
 return (_Copy_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt copy(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "copy" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Copy_no_deprecate(_First, _Last, _Dest));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  _Copy_no_deprecate(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }



template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked2(_InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag)
 {
 if (0 < _Count)
  {
  *_Dest = *_First;
  while (0 < --_Count)
   *++_Dest = *++_First;
  return (++_Dest);
  }

 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked2(_InIt _First, _Diff _Count,
  _OutIt _Dest, forward_iterator_tag)
 {
 for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked1(_InIt _First, _Diff _Count,
  _OutIt _Dest, _General_ptr_iterator_tag)
 {


 return (_Copy_n_unchecked2(_First, _Count,
  _Dest, _Iter_cat_t<_InIt>()));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked1(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 if (0 < _Count)
  return (_Copy_memmove(_First, _First + _Count, _Dest));
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {
 return (_Copy_n_unchecked1(_First, _Count,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {

 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "copy_n" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Rechecked(_Dest,
  _Copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Unchecked_n(_Dest, _Count))));
 }


template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutIt> inline
 _OutIt copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutIt _Dest)
 {

 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "copy_n" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 _Debug_array_size2(_First, _Count, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2473);
 return (_Rechecked(_Dest,
  _Copy_n_unchecked(_First, _Count, _Unchecked_n(_Dest, _Count))));
 }

template<class _InIt,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy_n(_InIt _First, _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 _Debug_array_size2(_Dest, _Count, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2485);
 return (_Copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Dest));
 }

template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 _Debug_array_size2(_First, _Count, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2497);
 _Debug_array_size2(_Dest, _Count, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2498);
 return (_Copy_n_unchecked(_First, _Count, _Dest));
 }



template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_memmove(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 const char * const _First_ch = reinterpret_cast<const char *>(_First);
 const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
 char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
 const size_t _Count = _Last_ch - _First_ch;
 return (static_cast<_BidIt2>(
  :: memmove(_Dest_ch - _Count, _First_ch, _Count)));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = *--_Last;
 return (_Dest);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_backward_memmove(_First, _Last, _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Copy_backward_unchecked1(_First, _Last,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Copy_backward_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) - ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Copy_backward_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "copy_backward" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2569);
 return (_Copy_backward1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_BidIt1>(), _Iter_cat_t<_BidIt2>()));
 }


template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, (void)++_First)
  *_Dest = ::std:: move(*_First);
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Move_unchecked1(_First, _Last,
  _Dest, _Ptr_move_cat(_First, _Dest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Move_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) + ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Move_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2626);
 return (_Move_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt move(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "move" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Move_no_deprecate(_First, _Last, _Dest));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *move(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  _Move_no_deprecate(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }



template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = ::std:: move(*--_Last);
 return (_Dest);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_backward_memmove(_First, _Last, _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Move_backward_unchecked1(_First, _Last,
  _Dest, _Ptr_move_cat(_First, _Dest)));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Move_backward_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) - ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Move_backward_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "move_backward" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2706);
 return (_Move_backward1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_BidIt1>(), _Iter_cat_t<_BidIt2>()));
 }


template<class _Ty>
 struct _Is_character
  : false_type
  {
  };

template<>
 struct _Is_character<char>
  : true_type
  {
  };

template<>
 struct _Is_character<signed char>
  : true_type
  {
  };

template<>
 struct _Is_character<unsigned char>
  : true_type
  {
  };

template<class _FwdIt,
 class _Ty>
 struct _Fill_memset_is_safe_helper
 {
 typedef _Iter_value_t<_FwdIt> _Value_type;
 typedef typename conjunction<
  is_pointer<_FwdIt>,
  disjunction<
   conjunction<
    _Is_character<_Ty>,
    _Is_character<_Value_type>>,
   conjunction<
    is_same<bool, _Ty>,
    is_same<bool, _Value_type>>
  >>::type type;
 };

template<class _FwdIt,
 class _Ty> inline
 typename _Fill_memset_is_safe_helper<_FwdIt, _Ty>::type
 _Fill_memset_is_safe(const _FwdIt&, const _Ty&)
 {
 return {};
 }

template<class _FwdIt,
 class _Ty> inline
 void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, false_type)
 {
 for (; _First != _Last; ++_First)
  *_First = _Val;
 }

template<class _FwdIt,
 class _Ty> inline
 void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, true_type)
 {
 :: memset(_First, _Val, _Last - _First);
 }

template<class _FwdIt,
 class _Ty> inline
 void _Fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));
 }

template<class _FwdIt,
 class _Ty> inline
 void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2787);
 _Fill_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val);
 }


template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n_unchecked1(_OutIt _Dest, _Diff _Count, const _Ty& _Val, false_type)
 {
 for (; 0 < _Count; --_Count, (void)++_Dest)
  *_Dest = _Val;
 return (_Dest);
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n_unchecked1(_OutIt _Dest, _Diff _Count, const _Ty& _Val, true_type)
 {
 if (0 < _Count)
  {
  :: memset(_Dest, _Val, _Count);
  return (_Dest + _Count);
  }

 return (_Dest);
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n_unchecked(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {

 return (_Fill_n_unchecked1(_Dest, _Count, _Val, _Fill_memset_is_safe(_Dest, _Val)));
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {
 return (_Rechecked(_Dest,
  _Fill_n_unchecked(_Unchecked_n(_Dest, _Count), _Count, _Val)));
 }


template<class _Elem1,
 class _Elem2>
 struct _Value_equality_is_bitwise_equality
  : bool_constant<static_cast<_Elem1>(-1) == static_cast<_Elem2>(-1)>
 {



 };

template<class _Elem1,
 class _Elem2,
 class _Pr>
 struct _Equal_memcmp_is_safe_helper
  : false_type
 {

 };

template<class _Elem1,
 class _Elem2>
 struct _Equal_memcmp_is_safe_helper<_Elem1, _Elem2, equal_to<>>
  : conjunction<
   _Is_same_size<_Elem1, _Elem2>,
   is_integral<_Elem1>,
   is_integral<_Elem2>,
   negation<is_same<bool, _Elem1>>,
   negation<is_same<bool, _Elem2>>,
   negation<is_volatile<_Elem1>>,
   negation<is_volatile<_Elem2>>,


   _Value_equality_is_bitwise_equality<_Elem1, _Elem2>
  >::type
 {
 };

template<class _Elem1,
 class _Elem2>
 struct _Equal_memcmp_is_safe_helper<_Elem1 *, _Elem2 *, equal_to<>>
  : is_same<remove_cv_t<_Elem1>, remove_cv_t<_Elem2>>::type
 {
 };

template<class _Elem>
 struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, _Char_traits_eq<char_traits<_Elem>>>
  : _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
 {
 };

template<class _Elem>
 struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<_Elem>>
  : _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
 {

 };

template<class _Iter1,
 class _Iter2,
 class _Pr> inline
 false_type _Equal_memcmp_is_safe(const _Iter1&, const _Iter2&, const _Pr&)
 {
 return {};
 }

template<class _Obj1,
 class _Obj2,
 class _Pr> inline
 typename _Equal_memcmp_is_safe_helper<
  remove_const_t<_Obj1>,
  remove_const_t<_Obj2>,
  _Pr>::type
  _Equal_memcmp_is_safe(_Obj1 * const&, _Obj2 * const&, const _Pr&)
 {
 return {};
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred, false_type)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   return (false);
 return (true);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr&, true_type)
 {
 const char * const _First1_ch = reinterpret_cast<const char *>(_First1);
 const char * const _First2_ch = reinterpret_cast<const char *>(_First2);
 const size_t _Count = reinterpret_cast<const char *>(_Last1) - _First1_ch;
 return (:: memcmp(_First1_ch, _First2_ch, _Count) == 0);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred)
 {
 return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,
  _Equal_memcmp_is_safe(_First1, _First2, _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred, input_iterator_tag, input_iterator_tag)
 {
 return (_Equal_unchecked(_First1, _Last1, _Unchecked_idl0(_First2), _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_First2) + ((_Last1) - (_First1)));
 return (_Equal_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred)
 {
 _Debug_range_ptr(_First1, _Last1, _First2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2971);
 _Debug_pointer_if(_First1 != _Last1, _Pred, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2972);
 return (_Equal_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Pred, _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "equal" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 return (_Equal_no_deprecate(_First1, _Last1, _First2, _Pred));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _Pr,
 class = enable_if_t<!is_same<_InTy *, _Pr>::value>> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize], _Pr _Pred)
 {
 return (_Equal_no_deprecate(_First1, _Last1,
  _Array_iterator<_InTy, _InSize>(_First2), _Pred));
 }



template<class _InIt1,
 class _InIt2> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2)
 {
 return (::std:: equal(_First1, _Last1, _First2,
  equal_to<>()));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize])
 {
 return (::std:: equal(_First1, _Last1, _First2,
  equal_to<>()));
 }



template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred,
   input_iterator_tag, input_iterator_tag)
 {

 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3032);
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   return (false);
 return (_First1 == _Last1 && _First2 == _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred,
   random_access_iterator_tag, random_access_iterator_tag)
 {

 if (_Last1 - _First1 != _Last2 - _First2)
  return (false);
 _Debug_pointer_if(_First1 != _Last1, _Pred, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3049);
 return (_Equal_unchecked(_First1, _Last1, _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3059);
 _Debug_range(_First2, _Last2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3060);
 return (_Equal_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred,
   _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
 }


template<class _InIt1,
 class _InIt2> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: equal(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _Elem1,
 class _Elem2,
 class _FTy>
 struct _Lex_compare_check_element_types_helper
  : conjunction<
   _Is_character<_Elem1>,
   _Is_character<_Elem2>,
   _Is_character<_FTy>,
   is_unsigned<_FTy>
  >::type
 {
 };

template<class _Elem1,
 class _Elem2>
 struct _Lex_compare_check_element_types_helper<_Elem1, _Elem2, void>
  : conjunction<
   _Is_character<_Elem1>,
   _Is_character<_Elem2>,
   is_unsigned<_Elem1>,
   is_unsigned<_Elem2>
  >::type
 {
 };

template<class _Memcmp_pr>
 struct _Lex_compare_optimize
 {
 };

template<class _Memcmp_pr,
 class _Obj1,
 class _Obj2,
 class _FTy>
 using _Lex_compare_check_element_types = _Lex_compare_optimize<conditional_t<
  _Lex_compare_check_element_types_helper<remove_const_t<_Obj1>, remove_const_t<_Obj2>, _FTy>::value,
  _Memcmp_pr, void>>;

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 _Lex_compare_optimize<void> _Lex_compare_memcmp_classify(const _InIt1&, const _InIt2&, const _Pr&)
 {

 return {};
 }

template<class _Obj1,
 class _Obj2,
 class _FTy> inline
 _Lex_compare_check_element_types<less<int>, _Obj1, _Obj2, _FTy>
  _Lex_compare_memcmp_classify(_Obj1 * const&, _Obj2 * const&, const less<_FTy>&)
 {
 return {};
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Lex_compare_unchecked1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred, _Lex_compare_optimize<void>)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  {
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3141))
   return (true);
  else if (_Pred(*_First2, *_First1))
   return (false);
  }

 return (_First1 == _Last1 && _First2 != _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr,
 class _Memcmp_pr> inline
 bool _Lex_compare_unchecked1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr&, _Lex_compare_optimize<_Memcmp_pr>)
 {
 const size_t _Num1 = _Last1 - _First1;
 const size_t _Num2 = _Last2 - _First2;
 const int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
 return (_Memcmp_pr{}(_Ans, 0) || _Ans == 0 && _Num1 < _Num2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Lex_compare_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred)
 {
 return (_Lex_compare_unchecked1(_First1, _Last1, _First2, _Last2, _Pred,
  _Lex_compare_memcmp_classify(_First1, _First2, _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3179);
 _Debug_range(_First2, _Last2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3180);
 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3181);
 return (_Lex_compare_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred));
 }


template<class _InIt1,
 class _InIt2> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: lexicographical_compare(_First1, _Last1,
  _First2, _Last2, less<>()));
 }


template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, true_type, _Any_tag)
 {
 return ((-128) <= _Val && _Val <= 127);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type)
 {
 return (_Val <= 127 || static_cast<_Ty>((-128)) <= _Val);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type)
 {
 return (_Val <= 127);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, false_type, true_type, _Any_tag)
 {
 return (0 <= _Val && _Val <= 0xff);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, false_type, false_type, _Any_tag)
 {
 return (_Val <= 0xff);
 }

template<class _InIt,
 class _Ty> inline
 bool _Within_limits(_InIt, const _Ty& _Val)
 {
 typedef typename remove_pointer<_InIt>::type _Elem;
 return (_Within_limits(_Val, is_signed<_Elem>(), is_signed<_Ty>(),
  integral_constant<bool, -1 == static_cast<_Ty>(-1)>()));
 }

template<class _InIt> inline
 bool _Within_limits(_InIt, const bool&)
 {
 return (true);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find_unchecked1(_InIt _First, _InIt _Last, const _Ty& _Val, true_type)
 {
 if (!_Within_limits(_First, _Val))
  return (_Last);
 _First = static_cast<_InIt>(:: memchr(
  _First, static_cast<unsigned char>(_Val), _Last - _First));
 return (_First ? _First : _Last);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find_unchecked1(_InIt _First, _InIt _Last, const _Ty& _Val, false_type)
 {
 for (; _First != _Last; ++_First)
  if (*_First == _Val)
   break;
 return (_First);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find_unchecked(_InIt _First, _InIt _Last, const _Ty& _Val)
 {

 typedef integral_constant<bool,
  (is_same<_InIt, char *>::value
  || is_same<_InIt, signed char *>::value
  || is_same<_InIt, unsigned char *>::value
  || is_same<_InIt, const char *>::value
  || is_same<_InIt, const signed char *>::value
  || is_same<_InIt, const unsigned char *>::value)
  && is_integral<_Ty>::value
 > _Memchr_opt;
 return (_Find_unchecked1(_First, _Last, _Val, _Memchr_opt()));
 }

template<class _InIt,
 class _Ty> inline
 _InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3284);
 return (_Rechecked(_First,
  _Find_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val)));
 }


template<class _InIt,
 class _Ty,
 class _Pr> inline
 _InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   break;
 return (_First);
 }


template<class _InIt,
 class _Ty> inline
 _Iter_diff_t<_InIt>
  _Count_unchecked(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 _Iter_diff_t<_InIt> _Count = 0;

 for (; _First != _Last; ++_First)
  if (*_First == _Val)
   ++_Count;
 return (_Count);
 }

template<class _InIt,
 class _Ty> inline
 _Iter_diff_t<_InIt>
  count(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3320);
 return (_Count_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val));
 }


template<class _InIt,
 class _Ty,
 class _Pr> inline
 _Iter_diff_t<_InIt>
  _Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr& _Pred)
 {
 _Iter_diff_t<_InIt> _Count = 0;

 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   ++_Count;
 return (_Count);
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 void _Trim_matching_suffixes(_FwdIt1&, _FwdIt2&, _Pr&,
  forward_iterator_tag, forward_iterator_tag)
 {
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 void _Trim_matching_suffixes(_FwdIt1& _Last1, _FwdIt2& _Last2, _Pr& _Pred,
  bidirectional_iterator_tag, bidirectional_iterator_tag)
 {

 while (_Pred(*--_Last1, *--_Last2))
  ;
 ++_Last1;
 ++_Last2;
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Check_match_counts(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred)
 {
 _Trim_matching_suffixes(_Last1, _Last2, _Pred,
  _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>());
 for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
  if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
   {
   _Iter_diff_t<_FwdIt2> _Count2 = _Count_pr(_First2, _Last2, *_Next1, _Pred);
   if (_Count2 == 0)
    return (false);
   _FwdIt1 _Skip1 = ::std:: next(_Next1);
   _Iter_diff_t<_FwdIt1> _Count1 = _Count_pr(_Skip1, _Last1, *_Next1, _Pred) + 1;
   if (_Count2 != _Count1)
    return (false);
   }

 return (true);
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr& _Pred)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   {
   _FwdIt2 _Last2 = ::std:: next(_First2,
    ::std:: distance(_First1, _Last1));
   return (_Check_match_counts(_First1, _Last1,
    _First2, _Last2, _Pred));
   }

 return (true);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_no_deprecate1(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr& _Pred, forward_iterator_tag, forward_iterator_tag)
 {
 return (_Is_permutation_unchecked(_First1, _Last1, _Unchecked_idl0(_First2), _Pred));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_no_deprecate1(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_First2) + ((_Last1) - (_First1)));
 return (_Is_permutation_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_no_deprecate(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr& _Pred)
 {
 _Debug_range_ptr(_First1, _Last1, _First2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3429);
 _Debug_pointer_if(_First1 != _Last1, _Pred, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3430);
 return (_Is_permutation_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Pred, _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "is_permutation" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 return (_Is_permutation_no_deprecate(_First1, _Last1, _First2, _Pred));
 }


template<class _FwdIt1,
 class _InTy,
 size_t _InSize,
 class _Pr,
 class = enable_if_t<!is_same<_InTy *, _Pr>::value>> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _InTy (&_First2)[_InSize], _Pr _Pred)
 {
 return (_Is_permutation_no_deprecate(_First1, _Last1,
  _Array_iterator<_InTy, _InSize>(_First2), _Pred));
 }



template<class _FwdIt1,
 class _FwdIt2> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2)
 {
 return (::std:: is_permutation(_First1, _Last1,
  _First2, equal_to<>()));
 }



template<class _FwdIt1,
 class _InTy,
 size_t _InSize> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _InTy (&_First2)[_InSize])
 {
 return (::std:: is_permutation(_First1, _Last1, _First2, equal_to<>()));
 }



template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
  forward_iterator_tag, forward_iterator_tag)
 {

 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3490);
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   {
   if (::std:: distance(_First1, _Last1)
    != ::std:: distance(_First2, _Last2))
    return (false);
   else
    return (_Check_match_counts(_First1, _Last1,
     _First2, _Last2, _Pred));
   }

 return (_First1 == _Last1 && _First2 == _Last2);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
  random_access_iterator_tag, random_access_iterator_tag)
 {

 if (_Last1 - _First1 != _Last2 - _First2)
  return (false);
 _Debug_pointer_if(_First1 != _Last1, _Pred, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3515);
 return (_Is_permutation_unchecked(_First1, _Last1, _First2, _Pred));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {

 _Debug_range(_First1, _Last1, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3526);
 _Debug_range(_First2, _Last2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3527);
 return (_Is_permutation_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred,
  _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: is_permutation(_First1, _Last1,
  _First2, _Last2, equal_to<>()));
 }


template<class _BidIt> inline
 void _Reverse_unchecked(_BidIt _First, _BidIt _Last)
 {
 for (; _First != _Last && _First != --_Last; ++_First)
  ::std:: iter_swap(_First, _Last);
 }

template<class _BidIt> inline
 void reverse(_BidIt _First, _BidIt _Last)
 {
 _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3554);
 _Reverse_unchecked(_Unchecked(_First), _Unchecked(_Last));
 }


template<class _FwdIt> inline
 _FwdIt _Rotate_unchecked1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  forward_iterator_tag)
 {
 for (_FwdIt _Next = _Mid, _Res = _Last; ; )
  {
  ::std:: iter_swap(_First, _Next);
  if (++_First == _Mid)
   {
   if (++_Next == _Last)
    return (_Res == _Last ? _Mid : _Res);
   else
    _Mid = _Next;
   }
  else if (++_Next == _Last)
   {
   if (_Res == _Last)
    _Res = _First;
   _Next = _Mid;
   }
  }
 }

template<class _BidIt> inline
 pair<_BidIt, _BidIt> _Reverse_until_sentinel_unchecked(
  _BidIt _First, _BidIt _Sentinel, _BidIt _Last)
 {
 while (_First != _Sentinel && _Last != _Sentinel)
  ::std:: iter_swap(_First++, --_Last);
 return (::std:: make_pair(_First, _Last));
 }

template<class _BidIt> inline
 _BidIt _Rotate_unchecked1(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  bidirectional_iterator_tag)
 {
 _Reverse_unchecked(_First, _Mid);
 _Reverse_unchecked(_Mid, _Last);
 pair<_BidIt, _BidIt> _Tmp = _Reverse_until_sentinel_unchecked(_First, _Mid, _Last);
 _Reverse_unchecked(_Tmp.first, _Tmp.second);
 return (_Mid != _Tmp.first ? _Tmp.first : _Tmp.second);
 }

template<class _RanIt> inline
 _RanIt _Rotate_unchecked1(_RanIt _First, _RanIt _Mid, _RanIt _Last,
  random_access_iterator_tag)
 {
 _Reverse_unchecked(_First, _Mid);
 _Reverse_unchecked(_Mid, _Last);
 _Reverse_unchecked(_First, _Last);
 return (_First + (_Last - _Mid));
 }

template<class _FwdIt> inline
 _FwdIt _Rotate_unchecked(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
 {
 if (_First == _Mid)
  return (_Last);
 if (_Mid == _Last)
  return (_First);
 return (_Rotate_unchecked1(_First, _Mid, _Last, _Iter_cat_t<_FwdIt>()));
 }

template<class _FwdIt> inline
 _FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
 {
 _Debug_range(_First, _Mid, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3625);
 _Debug_range(_Mid, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3626);
 return (_Rechecked(_First,
  _Rotate_unchecked(_Unchecked(_First), _Unchecked(_Mid),
  _Unchecked(_Last))));
 }


template<class _Diff,
 class _Urng>
 class _Rng_from_urng
 {
public:
 typedef typename make_unsigned<_Diff>::type _Ty0;
 typedef typename _Urng::result_type _Ty1;

 typedef typename _If<sizeof (_Ty1) < sizeof (_Ty0),
  _Ty0, _Ty1>::type _Udiff;


 explicit _Rng_from_urng(_Urng& _Func)
  : _Ref(_Func), _Bits(8 * sizeof (_Udiff)), _Bmask(_Udiff(-1))
  {
  for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)
   --_Bits;
  }

 _Diff operator()(_Diff _Index)
  {
  for (; ; )
   {
   _Udiff _Ret = 0;
   _Udiff _Mask = 0;

   while (_Mask < _Udiff(_Index - 1))
    {
    _Ret <<= _Bits - 1;
    _Ret <<= 1;
    _Ret |= _Get_bits();
    _Mask <<= _Bits - 1;
    _Mask <<= 1;
    _Mask |= _Bmask;
    }


   if (_Ret / _Index < _Mask / _Index
    || _Mask % _Index == _Udiff(_Index - 1))
    return (_Ret % _Index);
   }
  }

 _Udiff _Get_all_bits()
  {
  _Udiff _Ret = 0;

  for (size_t _Num = 0; _Num < 8 * sizeof (_Udiff);
   _Num += _Bits)
   {
   _Ret <<= _Bits - 1;
   _Ret <<= 1;
   _Ret |= _Get_bits();
   }

  return (_Ret);
  }

 _Rng_from_urng(const _Rng_from_urng&) = delete;
 _Rng_from_urng& operator=(const _Rng_from_urng&) = delete;

private:
 _Udiff _Get_bits()
  {
  for (; ; )
   {
   _Udiff _Val = _Ref() - (_Urng::min)();

   if (_Val <= _Bmask)
    return (_Val);
   }
  }

 _Urng& _Ref;
 size_t _Bits;
 _Udiff _Bmask;
 };


template<class _Elem>
 class __declspec(dllimport) _Yarn
 {
public:
 typedef _Yarn<_Elem> _Myt;

                    _Yarn()
  : _Myptr(0), _Nul(0)
  {
  }

                    _Yarn(const _Myt& _Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

                    _Yarn(const _Elem *_Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

 _Myt& operator=(const _Myt& _Right)
  {
  return (*this = _Right._Myptr);
  }

 _Myt& operator=(const _Elem *_Right)
  {
  if (_Myptr != _Right)
   {
   _Tidy();

   if (_Right != 0)
    {
    const _Elem *_Ptr = _Right;
    while (*_Ptr != (_Elem)0)
     ++_Ptr;
    size_t _Count = ((const char *)++_Ptr - (const char *)_Right);


    _Myptr = (_Elem *)_malloc_dbg(_Count, 2,
     "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3755);





    if (_Myptr != 0)
     :: memcpy(_Myptr, _Right, _Count);
    }
   }

  return (*this);
  }

                    ~_Yarn() noexcept
  {
  _Tidy();
  }

 bool empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem * c_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

 bool _Empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem * _C_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

private:
 void _Tidy()
  {
  if (_Myptr != 0)


   _free_dbg(_Myptr, 2);





  _Myptr = 0;
  }

 _Elem *_Myptr;
 _Elem _Nul;
 };


template<class _Ty,
 class _Alloc>
 struct _Has_allocator_type
 {
 template<class _Uty>
  static auto _Fn(int)
   -> is_convertible<_Alloc,
    typename _Uty::allocator_type>;
 template<class _Uty>
  static auto _Fn(_Wrap_int)
   -> false_type;

 typedef decltype(_Fn<_Ty>(0)) type;
 };


struct allocator_arg_t
 {
 };

constexpr allocator_arg_t allocator_arg{};

[[noreturn]] __declspec(dllimport) void __cdecl _Xbad_alloc();
[[noreturn]] __declspec(dllimport) void __cdecl _Xinvalid_argument( const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xlength_error( const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xout_of_range( const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xoverflow_error( const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xruntime_error( const char *);
}

namespace std {

template<class _Ty,
 class _Alloc>
 struct uses_allocator
  : _Has_allocator_type<_Ty, _Alloc>::type
 {
 };


template<class _Ty,
 class _Alloc>
 constexpr bool uses_allocator_v = uses_allocator<_Ty, _Alloc>::value;

}

#pragma warning(pop)
#pragma pack(pop)
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)







#pragma warning(disable: 4100)

namespace std {
# 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 3
inline
 __declspec(allocator) void *_Allocate(size_t _Count, size_t _Sz,
  bool _Try_aligned_allocation = true)
 {
 void *_Ptr = 0;

 if (_Count == 0)
  return (_Ptr);


 if ((size_t)(-1) / _Sz < _Count)
  _Xbad_alloc();
 const size_t _User_size = _Count * _Sz;


 if (_Try_aligned_allocation
  && 4096 <= _User_size)
  {
  static_assert(sizeof (void *) < 32,
   "Big allocations should at least match vector register size");
  const size_t _Block_size = (2 * sizeof(void *) + 32 - 1) + _User_size;
  if (_Block_size <= _User_size)
   _Xbad_alloc();
  const uintptr_t _Ptr_container =
   reinterpret_cast<uintptr_t>(::operator new(_Block_size));
  { if (!(_Ptr_container != 0)) { (void)( (!!(("_Ptr_container != 0" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 70, 0, L"%ls", L"\"_Ptr_container != 0\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 70, 0); } ; };
  _Ptr = reinterpret_cast<void *>((_Ptr_container + (2 * sizeof(void *) + 32 - 1))
   & ~(32 - 1));
  static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;


  static_cast<uintptr_t *>(_Ptr)[-2] = 0xFAFAFAFAFAFAFAFAULL;

  }
 else


  {
  _Ptr = ::operator new(_User_size);
  { if (!(_Ptr != 0)) { (void)( (!!(("_Ptr != 0" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 84, 0, L"%ls", L"\"_Ptr != 0\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 84, 0); } ; };
  }
 return (_Ptr);
 }


inline
 void _Deallocate(void * _Ptr, size_t _Count, size_t _Sz)
 {

 { if (!(_Count <= (size_t)(-1) / _Sz)) { (void)( (!!(("_Count <= (size_t)(-1) / _Sz" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 94, 0, L"%ls", L"\"_Count <= (size_t)(-1) / _Sz\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 94, 0); } ; };
 const size_t _User_size = _Count * _Sz;
 if (4096 <= _User_size)
  {
  const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
  { if (!((_Ptr_user & (32 - 1)) == 0)) { (void)( (!!(("(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 100, 0, L"%ls", L"\"(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 100, 0); } ; };

  const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
  const uintptr_t _Ptr_container =
   *reinterpret_cast<uintptr_t *>(_Ptr_ptr);




  { if (!(reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] == 0xFAFAFAFAFAFAFAFAULL)) { (void)( (!!(("reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] == _BIG_ALLOCATION_SENTINEL" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 110, 0, L"%ls", L"\"reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] == _BIG_ALLOCATION_SENTINEL\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 110, 0); } ; };





  { if (!(_Ptr_container < _Ptr_user)) { (void)( (!!(("_Ptr_container < _Ptr_user" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 114, 0, L"%ls", L"\"_Ptr_container < _Ptr_user\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 114, 0); } ; };


  { if (!(2 * sizeof(void *) <= _Ptr_user - _Ptr_container)) { (void)( (!!(("2 * sizeof(void *) <= _Ptr_user - _Ptr_container" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 118, 0, L"%ls", L"\"2 * sizeof(void *) <= _Ptr_user - _Ptr_container\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 118, 0); } ; };







  { if (!(_Ptr_user - _Ptr_container <= (2 * sizeof(void *) + 32 - 1))) { (void)( (!!(("_Ptr_user - _Ptr_container <= _NON_USER_SIZE" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 126, 0, L"%ls", L"\"_Ptr_user - _Ptr_container <= _NON_USER_SIZE\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 126, 0); } ; };


  _Ptr = reinterpret_cast<void *>(_Ptr_container);
  }


 ::operator delete(_Ptr);
 }


template<class _Ty1,
 class _Ty2> inline
 void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
 {
 void *_Vptr = _Ptr;
 ::new (_Vptr) _Ty1(::std:: forward<_Ty2>(_Val));
 }

template<class _Ty1> inline
 void _Construct(_Ty1 *_Ptr)
 {
 void *_Vptr = _Ptr;

 ::new (_Vptr) _Ty1();
 }


template<class _Alty>
 struct _Is_simple_alloc
  : _Cat_base<is_same<typename _Alty::size_type, size_t>::value
  && is_same<typename _Alty::difference_type, ptrdiff_t>::value
  && is_same<typename _Alty::pointer,
   typename _Alty::value_type *>::value
  && is_same<typename _Alty::const_pointer,
   const typename _Alty::value_type *>::value
  && is_same<typename _Alty::reference,
   typename _Alty::value_type&>::value
  && is_same<typename _Alty::const_reference,
   const typename _Alty::value_type&>::value>
 {
 };


template<class _Value_type>
 struct _Simple_types
 {
 typedef _Value_type value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef value_type *pointer;
 typedef const value_type *const_pointer;
 typedef value_type& reference;
 typedef const value_type& const_reference;
 };


template<class _Alty,
 class _Pointer>
 struct _Get_voidptr
 {
 typedef typename _Alty::template rebind<void>::other _Alvoid;
 typedef typename _Alvoid::pointer type;
 };

template<class _Alty,
 class _Ty>
 struct _Get_voidptr<_Alty, _Ty *>
 {
 typedef void *type;
 };


template<class _Ty>
 struct _Get_first_parameter;

template<template<class, class...> class _Ty,
 class _First,
 class... _Rest>
 struct _Get_first_parameter<_Ty<_First, _Rest...> >
 {
 typedef _First type;
 };


template<class _Newfirst,
 class _Ty>
 struct _Replace_first_parameter;

template<class _Newfirst,
 template<class, class...> class _Ty,
 class _First,
 class... _Rest>
 struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
 {
 typedef _Ty<_Newfirst, _Rest...> type;
 };


template<class _Ty>
 struct _Get_element_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::element_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_first_parameter<_Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_ptr_difference_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<ptrdiff_t>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty,
 class _Other>
 struct _Get_rebind_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::template rebind<_Other>::other>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Replace_first_parameter<_Other , _Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct pointer_traits
 {
 typedef typename _Get_element_type<_Ty>::type element_type;
 typedef _Ty pointer;
 typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;

 template<class _Other>
  using rebind = typename _Get_rebind_type<_Ty, _Other>::type;

 typedef typename _If<is_void<element_type>::value,
  char&,
  typename add_lvalue_reference<element_type>::type>::type _Reftype;

 static pointer pointer_to(_Reftype _Val)
  {
  return (_Ty::pointer_to(_Val));
  }
 };


template<class _Ty>
 struct pointer_traits<_Ty *>
 {
 typedef _Ty element_type;
 typedef _Ty *pointer;
 typedef ptrdiff_t difference_type;

 template<class _Other>
  using rebind = _Other *;

 typedef typename _If<is_void<_Ty>::value,
  char&,
  typename add_lvalue_reference<_Ty>::type>::type _Reftype;

 static pointer pointer_to(_Reftype _Val)
  {
  return (::std:: addressof(_Val));
  }
 };



template<class _Ptrty> inline
 void _Destroy(_Ptrty _Ptr)
 {
 typedef typename pointer_traits<_Ptrty>::element_type _Ty;
 _Ptr->~_Ty();
 }


template<class _Ptrty> inline
 auto _Const_cast(_Ptrty _Ptr)
 {
 using _Elem = typename pointer_traits<_Ptrty>::element_type;
 using _Modifiable = remove_const_t<_Elem>;
 using _Dest = typename pointer_traits<_Ptrty>::template rebind<_Modifiable>;

 return (pointer_traits<_Dest>::pointer_to(const_cast<_Modifiable&>(*_Ptr)));
 }

template<class _Ty> inline
 auto _Const_cast(_Ty * _Ptr)
 {
 return (const_cast<remove_const_t<_Ty> *>(_Ptr));
 }



template<class _Ty>
 struct _Get_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Ty::value_type *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_const_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const typename _Ty::value_type> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_void_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<void> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_const_void_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const void> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_difference_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_ptr_difference_type< typename _Get_pointer_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_size_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::size_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename make_unsigned< typename _Get_difference_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_propagate_on_container_copy
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_copy_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_propagate_on_container_move
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_move_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_propagate_on_container_swap
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_swap>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_is_always_equal
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::is_always_equal>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename is_empty<_Ty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 class allocator;
template<class _Alloc>
 struct _Wrap_alloc;

template<class _Alloc>
 struct _Unwrap_alloc
 {
 typedef _Alloc type;
 };

template<class _Alloc>
 struct _Unwrap_alloc<_Wrap_alloc<_Alloc>>
 {
 typedef _Alloc type;
 };



template<class _Alloc>
 using _Unwrap_alloc_t = typename _Unwrap_alloc<_Alloc>::type;



template<class _Alloc,
 class = void>
 struct _Is_default_allocator
  : false_type
 {
 };

template<class _Ty>
 struct _Is_default_allocator<allocator<_Ty>, typename allocator<_Ty>::_Not_user_specialized>
  : true_type
 {
 };


struct _Alloc_allocate
 {


 template<class _Alloc,
  class _Size_type,
  class _Const_void_pointer>
  static auto _Fn(int, _Alloc& _Al,
   _Size_type _Count,
   _Const_void_pointer _Hint)
   -> decltype(_Al.allocate(_Count, _Hint))
  {
  return (_Al.allocate(_Count, _Hint));
  }

 template<class _Alloc,
  class _Size_type,
  class _Const_void_pointer>
  static auto _Fn(_Wrap_int, _Alloc& _Al,
   _Size_type _Count,
   _Const_void_pointer)
   -> decltype(_Al.allocate(_Count))
  {
  return (_Al.allocate(_Count));
  }
 };


struct _Has_no_alloc_construct_tag
 {
 };

template<class _Void,
 class... _Types>
 struct _Has_no_alloc_construct
  : true_type
 {
 };

template<class _Alloc,
 class _Ptr,
 class... _Args>
 struct _Has_no_alloc_construct<
  void_t<
   _Has_no_alloc_construct_tag,
   decltype(::std:: declval<_Alloc&>().construct(::std:: declval<_Ptr>(), ::std:: declval<_Args>()...))>,
  _Alloc, _Ptr, _Args...>
  : false_type
 {
 };

template<class _Alloc,
 class _Ptr,
 class... _Args>
 using _Uses_default_construct = disjunction<
  _Is_default_allocator<_Alloc>,
  _Has_no_alloc_construct<void, _Alloc, _Ptr, _Args...>>;

template<class _Alloc,
 class _Ptr,
 class... _Args>
 using _Uses_default_construct_t = typename _Uses_default_construct<_Alloc, _Ptr, _Args...>::type;



struct _Has_no_alloc_destroy_tag
 {
 };

template<class _Alloc,
 class _Ptr,
 class = void>
 struct _Has_no_alloc_destroy
  : true_type
 {
 };

template<class _Alloc,
 class _Ptr>
 struct _Has_no_alloc_destroy<_Alloc, _Ptr, void_t<
   _Has_no_alloc_destroy_tag,
   decltype(::std:: declval<_Alloc&>().destroy(::std:: declval<_Ptr>()))>>
  : false_type
 {
 };

template<class _Alloc,
 class _Ptr>
 using _Uses_default_destroy = disjunction<
  _Is_default_allocator<_Alloc>,
  _Has_no_alloc_destroy<_Alloc, _Ptr>>;

template<class _Alloc,
 class _Ptr>
 using _Uses_default_destroy_t = typename _Uses_default_destroy<_Alloc, _Ptr>::type;



struct _Alloc_max_size
 {
 template<class _Ty>
  static auto _Fn(int, const _Ty& _Al) noexcept
   -> decltype(_Al.max_size())
  {
  return (_Al.max_size());
  }

 template<class _Ty>
  static auto _Fn(_Wrap_int, const _Ty&) noexcept
   -> typename _Get_size_type<_Ty>::type
  {
  return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)()
   / sizeof(typename _Ty::value_type));
  }
 };


struct _Alloc_select
 {


 template<class _Ty>
  static auto _Fn(int, const _Ty& _Al)
   -> decltype((_Ty)_Al.select_on_container_copy_construction())
  {
  return (_Al.select_on_container_copy_construction());
  }

 template<class _Ty>
  static auto _Fn(_Wrap_int, const _Ty& _Al)
   -> _Ty
  {
  return (_Al);
  }
 };


template<class _Alloc>
 struct allocator_traits
 {
 typedef _Alloc allocator_type;
 typedef typename _Alloc::value_type value_type;

 typedef typename _Get_pointer_type<_Alloc>::type
  pointer;
 typedef typename _Get_const_pointer_type<_Alloc>::type
  const_pointer;
 typedef typename _Get_void_pointer_type<_Alloc>::type
  void_pointer;
 typedef typename _Get_const_void_pointer_type<_Alloc>::type
  const_void_pointer;

 typedef typename _Get_size_type<_Alloc>::type size_type;
 typedef typename _Get_difference_type<_Alloc>::type difference_type;

 typedef typename _Get_propagate_on_container_copy<_Alloc>::type
  propagate_on_container_copy_assignment;
 typedef typename _Get_propagate_on_container_move<_Alloc>::type
  propagate_on_container_move_assignment;
 typedef typename _Get_propagate_on_container_swap<_Alloc>::type
  propagate_on_container_swap;
 typedef typename _Get_is_always_equal<_Alloc>::type
  is_always_equal;

 template<class _Other>
  using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;

 template<class _Other>
  using rebind_traits = allocator_traits<rebind_alloc<_Other> >;

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count)
  {
  return (_Al.allocate(_Count));
  }

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count,
  const_void_pointer _Hint)
  {
  return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
  }

 static void deallocate(_Alloc& _Al,
  pointer _Ptr, size_type _Count)
  {
  _Al.deallocate(_Ptr, _Count);
  }

 template<class _Ty,
  class... _Types>
  static void _Construct1(true_type, _Alloc&, _Ty *_Ptr,
   _Types&&... _Args)
  {
  ::new (static_cast<void *>(_Ptr))
   _Ty(::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty,
  class... _Types>
  static void _Construct1(false_type, _Alloc& _Al, _Ty *_Ptr,
   _Types&&... _Args)
  {
  _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty,
  class... _Types>
  static void construct(_Alloc& _Al, _Ty *_Ptr,
   _Types&&... _Args)
  {
  _Construct1(_Uses_default_construct_t<_Unwrap_alloc_t<_Alloc>, _Ty *, _Types...>(),
   _Al, _Ptr, ::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty>
  static void _Destroy1(_Alloc&, _Ty *_Ptr, true_type)
  {
  _Ptr->~_Ty();
  }

 template<class _Ty>
  static void _Destroy1(_Alloc& _Al, _Ty *_Ptr, false_type)
  {
  _Al.destroy(_Ptr);
  }

 template<class _Ty>
  static void destroy(_Alloc& _Al, _Ty *_Ptr)
  {
  _Destroy1(_Al, _Ptr, _Uses_default_destroy_t<_Unwrap_alloc_t<_Alloc>, _Ty *>());
  }

 static size_type max_size(const _Alloc& _Al) noexcept
  {
  return (_Alloc_max_size::_Fn(0, _Al));
  }

 static _Alloc select_on_container_copy_construction(
  const _Alloc& _Al)
  {
  return (_Alloc_select::_Fn(0, _Al));
  }
 };


template<class _Ty>
 class allocator
 {
public:
 static_assert(!is_const<_Ty>::value,
  "The C++ Standard forbids containers of const elements "
  "because allocator<const T> is ill-formed.");

 typedef void _Not_user_specialized;

 typedef _Ty value_type;

 typedef value_type *pointer;
 typedef const value_type *const_pointer;

 typedef value_type& reference;
 typedef const value_type& const_reference;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef true_type propagate_on_container_move_assignment;
 typedef true_type is_always_equal;

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 pointer address(reference _Val) const noexcept
  {
  return (::std:: addressof(_Val));
  }

 const_pointer address(const_reference _Val) const noexcept
  {
  return (::std:: addressof(_Val));
  }

 allocator() noexcept
  {
  }

 allocator(const allocator<_Ty>&) noexcept
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) noexcept
  {
  }

 template<class _Other>
  allocator<_Ty>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }

 void deallocate(pointer _Ptr, size_type _Count)
  {
  _Deallocate(_Ptr, _Count, sizeof (_Ty));
  }

 __declspec(allocator) pointer allocate(size_type _Count)
  {
  return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
  }

 __declspec(allocator) pointer allocate(size_type _Count, const void *)
  {
  return (allocate(_Count));
  }

 template<class _Objty,
  class... _Types>
  void construct(_Objty *_Ptr, _Types&&... _Args)
  {
  ::new ((void *)_Ptr) _Objty(::std:: forward<_Types>(_Args)...);
  }


 template<class _Uty>
  void destroy(_Uty *_Ptr)
  {
  _Ptr->~_Uty();
  }

 size_t max_size() const noexcept
  {
  return ((size_t)(-1) / sizeof (_Ty));
  }
 };


template<>
 class allocator<void>
 {
public:
 typedef void _Not_user_specialized;

 typedef void value_type;

 typedef void *pointer;
 typedef const void *const_pointer;

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 allocator() noexcept
  {
  }

 allocator(const allocator<void>&) noexcept
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) noexcept
  {
  }

 template<class _Other>
  allocator<void>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const allocator<_Ty>&,
  const allocator<_Other>&) noexcept
 {
 return (true);
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const allocator<_Ty>& _Left,
  const allocator<_Other>& _Right) noexcept
 {
 return (false);
 }


template<class _Ty>
 struct allocator_traits<allocator<_Ty> >
 {
 typedef allocator<_Ty> _Alloc;

 typedef _Alloc allocator_type;
 typedef _Ty value_type;

 typedef value_type *pointer;
 typedef const value_type *const_pointer;
 typedef void *void_pointer;
 typedef const void *const_void_pointer;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef false_type propagate_on_container_copy_assignment;
 typedef true_type propagate_on_container_move_assignment;
 typedef false_type propagate_on_container_swap;
 typedef true_type is_always_equal;

 template<class _Other>
  using rebind_alloc = allocator<_Other>;

 template<class _Other>
  using rebind_traits = allocator_traits<allocator<_Other> >;

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count)
  {
  return (_Al.allocate(_Count));
  }

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count,
  const_void_pointer _Hint)
  {
  return (_Al.allocate(_Count, _Hint));
  }

 static void deallocate(_Alloc& _Al,
  pointer _Ptr, size_type _Count)
  {
  _Al.deallocate(_Ptr, _Count);
  }

 template<class _Objty,
  class... _Types>
  static void construct(_Alloc& _Al, _Objty *_Ptr,
   _Types&&... _Args)
  {
  _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
  }


 template<class _Uty>
  static void destroy(_Alloc& _Al, _Uty *_Ptr)
  {
  _Al.destroy(_Ptr);
  }

 static size_type max_size(const _Alloc& _Al) noexcept
  {
  return (_Al.max_size());
  }

 static _Alloc select_on_container_copy_construction(
  const _Alloc& _Al)
  {
  return (_Al);
  }
 };


template<class _Alloc>
 struct _Wrap_alloc
  : public _Alloc
 {
 typedef _Alloc _Mybase;
 typedef allocator_traits<_Alloc> _Mytraits;

 typedef typename _Mytraits::value_type value_type;

 typedef typename _Mytraits::pointer pointer;
 typedef typename _Mytraits::const_pointer const_pointer;
 typedef typename _Mytraits::void_pointer void_pointer;
 typedef typename _Mytraits::const_void_pointer const_void_pointer;

 typedef typename _If<is_void<value_type>::value,
  int, value_type>::type& reference;
 typedef typename _If<is_void<const value_type>::value,
  const int, const value_type>::type& const_reference;

 typedef typename _Mytraits::size_type size_type;
 typedef typename _Mytraits::difference_type difference_type;

 typedef typename _Mytraits::propagate_on_container_copy_assignment
  propagate_on_container_copy_assignment;
 typedef typename _Mytraits::propagate_on_container_move_assignment
  propagate_on_container_move_assignment;
 typedef typename _Mytraits::propagate_on_container_swap
  propagate_on_container_swap;
 typedef typename _Mytraits::is_always_equal
  is_always_equal;

 _Wrap_alloc select_on_container_copy_construction(_Nil = _Nil()) const
  {
  return (_Mytraits::select_on_container_copy_construction(*this));
  }

 template<class _Other>
  struct rebind
  {
  typedef typename _Mytraits::template rebind_alloc<_Other>
   _Other_alloc;
  typedef _Wrap_alloc<_Other_alloc> other;
  };

 pointer address(reference _Val) const
  {
  return (pointer_traits<pointer>::pointer_to(_Val));
  }

 const_pointer address(const_reference _Val) const
  {
  return (pointer_traits<const_pointer>::pointer_to(_Val));
  }

 _Wrap_alloc() noexcept(is_nothrow_default_constructible<_Alloc>::value)
  : _Mybase()
  {
  }

 _Wrap_alloc(const _Wrap_alloc& _Right) noexcept
  : _Mybase(_Right)
  {
  }

 _Wrap_alloc(_Wrap_alloc&& _Right) noexcept
  : _Mybase(::std:: move(_Right))
  {
  }

 template<class _Other>
  _Wrap_alloc(_Other&& _Right) noexcept
  : _Mybase(::std:: forward<_Other>(_Right))
  {
  }

 _Wrap_alloc& operator=(const _Wrap_alloc& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 _Wrap_alloc& operator=(_Wrap_alloc&& _Right)
  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 template<class _Other>
  _Wrap_alloc& operator=(_Other&& _Right)
  {
  _Mybase::operator=(::std:: forward<_Other>(_Right));
  return (*this);
  }

 __declspec(allocator) pointer allocate(size_type _Count)
  {
  return (_Mybase::allocate(_Count));
  }

 __declspec(allocator) pointer allocate(size_type _Count,
  const_void_pointer _Hint, _Nil = _Nil())
  {
  return (_Mytraits::allocate(*this, _Count, _Hint));
  }

 void deallocate(pointer _Ptr, size_type _Count)
  {
  _Mybase::deallocate(_Ptr, _Count);
  }

 template<class _Ty,
  class... _Types>
  void construct(_Ty *_Ptr,
   _Types&&... _Args)
  {
  _Mytraits::construct(*this, _Ptr,
   ::std:: forward<_Types>(_Args)...);
  }


 template<class _Ty>
  void destroy(_Ty *_Ptr)
  {
  _Mytraits::destroy(*this, _Ptr);
  }

 size_type max_size(_Nil = _Nil()) const noexcept
  {
  return (_Mytraits::max_size(*this));
  }
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const _Wrap_alloc<_Ty>& _Left,
  const _Wrap_alloc<_Other>& _Right) noexcept
 {
 return (static_cast<const _Ty&>(_Left)
  == static_cast<const _Other&>(_Right));
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const _Wrap_alloc<_Ty>& _Left,
  const _Wrap_alloc<_Other>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }


template<class _Alty> inline
 void _Pocca(_Alty& _Left, const _Alty& _Right, true_type) noexcept
 {
 _Left = _Right;
 }

template<class _Alty> inline
 void _Pocca(_Alty&, const _Alty&, false_type) noexcept
 {
 }

template<class _Alty> inline
 void _Pocca(_Alty& _Left, const _Alty& _Right) noexcept
 {
 typename _Alty::propagate_on_container_copy_assignment _Tag;
 _Pocca(_Left, _Right, _Tag);
 }


template<class _Alty> inline
 void _Pocma(_Alty& _Left, _Alty& _Right, true_type) noexcept
 {
 _Left = ::std:: move(_Right);
 }

template<class _Alty> inline
 void _Pocma(_Alty&, _Alty&, false_type) noexcept
 {
 }

template<class _Alty> inline
 void _Pocma(_Alty& _Left, _Alty& _Right) noexcept
 {
 typename _Alty::propagate_on_container_move_assignment _Tag;
 _Pocma(_Left, _Right, _Tag);
 }


template<class _Alty> inline
 void _Pocs(_Alty& _Left, _Alty& _Right, true_type) noexcept
 {
 _Swap_adl(_Left, _Right);
 }

template<class _Alty> inline
 void _Pocs(_Alty& _Left, _Alty& _Right, false_type) noexcept
 {
 if (_Left != _Right)
  {

  _Debug_message(L"containers incompatible for swap", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 1080);



  }
 }

template<class _Alty> inline
 void _Pocs(_Alty& _Left, _Alty& _Right) noexcept
 {
 typename _Alty::propagate_on_container_swap _Tag;
 _Pocs(_Left, _Right, _Tag);
 }



template<class _Alloc,
 class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
 void _Destroy_range1(_Ptr _First, _Ptr _Last, _Wrap_alloc<_Alloc>& _Al, false_type)
 {
 for (; _First != _Last; ++_First)
  _Al.destroy(_Unfancy(_First));
 }

template<class _Alloc,
 class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
 void _Destroy_range1(_Ptr, _Ptr, _Wrap_alloc<_Alloc>&, true_type)
 {

 }

template<class _Alloc,
 class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
 void _Destroy_range(_Ptr _First, _Ptr _Last, _Wrap_alloc<_Alloc>& _Al)
 {


 typedef typename _Alloc::value_type _Val;
 _Destroy_range1(_First, _Last, _Al, typename conjunction<
  is_trivially_destructible<_Val>,
  _Uses_default_destroy<_Alloc, _Val *>>::type());
 }



template<class _FwdIt> inline
 void _Destroy_range1(_FwdIt _First, _FwdIt _Last, false_type)
 {
 for (; _First != _Last; ++_First)
  _Destroy(_First);
 }

template<class _FwdIt> inline
 void _Destroy_range1(_FwdIt, _FwdIt, true_type)
 {

 }

template<class _FwdIt> inline
 void _Destroy_range(_FwdIt _First, _FwdIt _Last)
 {


 _Destroy_range1(_First, _Last, is_trivially_destructible<_Iter_value_t<_FwdIt>>());
 }
}



# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

typedef enum memory_order {
 memory_order_relaxed,
 memory_order_consume,
 memory_order_acquire,
 memory_order_release,
 memory_order_acq_rel,
 memory_order_seq_cst
 } memory_order;

typedef _Uint32t _Uint4_t;
typedef _Uint4_t _Atomic_integral_t;
# 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h" 3
typedef long _Atomic_flag_t;




typedef _Atomic_integral_t _Atomic_counter_t;

inline _Atomic_integral_t
 _Get_atomic_count(const _Atomic_counter_t& _Counter)
 {
 return (_Counter);
 }

inline void _Init_atomic_counter(_Atomic_counter_t& _Counter,
 _Atomic_integral_t _Value)
 {
 _Counter = _Value;
 }
# 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h" 3
extern "C" {
__declspec(dllimport) void __cdecl _Lock_shared_ptr_spin_lock();
__declspec(dllimport) void __cdecl _Unlock_shared_ptr_spin_lock();
}
}

#pragma warning(pop)
#pragma pack(pop)
# 1148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 2 3



# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 1 3
# 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 2 3
# 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 3
#pragma pack(push, 8)
# 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 3
 extern "C" {
# 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 3
    typedef struct __declspec(align(16)) _SETJMP_FLOAT128
    {
        unsigned __int64 Part[2];
    } SETJMP_FLOAT128;


    typedef SETJMP_FLOAT128 _JBTYPE;

    typedef struct _JUMP_BUFFER
    {
        unsigned __int64 Frame;
        unsigned __int64 Rbx;
        unsigned __int64 Rsp;
        unsigned __int64 Rbp;
        unsigned __int64 Rsi;
        unsigned __int64 Rdi;
        unsigned __int64 R12;
        unsigned __int64 R13;
        unsigned __int64 R14;
        unsigned __int64 R15;
        unsigned __int64 Rip;
        unsigned long MxCsr;
        unsigned short FpCsr;
        unsigned short Spare;

        SETJMP_FLOAT128 Xmm6;
        SETJMP_FLOAT128 Xmm7;
        SETJMP_FLOAT128 Xmm8;
        SETJMP_FLOAT128 Xmm9;
        SETJMP_FLOAT128 Xmm10;
        SETJMP_FLOAT128 Xmm11;
        SETJMP_FLOAT128 Xmm12;
        SETJMP_FLOAT128 Xmm13;
        SETJMP_FLOAT128 Xmm14;
        SETJMP_FLOAT128 Xmm15;
    } _JUMP_BUFFER;
# 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 3
    typedef _JBTYPE jmp_buf[16];
# 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 3
int __cdecl _setjmp(
          jmp_buf _Buf
    );


#pragma warning(push)
#pragma warning(disable: 4987)
 __declspec(noreturn) void __cdecl longjmp(
             jmp_buf _Buf,
             int _Value
        ) throw(...);
#pragma warning(pop)








}
# 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 3
#pragma pack(pop)
# 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 2 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 1 3
# 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h" 1 3
# 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h" 1 3
# 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h" 1 3
# 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 1 3
# 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h" 1 3
# 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h" 1 3
# 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 1 3
# 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h" 1 3
# 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h" 3
extern "C" {




typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64 m64_u64;
    float m64_f32[2];
    __int8 m64_i8[8];
    __int16 m64_i16[4];
    __int32 m64_i32[2];
    __int64 m64_i64;
    unsigned __int8 m64_u8[8];
    unsigned __int16 m64_u16[4];
    unsigned __int32 m64_u32[2];
} __m64;
# 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h" 3
};
# 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 2 3
# 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float m128_f32[4];
     unsigned __int64 m128_u64[2];
     __int8 m128_i8[16];
     __int16 m128_i16[8];
     __int32 m128_i32[4];
     __int64 m128_i64[2];
     unsigned __int8 m128_u8[16];
     unsigned __int16 m128_u16[8];
     unsigned __int32 m128_u32[4];
 } __m128;
# 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
extern "C" {







extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern float _mm_cvtss_f32(__m128 _A);
# 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
extern __int64 _mm_cvtss_si64(__m128 _A);
extern __int64 _mm_cvttss_si64(__m128 _A);
extern __m128 _mm_cvtsi64_ss(__m128 _A, __int64 _B);






extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);
# 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);



extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);
# 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
};
# 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h" 2 3


typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8 m128i_i8[16];
    __int16 m128i_i16[8];
    __int32 m128i_i32[4];
    __int64 m128i_i64[2];
    unsigned __int8 m128i_u8[16];
    unsigned __int16 m128i_u16[8];
    unsigned __int32 m128i_u32[4];
    unsigned __int64 m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double m128d_f64[2];
} __m128d;
# 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h" 3
extern "C" {







extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);
# 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h" 3
extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);



extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);



extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);



extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);
extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);
extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);
# 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h" 3
extern __m128i _mm_set_epi64x(__int64 _I1,__int64 _I0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12,
                            char _B11, char _B10, char _B9, char _B8,
                            char _B7, char _B6, char _B5, char _B4,
                            char _B3, char _B2, char _B1, char _B0);



extern __m128i _mm_set1_epi64x(__int64 i);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);



extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3,
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12,
                             char _B11, char _B10, char _B9, char _B8,
                             char _B7, char _B6, char _B5, char _B4,
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);
# 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h" 3
extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128 _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128 _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);






extern __int64 _mm_cvtsd_si64(__m128d);
extern __int64 _mm_cvttsd_si64(__m128d);
extern __m128d _mm_cvtsi64_sd(__m128d, __int64);
extern __m128i _mm_cvtsi64_si128(__int64);
extern __int64 _mm_cvtsi128_si64(__m128i);





};
# 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h" 2 3
# 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h" 3
extern "C" {







extern __m128 _mm_addsub_ps(__m128 , __m128 );
extern __m128 _mm_hadd_ps(__m128 , __m128 );
extern __m128 _mm_hsub_ps(__m128 , __m128 );
extern __m128 _mm_movehdup_ps(__m128 );
extern __m128 _mm_moveldup_ps(__m128 );





extern __m128d _mm_addsub_pd(__m128d , __m128d );
extern __m128d _mm_hadd_pd(__m128d , __m128d );
extern __m128d _mm_hsub_pd(__m128d , __m128d );
extern __m128d _mm_loaddup_pd(double const * );
extern __m128d _mm_movedup_pd(__m128d );




extern __m128i _mm_lddqu_si128(__m128i const * );







extern void _mm_monitor(void const * , unsigned , unsigned );




extern void _mm_mwait(unsigned , unsigned );


};
# 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 2 3
# 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
extern "C" {
# 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
    extern __m128i _mm_hadd_epi16 (__m128i, __m128i);
    extern __m128i _mm_hadd_epi32 (__m128i, __m128i);
    extern __m128i _mm_hadds_epi16 (__m128i, __m128i);
# 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
    extern __m128i _mm_hsub_epi16 (__m128i, __m128i);
    extern __m128i _mm_hsub_epi32 (__m128i, __m128i);
    extern __m128i _mm_hsubs_epi16 (__m128i, __m128i);
# 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
    extern __m128i _mm_maddubs_epi16 (__m128i, __m128i);
# 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
    extern __m128i _mm_mulhrs_epi16 (__m128i, __m128i);
# 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
    extern __m128i _mm_shuffle_epi8 (__m128i, __m128i);
# 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
    extern __m128i _mm_sign_epi8 (__m128i, __m128i);
    extern __m128i _mm_sign_epi16 (__m128i, __m128i);
    extern __m128i _mm_sign_epi32 (__m128i, __m128i);
# 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
    extern __m128i _mm_alignr_epi8 (__m128i, __m128i, int);
# 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
    extern __m128i _mm_abs_epi8 (__m128i);
    extern __m128i _mm_abs_epi16 (__m128i);
    extern __m128i _mm_abs_epi32 (__m128i);
# 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
};
# 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h" 2 3
# 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h" 3
extern "C" {





        extern __m128i _mm_blend_epi16 (__m128i, __m128i, const int );
        extern __m128i _mm_blendv_epi8 (__m128i, __m128i, __m128i mask);




        extern __m128 _mm_blend_ps (__m128, __m128, const int );
        extern __m128 _mm_blendv_ps(__m128, __m128, __m128 );




        extern __m128d _mm_blend_pd (__m128d, __m128d, const int );
        extern __m128d _mm_blendv_pd(__m128d, __m128d, __m128d );




        extern __m128 _mm_dp_ps(__m128, __m128, const int );
        extern __m128d _mm_dp_pd(__m128d, __m128d, const int );




        extern __m128i _mm_cmpeq_epi64(__m128i, __m128i);



        extern __m128i _mm_min_epi8 (__m128i, __m128i);
        extern __m128i _mm_max_epi8 (__m128i, __m128i);

        extern __m128i _mm_min_epu16(__m128i, __m128i);
        extern __m128i _mm_max_epu16(__m128i, __m128i);

        extern __m128i _mm_min_epi32(__m128i, __m128i);
        extern __m128i _mm_max_epi32(__m128i, __m128i);
        extern __m128i _mm_min_epu32(__m128i, __m128i);
        extern __m128i _mm_max_epu32(__m128i, __m128i);




        extern __m128i _mm_mullo_epi32(__m128i, __m128i);




        extern __m128i _mm_mul_epi32(__m128i, __m128i);




        extern int _mm_testz_si128(__m128i , __m128i );




        extern int _mm_testc_si128(__m128i , __m128i );





        extern int _mm_testnzc_si128(__m128i , __m128i );







        extern __m128 _mm_insert_ps(__m128 , __m128 , const int );
# 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h" 3
        extern int _mm_extract_ps(__m128 , const int );
# 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h" 3
        extern __m128i _mm_insert_epi8 (__m128i , int , const int );
        extern __m128i _mm_insert_epi32(__m128i , int , const int );


        extern __m128i _mm_insert_epi64(__m128i , __int64 , const int );




        extern int _mm_extract_epi8 (__m128i , const int );
        extern int _mm_extract_epi32(__m128i , const int );


        extern __int64 _mm_extract_epi64(__m128i , const int );





        extern __m128i _mm_minpos_epu16(__m128i);



        extern __m128d _mm_round_pd(__m128d , int );
        extern __m128d _mm_round_sd(__m128d , __m128d , int );



        extern __m128 _mm_round_ps(__m128 , int );
        extern __m128 _mm_round_ss(__m128 , __m128 , int );



        extern __m128i _mm_cvtepi8_epi32 (__m128i);
        extern __m128i _mm_cvtepi16_epi32(__m128i);
        extern __m128i _mm_cvtepi8_epi64 (__m128i);
        extern __m128i _mm_cvtepi32_epi64(__m128i);
        extern __m128i _mm_cvtepi16_epi64(__m128i);
        extern __m128i _mm_cvtepi8_epi16 (__m128i);



        extern __m128i _mm_cvtepu8_epi32 (__m128i);
        extern __m128i _mm_cvtepu16_epi32(__m128i);
        extern __m128i _mm_cvtepu8_epi64 (__m128i);
        extern __m128i _mm_cvtepu32_epi64(__m128i);
        extern __m128i _mm_cvtepu16_epi64(__m128i);
        extern __m128i _mm_cvtepu8_epi16 (__m128i);





        extern __m128i _mm_packus_epi32(__m128i, __m128i);





        extern __m128i _mm_mpsadbw_epu8(__m128i , __m128i , const int );





        extern __m128i _mm_stream_load_si128(const __m128i*);


};
# 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h" 2 3




extern "C" {
# 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h" 3
    extern __m128i _mm_cmpistrm (__m128i , __m128i , const int );
    extern int _mm_cmpistri (__m128i , __m128i , const int );

    extern __m128i _mm_cmpestrm (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestri (__m128i , int , __m128i , int , const int );





    extern int _mm_cmpistrz (__m128i , __m128i , const int );
    extern int _mm_cmpistrc (__m128i , __m128i , const int );
    extern int _mm_cmpistrs (__m128i , __m128i , const int );
    extern int _mm_cmpistro (__m128i , __m128i , const int );
    extern int _mm_cmpistra (__m128i , __m128i , const int );

    extern int _mm_cmpestrz (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestrc (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestrs (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestro (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestra (__m128i , int , __m128i , int , const int );






    extern __m128i _mm_cmpgt_epi64(__m128i , __m128i );





    extern int _mm_popcnt_u32(unsigned int );


    extern __int64 _mm_popcnt_u64(unsigned __int64 );






    extern unsigned int _mm_crc32_u8 (unsigned int , unsigned char );
    extern unsigned int _mm_crc32_u16(unsigned int , unsigned short );
    extern unsigned int _mm_crc32_u32(unsigned int , unsigned int );


    extern unsigned __int64 _mm_crc32_u64(unsigned __int64 , unsigned __int64 );



};
# 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h" 2 3




extern "C" {






extern __m128i _mm_aesdec_si128(__m128i , __m128i );





extern __m128i _mm_aesdeclast_si128(__m128i , __m128i );





extern __m128i _mm_aesenc_si128(__m128i , __m128i );





extern __m128i _mm_aesenclast_si128(__m128i , __m128i );





extern __m128i _mm_aesimc_si128(__m128i );






extern __m128i _mm_aeskeygenassist_si128(__m128i , const int );







extern __m128i _mm_clmulepi64_si128(__m128i , __m128i ,
                                            const int );



};
# 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 2 3



extern "C" {





typedef union __declspec(intrin_type) __declspec(align(32)) __m256 {
    float m256_f32[8];
} __m256;

typedef struct __declspec(intrin_type) __declspec(align(32)) __m256d {
    double m256d_f64[4];
} __m256d;

typedef union __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8 m256i_i8[32];
    __int16 m256i_i16[16];
    __int32 m256i_i32[8];
    __int64 m256i_i64[4];
    unsigned __int8 m256i_u8[32];
    unsigned __int16 m256i_u16[16];
    unsigned __int32 m256i_u32[8];
    unsigned __int64 m256i_u64[4];
} __m256i;
# 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d);
# 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_add_ps(__m256, __m256);
# 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d);
# 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256);
# 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d);
# 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_and_ps(__m256, __m256);
# 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d);
# 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256);
# 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int);
# 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int);
# 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d);
# 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256);
# 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d);
# 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_div_ps(__m256, __m256);
# 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int);
# 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d);
# 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256);
# 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d);
# 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256);
# 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d);
# 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_max_ps(__m256, __m256);
# 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d);
# 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_min_ps(__m256, __m256);
# 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d);
# 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_mul_ps(__m256, __m256);
# 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d);
# 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_or_ps(__m256, __m256);
# 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int);
# 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int);
# 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d);
# 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_sub_ps(__m256, __m256);
# 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d);
# 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_xor_ps(__m256, __m256);
# 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int);
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int);
# 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int);
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int);
# 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int);





extern int __cdecl _mm_comi_sd(__m128d, __m128d, const int);
# 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int);





extern int __cdecl _mm_comi_ss(__m128, __m128, const int);
# 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i);
# 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_cvtepi32_ps(__m256i);
# 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128 __cdecl _mm256_cvtpd_ps(__m256d);
# 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256i __cdecl _mm256_cvtps_epi32(__m256);
# 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_cvtps_pd(__m128);
# 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d);
# 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d);
# 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256i __cdecl _mm256_cvttps_epi32(__m256);







extern __m128 __cdecl _mm256_extractf128_ps(__m256, const int);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);
# 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_permutevar_ps(__m256, __m256i);
extern __m128 __cdecl _mm_permutevar_ps(__m128, __m128i);
# 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_permute_ps(__m256, int);
extern __m128 __cdecl _mm_permute_ps(__m128, int);
# 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i);
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i);
# 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_permute_pd(__m256d, int);
extern __m128d __cdecl _mm_permute_pd(__m128d, int);
# 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_permute2f128_ps(__m256, __m256, int);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int);
# 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_broadcast_ss(float const *);
extern __m128 __cdecl _mm_broadcast_ss(float const *);







extern __m256d __cdecl _mm256_broadcast_sd(double const *);







extern __m256 __cdecl _mm256_broadcast_ps(__m128 const *);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *);
# 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_insertf128_ps(__m256, __m128, int);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int);
# 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_load_pd(double const *);
extern void __cdecl _mm256_store_pd(double *, __m256d);
# 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_load_ps(float const *);
extern void __cdecl _mm256_store_ps(float *, __m256);
# 733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_loadu_pd(double const *);
extern void __cdecl _mm256_storeu_pd(double *, __m256d);
# 743 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_loadu_ps(float const *);
extern void __cdecl _mm256_storeu_ps(float *, __m256);
# 753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256i __cdecl _mm256_load_si256(__m256i const *);
extern void __cdecl _mm256_store_si256(__m256i *, __m256i);
# 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256i __cdecl _mm256_loadu_si256(__m256i const *);
extern void __cdecl _mm256_storeu_si256(__m256i *, __m256i);
# 836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_maskload_pd(double const *, __m256i);
extern void __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d);
extern __m128d __cdecl _mm_maskload_pd(double const *, __m128i);
extern void __cdecl _mm_maskstore_pd(double *, __m128i, __m128d);
# 859 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_maskload_ps(float const *, __m256i);
extern void __cdecl _mm256_maskstore_ps(float *, __m256i, __m256);
extern __m128 __cdecl _mm_maskload_ps(float const *, __m128i);
extern void __cdecl _mm_maskstore_ps(float *, __m128i, __m128);







extern __m256 __cdecl _mm256_movehdup_ps(__m256);







extern __m256 __cdecl _mm256_moveldup_ps(__m256);







extern __m256d __cdecl _mm256_movedup_pd(__m256d);
# 896 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *);







extern void __cdecl _mm256_stream_si256(__m256i *, __m256i);
# 913 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern void __cdecl _mm256_stream_pd(double *, __m256d);
# 922 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern void __cdecl _mm256_stream_ps(float *, __m256);
# 932 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_rcp_ps(__m256);
# 943 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_rsqrt_ps(__m256);
# 952 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_sqrt_pd(__m256d);
# 961 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_sqrt_ps(__m256);
# 974 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_round_pd(__m256d, int);
# 989 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_round_ps(__m256, int);
# 999 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d);







extern __m256 __cdecl _mm256_unpackhi_ps(__m256, __m256);







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d);







extern __m256 __cdecl _mm256_unpacklo_ps(__m256, __m256);
# 1033 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern int __cdecl _mm256_testz_si256(__m256i, __m256i);



extern int __cdecl _mm256_testc_si256(__m256i, __m256i);



extern int __cdecl _mm256_testnzc_si256(__m256i, __m256i);
# 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern int __cdecl _mm256_testz_pd(__m256d, __m256d);
extern int __cdecl _mm256_testc_pd(__m256d, __m256d);
extern int __cdecl _mm256_testnzc_pd(__m256d, __m256d);
extern int __cdecl _mm_testz_pd(__m128d, __m128d);
extern int __cdecl _mm_testc_pd(__m128d, __m128d);
extern int __cdecl _mm_testnzc_pd(__m128d, __m128d);
# 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern int __cdecl _mm256_testz_ps(__m256, __m256);
extern int __cdecl _mm256_testc_ps(__m256, __m256);
extern int __cdecl _mm256_testnzc_ps(__m256, __m256);
extern int __cdecl _mm_testz_ps(__m128, __m128);
extern int __cdecl _mm_testc_ps(__m128, __m128);
extern int __cdecl _mm_testnzc_ps(__m128, __m128);
# 1088 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern int __cdecl _mm256_movemask_pd(__m256d);
# 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern int __cdecl _mm256_movemask_ps(__m256);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256 __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256 __cdecl _mm256_set_ps(float, float, float, float,
                                            float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int,
                                               int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64,
                                                __int64, __int64);
# 1138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256 __cdecl _mm256_setr_ps(float, float, float, float,
                                             float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int,
                                                int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64,
                                                 __int64, __int64);







extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256 __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256 __cdecl _mm256_castpd_ps(__m256d);
extern __m256d __cdecl _mm256_castps_pd(__m256);
extern __m256i __cdecl _mm256_castps_si256(__m256);
extern __m256i __cdecl _mm256_castpd_si256(__m256d);
extern __m256 __cdecl _mm256_castsi256_ps(__m256i);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i);
extern __m128 __cdecl _mm256_castps256_ps128(__m256);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i);
extern __m256 __cdecl _mm256_castps128_ps256(__m128);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i);






extern __m128 __cdecl _mm_cvtph_ps(__m128i);
extern __m256 __cdecl _mm256_cvtph_ps(__m128i);
extern __m128i __cdecl _mm_cvtps_ph(__m128 , const int );
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int);
# 1219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern unsigned __int64 __cdecl _xgetbv(unsigned int);


extern void __cdecl _xsetbv(unsigned int, unsigned __int64);






extern void __cdecl _xsave(void *, unsigned __int64);

extern void __cdecl _xsave64(void *, unsigned __int64);







extern void __cdecl _xsaveopt(void *, unsigned __int64);

extern void __cdecl _xsaveopt64(void *, unsigned __int64);






extern void __cdecl _xsavec(void *, unsigned __int64);

extern void __cdecl _xsavec64(void *, unsigned __int64);







extern void __cdecl _xrstor(void const *, unsigned __int64);

extern void __cdecl _xrstor64(void const *, unsigned __int64);







extern void __cdecl _xsaves(void *, unsigned __int64);

extern void __cdecl _xsaves64(void *, unsigned __int64);







extern void __cdecl _xrstors(void const *, unsigned __int64);

extern void __cdecl _xrstors64(void const *, unsigned __int64);






extern void __cdecl _fxsave(void *);

extern void __cdecl _fxsave64(void *);






extern void __cdecl _fxrstor(void const *);

extern void __cdecl _fxrstor64(void const *);
# 1307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern int __cdecl _rdrand16_step(unsigned short *);
extern int __cdecl _rdrand32_step(unsigned int *);

extern int __cdecl _rdrand64_step(unsigned __int64 *);






extern unsigned int __cdecl _readfsbase_u32();
extern unsigned int __cdecl _readgsbase_u32();
extern unsigned __int64 __cdecl _readfsbase_u64();
extern unsigned __int64 __cdecl _readgsbase_u64();




extern void __cdecl _writefsbase_u32(unsigned int);
extern void __cdecl _writegsbase_u32(unsigned int);
extern void __cdecl _writefsbase_u64(unsigned __int64);
extern void __cdecl _writegsbase_u64(unsigned __int64);





extern __m128 __cdecl _mm_fmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d);

extern __m256 __cdecl _mm256_fmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d);





extern __m128 __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d);

extern __m256 __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d);





extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i);





extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i);

extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i);





extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i);





extern __m256i __cdecl _mm256_abs_epi8(__m256i);
extern __m256i __cdecl _mm256_abs_epi16(__m256i);
extern __m256i __cdecl _mm256_abs_epi32(__m256i);

extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i);
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_slli_si256(__m256i, const int);

extern __m256i __cdecl _mm256_srli_si256(__m256i, const int);


extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_slli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i);

extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i);

extern __m256i __cdecl _mm256_srai_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int);

extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i);

extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i);

extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_srli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i);





extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int);

extern __m256i __cdecl _mm256_blend_epi32(__m256i,__m256i, const int);

extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int);

extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int);
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int);

extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int);
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int);





extern __m128 __cdecl _mm_broadcastss_ps(__m128);
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d);

extern __m128i __cdecl _mm_broadcastb_epi8(__m128i);
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i);
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i);
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i);

extern __m256 __cdecl _mm256_broadcastss_ps(__m128);
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d);

extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i);
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i);
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i);
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i);

extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i);






extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i);

extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i);






extern int __cdecl _mm256_movemask_epi8(__m256i);





extern __m128i __cdecl _mm_maskload_epi32(int const * ,
                                          __m128i );
extern __m128i __cdecl _mm_maskload_epi64(__int64 const * ,
                                          __m128i );

extern void __cdecl _mm_maskstore_epi32(int * ,
                                        __m128i ,
                                        __m128i );
extern void __cdecl _mm_maskstore_epi64(__int64 * ,
                                        __m128i ,
                                        __m128i );

extern __m256i __cdecl _mm256_maskload_epi32(int const * ,
                                             __m256i );
extern __m256i __cdecl _mm256_maskload_epi64(__int64 const * ,
                                             __m256i );

extern void __cdecl _mm256_maskstore_epi32(int * ,
                                           __m256i ,
                                           __m256i );
extern void __cdecl _mm256_maskstore_epi64(__int64 * ,
                                           __m256i ,
                                           __m256i );





extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i);
extern __m256 __cdecl _mm256_permutevar8x32_ps(__m256, __m256i);

extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int);
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int);

extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_stream_load_si256(__m256i const *);






extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d ,
                                                double const * ,
                                                __m128i ,
                                                __m256d ,
                                                const int );
extern __m256 __cdecl _mm256_mask_i32gather_ps(__m256 ,
                                                float const * ,
                                                __m256i ,
                                                __m256 ,
                                                const int );
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d ,
                                                double const * ,
                                                __m256i ,
                                                __m256d ,
                                                const int );
extern __m128 __cdecl _mm256_mask_i64gather_ps(__m128 ,
                                                float const * ,
                                                __m256i ,
                                                __m128 ,
                                                const int );

extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d ,
                                             double const * ,
                                             __m128i ,
                                             __m128d ,
                                             const int );
extern __m128 __cdecl _mm_mask_i32gather_ps(__m128 ,
                                             float const * ,
                                             __m128i ,
                                             __m128 ,
                                             const int );
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d ,
                                             double const * ,
                                             __m128i ,
                                             __m128d ,
                                             const int );
extern __m128 __cdecl _mm_mask_i64gather_ps(__m128 ,
                                             float const * ,
                                             __m128i ,
                                             __m128 ,
                                             const int );


extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i ,
                                                   int const * ,
                                                   __m256i ,
                                                   __m256i ,
                                                   const int );
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i ,
                                                   __int64 const * ,
                                                   __m128i ,
                                                   __m256i ,
                                                   const int );
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i ,
                                                   int const * ,
                                                   __m256i ,
                                                   __m128i ,
                                                   const int );
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i ,
                                                   __int64 const * ,
                                                   __m256i ,
                                                   __m256i ,
                                                   const int );

extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i ,
                                                int const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i ,
                                                __int64 const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i ,
                                                int const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i ,
                                                __int64 const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );





extern __m256d __cdecl _mm256_i32gather_pd(double const * ,
                                           __m128i ,
                                           const int );
extern __m256 __cdecl _mm256_i32gather_ps(float const * ,
                                           __m256i ,
                                           const int );
extern __m256d __cdecl _mm256_i64gather_pd(double const * ,
                                           __m256i ,
                                           const int );
extern __m128 __cdecl _mm256_i64gather_ps(float const * ,
                                           __m256i ,
                                           const int );

extern __m128d __cdecl _mm_i32gather_pd(double const * ,
                                        __m128i ,
                                        const int );
extern __m128 __cdecl _mm_i32gather_ps(float const * ,
                                        __m128i ,
                                        const int );
extern __m128d __cdecl _mm_i64gather_pd(double const * ,
                                        __m128i ,
                                        const int );
extern __m128 __cdecl _mm_i64gather_ps(float const * ,
                                        __m128i ,
                                        const int );

extern __m256i __cdecl _mm256_i32gather_epi32(int const * ,
                                              __m256i ,
                                              const int );
extern __m256i __cdecl _mm256_i32gather_epi64(__int64 const * ,
                                              __m128i ,
                                              const int );
extern __m128i __cdecl _mm256_i64gather_epi32(int const * ,
                                              __m256i ,
                                              const int );
extern __m256i __cdecl _mm256_i64gather_epi64(__int64 const * ,
                                              __m256i ,
                                              const int );

extern __m128i __cdecl _mm_i32gather_epi32(int const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i32gather_epi64(__int64 const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i64gather_epi32(int const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i64gather_epi64(__int64 const * ,
                                           __m128i ,
                                           const int );







extern unsigned int _bextr_u32(unsigned int ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned int _blsi_u32(unsigned int);
extern unsigned int _blsmsk_u32(unsigned int);
extern unsigned int _blsr_u32(unsigned int);
extern unsigned int _bzhi_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _mulx_u32(unsigned int ,
                                  unsigned int ,
                                  unsigned int * );
extern unsigned int _pdep_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _pext_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _rorx_u32(unsigned int ,
                                  const unsigned int );
extern int _sarx_i32(int ,
                                  unsigned int );
extern unsigned int _shlx_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _shrx_u32(unsigned int ,
                                          unsigned int );


extern unsigned __int64 _bextr_u64(unsigned __int64 ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned __int64 _blsi_u64(unsigned __int64);
extern unsigned __int64 _blsmsk_u64(unsigned __int64);
extern unsigned __int64 _blsr_u64(unsigned __int64);
extern unsigned __int64 _bzhi_u64(unsigned __int64 ,
                                  unsigned int );
extern unsigned __int64 _mulx_u64(unsigned __int64 ,
                                  unsigned __int64 ,
                                  unsigned __int64 * );
extern unsigned __int64 _pdep_u64(unsigned __int64 ,
                                  unsigned __int64 );
extern unsigned __int64 _pext_u64(unsigned __int64 ,
                                  unsigned __int64 );
extern unsigned __int64 _rorx_u64(unsigned __int64 ,
                                  const unsigned int );
extern __int64 _sarx_i64(__int64 ,
                                  unsigned int );
extern unsigned __int64 _shlx_u64(unsigned __int64 ,
                                  unsigned int );
extern unsigned __int64 _shrx_u64(unsigned __int64 ,
                                          unsigned int );
# 1862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern unsigned int _lzcnt_u32(unsigned int);

extern unsigned __int64 _lzcnt_u64(unsigned __int64);
# 1874 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern unsigned int _tzcnt_u32(unsigned int);

extern unsigned __int64 _tzcnt_u64(unsigned __int64);







extern void __cdecl _invpcid(unsigned int , void * );


extern void _Store_HLERelease(long volatile *,long);
extern void _StorePointer_HLERelease(void * volatile *,void *);

extern long _InterlockedExchange_HLEAcquire(long volatile *,long);
extern long _InterlockedExchange_HLERelease(long volatile *,long);
extern void * _InterlockedExchangePointer_HLEAcquire(void *volatile *,void *);
extern void * _InterlockedExchangePointer_HLERelease(void *volatile *,void *);

extern long _InterlockedCompareExchange_HLEAcquire(long volatile *,long,long);
extern long _InterlockedCompareExchange_HLERelease(long volatile *,long,long);
extern __int64 _InterlockedCompareExchange64_HLEAcquire(__int64 volatile *,__int64,__int64);
extern __int64 _InterlockedCompareExchange64_HLERelease(__int64 volatile *,__int64,__int64);
extern void * _InterlockedCompareExchangePointer_HLEAcquire(void *volatile *,void *,void *);
extern void * _InterlockedCompareExchangePointer_HLERelease(void *volatile *,void *,void *);

extern long _InterlockedExchangeAdd_HLEAcquire(long volatile *,long);
extern long _InterlockedExchangeAdd_HLERelease(long volatile *,long);

extern long _InterlockedAnd_HLEAcquire(long volatile *,long);
extern long _InterlockedAnd_HLERelease(long volatile *,long);
extern long _InterlockedOr_HLEAcquire(long volatile *,long);
extern long _InterlockedOr_HLERelease(long volatile *,long);
extern long _InterlockedXor_HLEAcquire(long volatile *,long);
extern long _InterlockedXor_HLERelease(long volatile *,long);

extern unsigned char _interlockedbittestandset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandset_HLERelease(long *,long);
extern unsigned char _interlockedbittestandreset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandreset_HLERelease(long *,long);


extern void _Store64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedExchange64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedExchange64_HLERelease(__int64 volatile *,__int64);

extern __int64 _InterlockedExchangeAdd64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedExchangeAdd64_HLERelease(__int64 volatile *,__int64);

extern __int64 _InterlockedAnd64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedAnd64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedOr64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedOr64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedXor64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedXor64_HLERelease(__int64 volatile *,__int64);

extern unsigned char _interlockedbittestandset64_HLEAcquire(__int64 *,__int64);
extern unsigned char _interlockedbittestandset64_HLERelease(__int64 *,__int64);
extern unsigned char _interlockedbittestandreset64_HLEAcquire(__int64 *,__int64);
extern unsigned char _interlockedbittestandreset64_HLERelease(__int64 *,__int64);
# 1948 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern unsigned int __cdecl _xbegin(void);
extern void __cdecl _xend(void);
extern void __cdecl _xabort(const unsigned int);
extern unsigned char __cdecl _xtest(void);
# 1960 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern int __cdecl _rdseed16_step(unsigned short *);
extern int __cdecl _rdseed32_step(unsigned int *);

extern int __cdecl _rdseed64_step(unsigned __int64 *);
# 1975 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern unsigned char __cdecl _addcarryx_u32(unsigned char ,
                                                   unsigned int ,
                                                   unsigned int ,
                                                   unsigned int * );



extern unsigned char __cdecl _addcarryx_u64(unsigned char ,
                                                   unsigned __int64 ,
                                                   unsigned __int64 ,
                                                   unsigned __int64 * );






extern unsigned short __cdecl _load_be_u16(void const*);
extern unsigned int __cdecl _load_be_u32(void const*);
extern unsigned __int64 __cdecl _load_be_u64(void const*);







extern void __cdecl _store_be_u16(void *, unsigned short);
extern void __cdecl _store_be_u32(void *, unsigned int);
extern void __cdecl _store_be_u64(void *, unsigned __int64);







extern __m128i __cdecl _mm_sha1msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1nexte_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1rnds4_epu32(__m128i, __m128i, const int);

extern __m128i __cdecl _mm_sha256msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256rnds2_epu32(__m128i, __m128i, __m128i);




extern void * __cdecl _bnd_set_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_narrow_ptr_bounds(const void *, const void *, size_t);
extern void * __cdecl _bnd_copy_ptr_bounds(const void *, const void *);
extern void * __cdecl _bnd_init_ptr_bounds(const void *);
extern void __cdecl _bnd_store_ptr_bounds(const void **, const void *);
extern void __cdecl _bnd_chk_ptr_lbounds(const void *);
extern void __cdecl _bnd_chk_ptr_ubounds(const void *);
extern void __cdecl _bnd_chk_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_load_ptr_bounds(const void **, const void *);
extern const void * __cdecl _bnd_get_ptr_lbound(const void *);
extern const void * __cdecl _bnd_get_ptr_ubound(const void *);


};
# 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h" 1 3
# 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h" 3
extern "C" {
# 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h" 3
__m128 _mm_macc_ps(__m128, __m128, __m128);
__m128d _mm_macc_pd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ss(__m128, __m128, __m128);
__m128d _mm_macc_sd(__m128d, __m128d, __m128d);
__m128 _mm_maddsub_ps(__m128, __m128, __m128);
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msubadd_ps(__m128, __m128, __m128);
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ps(__m128, __m128, __m128);
__m128d _mm_msub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ss(__m128, __m128, __m128);
__m128d _mm_msub_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ps(__m128, __m128, __m128);
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ss(__m128, __m128, __m128);
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ps(__m128, __m128, __m128);
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ss(__m128, __m128, __m128);
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);


__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);


__m128i _mm_haddw_epi8(__m128i);
__m128i _mm_haddd_epi8(__m128i);
__m128i _mm_haddq_epi8(__m128i);
__m128i _mm_haddd_epi16(__m128i);
__m128i _mm_haddq_epi16(__m128i);
__m128i _mm_haddq_epi32(__m128i);
__m128i _mm_haddw_epu8(__m128i);
__m128i _mm_haddd_epu8(__m128i);
__m128i _mm_haddq_epu8(__m128i);
__m128i _mm_haddd_epu16(__m128i);
__m128i _mm_haddq_epu16(__m128i);
__m128i _mm_haddq_epu32(__m128i);
__m128i _mm_hsubw_epi8(__m128i);
__m128i _mm_hsubd_epi16(__m128i);
__m128i _mm_hsubq_epi32(__m128i);


__m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i);


__m128i _mm_rot_epi8(__m128i, __m128i);
__m128i _mm_rot_epi16(__m128i, __m128i);
__m128i _mm_rot_epi32(__m128i, __m128i);
__m128i _mm_rot_epi64(__m128i, __m128i);
__m128i _mm_roti_epi8(__m128i, int);
__m128i _mm_roti_epi16(__m128i, int);
__m128i _mm_roti_epi32(__m128i, int);
__m128i _mm_roti_epi64(__m128i, int);
__m128i _mm_shl_epi8(__m128i, __m128i);
__m128i _mm_shl_epi16(__m128i, __m128i);
__m128i _mm_shl_epi32(__m128i, __m128i);
__m128i _mm_shl_epi64(__m128i, __m128i);
__m128i _mm_sha_epi8(__m128i, __m128i);
__m128i _mm_sha_epi16(__m128i, __m128i);
__m128i _mm_sha_epi32(__m128i, __m128i);
__m128i _mm_sha_epi64(__m128i, __m128i);



__m128i _mm_com_epu8(__m128i, __m128i, int);
__m128i _mm_com_epu16(__m128i, __m128i, int);
__m128i _mm_com_epu32(__m128i, __m128i, int);
__m128i _mm_com_epu64(__m128i, __m128i, int);
__m128i _mm_com_epi8(__m128i, __m128i, int);
__m128i _mm_com_epi16(__m128i, __m128i, int);
__m128i _mm_com_epi32(__m128i, __m128i, int);
__m128i _mm_com_epi64(__m128i, __m128i, int);



__m128 _mm_frcz_ps(__m128);
__m128d _mm_frcz_pd(__m128d);
__m128 _mm_frcz_ss(__m128, __m128);
__m128d _mm_frcz_sd(__m128d, __m128d);
# 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h" 3
__m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);



__m256 _mm256_macc_ps(__m256, __m256, __m256);
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_maddsub_ps(__m256, __m256, __m256);
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msubadd_ps(__m256, __m256, __m256);
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msub_ps(__m256, __m256, __m256);
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmacc_ps(__m256, __m256, __m256);
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmsub_ps(__m256, __m256, __m256);
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
__m256 _mm256_frcz_ps(__m256);
__m256d _mm256_frcz_pd(__m256d);
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);


void __llwpcb(void *);
void *__slwpcb();
void __lwpval32(unsigned int, unsigned int, unsigned int);
unsigned char __lwpins32(unsigned int, unsigned int, unsigned int);

void __lwpval64(unsigned __int64, unsigned int, unsigned int);
unsigned char __lwpins64(unsigned __int64, unsigned int, unsigned int);



unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int);
unsigned int _andn_u32(unsigned int, unsigned int);
unsigned int _tzcnt_u32(unsigned int);
unsigned int _lzcnt_u32(unsigned int);
unsigned int _blsr_u32(unsigned int);
unsigned int _blsmsk_u32(unsigned int);
unsigned int _blsi_u32(unsigned int);

unsigned __int64 _bextr_u64(unsigned __int64, unsigned int, unsigned int);
unsigned __int64 _andn_u64(unsigned __int64, unsigned __int64);
unsigned __int64 _tzcnt_u64(unsigned __int64);
unsigned __int64 _lzcnt_u64(unsigned __int64);
unsigned __int64 _blsr_u64(unsigned __int64);
unsigned __int64 _blsmsk_u64(unsigned __int64);
unsigned __int64 _blsi_u64(unsigned __int64);



unsigned int _bextri_u32(unsigned int, unsigned int);
unsigned int _blcfill_u32(unsigned int);
unsigned int _blsfill_u32(unsigned int);
unsigned int _blcs_u32(unsigned int);
unsigned int _tzmsk_u32(unsigned int);
unsigned int _blcic_u32(unsigned int);
unsigned int _blsic_u32(unsigned int);
unsigned int _t1mskc_u32(unsigned int);
unsigned int _blcmsk_u32(unsigned int);
unsigned int _blci_u32(unsigned int);

unsigned __int64 _bextri_u64(unsigned __int64, unsigned int);
unsigned __int64 _blcfill_u64(unsigned __int64);
unsigned __int64 _blsfill_u64(unsigned __int64);
unsigned __int64 _blcs_u64(unsigned __int64);
unsigned __int64 _tzmsk_u64(unsigned __int64);
unsigned __int64 _blcic_u64(unsigned __int64);
unsigned __int64 _blsic_u64(unsigned __int64);
unsigned __int64 _t1mskc_u64(unsigned __int64);
unsigned __int64 _blcmsk_u64(unsigned __int64);
unsigned __int64 _blci_u64(unsigned __int64);


void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);

void _mm_clzero(void const *);


};
# 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 2 3
# 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
extern "C" {
# 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
void * _AddressOfReturnAddress(void);
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask);
unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask);

unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask);
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask);
# 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
long _InterlockedAnd(long volatile * _Value, long _Mask);
short _InterlockedAnd16(short volatile * _Value, short _Mask);


short _InterlockedAnd16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedAnd64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedAnd64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedAnd8(char volatile * _Value, char _Mask);


char _InterlockedAnd8_np(char volatile * _Value, char _Mask);



long _InterlockedAnd_np(long volatile * _Value, long _Mask);

long _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand);

unsigned char _InterlockedCompareExchange128(__int64 volatile * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult);


unsigned char _InterlockedCompareExchange128_np(__int64 volatile * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult);

short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand);


short _InterlockedCompareExchange16_np(short volatile * _Destination, short _Exchange, short _Comparand);

__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);


__int64 _InterlockedCompareExchange64_np(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);

char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand);



void * _InterlockedCompareExchangePointer(void * volatile * _Destination, void * _Exchange, void * _Comparand);


void * _InterlockedCompareExchangePointer_np(void * volatile * _Destination, void * _Exchange, void * _Comparand);



long _InterlockedCompareExchange_np(long volatile * _Destination, long _Exchange, long _Comparand);

long _InterlockedDecrement(long volatile * _Addend);

short _InterlockedDecrement16(short volatile * _Addend);



__int64 _InterlockedDecrement64(__int64 volatile * _Addend);






long _InterlockedExchange(long volatile * _Target, long _Value);

short _InterlockedExchange16(short volatile * _Target, short _Value);



__int64 _InterlockedExchange64(__int64 volatile * _Target, __int64 _Value);



char _InterlockedExchange8(char volatile * _Target, char _Value);



long _InterlockedExchangeAdd(long volatile * _Addend, long _Value);
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value);



__int64 _InterlockedExchangeAdd64(__int64 volatile * _Addend, __int64 _Value);



char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value);






void * _InterlockedExchangePointer(void * volatile * _Target, void * _Value);






long _InterlockedIncrement(long volatile * _Addend);

short _InterlockedIncrement16(short volatile * _Addend);



__int64 _InterlockedIncrement64(__int64 volatile * _Addend);






long _InterlockedOr(long volatile * _Value, long _Mask);
short _InterlockedOr16(short volatile * _Value, short _Mask);


short _InterlockedOr16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedOr64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedOr64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedOr8(char volatile * _Value, char _Mask);


char _InterlockedOr8_np(char volatile * _Value, char _Mask);



long _InterlockedOr_np(long volatile * _Value, long _Mask);

long _InterlockedXor(long volatile * _Value, long _Mask);
short _InterlockedXor16(short volatile * _Value, short _Mask);


short _InterlockedXor16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedXor64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedXor64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedXor8(char volatile * _Value, char _Mask);


char _InterlockedXor8_np(char volatile * _Value, char _Mask);



long _InterlockedXor_np(long volatile * _Value, long _Mask);
# 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
void _ReadBarrier(void);






void _ReadWriteBarrier(void);
void * _ReturnAddress(void);

void _WriteBarrier(void);
# 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
void __addgsbyte(unsigned long, unsigned char);
void __addgsdword(unsigned long, unsigned long);
void __addgsqword(unsigned long, unsigned __int64);
void __addgsword(unsigned long, unsigned short);




void __code_seg(const char *);
void __cpuid(int[4], int);
void __cpuidex(int[4], int, int);
void __cdecl __debugbreak(void);

__int64 __emul(int, int);
unsigned __int64 __emulu(unsigned int, unsigned int);
__declspec(noreturn) void __fastfail(unsigned int);
void __faststorefence(void);
unsigned int __getcallerseflags(void);
void __halt(void);


unsigned char __inbyte(unsigned short);
void __inbytestring(unsigned short, unsigned char *, unsigned long);



void __incgsbyte(unsigned long);
void __incgsdword(unsigned long);
void __incgsqword(unsigned long);
void __incgsword(unsigned long);




unsigned long __indword(unsigned short);
void __indwordstring(unsigned short, unsigned long *, unsigned long);
void __int2c(void);
void __invlpg(void *);
unsigned short __inword(unsigned short);
void __inwordstring(unsigned short, unsigned short *, unsigned long);
# 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
void __lidt(void *);
unsigned __int64 __ll_lshift(unsigned __int64, int);
__int64 __ll_rshift(__int64, int);
unsigned int __lzcnt(unsigned int);
unsigned short __lzcnt16(unsigned short);
unsigned __int64 __lzcnt64(unsigned __int64);
void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);
void __movsq(unsigned long long *, unsigned long long const *, size_t);
void __movsw(unsigned short *, unsigned short const *, size_t);
__int64 __mulh(__int64, __int64);
void __nop(void);
void __nvreg_restore_fence(void);
void __nvreg_save_fence(void);
void __outbyte(unsigned short, unsigned char);
void __outbytestring(unsigned short, unsigned char *, unsigned long);
void __outdword(unsigned short, unsigned long);
void __outdwordstring(unsigned short, unsigned long *, unsigned long);
void __outword(unsigned short, unsigned short);
void __outwordstring(unsigned short, unsigned short *, unsigned long);
unsigned int __popcnt(unsigned int);
unsigned short __popcnt16(unsigned short);
unsigned __int64 __popcnt64(unsigned __int64);



unsigned __int64 __rdtsc(void);
unsigned __int64 __rdtscp(unsigned int *);
unsigned __int64 __readcr0(void);

unsigned __int64 __readcr2(void);

unsigned __int64 __readcr3(void);

unsigned __int64 __readcr4(void);

unsigned __int64 __readcr8(void);

unsigned __int64 __readdr(unsigned int);

unsigned __int64 __readeflags(void);





unsigned char __readgsbyte(unsigned long);
unsigned long __readgsdword(unsigned long);
unsigned __int64 __readgsqword(unsigned long);
unsigned short __readgsword(unsigned long);
unsigned __int64 __readmsr(unsigned long);
unsigned __int64 __readpmc(unsigned long);




unsigned long __segmentlimit(unsigned long);

unsigned __int64 __shiftleft128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift);
unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift);
void __sidt(void *);

void __stosb(unsigned char *, unsigned char, size_t);
void __stosd(unsigned long *, unsigned long, size_t);
void __stosq(unsigned __int64 *, unsigned __int64, size_t);
void __stosw(unsigned short *, unsigned short, size_t);
void __svm_clgi(void);
void __svm_invlpga(void *, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);





void __ud2(void);
unsigned __int64 __ull_rshift(unsigned __int64, int);
unsigned __int64 __umulh(unsigned __int64, unsigned __int64);
void __vmx_off(void);
unsigned char __vmx_on(unsigned __int64 *);
unsigned char __vmx_vmclear(unsigned __int64 *);
unsigned char __vmx_vmlaunch(void);
unsigned char __vmx_vmptrld(unsigned __int64 *);
void __vmx_vmptrst(unsigned __int64 *);
unsigned char __vmx_vmread(size_t, size_t *);
unsigned char __vmx_vmresume(void);
unsigned char __vmx_vmwrite(size_t, size_t);
void __wbinvd(void);


void __writecr0(unsigned __int64);

void __writecr3(unsigned __int64);

void __writecr4(unsigned __int64);

void __writecr8(unsigned __int64);

void __writedr(unsigned int, unsigned __int64);

void __writeeflags(unsigned __int64);





void __writegsbyte(unsigned long, unsigned char);
void __writegsdword(unsigned long, unsigned long);
void __writegsqword(unsigned long, unsigned __int64);
void __writegsword(unsigned long, unsigned short);
void __writemsr(unsigned long, unsigned __int64);





unsigned char _bittest(long const *, long);
unsigned char _bittest64(__int64 const *, __int64);
unsigned char _bittestandcomplement(long *, long);
unsigned char _bittestandcomplement64(__int64 *, __int64);
unsigned char _bittestandreset(long *, long);
unsigned char _bittestandreset64(__int64 *, __int64);
unsigned char _bittestandset(long *, long);
unsigned char _bittestandset64(__int64 *, __int64);
unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64);
unsigned long __cdecl _byteswap_ulong( unsigned long);
unsigned short __cdecl _byteswap_ushort( unsigned short);
void __cdecl _disable(void);
void __cdecl _enable(void);
unsigned char _interlockedbittestandreset(long volatile *, long);
unsigned char _interlockedbittestandreset64(__int64 volatile *, __int64);






unsigned char _interlockedbittestandset(long volatile *, long);
unsigned char _interlockedbittestandset64(__int64 volatile *, __int64);
# 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
unsigned long __cdecl _lrotl( unsigned long, int);
unsigned long __cdecl _lrotr( unsigned long, int);
# 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
void _m_prefetch(void *);
void _m_prefetchw(volatile const void *);
# 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
__m128i _mm_abs_epi16(__m128i);
__m128i _mm_abs_epi32(__m128i);
__m128i _mm_abs_epi8(__m128i);



__m128i _mm_add_epi16(__m128i, __m128i);
__m128i _mm_add_epi32(__m128i, __m128i);
__m128i _mm_add_epi64(__m128i, __m128i);
__m128i _mm_add_epi8(__m128i, __m128i);
__m128d _mm_add_pd(__m128d, __m128d);
__m128 _mm_add_ps(__m128, __m128);
__m128d _mm_add_sd(__m128d, __m128d);

__m128 _mm_add_ss(__m128, __m128);
__m128i _mm_adds_epi16(__m128i, __m128i);
__m128i _mm_adds_epi8(__m128i, __m128i);
__m128i _mm_adds_epu16(__m128i, __m128i);
__m128i _mm_adds_epu8(__m128i, __m128i);
__m128d _mm_addsub_pd(__m128d, __m128d);
__m128 _mm_addsub_ps(__m128, __m128);
__m128i _mm_alignr_epi8(__m128i, __m128i, int);

__m128d _mm_and_pd(__m128d, __m128d);
__m128 _mm_and_ps(__m128, __m128);
__m128i _mm_and_si128(__m128i, __m128i);
__m128d _mm_andnot_pd(__m128d, __m128d);
__m128 _mm_andnot_ps(__m128, __m128);
__m128i _mm_andnot_si128(__m128i, __m128i);
__m128i _mm_avg_epu16(__m128i, __m128i);
__m128i _mm_avg_epu8(__m128i, __m128i);
__m128i _mm_blend_epi16(__m128i, __m128i, int);
__m128d _mm_blend_pd(__m128d, __m128d, int);
__m128 _mm_blend_ps(__m128, __m128, int);
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i);
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d);
__m128 _mm_blendv_ps(__m128, __m128, __m128);
void _mm_clflush(void const *);
void _mm_clflushopt(void const *);
void _mm_clwb(void const *);
void _mm_clzero(void const *);
__m128i _mm_cmpeq_epi16(__m128i, __m128i);
__m128i _mm_cmpeq_epi32(__m128i, __m128i);
__m128i _mm_cmpeq_epi64(__m128i, __m128i);
__m128i _mm_cmpeq_epi8(__m128i, __m128i);
__m128d _mm_cmpeq_pd(__m128d, __m128d);
__m128 _mm_cmpeq_ps(__m128, __m128);
__m128d _mm_cmpeq_sd(__m128d, __m128d);
__m128 _mm_cmpeq_ss(__m128, __m128);
int _mm_cmpestra(__m128i, int, __m128i, int, int);
int _mm_cmpestrc(__m128i, int, __m128i, int, int);
int _mm_cmpestri(__m128i, int, __m128i, int, int);
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int);
int _mm_cmpestro(__m128i, int, __m128i, int, int);
int _mm_cmpestrs(__m128i, int, __m128i, int, int);
int _mm_cmpestrz(__m128i, int, __m128i, int, int);
__m128d _mm_cmpge_pd(__m128d, __m128d);
__m128 _mm_cmpge_ps(__m128, __m128);
__m128d _mm_cmpge_sd(__m128d, __m128d);
__m128 _mm_cmpge_ss(__m128, __m128);
__m128i _mm_cmpgt_epi16(__m128i, __m128i);
__m128i _mm_cmpgt_epi32(__m128i, __m128i);
__m128i _mm_cmpgt_epi64(__m128i, __m128i);
__m128i _mm_cmpgt_epi8(__m128i, __m128i);
__m128d _mm_cmpgt_pd(__m128d, __m128d);
__m128 _mm_cmpgt_ps(__m128, __m128);
__m128d _mm_cmpgt_sd(__m128d, __m128d);
__m128 _mm_cmpgt_ss(__m128, __m128);
int _mm_cmpistra(__m128i, __m128i, int);
int _mm_cmpistrc(__m128i, __m128i, int);
int _mm_cmpistri(__m128i, __m128i, int);
__m128i _mm_cmpistrm(__m128i, __m128i, int);
int _mm_cmpistro(__m128i, __m128i, int);
int _mm_cmpistrs(__m128i, __m128i, int);
int _mm_cmpistrz(__m128i, __m128i, int);
__m128d _mm_cmple_pd(__m128d, __m128d);
__m128 _mm_cmple_ps(__m128, __m128);
__m128d _mm_cmple_sd(__m128d, __m128d);
__m128 _mm_cmple_ss(__m128, __m128);
__m128i _mm_cmplt_epi16(__m128i, __m128i);
__m128i _mm_cmplt_epi32(__m128i, __m128i);
__m128i _mm_cmplt_epi8(__m128i, __m128i);
__m128d _mm_cmplt_pd(__m128d, __m128d);
__m128 _mm_cmplt_ps(__m128, __m128);
__m128d _mm_cmplt_sd(__m128d, __m128d);
__m128 _mm_cmplt_ss(__m128, __m128);
__m128d _mm_cmpneq_pd(__m128d, __m128d);
__m128 _mm_cmpneq_ps(__m128, __m128);
__m128d _mm_cmpneq_sd(__m128d, __m128d);
__m128 _mm_cmpneq_ss(__m128, __m128);
__m128d _mm_cmpnge_pd(__m128d, __m128d);
__m128 _mm_cmpnge_ps(__m128, __m128);
__m128d _mm_cmpnge_sd(__m128d, __m128d);
__m128 _mm_cmpnge_ss(__m128, __m128);
__m128d _mm_cmpngt_pd(__m128d, __m128d);
__m128 _mm_cmpngt_ps(__m128, __m128);
__m128d _mm_cmpngt_sd(__m128d, __m128d);
__m128 _mm_cmpngt_ss(__m128, __m128);
__m128d _mm_cmpnle_pd(__m128d, __m128d);
__m128 _mm_cmpnle_ps(__m128, __m128);
__m128d _mm_cmpnle_sd(__m128d, __m128d);
__m128 _mm_cmpnle_ss(__m128, __m128);
__m128d _mm_cmpnlt_pd(__m128d, __m128d);
__m128 _mm_cmpnlt_ps(__m128, __m128);
__m128d _mm_cmpnlt_sd(__m128d, __m128d);
__m128 _mm_cmpnlt_ss(__m128, __m128);
__m128d _mm_cmpord_pd(__m128d, __m128d);
__m128 _mm_cmpord_ps(__m128, __m128);
__m128d _mm_cmpord_sd(__m128d, __m128d);
__m128 _mm_cmpord_ss(__m128, __m128);
__m128d _mm_cmpunord_pd(__m128d, __m128d);
__m128 _mm_cmpunord_ps(__m128, __m128);
__m128d _mm_cmpunord_sd(__m128d, __m128d);
__m128 _mm_cmpunord_ss(__m128, __m128);
int _mm_comieq_sd(__m128d, __m128d);
int _mm_comieq_ss(__m128, __m128);
int _mm_comige_sd(__m128d, __m128d);
int _mm_comige_ss(__m128, __m128);
int _mm_comigt_sd(__m128d, __m128d);
int _mm_comigt_ss(__m128, __m128);
int _mm_comile_sd(__m128d, __m128d);
int _mm_comile_ss(__m128, __m128);
int _mm_comilt_sd(__m128d, __m128d);
int _mm_comilt_ss(__m128, __m128);
int _mm_comineq_sd(__m128d, __m128d);
int _mm_comineq_ss(__m128, __m128);
unsigned int _mm_crc32_u16(unsigned int, unsigned short);
unsigned int _mm_crc32_u32(unsigned int, unsigned int);
unsigned __int64 _mm_crc32_u64(unsigned __int64, unsigned __int64);
unsigned int _mm_crc32_u8(unsigned int, unsigned char);


__m128 _mm_cvt_si2ss(__m128, int);
int _mm_cvt_ss2si(__m128);
__m128i _mm_cvtepi16_epi32(__m128i);
__m128i _mm_cvtepi16_epi64(__m128i);
__m128i _mm_cvtepi32_epi64(__m128i);
__m128d _mm_cvtepi32_pd(__m128i);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtepi8_epi16(__m128i);
__m128i _mm_cvtepi8_epi32(__m128i);
__m128i _mm_cvtepi8_epi64(__m128i);
__m128i _mm_cvtepu16_epi32(__m128i);
__m128i _mm_cvtepu16_epi64(__m128i);
__m128i _mm_cvtepu32_epi64(__m128i);
__m128i _mm_cvtepu8_epi16(__m128i);
__m128i _mm_cvtepu8_epi32(__m128i);
__m128i _mm_cvtepu8_epi64(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);

__m128 _mm_cvtpd_ps(__m128d);

__m128i _mm_cvtps_epi32(__m128);
__m128d _mm_cvtps_pd(__m128);
int _mm_cvtsd_si32(__m128d);
__int64 _mm_cvtsd_si64(__m128d);
__int64 _mm_cvtsd_si64x(__m128d);
__m128 _mm_cvtsd_ss(__m128, __m128d);
int _mm_cvtsi128_si32(__m128i);
__int64 _mm_cvtsi128_si64(__m128i);
__int64 _mm_cvtsi128_si64x(__m128i);
__m128d _mm_cvtsi32_sd(__m128d, int);
__m128i _mm_cvtsi32_si128(int);
__m128d _mm_cvtsi64_sd(__m128d, __int64);
__m128i _mm_cvtsi64_si128(__int64);
__m128 _mm_cvtsi64_ss(__m128, __int64);
__m128d _mm_cvtsi64x_sd(__m128d, __int64);
__m128i _mm_cvtsi64x_si128(__int64);
__m128 _mm_cvtsi64x_ss(__m128, __int64);
__m128d _mm_cvtss_sd(__m128d, __m128);
__int64 _mm_cvtss_si64(__m128);
__int64 _mm_cvtss_si64x(__m128);

int _mm_cvtt_ss2si(__m128);
__m128i _mm_cvttpd_epi32(__m128d);

__m128i _mm_cvttps_epi32(__m128);
int _mm_cvttsd_si32(__m128d);
__int64 _mm_cvttsd_si64(__m128d);
__int64 _mm_cvttsd_si64x(__m128d);
__int64 _mm_cvttss_si64(__m128);
__int64 _mm_cvttss_si64x(__m128);
__m128d _mm_div_pd(__m128d, __m128d);
__m128 _mm_div_ps(__m128, __m128);
__m128d _mm_div_sd(__m128d, __m128d);
__m128 _mm_div_ss(__m128, __m128);
__m128d _mm_dp_pd(__m128d, __m128d, int);
__m128 _mm_dp_ps(__m128, __m128, int);
int _mm_extract_epi16(__m128i, int);
int _mm_extract_epi32(__m128i, int);
__int64 _mm_extract_epi64(__m128i, int);
int _mm_extract_epi8(__m128i, int);
int _mm_extract_ps(__m128, int);
__m128i _mm_extract_si64(__m128i, __m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
unsigned int _mm_getcsr(void);
__m128i _mm_hadd_epi16(__m128i, __m128i);
__m128i _mm_hadd_epi32(__m128i, __m128i);
__m128d _mm_hadd_pd(__m128d, __m128d);


__m128 _mm_hadd_ps(__m128, __m128);
__m128i _mm_hadds_epi16(__m128i, __m128i);

__m128i _mm_hsub_epi16(__m128i, __m128i);
__m128i _mm_hsub_epi32(__m128i, __m128i);
__m128d _mm_hsub_pd(__m128d, __m128d);


__m128 _mm_hsub_ps(__m128, __m128);
__m128i _mm_hsubs_epi16(__m128i, __m128i);

__m128i _mm_insert_epi16(__m128i, int, int);
__m128i _mm_insert_epi32(__m128i, int, int);
__m128i _mm_insert_epi64(__m128i, __int64, int);
__m128i _mm_insert_epi8(__m128i, int, int);
__m128 _mm_insert_ps(__m128, __m128, int);
__m128i _mm_insert_si64(__m128i, __m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
__m128i _mm_lddqu_si128(__m128i const *);
void _mm_lfence(void);
__m128d _mm_load1_pd(double const *);
__m128d _mm_load_pd(double const *);
__m128 _mm_load_ps(float const *);
__m128 _mm_load_ps1(float const *);
__m128d _mm_load_sd(double const *);
__m128i _mm_load_si128(__m128i const *);
__m128 _mm_load_ss(float const *);
__m128d _mm_loaddup_pd(double const *);
__m128d _mm_loadh_pd(__m128d, double const *);
__m128 _mm_loadh_pi(__m128, __m64 const *);
__m128i _mm_loadl_epi64(__m128i const *);
__m128d _mm_loadl_pd(__m128d, double const *);
__m128 _mm_loadl_pi(__m128, __m64 const *);
__m128d _mm_loadr_pd(double const *);
__m128 _mm_loadr_ps(float const *);
__m128d _mm_loadu_pd(double const *);
__m128 _mm_loadu_ps(float const *);
__m128i _mm_loadu_si128(__m128i const *);
__m128i _mm_madd_epi16(__m128i, __m128i);
__m128i _mm_maddubs_epi16(__m128i, __m128i);

void _mm_maskmoveu_si128(__m128i, __m128i, char *);
__m128i _mm_max_epi16(__m128i, __m128i);
__m128i _mm_max_epi32(__m128i, __m128i);
__m128i _mm_max_epi8(__m128i, __m128i);
__m128i _mm_max_epu16(__m128i, __m128i);
__m128i _mm_max_epu32(__m128i, __m128i);
__m128i _mm_max_epu8(__m128i, __m128i);
__m128d _mm_max_pd(__m128d, __m128d);
__m128 _mm_max_ps(__m128, __m128);
__m128d _mm_max_sd(__m128d, __m128d);
__m128 _mm_max_ss(__m128, __m128);
void _mm_mfence(void);
__m128i _mm_min_epi16(__m128i, __m128i);
__m128i _mm_min_epi32(__m128i, __m128i);
__m128i _mm_min_epi8(__m128i, __m128i);
__m128i _mm_min_epu16(__m128i, __m128i);
__m128i _mm_min_epu32(__m128i, __m128i);
__m128i _mm_min_epu8(__m128i, __m128i);
__m128d _mm_min_pd(__m128d, __m128d);
__m128 _mm_min_ps(__m128, __m128);
__m128d _mm_min_sd(__m128d, __m128d);
__m128 _mm_min_ss(__m128, __m128);
__m128i _mm_minpos_epu16(__m128i);
void _mm_monitor(void const *, unsigned int, unsigned int);
__m128i _mm_move_epi64(__m128i);
__m128d _mm_move_sd(__m128d, __m128d);
__m128 _mm_move_ss(__m128, __m128);
__m128d _mm_movedup_pd(__m128d);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_movehl_ps(__m128, __m128);
__m128 _mm_moveldup_ps(__m128);
__m128 _mm_movelh_ps(__m128, __m128);
int _mm_movemask_epi8(__m128i);
int _mm_movemask_pd(__m128d);
int _mm_movemask_ps(__m128);


__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int);
__m128i _mm_mul_epi32(__m128i, __m128i);
__m128i _mm_mul_epu32(__m128i, __m128i);
__m128d _mm_mul_pd(__m128d, __m128d);
__m128 _mm_mul_ps(__m128, __m128);
__m128d _mm_mul_sd(__m128d, __m128d);
__m128 _mm_mul_ss(__m128, __m128);

__m128i _mm_mulhi_epi16(__m128i, __m128i);
__m128i _mm_mulhi_epu16(__m128i, __m128i);
__m128i _mm_mulhrs_epi16(__m128i, __m128i);

__m128i _mm_mullo_epi16(__m128i, __m128i);
__m128i _mm_mullo_epi32(__m128i, __m128i);
void _mm_mwait(unsigned int, unsigned int);
__m128d _mm_or_pd(__m128d, __m128d);
__m128 _mm_or_ps(__m128, __m128);
__m128i _mm_or_si128(__m128i, __m128i);
__m128i _mm_packs_epi16(__m128i, __m128i);
__m128i _mm_packs_epi32(__m128i, __m128i);
__m128i _mm_packus_epi16(__m128i, __m128i);
__m128i _mm_packus_epi32(__m128i, __m128i);
void _mm_pause(void);
int _mm_popcnt_u32(unsigned int);
__int64 _mm_popcnt_u64(unsigned __int64);
void _mm_prefetch(char const *, int);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128d _mm_round_pd(__m128d, int);
__m128 _mm_round_ps(__m128, int);
__m128d _mm_round_sd(__m128d, __m128d, int);
__m128 _mm_round_ss(__m128, __m128, int);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128i _mm_sad_epu8(__m128i, __m128i);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi32(int);

__m128i _mm_set1_epi64x(__int64);
__m128i _mm_set1_epi8(char);
__m128d _mm_set1_pd(double);



__m128i _mm_set_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_set_epi32(int, int, int, int);

__m128i _mm_set_epi64x(__int64, __int64);
__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_set_pd(double, double);



__m128 _mm_set_ps(float, float, float, float);
__m128 _mm_set_ps1(float);
__m128d _mm_set_sd(double);
__m128 _mm_set_ss(float);
void _mm_setcsr(unsigned int);
__m128i _mm_setl_epi64(__m128i);
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_setr_epi32(int, int, int, int);

__m128i _mm_setr_epi64x(__int64, __int64);
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_setr_pd(double, double);



__m128 _mm_setr_ps(float, float, float, float);
__m128d _mm_setzero_pd(void);
__m128 _mm_setzero_ps(void);
__m128i _mm_setzero_si128(void);

void _mm_sfence(void);
__m128i _mm_shuffle_epi32(__m128i, int);
__m128i _mm_shuffle_epi8(__m128i, __m128i);
__m128d _mm_shuffle_pd(__m128d, __m128d, int);

__m128 _mm_shuffle_ps(__m128, __m128, unsigned int);
__m128i _mm_shufflehi_epi16(__m128i, int);
__m128i _mm_shufflelo_epi16(__m128i, int);
__m128i _mm_sign_epi16(__m128i, __m128i);
__m128i _mm_sign_epi32(__m128i, __m128i);
__m128i _mm_sign_epi8(__m128i, __m128i);



__m128i _mm_sll_epi16(__m128i, __m128i);
__m128i _mm_sll_epi32(__m128i, __m128i);
__m128i _mm_sll_epi64(__m128i, __m128i);
__m128i _mm_slli_epi16(__m128i, int);
__m128i _mm_slli_epi32(__m128i, int);
__m128i _mm_slli_epi64(__m128i, int);
__m128i _mm_slli_si128(__m128i, int);
__m128d _mm_sqrt_pd(__m128d);
__m128 _mm_sqrt_ps(__m128);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128 _mm_sqrt_ss(__m128);
__m128i _mm_sra_epi16(__m128i, __m128i);
__m128i _mm_sra_epi32(__m128i, __m128i);
__m128i _mm_srai_epi16(__m128i, int);
__m128i _mm_srai_epi32(__m128i, int);
__m128i _mm_srl_epi16(__m128i, __m128i);
__m128i _mm_srl_epi32(__m128i, __m128i);
__m128i _mm_srl_epi64(__m128i, __m128i);
__m128i _mm_srli_epi16(__m128i, int);
__m128i _mm_srli_epi32(__m128i, int);
__m128i _mm_srli_epi64(__m128i, int);
__m128i _mm_srli_si128(__m128i, int);
void _mm_store1_pd(double *, __m128d);
void _mm_store_pd(double *, __m128d);
void _mm_store_ps(float *, __m128);
void _mm_store_ps1(float *, __m128);
void _mm_store_sd(double *, __m128d);
void _mm_store_si128(__m128i *, __m128i);
void _mm_store_ss(float *, __m128);
void _mm_storeh_pd(double *, __m128d);
void _mm_storeh_pi(__m64 *, __m128);
void _mm_storel_epi64(__m128i *, __m128i);
void _mm_storel_pd(double *, __m128d);
void _mm_storel_pi(__m64 *, __m128);
void _mm_storer_pd(double *, __m128d);
void _mm_storer_ps(float *, __m128);
void _mm_storeu_pd(double *, __m128d);
void _mm_storeu_ps(float *, __m128);
void _mm_storeu_si128(__m128i *, __m128i);
__m128i _mm_stream_load_si128(const __m128i *);
void _mm_stream_pd(double *, __m128d);

void _mm_stream_ps(float *, __m128);
void _mm_stream_sd(double *, __m128d);
void _mm_stream_si128(__m128i *, __m128i);
void _mm_stream_si32(int *, int);
void _mm_stream_si64x(__int64 *, __int64);
void _mm_stream_ss(float *, __m128);
__m128i _mm_sub_epi16(__m128i, __m128i);
__m128i _mm_sub_epi32(__m128i, __m128i);
__m128i _mm_sub_epi64(__m128i, __m128i);
__m128i _mm_sub_epi8(__m128i, __m128i);
__m128d _mm_sub_pd(__m128d, __m128d);
__m128 _mm_sub_ps(__m128, __m128);
__m128d _mm_sub_sd(__m128d, __m128d);

__m128 _mm_sub_ss(__m128, __m128);
__m128i _mm_subs_epi16(__m128i, __m128i);
__m128i _mm_subs_epi8(__m128i, __m128i);
__m128i _mm_subs_epu16(__m128i, __m128i);
__m128i _mm_subs_epu8(__m128i, __m128i);
int _mm_testc_si128(__m128i, __m128i);
int _mm_testnzc_si128(__m128i, __m128i);
int _mm_testz_si128(__m128i, __m128i);
int _mm_ucomieq_sd(__m128d, __m128d);
int _mm_ucomieq_ss(__m128, __m128);
int _mm_ucomige_sd(__m128d, __m128d);
int _mm_ucomige_ss(__m128, __m128);
int _mm_ucomigt_sd(__m128d, __m128d);
int _mm_ucomigt_ss(__m128, __m128);
int _mm_ucomile_sd(__m128d, __m128d);
int _mm_ucomile_ss(__m128, __m128);
int _mm_ucomilt_sd(__m128d, __m128d);
int _mm_ucomilt_ss(__m128, __m128);
int _mm_ucomineq_sd(__m128d, __m128d);
int _mm_ucomineq_ss(__m128, __m128);
__m128i _mm_unpackhi_epi16(__m128i, __m128i);
__m128i _mm_unpackhi_epi32(__m128i, __m128i);
__m128i _mm_unpackhi_epi64(__m128i, __m128i);
__m128i _mm_unpackhi_epi8(__m128i, __m128i);
__m128d _mm_unpackhi_pd(__m128d, __m128d);
__m128 _mm_unpackhi_ps(__m128, __m128);
__m128i _mm_unpacklo_epi16(__m128i, __m128i);
__m128i _mm_unpacklo_epi32(__m128i, __m128i);
__m128i _mm_unpacklo_epi64(__m128i, __m128i);
__m128i _mm_unpacklo_epi8(__m128i, __m128i);
__m128d _mm_unpacklo_pd(__m128d, __m128d);
__m128 _mm_unpacklo_ps(__m128, __m128);
__m128d _mm_xor_pd(__m128d, __m128d);
__m128 _mm_xor_ps(__m128, __m128);
__m128i _mm_xor_si128(__m128i, __m128i);
__int64 _mul128(__int64 _Multiplier, __int64 _Multiplicand, __int64 * _HighProduct);
unsigned int __cdecl _rotl( unsigned int _Value, int _Shift);
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotl64( unsigned __int64 _Value, int _Shift);
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift);
unsigned int __cdecl _rotr( unsigned int _Value, int _Shift);
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotr64( unsigned __int64 _Value, int _Shift);
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift);
int __cdecl _setjmp(jmp_buf);
int __cdecl _setjmpex(jmp_buf);
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct);
void _rsm(void);
void _lgdt(void *);
void _sgdt(void *);
void _clac(void);
void _stac(void);
unsigned char __cdecl _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _addcarry_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _subborrow_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *);
unsigned char __cdecl _subborrow_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *);
void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);


}
# 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 2 3
# 1168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 3
#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
#pragma warning(disable: 4127)

#pragma warning(disable: 4251)

template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Ax = allocator<_Elem> >
 class basic_string;


template<class _Mystr>
 class _String_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   typename _Mystr::value_type,
   typename _Mystr::difference_type,
   typename _Mystr::const_pointer,
   typename _Mystr::const_reference,
   _Iterator_base>
 {
public:
 typedef _String_const_iterator<_Mystr> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr::value_type value_type;
 typedef typename _Mystr::difference_type difference_type;
 typedef typename _Mystr::const_pointer pointer;
 typedef typename _Mystr::const_reference reference;

 _String_const_iterator()
  : _Ptr()
  {
  }

 _String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
  : _Ptr(_Parg)
  {
  this->_Adopt(_Pstring);
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  _Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Ptr);
  }

 reference operator*() const
  {

  const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
  const auto _Contptr = _Mycont ? _Mycont->_Myptr() : 0;
  if (_Mycont == 0
   || _Ptr == nullptr_t{}
   || _Unfancy(_Ptr) < _Contptr
   || _Contptr + _Mycont->_Mysize <= _Unfancy(_Ptr))
   {
   _Debug_message(L"string iterator not dereferencable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 76);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 77, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 77, 0); };
   }
# 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 3
                                        ;

  return (*_Ptr);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
  if (_Mycont == 0
   || _Ptr == nullptr_t{}
   || _Mycont->_Myptr() + _Mycont->_Mysize <= _Unfancy(_Ptr))
   {
   _Debug_message(L"string iterator not incrementable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 106);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 107, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 107, 0); };
   }
# 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 3
  ++_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
  if (_Mycont == 0
   || _Ptr == nullptr_t{}
   || _Unfancy(_Ptr) <= _Mycont->_Myptr())
   {
   _Debug_message(L"string iterator not decrementable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 136);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 137, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 137, 0); };
   }
# 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 3
  --_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  if (_Off != 0)
   {
   const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
   const auto _Contptr = _Mycont ? _Mycont->_Myptr() : 0;
   if (_Mycont == 0
    || _Ptr == nullptr_t{}
    || _Unfancy(_Ptr) + _Off < _Contptr
    || _Contptr + _Mycont->_Mysize < _Unfancy(_Ptr) + _Off)
    {
    _Debug_message(L"string iterator + offset out of range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 170);
    { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 171, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 171, 0); };
    }
   }
# 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 3
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  if (this->_Getcont() != _Right._Getcont())
   {
   _Debug_message(L"string iterators incompatible", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 256);
   { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 257, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 257, 0); };
   }
  }
# 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 3
 pointer _Ptr;
 };

template<class _Mystr> inline
 typename _String_const_iterator<_Mystr>::_Unchecked_type
  _Unchecked(_String_const_iterator<_Mystr> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mystr> inline
 _String_const_iterator<_Mystr>
  _Rechecked(_String_const_iterator<_Mystr>& _Iter,
   typename _String_const_iterator<_Mystr>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Mystr> inline
 _String_const_iterator<_Mystr> operator+(
  typename _String_const_iterator<_Mystr>
   ::difference_type _Off,
  _String_const_iterator<_Mystr> _Next)
 {
 return (_Next += _Off);
 }


template<class _Mystr>
 class _String_iterator
  : public _String_const_iterator<_Mystr>
 {
public:
 typedef _String_iterator<_Mystr> _Myiter;
 typedef _String_const_iterator<_Mystr> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr::value_type value_type;
 typedef typename _Mystr::difference_type difference_type;
 typedef typename _Mystr::pointer pointer;
 typedef typename _Mystr::reference reference;

 _String_iterator()
  {
  }

 _String_iterator(pointer _Parg, const _Container_base *_Pstring)
  : _Mybase(_Parg, _Pstring)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Const_cast(this->_Ptr));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Mystr> inline
 typename _String_iterator<_Mystr>::_Unchecked_type
  _Unchecked(_String_iterator<_Mystr> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mystr> inline
 _String_iterator<_Mystr>
  _Rechecked(_String_iterator<_Mystr>& _Iter,
   typename _String_iterator<_Mystr>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Mystr> inline
 _String_iterator<_Mystr> operator+(
  typename _String_iterator<_Mystr>
   ::difference_type _Off,
  _String_iterator<_Mystr> _Next)
 {
 return (_Next += _Off);
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference>
 struct _String_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 };

template<class _Ty,
 class _Alloc0>
 struct _String_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _String_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Simple_types<typename _Alty::value_type>,
  _String_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference> >::type
  _Val_types;
 };


template<class _Val_types>
 class _String_val
  : public _Container_base
 {
public:
 typedef _String_val<_Val_types> _Myt;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _String_iterator<_Myt> iterator;
 typedef _String_const_iterator<_Myt> const_iterator;

 _String_val()
  : _Bx(),
  _Mysize(0),
  _Myres(0)
  {
  }

 enum
  {
  _BUF_SIZE = 16 / sizeof (value_type) < 1 ? 1
   : 16 / sizeof (value_type)};
 enum
  {
  _ALLOC_MASK = sizeof (value_type) <= 1 ? 15
   : sizeof (value_type) <= 2 ? 7
   : sizeof (value_type) <= 4 ? 3
   : sizeof (value_type) <= 8 ? 1 : 0};

 value_type *_Myptr()
  {
  return (this->_BUF_SIZE <= _Myres
   ? _Unfancy(_Bx._Ptr)
   : _Bx._Buf);
  }

 const value_type *_Myptr() const
  {
  return (this->_BUF_SIZE <= _Myres
   ? _Unfancy(_Bx._Ptr)
   : _Bx._Buf);
  }

 union _Bxty
  {
  _Bxty()
   {
   }

  ~_Bxty() noexcept
   {
   }

  value_type _Buf[_BUF_SIZE];
  pointer _Ptr;
  char _Alias[_BUF_SIZE];
  } _Bx;

 size_type _Mysize;
 size_type _Myres;
 };


template<class _Alloc_types>
 class _String_alloc
 {
public:
 typedef _String_alloc<_Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alty _Alty;
 typedef typename _Alloc_types::_Val_types _Val_types;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _String_iterator<_String_val<_Val_types> > iterator;
 typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;

 enum
  {
  _BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
  };

 enum
  {
  _ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
  };

 value_type *_Myptr()
  {
  return (_Get_data()._Myptr());
  }

 const value_type *_Myptr() const
  {
  return (_Get_data()._Myptr());
  }
# 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 3
 _String_alloc()
  : _Mypair(_Zero_then_variadic_args_t())
  {
  _Alloc_proxy();
  }

 template<class _Any_alloc,
  class = enable_if_t<!is_same<decay_t<_Any_alloc>, _Myt>::value> >
  _String_alloc(_Any_alloc&& _Al)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Any_alloc>(_Al))
  {
  _Alloc_proxy();
  }

 ~_String_alloc() noexcept
  {
  _Free_proxy();
  }

 void _Copy_alloc(const _Alty& _Al)
  {
  _Free_proxy();
  _Pocca(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Move_alloc(_Alty& _Al)
  {
  _Free_proxy();
  _Pocma(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Myproxy() = _Unfancy(_Alproxy.allocate(1));
  _Alproxy.construct(_Myproxy(), _Container_proxy());
  _Myproxy()->_Mycont = &_Get_data();
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Orphan_all();
  _Alproxy.destroy(_Myproxy());
  _Alproxy.deallocate(_Alproxy.address(*_Myproxy()), 1);
  _Myproxy() = 0;
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Get_data()._Getpfirst());
  }

 _Container_proxy * & _Myproxy() noexcept
  {
  return (_Get_data()._Myproxy);
  }

 _Container_proxy * const & _Myproxy() const noexcept
  {
  return (_Get_data()._Myproxy);
  }


 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_Myt& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Alty& _Getal() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Alty& _Getal() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _String_val<_Val_types>& _Get_data() noexcept
  {
  return (_Mypair._Get_second());
  }

 const _String_val<_Val_types>& _Get_data() const noexcept
  {
  return (_Mypair._Get_second());
  }

 typedef typename _String_val<_Val_types>::_Bxty _Bxty;

 _Bxty& _Bx() noexcept
  {
  return (_Get_data()._Bx);
  }

 const _Bxty& _Bx() const noexcept
  {
  return (_Get_data()._Bx);
  }

 size_type& _Mysize() noexcept
  {
  return (_Get_data()._Mysize);
  }

 const size_type& _Mysize() const noexcept
  {
  return (_Get_data()._Mysize);
  }

 size_type& _Myres() noexcept
  {
  return (_Get_data()._Myres);
  }

 const size_type& _Myres() const noexcept
  {
  return (_Get_data()._Myres);
  }

private:
 _Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
 };


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_string
  : public _String_alloc<_String_base_types<_Elem, _Alloc> >
 {
public:
 typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
 typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;

 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;

 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 basic_string(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  _Tidy();
  assign(_Right, 0, npos);
  }

 basic_string(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Right, 0, npos);
  }

 basic_string() noexcept(is_nothrow_default_constructible<_Alloc>::value)
  : _Mybase()
  {
  _Tidy();
  }

 explicit basic_string(const _Alloc& _Al) noexcept
  : _Mybase(_Al)
  {
  _Tidy();
  }

 basic_string(const _Myt& _Right, size_type _Roff,
  size_type _Count = npos)
  : _Mybase(_Right._Getal())
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
  const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(const _Elem *_Ptr, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(size_type _Count, _Elem _Ch)
  : _Mybase()
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 868);
  _Tidy();
  _Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat_t<_Iter>());
  }

 template<class _Iter>
  void _Construct(_Iter _First,
   _Iter _Last, input_iterator_tag)
  {
  try {
  for (; _First != _Last; ++_First)
   append((size_type)1, (_Elem)*_First);
  } catch (...) {
  _Tidy(true);
  throw;
  }
  }

 template<class _Iter>
  void _Construct(_Iter _First,
   _Iter _Last, forward_iterator_tag)
  {
  size_type _Count = ::std:: distance(_First, _Last);
  reserve(_Count);
  _Construct(_First, _Last, input_iterator_tag());
  }

 void _Construct(_Elem *_First,
  _Elem *_Last, random_access_iterator_tag)
  {
  if (_First != _Last)
   assign(_First, _Last - _First);
  }

 void _Construct(const _Elem *_First,
  const _Elem *_Last, random_access_iterator_tag)
  {
  if (_First != _Last)
   assign(_First, _Last - _First);
  }

 basic_string(_Myt&& _Right) noexcept
  : _Mybase(::std:: move(_Right._Getal()))
  {
  _Tidy();
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 basic_string(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  if (this->_Getal() != _Right._Getal())
   assign(_Right.begin(), _Right.end());
  else
   _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(_Alty::propagate_on_container_move_assignment::value || _Alty::is_always_equal::value)

  {
  if (this != &_Right)
   {
   _Tidy(true);

   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Move_alloc(_Right._Getal());

   if (this->_Getal() != _Right._Getal())
    assign(_Right.begin(), _Right.end());
   else
    _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 _Myt& assign(_Myt&& _Right) noexcept
  {
  if (this == &_Right)
   ;
  else if (get_allocator() != _Right.get_allocator()
   && this->_BUF_SIZE <= _Right._Myres())
   *this = _Right;
  else
   {
   _Tidy(true);
   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (_Right._Myres() < this->_BUF_SIZE)
   _Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
    _Right._Mysize() + 1);
  else
   {
   this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Right._Bx()._Ptr);
   _Right._Bx()._Ptr = pointer();
   }
  this->_Mysize() = _Right._Mysize();
  this->_Myres() = _Right._Myres();
  _Right._Tidy();
  }

 basic_string(::std:: initializer_list<_Elem> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& operator+=(::std:: initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& assign(::std:: initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& append(::std:: initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.end()));
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<_Elem> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  ::std:: initializer_list<_Elem> _Ilist)
  {
  return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
  }

 ~basic_string() noexcept
  {
  _Tidy(true);
  }

          static const size_type npos;

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    _Tidy(true);
    this->_Copy_alloc(_Right._Getal());
    }

   assign(_Right);
   }
  return (*this);
  }

 _Myt& operator=(const _Elem *_Ptr)
  {
  return (assign(_Ptr));
  }

 _Myt& operator=(_Elem _Ch)
  {
  return (assign(1, _Ch));
  }

 _Myt& operator+=(const _Myt& _Right)
  {
  return (append(_Right));
  }

 _Myt& operator+=(const _Elem *_Ptr)
  {
  return (append(_Ptr));
  }

 _Myt& operator+=(_Elem _Ch)
  {
  return (append((size_type)1, _Ch));
  }

 _Myt& append(const _Myt& _Right)
  {
  return (append(_Right, 0, npos));
  }

 _Myt& append(const _Myt& _Right,
  size_type _Roff, size_type _Count = npos)
  {
  _Right._Check_offset(_Roff);
  _Count = _Right._Clamp_suffix_size(_Roff, _Count);
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::copy(this->_Myptr() + this->_Mysize(),
    _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr, size_type _Count)
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1088);
  if (_Inside(_Ptr))
   return (append(*this,
    _Ptr - this->_Myptr(), _Count));
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1106);
  return (append(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& append(size_type _Count, _Elem _Ch)
  {
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Chassign(this->_Mysize(), _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  append(_Iter _First, _Iter _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& append(const_pointer _First, const_pointer _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& append(const_iterator _First, const_iterator _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& assign(const _Myt& _Right)
  {
  return (assign(_Right, 0, npos));
  }

 _Myt& assign(const _Myt& _Right,
  size_type _Roff, size_type _Count = npos)
  {
  _Right._Check_offset(_Roff);
  _Count = _Right._Clamp_suffix_size(_Roff, _Count);

  if (this == &_Right)
   erase((size_type)(_Roff + _Count)), erase(0, _Roff);
  else if (_Grow(_Count))
   {
   _Traits::copy(this->_Myptr(),
    _Right._Myptr() + _Roff, _Count);
   _Eos(_Count);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr, size_type _Count)
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1166);
  if (_Inside(_Ptr))
   return (assign(*this,
    _Ptr - this->_Myptr(), _Count));

  if (_Grow(_Count))
   {
   _Traits::copy(this->_Myptr(), _Ptr, _Count);
   _Eos(_Count);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1181);
  return (assign(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& assign(size_type _Count, _Elem _Ch)
  {
  if (_Count == npos)
   _Xlen();

  if (_Grow(_Count))
   {
   _Chassign(0, _Count, _Ch);
   _Eos(_Count);
   }
  return (*this);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  assign(_Iter _First, _Iter _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& assign(const_pointer _First, const_pointer _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& assign(const_iterator _First, const_iterator _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& insert(size_type _Off, const _Myt& _Right)
  {
  return (insert(_Off, _Right, 0, npos));
  }

 _Myt& insert(size_type _Off,
  const _Myt& _Right, size_type _Roff, size_type _Count = npos)
  {
  _Check_offset(_Off);
  _Right._Check_offset(_Roff);
  _Count = _Right._Clamp_suffix_size(_Roff, _Count);
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize() - _Off);
   if (this == &_Right)
    _Traits::move(this->_Myptr() + _Off,
     this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
      _Count);
   else
    _Traits::copy(this->_Myptr() + _Off,
     _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off,
  const _Elem *_Ptr, size_type _Count)
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1251);
  if (_Inside(_Ptr))
   return (insert(_Off, *this,
    _Ptr - this->_Myptr(), _Count));
  _Check_offset(_Off);
  if (npos - this->_Mysize() <= _Count)
   _Xlen();
  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize() - _Off);
   _Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off, const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1272);
  return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& insert(size_type _Off,
  size_type _Count, _Elem _Ch)
  {
  _Check_offset(_Off);
  if (npos - this->_Mysize() <= _Count)
   _Xlen();
  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize() - _Off);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 iterator insert(const_iterator _Where)
  {
  return (insert(_Where, _Elem()));
  }

 iterator insert(const_iterator _Where, _Elem _Ch)
  {
  size_type _Off = _Where - begin();
  insert(_Off, 1, _Ch);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
  {
  size_type _Off = _Where - begin();
  insert(_Off, _Count, _Ch);
  return (begin() + _Off);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = _Where - begin();
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where,
  const_pointer _First, const_pointer _Last)
  {
  size_type _Off = _Where - begin();
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where,
  const_iterator _First, const_iterator _Last)
  {
  size_type _Off = _Where - begin();
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 _Myt& erase(size_type _Off = 0)
  {
  _Check_offset(_Off);
  _Eos(_Off);
  return (*this);
  }

 _Myt& erase(size_type _Off, size_type _Count)
  {
  _Check_offset(_Off);
  if (this->_Mysize() - _Off <= _Count)
   _Eos(_Off);
  else if (0 < _Count)
   {
   value_type *_Ptr = this->_Myptr() + _Off;
   size_type _Newsize = this->_Mysize() - _Count;
   _Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
   _Eos(_Newsize);
   }
  return (*this);
  }

 iterator erase(const_iterator _Where)
  {
  size_type _Count = _Where - begin();
  erase(_Count, 1);
  return (begin() + _Count);
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1370);
  size_type _Count = _First - begin();
  erase(_Count, _Last - _First);
  return (begin() + _Count);
  }

 void clear() noexcept
  {
  _Eos(0);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
  {
  return (replace(_Off, _N0, _Right, 0, npos));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Myt& _Right, size_type _Roff,
   size_type _Count = npos)
  {
  _Check_offset(_Off);
  _Right._Check_offset(_Roff);
  _N0 = _Clamp_suffix_size(_Off, _N0);
  _Count = _Right._Clamp_suffix_size(_Roff, _Count);
  if (npos - _Count <= this->_Mysize() - _N0)
   _Xlen();

  const size_type _Nm = this->_Mysize() - _N0 - _Off;
  const size_type _Newsize = this->_Mysize() + _Count - _N0;
  if (this->_Mysize() < _Newsize)
   _Grow(_Newsize);

  if (_Count == _N0)
   {
   _Traits::move(this->_Myptr() + _Off,
    _Right._Myptr() + _Roff, _Count);
   }
  else if (this != &_Right)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::copy(this->_Myptr() + _Off,
    _Right._Myptr() + _Roff, _Count);
   }
  else if (_Count < _N0)
   {
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _Count);
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   }
  else if (_Roff <= _Off)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _Count);
   }
  else if (_Off + _N0 <= _Roff)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + (_Roff + _Count - _N0),
    _Count);
   }
  else
   {
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _N0);
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off + _N0,
    this->_Myptr() + _Roff + _Count,
    _Count - _N0);
   }

  _Eos(_Newsize);
  return (*this);
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count)
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1454);
  if (_Inside(_Ptr))
   return (replace(_Off, _N0, *this,
    _Ptr - this->_Myptr(),
    _Count));
  _Check_offset(_Off);
  _N0 = _Clamp_suffix_size(_Off, _N0);
  if (npos - _Count <= this->_Mysize() - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize() - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0,
    _Nm);
  const size_type _Num = this->_Mysize() + _Count - _N0;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num))
   {
   if (_N0 < _Count)
    _Traits::move(this->_Myptr() + _Off + _Count,
     this->_Myptr() + _Off + _N0, _Nm);
   _Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1484);
  return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, size_type _Count, _Elem _Ch)
  {
  _Check_offset(_Off);
  _N0 = _Clamp_suffix_size(_Off, _N0);
  if (npos - _Count <= this->_Mysize() - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize() - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0,
    _Nm);
  const size_type _Num = this->_Mysize() + _Count - _N0;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num))
   {
   if (_N0 < _Count)
    _Traits::move(this->_Myptr() + _Off + _Count,
     this->_Myptr() + _Off + _N0, _Nm);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Myt& _Right)
  {
  return (replace(_First - begin(), _Last - _First, _Right));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr, size_type _Count)
  {
  return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr)
  {
  return (replace(_First - begin(), _Last - _First, _Ptr));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  size_type _Count, _Elem _Ch)
  {
  return (replace(_First - begin(), _Last - _First, _Count, _Ch));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  replace(const_iterator _First, const_iterator _Last,
   _Iter _First2, _Iter _Last2)
  {
  _Myt _Right(_First2, _Last2);
  replace(_First, _Last, _Right);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_pointer _First2, const_pointer _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  pointer _First2, pointer _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_iterator _First2, const_iterator _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  iterator _First2, iterator _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 iterator begin() noexcept
  {
  auto _Mydata = &this->_Get_data();
  return (iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));
  }

 const_iterator begin() const noexcept
  {
  auto _Mydata = &this->_Get_data();
  return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));
  }

 iterator end() noexcept
  {
  auto _Mydata = &this->_Get_data();
  return (iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));
  }

 const_iterator end() const noexcept
  {
  auto _Mydata = &this->_Get_data();
  return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void shrink_to_fit()
  {
  if ((size() | this->_ALLOC_MASK) < capacity())
   {
   _Myt _Tmp(*this);
   swap(_Tmp);
   }
  }

 reference at(size_type _Off)
  {
  _Check_offset_exclusive(_Off);
  return (this->_Myptr()[_Off]);
  }

 const_reference at(size_type _Off) const
  {
  _Check_offset_exclusive(_Off);
  return (this->_Myptr()[_Off]);
  }

 reference operator[](size_type _Off)
  {

  if (this->_Mysize() < _Off)
   _Debug_message(L"string subscript out of range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1682);





  return (this->_Myptr()[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {

  if (this->_Mysize() < _Off)
   _Debug_message(L"string subscript out of range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1695);





  return (this->_Myptr()[_Off]);
  }

 void push_back(_Elem _Ch)
  {
  auto& _Dx = this->_Get_data();
  auto& _Sz = _Dx._Mysize;
  if (_Sz == _Dx._Myres)
   _Grow(_Sz + 1);
  auto _Ptr = _Dx._Myptr();
  _Traits::assign(_Ptr[_Sz], _Ch);
  ++_Sz;
  _Traits::assign(_Ptr[_Sz], _Elem());
  }

 void pop_back()
  {
  erase(this->_Mysize() - 1);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 const _Elem *c_str() const noexcept
  {
  return (this->_Myptr());
  }

 const _Elem *data() const noexcept
  {
  return (this->_Myptr());
  }
# 1758 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 3
 size_type length() const noexcept
  {
  return (this->_Mysize());
  }

 size_type size() const noexcept
  {
  return (this->_Mysize());
  }

 size_type max_size() const noexcept
  {
  const size_type _Num = this->_Getal().max_size();
  return (_Num <= 1 ? 1 : _Num - 1);
  }

 void resize(size_type _Newsize)
  {
  resize(_Newsize, _Elem());
  }

 void resize(size_type _Newsize, _Elem _Ch)
  {
  if (_Newsize <= this->_Mysize())
   _Eos(_Newsize);
  else
   append(_Newsize - this->_Mysize(), _Ch);
  }

 size_type capacity() const noexcept
  {
  return (this->_Myres());
  }

 void reserve(size_type _Newcap = 0)
  {
  if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
   {
   size_type _Size = this->_Mysize();
   if (_Grow(_Newcap, true))
    _Eos(_Size);
   }
  }

 bool empty() const noexcept
  {
  return (this->_Mysize() == 0);
  }

 __declspec(deprecated("Call to 'std::" "basic_string::copy" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'"))
 size_type copy(_Elem *_Ptr,
  size_type _Count, size_type _Off = 0) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1811);
  _Check_offset(_Off);
  _Count = _Clamp_suffix_size(_Off, _Count);
  _Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
  return (_Count);
  }

 size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
  size_type _Count, size_type _Off = 0) const
  {
  _Debug_pointer_if(_Count != 0, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1821);
  _Check_offset(_Off);
  _Count = _Clamp_suffix_size(_Off, _Count);
  _Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
  return (_Count);
  }

 void _Swap_bx(_Myt& _Right)
  {
  if (this->_BUF_SIZE <= this->_Myres())
   if (this->_BUF_SIZE <= _Right._Myres())
    _Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
   else
    {
    pointer _Ptr = this->_Bx()._Ptr;
    this->_Getal().destroy(::std:: addressof(this->_Bx()._Ptr));
    _Traits::copy(this->_Bx()._Buf,
     _Right._Bx()._Buf, _Right._Mysize() + 1);
    this->_Getal().construct(::std:: addressof(_Right._Bx()._Ptr), _Ptr);
    }
  else
   if (_Right._Myres() < this->_BUF_SIZE)
    ::std:: swap(this->_Bx()._Buf, _Right._Bx()._Buf);
   else
    {
    pointer _Ptr = _Right._Bx()._Ptr;
    this->_Getal().destroy(::std:: addressof(_Right._Bx()._Ptr));
    _Traits::copy(_Right._Bx()._Buf,
     this->_Bx()._Buf, this->_Mysize() + 1);
    this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Ptr);
    }
  }

 void swap(_Myt& _Right)
  noexcept(_Alty::propagate_on_container_swap::value || _Alty::is_always_equal::value)

  {
  if (this != &_Right)
   {
   _Pocs(this->_Getal(), _Right._Getal());
   this->_Swap_all(_Right);
   _Swap_bx(_Right);
   ::std:: swap(this->_Mysize(), _Right._Mysize());
   ::std:: swap(this->_Myres(), _Right._Myres());
   }
  }

 size_type find(const _Myt& _Right, size_type _Off = 0) const noexcept
  {
  return (find(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1876);
  if (_Count == 0 && _Off <= this->_Mysize())
   return (_Off);

  size_type _Nm;
  if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
   {
   const _Elem *_Uptr, *_Vptr;
   for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
    (_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
    _Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
    if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - this->_Myptr());
   }

  return (npos);
  }

 size_type find(const _Elem *_Ptr, size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1896);
  return (find(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find(_Elem _Ch, size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type rfind(const _Myt& _Right, size_type _Off = npos) const noexcept
  {
  return (rfind(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type rfind(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1913);
  if (_Count == 0)
   return (_Off < this->_Mysize() ? _Off
    : this->_Mysize());
  if (_Count <= this->_Mysize())
   {
   const _Elem *_Uptr = this->_Myptr() +
    (_Off < this->_Mysize() - _Count ? _Off
     : this->_Mysize() - _Count);
   for (; ; --_Uptr)
    if (_Traits::eq(*_Uptr, *_Ptr)
     && _Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }

  return (npos);
  }

 size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1935);
  return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type rfind(_Elem _Ch, size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_of(const _Myt& _Right,
  size_type _Off = 0) const noexcept
  {
  return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_first_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1953);
  if (0 < _Count && _Off < this->_Mysize())
   {
   const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
   for (const _Elem *_Uptr = this->_Myptr() + _Off;
    _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - this->_Myptr());
   }

  return (npos);
  }

 size_type find_first_of(const _Elem *_Ptr,
  size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1969);
  return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_of(_Elem _Ch,
  size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_of(const _Myt& _Right,
  size_type _Off = npos) const noexcept
  {
  return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1988);
  if (0 < _Count && 0 < this->_Mysize())
   {
   const _Elem *_Uptr = this->_Myptr()
    + (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }

  return (npos);
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2006);
  return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_of(_Elem _Ch,
  size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_not_of(const _Myt& _Right,
  size_type _Off = 0) const noexcept
  {
  return (find_first_not_of(_Right._Myptr(), _Off,
   _Right.size()));
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2026);
  if (_Off < this->_Mysize())
   {
   const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
   for (const _Elem *_Uptr = this->_Myptr() + _Off;
    _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - this->_Myptr());
   }
  return (npos);
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2041);
  return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_not_of(_Elem _Ch,
  size_type _Off = 0) const
  {
  return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_not_of(const _Myt& _Right,
  size_type _Off = npos) const noexcept
  {
  return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2060);
  if (0 < this->_Mysize())
   {
   const _Elem *_Uptr = this->_Myptr()
    + (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }
  return (npos);
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2077);
  return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_not_of(_Elem _Ch,
  size_type _Off = npos) const
  {
  return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 _Myt substr(size_type _Off = 0, size_type _Count = npos) const
  {
  return (_Myt(*this, _Off, _Count, get_allocator()));
  }

 static int _Traits_compare(const _Elem * const _Left, const size_type _Left_size,
  const _Elem * const _Right, const size_type _Right_size)
  {
  const size_type _Min_size = _Left_size < _Right_size ? _Left_size : _Right_size;
  const int _Ans = _Traits::compare(_Left, _Right, _Min_size);

  if (_Ans != 0)
   return (_Ans);

  if (_Left_size < _Right_size)
   return (-1);

  if (_Left_size > _Right_size)
   return (1);

  return (0);
  }

 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const
  {
  const size_type _Max_effective_size = this->_Mysize() - _Off;
  if (_Size <= _Max_effective_size)
   return (_Size);
  else
   return (_Max_effective_size);
  }

 int compare(const _Myt& _Right) const noexcept
  {
  return (_Traits_compare(this->_Myptr(), this->_Mysize(),
   _Right._Myptr(), _Right._Mysize()));
  }

 int compare(size_type _Off,
  size_type _N0, const _Myt& _Right) const
  {
  _Check_offset(_Off);
  return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
   _Right._Myptr(), _Right._Mysize()));
  }

 int compare(size_type _Off,
  size_type _N0, const _Myt& _Right,
  size_type _Roff, size_type _Count = npos) const
  {
  _Check_offset(_Off);
  _Right._Check_offset(_Roff);
  return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
   _Right._Myptr() + _Roff, _Right._Clamp_suffix_size(_Roff, _Count)));
  }

 int compare(const _Elem *_Ptr) const
  {
  _Debug_pointer(_Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2145);
  return (_Traits_compare(this->_Myptr(), this->_Mysize(),
   _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
  {
  _Debug_pointer(_Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2152);
  _Check_offset(_Off);
  return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
   _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2161);
  _Check_offset(_Off);
  return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
   _Ptr, _Count));
  }

 allocator_type get_allocator() const noexcept
  {
  allocator_type _Ret(this->_Getal());
  return (_Ret);
  }

 void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
  {
  if (_Count == 1)
   _Traits::assign(*(this->_Myptr() + _Off), _Ch);
  else
   _Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
  }

 void _Copy(size_type _Newsize, size_type _Oldlen)
  {
  size_type _Newres = _Newsize | this->_ALLOC_MASK;
  if (max_size() < _Newres)
   _Newres = _Newsize;
  else if (this->_Myres() / 2 <= _Newres / 3)
   ;
  else if (this->_Myres() <= max_size() - this->_Myres() / 2)
   _Newres = this->_Myres()
    + this->_Myres() / 2;
  else
   _Newres = max_size();

  pointer _Ptr;
  try {
   _Ptr = this->_Getal().allocate(_Newres + 1);
  } catch (...) {
   _Newres = _Newsize;
   try {
    _Ptr = this->_Getal().allocate(_Newres + 1);
   } catch (...) {
   _Tidy(true);
   throw;
   }
  }

  if (0 < _Oldlen)
   _Traits::copy(_Unfancy(_Ptr), this->_Myptr(),
    _Oldlen);
  _Tidy(true);
  this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Ptr);
  this->_Myres() = _Newres;
  _Eos(_Oldlen);
  }

 void _Eos(size_type _Newsize)
  {
  auto& _Dx = this->_Get_data();
  _Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());
  }

 bool _Grow(size_type _Newsize,
  bool _Trim = false)
  {
  if (max_size() < _Newsize)
   _Xlen();
  if (this->_Myres() < _Newsize)
   _Copy(_Newsize, this->_Mysize());
  else if (_Trim && _Newsize < this->_BUF_SIZE)
   _Tidy(true,
    _Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
  else if (_Newsize == 0)
   _Eos(0);
  return (0 < _Newsize);
  }

 bool _Inside(const _Elem *_Ptr)
  {
  if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
   || this->_Myptr() + this->_Mysize() <= _Ptr)
   return (false);
  else
   return (true);
  }

 void _Tidy(bool _Built = false,
  size_type _Newsize = 0)
  {
  if (!_Built)
   ;
  else if (this->_BUF_SIZE <= this->_Myres())
   {
   pointer _Ptr = this->_Bx()._Ptr;
   this->_Getal().destroy(::std:: addressof(this->_Bx()._Ptr));
   if (0 < _Newsize)
    _Traits::copy(this->_Bx()._Buf,
     _Unfancy(_Ptr), _Newsize);
   this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
   }
  this->_Myres() = this->_BUF_SIZE - 1;
  _Eos(_Newsize);
  }

 [[noreturn]] void _Xlen() const
  {
  _Xlength_error("string too long");
  }

 void _Check_offset(const size_type _Off) const
  {
  if (this->_Mysize() < _Off)
   _Xran();
  }

 void _Check_offset_exclusive(const size_type _Off) const
  {
  if (this->_Mysize() <= _Off)
   _Xran();
  }

 [[noreturn]] void _Xran() const
  {
  _Xout_of_range("invalid string position");
  }
 };


template<class _Elem,
 class _Traits,
 class _Alloc>
          const typename basic_string<_Elem, _Traits, _Alloc>::size_type
  basic_string<_Elem, _Traits, _Alloc>::npos =
   (typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);



template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>& _Right)
   noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem *_Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Traits::length(_Left) + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(1 + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Traits::length(_Right));
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + 1);
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (::std:: move(_Left.append(_Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 if (_Right.size() <= _Left.capacity() - _Left.size()
  || _Right.capacity() - _Right.size() < _Left.size())
  return (::std:: move(_Left.append(_Right)));
 else
  return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem *_Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 typedef typename basic_string<_Elem, _Traits, _Alloc>::size_type
  size_type;
 return (::std:: move(_Right.insert((size_type)0, (size_type)1, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const _Elem *_Right)
 {
 return (::std:: move(_Left.append(_Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const _Elem _Right)
 {
 return (::std:: move(_Left.append(1, _Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (_Left.compare(_Right) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Left.compare(_Right) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const _Elem *_Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) > 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Left < _Right));
 }

typedef basic_string<char, char_traits<char>, allocator<char> >
 string;
typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >
 wstring;


template<class _Elem,
 class _Traits,
 class _Alloc>
 struct hash<basic_string<_Elem, _Traits, _Alloc> >
 {
 typedef basic_string<_Elem, _Traits, _Alloc> argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (_Hash_seq((const unsigned char *)_Keyval.c_str(),
   _Keyval.size() * sizeof (_Elem)));
  }
 };

typedef basic_string<char16_t, char_traits<char16_t>, allocator<char16_t> >
 u16string;
typedef basic_string<char32_t, char_traits<char32_t>, allocator<char32_t> >
 u32string;
}


#pragma warning(pop)
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {

class logic_error
 : public ::std:: exception
 {
public:
 typedef ::std:: exception _Mybase;

 explicit logic_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit logic_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class domain_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit domain_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit domain_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class invalid_argument
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit invalid_argument(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit invalid_argument(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class length_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit length_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit length_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class out_of_range
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit out_of_range(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit out_of_range(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class runtime_error
 : public ::std:: exception
 {
public:
 typedef ::std:: exception _Mybase;

 explicit runtime_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit runtime_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class overflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit overflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit overflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class underflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit underflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit underflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class range_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit range_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit range_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo" 1 3
# 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo" 3
#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4275)


# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h" 2 3



#pragma pack(push, 8)







 struct __type_info_node;





    extern __type_info_node __type_info_root_node;




#pragma pack(push, 8)
# 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h" 3
 extern "C" {


#pragma warning(push)
#pragma warning(disable: 4510 4512 4610)
struct __std_type_info_data
{
    char const* _UndecoratedName;
    char const _DecoratedName[1];
};
#pragma warning(pop)

__declspec(dllimport) int __cdecl __std_type_info_compare(
         __std_type_info_data const* _Lhs,
         __std_type_info_data const* _Rhs
    );

__declspec(dllimport) size_t __cdecl __std_type_info_hash(
         __std_type_info_data const* _Data
    );

__declspec(dllimport) char const* __cdecl __std_type_info_name(
            __std_type_info_data* _Data,
            __type_info_node* _RootNode
    );

}
# 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h" 3
#pragma pack(pop)



class type_info
{
public:

    type_info(type_info const&) = delete;
    type_info& operator=(type_info const&) = delete;

    size_t hash_code() const throw()
    {
        return __std_type_info_hash(&_Data);
    }

    bool operator==(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) == 0;
    }

    bool operator!=(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) != 0;
    }

    bool before(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) < 0;
    }

    char const* name() const throw()
    {



        return __std_type_info_name(&_Data, &__type_info_root_node);

    }

    char const* raw_name() const throw()
    {
        return _Data._DecoratedName;
    }

    virtual ~type_info() throw();

private:

    mutable __std_type_info_data _Data;
};

namespace std {
 using ::type_info;
}



namespace std {

class bad_cast
    : public exception
{
public:

    bad_cast() throw()
        : exception("bad cast", 1)
    {
    }

    static bad_cast __construct_from_string_literal(char const* const _Message) throw()
    {
        return bad_cast(_Message, 1);
    }

private:

    bad_cast(char const* const _Message, int) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_typeid
    : public exception
{
public:

    bad_typeid() throw()
        : exception("bad typeid", 1)
    {
    }

    static bad_typeid __construct_from_string_literal(char const* const _Message) throw()
    {
        return bad_typeid(_Message, 1);
    }

private:

    friend class __non_rtti_object;

    bad_typeid(char const* const _Message, int) throw()
        : exception(_Message, 1)
    {
    }
};

class __non_rtti_object
    : public bad_typeid
{
public:

    static __non_rtti_object __construct_from_string_literal(char const* const _Message) throw()
    {
        return __non_rtti_object(_Message, 1);
    }

private:

    __non_rtti_object(char const* const _Message, int) throw()
        : bad_typeid(_Message, 1)
    {
    }
};

}



#pragma pack(pop)
# 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo" 2 3
# 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo" 3
#pragma pack(pop)
#pragma warning(pop)
# 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h" 1 3






# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h" 3
 extern "C" {
# 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h" 3
struct lconv
{
    char* decimal_point;
    char* thousands_sep;
    char* grouping;
    char* int_curr_symbol;
    char* currency_symbol;
    char* mon_decimal_point;
    char* mon_thousands_sep;
    char* mon_grouping;
    char* positive_sign;
    char* negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
    wchar_t* _W_decimal_point;
    wchar_t* _W_thousands_sep;
    wchar_t* _W_int_curr_symbol;
    wchar_t* _W_currency_symbol;
    wchar_t* _W_mon_decimal_point;
    wchar_t* _W_mon_thousands_sep;
    wchar_t* _W_positive_sign;
    wchar_t* _W_negative_sign;
};
# 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h" 3
__declspec(dllimport) void __cdecl _lock_locales(void);
__declspec(dllimport) void __cdecl _unlock_locales(void);


__declspec(dllimport) int __cdecl _configthreadlocale(
         int _Flag
    );


__declspec(dllimport) char* __cdecl setlocale(
               int _Category,
               char const* _Locale
    );


__declspec(dllimport) struct lconv* __cdecl localeconv(void);


__declspec(dllimport) _locale_t __cdecl _get_current_locale(void);


__declspec(dllimport) _locale_t __cdecl _create_locale(
           int _Category,
           char const* _Locale
    );

__declspec(dllimport) void __cdecl _free_locale(
             _locale_t _Locale
    );



__declspec(dllimport) wchar_t* __cdecl _wsetlocale(
               int _Category,
               wchar_t const* _Locale
    );


__declspec(dllimport) _locale_t __cdecl _wcreate_locale(
           int _Category,
           wchar_t const* _Locale
    );



__declspec(dllimport) wchar_t** __cdecl ___lc_locale_name_func(void);
__declspec(dllimport) unsigned int __cdecl ___lc_codepage_func (void);
__declspec(dllimport) unsigned int __cdecl ___lc_collate_cp_func (void);



}
# 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h" 3
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)






extern "C" {
# 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h" 3
typedef struct _Collvec
 {
 unsigned int _Page;
 wchar_t *_LocaleName;
 } _Collvec;

typedef struct _Ctypevec
 {
 unsigned int _Page;
 const short *_Table;
 int _Delfl;
 wchar_t *_LocaleName;
 } _Ctypevec;

typedef struct _Cvtvec
 {
 unsigned int _Page;
 unsigned int _Mbcurmax;
 int _Isclocale;
 unsigned char _Isleadbyte[32];
 } _Cvtvec;


__declspec(dllimport) _Collvec __cdecl _Getcoll(void);
__declspec(dllimport) _Ctypevec __cdecl _Getctype(void);
__declspec(dllimport) _Cvtvec __cdecl _Getcvt(void);
__declspec(dllimport) int __cdecl _Getdateorder(void);
# 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h" 3
__declspec(dllimport) int __cdecl _Mbrtowc( wchar_t *, const char *, size_t,
 mbstate_t *, const _Cvtvec *);


__declspec(dllimport) float __cdecl _Stof(const char *,
                                  char **, long);
__declspec(dllimport) double __cdecl _Stod(const char *,
                                  char **, long);
__declspec(dllimport) long double __cdecl _Stold(const char *,
                                  char **, long);

__declspec(dllimport) int __cdecl _Strcoll(const char *, const char *,
 const char *, const char *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Strxfrm(
                                                             char *_String1,
        char *_End1, const char *, const char *, const _Collvec *);
__declspec(dllimport) int __cdecl _Tolower(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Toupper(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Wcrtomb( char *, wchar_t, mbstate_t *,
 const _Cvtvec *);
__declspec(dllimport) int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
 const wchar_t *, const wchar_t *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Wcsxfrm(
                                                             wchar_t *_String1,
        wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

__declspec(dllimport) short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
__declspec(dllimport) const wchar_t *__cdecl _Getwctypes(const wchar_t *,
 const wchar_t *, short *, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);



}




extern "C" {


__declspec(dllimport) char *__cdecl _Getdays(void);



__declspec(dllimport) char *__cdecl _Getmonths(void);

__declspec(dllimport) void *__cdecl _Gettnames(void);


__declspec(dllimport) size_t __cdecl _Strftime( char *,
      size_t _Maxsize, const char *, const struct tm *,
          void *);



__declspec(dllimport) wchar_t *__cdecl _W_Getdays(void);



__declspec(dllimport) wchar_t *__cdecl _W_Getmonths(void);

__declspec(dllimport) void *__cdecl _W_Gettnames(void);


__declspec(dllimport) size_t __cdecl _Wcsftime( wchar_t *,
      size_t _Maxsize, const wchar_t *, const struct tm *,
          void *);
}
# 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h" 3
__declspec(dllimport) _locale_t __cdecl _GetLocaleForCP(unsigned int);



#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412)

namespace std {

class __declspec(dllimport) _Timevec
 {
public:
                    _Timevec(void *_Ptr = 0)
  : _Timeptr(_Ptr)
  {
  }

                    _Timevec(const _Timevec& _Right)
  {
  *this = _Right;
  }

                    ~_Timevec() noexcept
  {
  free(_Timeptr);
  }

 _Timevec& operator=(const _Timevec& _Right)
  {
  _Timeptr = _Right._Timeptr;
  ((_Timevec *)&_Right)->_Timeptr = 0;
  return (*this);
  }

 void * _Getptr() const
  {
  return (_Timeptr);
  }

private:
 void *_Timeptr;
 };


class __declspec(dllimport) _Locinfo
 {
public:
 typedef ::_Collvec _Collvec;
 typedef ::_Ctypevec _Ctypevec;
 typedef ::_Cvtvec _Cvtvec;
 typedef ::std:: _Timevec _Timevec;

 static void __cdecl _Locinfo_ctor(
  _Locinfo *, const char *);
 static void __cdecl _Locinfo_ctor(
  _Locinfo *, int, const char *);
 static void __cdecl _Locinfo_dtor(
  _Locinfo *);
 static _Locinfo& __cdecl _Locinfo_Addcats(
  _Locinfo *, int, const char *);

                    _Locinfo(const char *_Pch = "C")

  : _Lock(0)


  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  _Locinfo_ctor(this, _Pch);
  }

                    _Locinfo(int _Cat, const char *_Pch)

  : _Lock(0)


  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  _Locinfo_ctor(this, _Cat, _Pch);
  }

                    ~_Locinfo() noexcept
  {
  _Locinfo_dtor(this);
  }

 _Locinfo& _Addcats(int _Cat, const char *_Pch)
  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  return (_Locinfo_Addcats(this, _Cat, _Pch));
  }

 const char * _Getname() const
  {
  return (_Newlocname._C_str());
  }

 _Collvec _Getcoll() const
  {
  return (::_Getcoll());
  }

 _Ctypevec _Getctype() const
  {
  return (::_Getctype());
  }

 _Cvtvec _Getcvt() const
  {
  return (::_Getcvt());
  }

 const lconv * _Getlconv() const
  {
  return (localeconv());
  }

 _Timevec _Gettnames() const
  {
  return (_Timevec(::_Gettnames()));
  }

 const char * _Getdays() const
  {
  const char *_Ptr = ::_Getdays();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Days = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Days._Empty() ? _Days._C_str()
   : ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    ":Thu:Thursday:Fri:Friday:Sat:Saturday");
  }

 const char * _Getmonths() const
  {
  const char *_Ptr = ::_Getmonths();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Months = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Months._Empty() ? _Months._C_str()
   : ":Jan:January:Feb:February:Mar:March"
    ":Apr:April:May:May:Jun:June"
    ":Jul:July:Aug:August:Sep:September"
    ":Oct:October:Nov:November:Dec:December");
  }

 const char * _Getfalse() const
  {
  return ("false");
  }

 const char * _Gettrue() const
  {
  return ("true");
  }

 int _Getdateorder() const
  {
  return (::_Getdateorder());
  }

 _Timevec _W_Gettnames() const
  {
  return (_Timevec(::_W_Gettnames()));
  }

 const unsigned short * _W_Getdays() const
  {
  const wchar_t *_Ptr = ::_W_Getdays();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_W_Days = _Ptr;
   free((void *)_Ptr);
   }
  return ((const unsigned short *)(!_W_Days._Empty()
   ? _W_Days._C_str()
   : L":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    L":Thu:Thursday:Fri:Friday:Sat:Saturday"));
  }

 const unsigned short * _W_Getmonths() const
  {
  const wchar_t *_Ptr = ::_W_Getmonths();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_W_Months = _Ptr;
   free((void *)_Ptr);
   }
  return ((const unsigned short *)(!_W_Months._Empty()
   ? _W_Months._C_str()
   : L":Jan:January:Feb:February:Mar:March"
    L":Apr:April:May:May:Jun:June"
    L":Jul:July:Aug:August:Sep:September"
    L":Oct:October:Nov:November:Dec:December"));
  }

 _Locinfo(const _Locinfo&) = delete;
 _Locinfo& operator=(const _Locinfo&) = delete;

private:




 _Lockit _Lock;


 _Yarn<char> _Days;
 _Yarn<char> _Months;
 _Yarn<wchar_t> _W_Days;
 _Yarn<wchar_t> _W_Months;
 _Yarn<char> _Oldlocname;
 _Yarn<char> _Newlocname;
 };


template<class _Elem> inline
 int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (*_First1 < *_First2)
   return (-1);
  else if (*_First2 < *_First1)
   return (+1);
 return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
 }

template<> inline
 int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
 }


template<class _Elem> inline
 size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 size_t _Count = _Last2 - _First2;
 if (_Count <= (size_t)(_Last1 - _First1))
  ::memcpy_s((_First1), ((_Last1 - _First1) * sizeof (_Elem)), (_First2), (_Count * sizeof (_Elem)));

 return (_Count);
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                               char *_First1, char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                               wchar_t *_First1, wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 2 3


# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)








namespace std {

class __declspec(dllimport) _Facet_base
 {
public:
 virtual ~_Facet_base() noexcept
  {
  }


 virtual void _Incref() = 0;


 virtual _Facet_base * _Decref() = 0;
 };





void __cdecl _Facet_Register(_Facet_base *);

}

#pragma warning(pop)
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412 28197)

namespace std {

template<class _Dummy>
 class _Locbase
 {
public:
          static const int collate = ((1 << (1)) >> 1);
          static const int ctype = ((1 << (2)) >> 1);
          static const int monetary = ((1 << (3)) >> 1);
          static const int numeric = ((1 << (4)) >> 1);
          static const int time = ((1 << (5)) >> 1);
          static const int messages = ((1 << (6)) >> 1);
          static const int all = (((1 << ((6 + 1))) >> 1) - 1);
          static const int none = 0;
 };

template<class _Dummy>
 const int _Locbase<_Dummy>::collate;
template<class _Dummy>
 const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
 const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
 const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
 const int _Locbase<_Dummy>::time;
template<class _Dummy>
 const int _Locbase<_Dummy>::messages;
template<class _Dummy>
 const int _Locbase<_Dummy>::all;
template<class _Dummy>
 const int _Locbase<_Dummy>::none;


class locale;
template<class _Facet>
 const _Facet& __cdecl use_facet(const locale&);
template<class _Elem>
 class collate;

struct __declspec(dllimport) _Crt_new_delete
 {

 void * __cdecl operator new(size_t _Size)
  {
  void * _Ptr = operator new(_Size, nothrow);
  if (!_Ptr)
   _Xbad_alloc();
  return (_Ptr);
  }

 void * __cdecl operator new(size_t _Size, const nothrow_t&) noexcept
  {
  return (_malloc_dbg(_Size > 0 ? _Size : 1, 2, "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 74));
  }

 void __cdecl operator delete(void * _Ptr) noexcept
  {
  :: free(_Ptr);
  }

 void __cdecl operator delete(void * _Ptr, const nothrow_t&) noexcept
  {
  operator delete(_Ptr);
  }

 void * __cdecl operator new(size_t, void *_Ptr) noexcept
  {
  return (_Ptr);
  }

 void __cdecl operator delete(void *, void *) noexcept
  {
  }

 };

class locale
 : public _Locbase<int>, public _Crt_new_delete
 {
public:
 typedef int category;


 class __declspec(dllimport) id
  {
 public:
                     id(size_t _Val = 0)
   : _Id(_Val)
   {
   }

                     operator size_t()
   {
   if (_Id == 0)
    {
    { ::std:: _Lockit _Lock(0);
     if (_Id == 0)
      _Id = ++_Id_cnt;
    }
    }
   return (_Id);
   }

 private:
  size_t _Id;

                          static int _Id_cnt;

 public:
                     id(const id&) = delete;
  id& operator=(const id&) = delete;
  };

 class _Locimp;


 class __declspec(dllimport) facet
  : public _Facet_base, public _Crt_new_delete
  {
 public:
  static size_t __cdecl _Getcat(const facet ** = 0,
   const locale * = 0)
   {
   return ((size_t)(-1));
   }

  virtual void _Incref()
   {
   _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Myrefs));
   }

  virtual _Facet_base * _Decref()
   {
   if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Myrefs)) == 0)
    return (this);
   else
    return (0);
   }

 private:
  _Atomic_counter_t _Myrefs;

 protected:
  explicit facet(size_t _Initrefs = 0)
   {
   _Init_atomic_counter(_Myrefs, (_Atomic_integral_t)_Initrefs);
   }

  virtual ~facet() noexcept
   {
   }

 public:
                     facet(const facet&) = delete;
  facet& operator=(const facet&) = delete;
  };


#pragma warning(push)
#pragma warning(disable: 4275)

 class __declspec(dllimport) _Locimp
  : public facet
  {
 protected:
                     ~_Locimp() noexcept
  {
  _Locimp_dtor(this);
  }

 private:
  static _Locimp *__cdecl
   _New_Locimp(bool _Transparent = false);
  static _Locimp *__cdecl
   _New_Locimp(const _Locimp& _Right);

  static void __cdecl
   _Locimp_dtor(_Locimp *);
  static void __cdecl
   _Locimp_Addfac(_Locimp *, facet *, size_t);
  static void __cdecl
   _Locimp_ctor(_Locimp *, const _Locimp&);

  friend class locale;

                     _Locimp(bool _Transparent)
   : locale::facet(1), _Facetvec(0), _Facetcount(0),
    _Catmask(none), _Xparent(_Transparent),
     _Name("*")
   {
   }

                     _Locimp(const _Locimp& _Right)
   : locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
    _Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
     _Name(_Right._Name.c_str())
   {
   _Locimp_ctor(this, _Right);
   }

  void _Addfac(facet *_Pfacet, size_t _Id)
   {
   _Locimp_Addfac(this, _Pfacet, _Id);
   }

  static _Locimp *__cdecl _Makeloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  static void __cdecl _Makewloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makeushloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makexloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  facet **_Facetvec;
  size_t _Facetcount;
  category _Catmask;
  bool _Xparent;
  _Yarn<char> _Name;

                          static _Locimp *_Clocptr;

public:
  _Locimp& operator=(const _Locimp&) = delete;
  };

#pragma warning(pop)

 template<class _Elem,
  class _Traits,
  class _Alloc>
  bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
   const basic_string<_Elem, _Traits, _Alloc>& _Right) const
  {
  const ::std:: collate<_Elem>& _Coll_fac =
   use_facet< ::std:: collate<_Elem> >(*this);

  return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
   _Right.c_str(), _Right.c_str() + _Right.size()) < 0);
  }

 template<class _Facet>
  locale combine(const locale& _Loc) const
  {
  _Facet *_Facptr;

  try {
   _Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
  } catch (...) {
   _Xruntime_error("locale::combine facet missing");
  }

  _Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
  _Newimp->_Addfac(_Facptr, _Facet::id);
  _Newimp->_Catmask = none;
  _Newimp->_Name = "*";
  return (locale(_Newimp));
  }

 template<class _Facet>
  locale(const locale& _Loc, const _Facet *_Facptr)
   : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  if (_Facptr != 0)
   {
   _Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
   _Ptr->_Catmask = none;
   _Ptr->_Name = "*";
   }
  }

 locale(_Uninitialized)
  {
  }
# 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 3
 locale(const locale& _Right) noexcept
  : _Ptr(_Right._Ptr)
  {
  _Ptr->_Incref();
  }

 locale() noexcept
  : _Ptr(_Init(true))
  {
  }


 locale(const locale& _Loc, const locale& _Other,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  if (_Cat != none)
   {
   try {
    { _Locinfo _Lobj;
     _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other);
     _Lobj._Addcats(_Loc._Ptr->_Catmask,
      _Loc.name().c_str());
     _Lobj._Addcats(_Other._Ptr->_Catmask,
      _Other.name().c_str());
     _Ptr->_Catmask = _Loc._Ptr->_Catmask
      | _Other._Ptr->_Catmask;
     _Ptr->_Name = _Lobj._Getname();
    }
   } catch (...) {
   delete _Ptr->_Decref();
   throw;
   }
   }
  }

private:
 void _Construct(const string &_Str,
  category _Cat)
  {
  bool _Bad = false;
  _Init();
  if (_Cat != none)
   {
   try {
    { _Locinfo _Lobj(_Cat, _Str.c_str());
     if (_Badname(_Lobj))
      _Bad = true;
     else
      {
      _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
      _Ptr->_Catmask = _Cat;
      _Ptr->_Name = _Str.c_str();
      }
    }
   } catch (...) {
   delete _Ptr->_Decref();
   throw;
   }
   }

  if (_Bad)
   {
   delete _Ptr->_Decref();
   _Xruntime_error("bad locale name");
   }
  }

public:
 explicit locale(const char *_Locname,
  category _Cat = all)
  : _Ptr(_Locimp::_New_Locimp())
  {


  if (_Locname == 0)
   _Xruntime_error("bad locale name");
  _Construct(_Locname, _Cat);
  }

 locale(const locale& _Loc, const char *_Locname,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {


  if (_Locname == 0)
   _Xruntime_error("bad locale name");
  _Construct(_Locname, _Cat);
  }

 explicit locale(const string& _Str,
  category _Cat = all)
  : _Ptr(_Locimp::_New_Locimp())
  {
  _Construct(_Str, _Cat);
  }

 locale(const locale& _Loc, const string& _Str,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  _Construct(_Str, _Cat);
  }


 ~locale() noexcept
  {
  if (_Ptr != 0)
   delete _Ptr->_Decref();
  }

 locale& operator=(const locale& _Right) noexcept
  {
  if (_Ptr != _Right._Ptr)
   {
   delete _Ptr->_Decref();
   _Ptr = _Right._Ptr;
   _Ptr->_Incref();
   }
  return (*this);
  }


 string name() const
  {
  return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
  }

 const char *c_str() const
  {
  return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
  }

 const facet *_Getfacet(size_t _Id) const
  {
  const facet *_Facptr = _Id < _Ptr->_Facetcount
   ? _Ptr->_Facetvec[_Id] : 0;
  if (_Facptr != 0 || !_Ptr->_Xparent)
   return (_Facptr);
  else
   {
   locale::_Locimp *_Ptr0 = _Getgloballocale();
   return (_Id < _Ptr0->_Facetcount
    ? _Ptr0->_Facetvec[_Id]
    : 0);
   }
  }

 bool operator==(const locale& _Loc) const
  {
  return (_Ptr == _Loc._Ptr
   || (name().compare("*") != 0
    && name().compare(_Loc.name()) == 0));
  }

 bool operator!=(const locale& _Right) const
  {
  return (!(*this == _Right));
  }

 static __declspec(dllimport) const locale& __cdecl
  classic();

 static __declspec(dllimport) locale __cdecl
  global(const locale&);

 static __declspec(dllimport) locale __cdecl
  empty();

private:
 locale(_Locimp *_Ptrimp)
  : _Ptr(_Ptrimp)
  {
  }

 static __declspec(dllimport) _Locimp *__cdecl
  _Init(bool _Do_incref = false);
 static __declspec(dllimport) _Locimp *__cdecl
  _Getgloballocale();
 static __declspec(dllimport) void __cdecl
  _Setgloballocale(void *);

 bool _Badname(const _Locinfo& _Lobj)
  {
  return (:: strcmp(_Lobj._Getname(), "*") == 0);
  }

 _Locimp *_Ptr;
 };
# 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 3
template<class _Facet>
 struct _Facetptr
 {
                         static const locale::facet *_Psave;
 };

template<class _Facet>
                         const locale::facet *_Facetptr<_Facet>::
  _Psave = 0;






template<class _Facet> inline
 const _Facet& __cdecl use_facet(const locale& _Loc)

 {





 { ::std:: _Lockit _Lock(0);
  const locale::facet *_Psave =
   _Facetptr<_Facet>::_Psave;

  size_t _Id = _Facet::id;
  const locale::facet *_Pf = _Loc._Getfacet(_Id);

  if (_Pf != 0)
   ;
  else if (_Psave != 0)
   _Pf = _Psave;
  else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))



   throw ::std:: bad_cast();





  else
   {
   _Pf = _Psave;
   _Facetptr<_Facet>::_Psave = _Psave;

   locale::facet *_Pfmod = (_Facet *)_Psave;
   _Pfmod->_Incref();





   _Facet_Register(_Pfmod);

   }

  return ((const _Facet&)(*_Pf));
 }

 }


template<class _Elem,
 class _InIt> inline
 int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
  const _Elem *_Ptr)
 {
 for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
  if (_Ptr[_Off] == _Ptr[0])
   ++_Numfields;
 string _Str(_Numfields, '\0');

 int _Ans = -2;
 for (size_t _Column = 1; ; ++_Column, (void)++_First, _Ans = -1)
  {
  bool _Prefix = false;
  size_t _Off = 0;
  size_t _Field = 0;

  for (; _Field < _Numfields; ++_Field)
   {
   for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
    ;

   if (_Str[_Field] != '\0')
    _Off += _Str[_Field];
   else if (_Ptr[_Off += _Column] == _Ptr[0]
    || _Ptr[_Off] == (_Elem)0)
    {
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
    _Ans = (int)_Field;
    }
   else if (_First == _Last || _Ptr[_Off] != *_First)
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
   else
    _Prefix = true;
   }

  if (!_Prefix || _First == _Last)
   break;
  }
 return (_Ans);
 }





template<class _Elem> inline
 char __cdecl _Maklocbyte(_Elem _Char,
  const _Locinfo::_Cvtvec&)
 {
 return ((char)(unsigned char)_Char);
 }

template<> inline
 char __cdecl _Maklocbyte(wchar_t _Char,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {};
 _Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }


template<> inline
 char __cdecl _Maklocbyte(unsigned short _Char,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {};
 _Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }






template<class _Elem> inline
 _Elem __cdecl _Maklocchr(char _Byte, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 return ((_Elem)(unsigned char)_Byte);
 }

template<> inline
 wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 wchar_t _Wc = L'\0';
 mbstate_t _Mbst1 = {};
 _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }


template<> inline
 unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 unsigned short _Wc = (unsigned short)0;
 mbstate_t _Mbst1 = {};
 _Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }






template<class _Elem> inline
 _Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 size_t _Count = :: strlen(_Ptr) + 1;

 _Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),
  2, "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 723);

 if (!_Ptrdest)
  _Xbad_alloc();

#pragma warning(push)
#pragma warning(disable: 6011)
 for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
  *_Ptrnext = (_Elem)(unsigned char)*_Ptr;
#pragma warning(pop)

 return (_Ptrdest);
 }

template<> inline
 wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 wchar_t _Wc;
 mbstate_t _Mbst1 = {};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),
  2, "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 756);

 if (!_Ptrdest)
  _Xbad_alloc();
 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {};

#pragma warning(push)
#pragma warning(disable: 6011)
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
#pragma warning(pop)

 return (_Ptrdest);
 }


template<> inline
 unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 unsigned short _Wc;
 mbstate_t _Mbst1 = {};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes =
   _Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),
  2, "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 796);

 if (!_Ptrdest)
  _Xbad_alloc();

 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {};
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
 return ((unsigned short *)_Ptrdest);
 }



#pragma warning(push)
#pragma warning(disable: 4275)

class __declspec(dllimport) codecvt_base
 : public locale::facet
 {
public:
 enum
  {
  ok, partial, error, noconv};
 typedef int result;

                    codecvt_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

 bool always_noconv() const noexcept
  {
  return (do_always_noconv());
  }

 int max_length() const noexcept
  {
  return (do_max_length());
  }

 int encoding() const noexcept
  {
  return (do_encoding());
  }

                    ~codecvt_base() noexcept
  {
  }

protected:
 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (1);
  }

 virtual int do_encoding() const noexcept
  {
  return (1);
  }
 };

#pragma warning(pop)


template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt
  : public codecvt_base
 {
public:
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State, _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Locinfo());
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (is_same<_Byte, _Elem>::value);
  }

 virtual result do_in(_Statype&,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if (is_same<_Byte, _Elem>::value)
   return (noconv);
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
    *_Mid2 = (_Elem)*_Mid1;
   return (ok);
   }
  }

 virtual result do_out(_Statype&,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if (is_same<_Byte, _Elem>::value)
   return (noconv);
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
    *_Mid2 = (_Byte)*_Mid1;
   return (ok);
   }
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *&_Mid2) const
  {
  _Mid2 = _First2;
  return (ok);
  }

 virtual int do_length(_Statype&, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return ((int)(_Count < (size_t)(_Last1 - _First1)
   ? _Count : _Last1 - _First1));
  }
 };


template<class _Elem,
 class _Byte,
 class _Statype>
                         locale::id codecvt<_Elem, _Byte, _Statype>::id;


enum _Codecvt_mode {
 _Consume_header = 4,
 _Generate_header = 2
 };


template<>
 class __declspec(dllimport) codecvt<char16_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef codecvt<char16_t, char, _Mbstatet> _Mybase;
 typedef char16_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
  {
  _Init(_Lobj);
  }

                    codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
  _Codecvt_mode _Mode_arg, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned char _By = (unsigned char)*_Mid1;
   unsigned long _Ch;
   int _Nextra, _Nskip;

   if (*_Pstate <= 1)
    ;
   else if (_By < 0x80 || 0xc0 <= _By)
    return (_Mybase::error);
   else
    {
    ++_Mid1;
    *_Mid2++ = (_Elem)(*_Pstate | (_By & 0x3f));
    *_Pstate = 1;
    continue;
    }

   if (_By < 0x80)
    _Ch = _By, _Nextra = 0;
   else if (_By < 0xc0)
    {
    ++_Mid1;
    return (_Mybase::error);
    }
   else if (_By < 0xe0)
    _Ch = _By & 0x1f, _Nextra = 1;
   else if (_By < 0xf0)
    _Ch = _By & 0x0f, _Nextra = 2;
   else if (_By < 0xf8)
    _Ch = _By & 0x07, _Nextra = 3;
   else
    _Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

   _Nskip = _Nextra < 3 ? 0 : 1;
   _First1 = _Mid1;

   if (_Nextra == 0)
    ++_Mid1;
   else if (_Last1 - _Mid1 < _Nextra + 1 - _Nskip)
    break;
   else
    for (++_Mid1; _Nskip < _Nextra; --_Nextra, ++_Mid1)
     if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
      return (_Mybase::error);
     else
      _Ch = _Ch << 6 | (_By & 0x3f);
   if (0 < _Nskip)
    _Ch <<= 6;

   if ((_Maxcode < 0x10ffff ? _Maxcode : 0x10ffff) < _Ch)
    return (_Mybase::error);
   else if (0xffff < _Ch)
    {
    unsigned short _Ch0 =
     (unsigned short)(0xd800 | (_Ch >> 10) - 0x0040);

    *_Mid2++ = (_Elem)_Ch0;
    *_Pstate = (unsigned short)(0xdc00 | (_Ch & 0x03ff));
    continue;
    }

   if (_Nskip == 0)
    ;
   else if (_Mid1 == _Last1)
    {
    _Mid1 = _First1;
    break;
    }
   else if ((_By = (unsigned char)*_Mid1++) < 0x80 || 0xc0 <= _By)
    return (_Mybase::error);
   else
    _Ch |= _By & 0x3f;

   if (*_Pstate == 0)
    {
    *_Pstate = 1;

    if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
     {
     result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
      _First2, _Last2, _Mid2);

     if (_Ans == _Mybase::partial)
      {
      *_Pstate = 0;
      _Mid1 = _First1;
      }
     return (_Ans);
     }
    }

   *_Mid2++ = (_Elem)_Ch;
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned long _Ch;
   unsigned short _Ch1 = (unsigned short)*_Mid1;
   bool _Save = false;

   if (1 < *_Pstate)
    {
    if (_Ch1 < 0xdc00 || 0xe000 <= _Ch1)
     return (_Mybase::error);
    _Ch = (*_Pstate << 10) | (_Ch1 - 0xdc00);
    }
   else if (0xd800 <= _Ch1 && _Ch1 < 0xdc00)
    {
    _Ch = (_Ch1 - 0xd800 + 0x0040) << 10;
    _Save = true;
    }
   else
    _Ch = _Ch1;

   _Byte _By;
   int _Nextra;

   if (_Ch < 0x0080)
    _By = (_Byte)_Ch, _Nextra = 0;
   else if (_Ch < 0x0800)
    _By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
   else if (_Ch < 0x10000)
    _By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
   else
    _By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;

   int _Nput = _Nextra < 3 ? _Nextra + 1 : _Save ? 1 : 3;

   if (_Last2 - _Mid2 < _Nput)
    break;
   else if (*_Pstate != 0 || (_Mode & _Generate_header) == 0)
    ;
   else if (_Last2 - _Mid2 < 3 + _Nput)
    break;
   else
    {
    *_Mid2++ = (_Byte)(unsigned char)0xef;
    *_Mid2++ = (_Byte)(unsigned char)0xbb;
    *_Mid2++ = (_Byte)(unsigned char)0xbf;
    }

   ++_Mid1;
   if (_Save || _Nextra < 3)
    {
    *_Mid2++ = _By;
    --_Nput;
    }
   for (; 0 < _Nput; --_Nput)
    *_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);

   *_Pstate = (unsigned short)(_Save ? _Ch >> 10 : 1);
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *, _Byte *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid2 = _First2;

  return (1 < *_Pstate
   ? _Mybase::error : _Mybase::ok);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  size_t _Wchars = 0;
  _Statype _Mystate = _State;

  for (; _Wchars < _Count && _First1 != _Last1; )
   {
   const _Byte *_Mid1;
   _Elem *_Mid2;
   _Elem _Ch;

   switch (do_in(_Mystate, _First1, _Last1, _Mid1,
    &_Ch, &_Ch + 1, _Mid2))
    {
   case _Mybase::noconv:
    return ((int)(_Wchars + (_Last1 - _First1)));

   case _Mybase::ok:
    if (_Mid2 == &_Ch + 1)
     ++_Wchars;
    _First1 = _Mid1;
    break;

   default:
    return ((int)_Wchars);
    }
   }

  return ((int)_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return ((_Mode & _Consume_header) != 0 ? 9
   : (_Mode & _Generate_header) != 0 ? 7
   : 6);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 unsigned long _Maxcode;
 _Codecvt_mode _Mode;
 };


template<>
 class __declspec(dllimport) codecvt<char32_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef codecvt<char32_t, char, _Mbstatet> _Mybase;
 typedef char32_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
  {
  _Init(_Lobj);
  }

                    codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
  _Codecvt_mode _Mode_arg, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  char *_Pstate = (char *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned char _By = (unsigned char)*_Mid1;
   unsigned long _Ch;
   int _Nextra;

   if (_By < 0x80)
    _Ch = _By, _Nextra = 0;
   else if (_By < 0xc0)
    {
    ++_Mid1;
    return (_Mybase::error);
    }
   else if (_By < 0xe0)
    _Ch = _By & 0x1f, _Nextra = 1;
   else if (_By < 0xf0)
    _Ch = _By & 0x0f, _Nextra = 2;
   else if (_By < 0xf8)
    _Ch = _By & 0x07, _Nextra = 3;
   else
    _Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

   if (_Nextra == 0)
    ++_Mid1;
   else if (_Last1 - _Mid1 < _Nextra + 1)
    break;
   else
    for (++_Mid1; 0 < _Nextra; --_Nextra, ++_Mid1)
     if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
      return (_Mybase::error);
     else
      _Ch = _Ch << 6 | (_By & 0x3f);

   if (*_Pstate == 0)
    {
    *_Pstate = 1;

    if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
     {
     result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
      _First2, _Last2, _Mid2);

     if (_Ans == _Mybase::partial)
      {
      *_Pstate = 0;
      _Mid1 = _First1;
      }
     return (_Ans);
     }
    }

   if (_Maxcode < _Ch)
    return (_Mybase::error);
   *_Mid2++ = (_Elem)_Ch;
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  char *_Pstate = (char *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   _Byte _By;
   int _Nextra;
   unsigned long _Ch = (unsigned long)*_Mid1;

   if (_Maxcode < _Ch)
    return (_Mybase::error);

   if (_Ch < 0x0080)
    _By = (_Byte)_Ch, _Nextra = 0;
   else if (_Ch < 0x0800)
    _By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
   else if (_Ch < 0x00010000)
    _By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
   else if (_Ch < 0x00200000)
    _By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;
   else if (_Ch < 0x04000000)
    _By = (_Byte)(0xf8 | _Ch >> 24), _Nextra = 4;
   else
    _By = (_Byte)(0xfc | (_Ch >> 30 & 0x03)), _Nextra = 5;

   if (*_Pstate == 0)
    {
    *_Pstate = 1;
    if ((_Mode & _Generate_header) == 0)
     ;
    else if (_Last2 - _Mid2 < 3 + 1 + _Nextra)
     return (_Mybase::partial);
    else
     {
     *_Mid2++ = (_Byte)(unsigned char)0xef;
     *_Mid2++ = (_Byte)(unsigned char)0xbb;
     *_Mid2++ = (_Byte)(unsigned char)0xbf;
     }
    }

   if (_Last2 - _Mid2 < 1 + _Nextra)
    break;

   ++_Mid1;
   for (*_Mid2++ = _By; 0 < _Nextra; )
    *_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
   }
  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *& _Mid2) const
  {
  _Mid2 = _First2;
  return (_Mybase::ok);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  int _Wchars = 0;
  _Statype _Mystate = _State;

  for (; (size_t)_Wchars < _Count && _First1 != _Last1; )
   {
   const _Byte *_Mid1;
   _Elem *_Mid2;
   _Elem _Ch;

   switch (do_in(_Mystate, _First1, _Last1, _Mid1,
    &_Ch, &_Ch + 1, _Mid2))
    {
   case _Mybase::noconv:
    return ((int)(_Wchars + (int)(_Last1 - _First1)));

   case _Mybase::ok:
    if (_Mid2 == &_Ch + 1)
     ++_Wchars;
    _First1 = _Mid1;
    break;

   default:
    return ((int)_Wchars);
    }
   }

  return ((int)_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return ((_Mode & (_Consume_header | _Generate_header)) != 0
   ? 9 : 6);
  }

 virtual int do_encoding() const noexcept
  {
  return ((_Mode & (_Consume_header | _Generate_header)) != 0
   ? -1 : 0);
  }

private:
 unsigned long _Maxcode;
 _Codecvt_mode _Mode;
 };


template<>
 class __declspec(dllimport) codecvt<wchar_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef wchar_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1674);
  _Debug_range(_First2, _Last2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1675);
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1710);
  _Debug_range(_First2, _Last2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1711);
  _Mid1 = _First1, _Mid2 = _First2;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int)5 <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes;
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     break;
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes;
     }
    }
  return (_Mid1 == _Last1 ? ok : partial);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First2, _Last2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1747);
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  _Debug_range(_First1, _Last1, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1772);
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (5);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) codecvt<unsigned short, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef unsigned short _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1908);
  _Debug_range(_First2, _Last2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1909);
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1944);
  _Debug_range(_First2, _Last2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1945);
  _Mid1 = _First1, _Mid2 = _First2;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int)5 <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes;
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     break;
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes;
     }
    }
  return (_Mid1 == _Last1 ? ok : partial);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First2, _Last2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1981);
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  _Debug_range(_First1, _Last1, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2006);
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (5);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt_byname
  : public codecvt<_Elem, _Byte, _Statype>
 {
public:
 explicit codecvt_byname(const char *_Locname, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit codecvt_byname(const string& _Str, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~codecvt_byname() noexcept
  {
  }
 };


#pragma warning(push)
#pragma warning(disable: 4275)

struct __declspec(dllimport) ctype_base
 : public locale::facet
 {
 enum
  {
  alnum = 0x04 | 0x02 | 0x01 | 0x100, alpha = 0x02 | 0x01 | 0x100,
  cntrl = 0x20, digit = 0x04, graph = 0x04 | 0x02 | 0x10 | 0x01 | 0x100,
  lower = 0x02, print = 0x04 | 0x02 | 0x10 | 0x40 | 0x01 | 0x100 | 0x80,
  punct = 0x10, space = 0x08 | 0x40 | 0x000, upper = 0x01,
  xdigit = 0x80, blank = 0x08 | 0x40 | 0x000 | 0x000};
 typedef short mask;

                    ctype_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

                    ~ctype_base() noexcept
  {
  }
 };

#pragma warning(pop)


template<class _Elem>
 class ctype
  : public ctype_base
 {
public:
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
   & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2235);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
  return (_First);
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2244);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2253);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Tolower(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2271);
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Tolower(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Toupper(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2293);
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Toupper(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Maklocchr(_Byte, (_Elem *)0, _Cvt));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2311);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Maklocchr(*_First, (_Elem *)0, _Cvt);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Byte;
  if (_Ch == (_Elem)0)
   return ('\0');
  else if ((_Byte = _Maklocbyte((_Elem)_Ch, _Cvt)) == '\0')
   return (_Dflt);
  else
   return (_Byte);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2336);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };


template<class _Elem>
 locale::id ctype<_Elem>::id;


template<>
 class __declspec(dllimport) ctype<char>
 : public ctype_base
 {
 typedef ctype<char> _Myt;

public:
 typedef char _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
  }

 const _Elem * is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2370);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)*_First];
  return (_First);
  }

 const _Elem * scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2379);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 const _Elem * scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2388);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const _Elem * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 _Elem narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(const mask *_Table = 0,
  bool _Deletetable = false,
  size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }

  _Tidy();
  if (_Table != 0)
   {
   _Ctype._Table = _Table;
   _Ctype._Delfl = _Deletetable ? -1 : 0;
   }
  else
   {
   _Ctype._Table = classic_table();
   _Ctype._Delfl = 0;
   }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

 const mask * table() const noexcept
  {
  return (_Ctype._Table);
  }

 static const mask *__cdecl classic_table() noexcept
  {
  const _Myt& _Ctype_fac = use_facet< _Myt >(locale::classic());
  return (_Ctype_fac.table());
  }

          static const size_t table_size =
  1 << 8;

protected:
 virtual ~ctype() noexcept
  {
  _Tidy();
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  }

 void _Tidy()
  {
  if (0 < _Ctype._Delfl)
   :: free((void *)_Ctype._Table);
  else if (_Ctype._Delfl < 0)
   delete[] _Ctype._Table;

  :: free(_Ctype._LocaleName);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2518);
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2532);
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Byte);
  }

 virtual const _Elem * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2546);
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

 virtual _Elem do_narrow(_Elem _Ch, char) const
  {
  return (_Ch);
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char, char *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2559);
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 };


template<>
 class __declspec(dllimport) ctype<wchar_t>
 : public ctype_base
 {
 typedef ctype<wchar_t> _Myt;

public:
 typedef wchar_t _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2692);
  return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2699);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2708);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2722);
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2736);
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {};
  wchar_t _Wc;
  return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (wchar_t)((wint_t)(0xFFFF)) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2758);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2780);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) ctype<unsigned short>
 : public ctype_base
 {
 typedef ctype<unsigned short> _Myt;

public:
 typedef unsigned short _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2916);
  return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
   (const wchar_t *)_Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2924);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2933);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2947);
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2961);
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {};
  unsigned short _Wc;
  return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (unsigned short)((wint_t)(0xFFFF)) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2983);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 3005);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem>
 class ctype_byname
 : public ctype<_Elem>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~ctype_byname() noexcept
  {
  }
 };


template<>
 class ctype_byname<char>
 : public ctype<char>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~ctype_byname() noexcept
  {
  }
 };




template class __declspec(dllimport) codecvt<char, char, _Mbstatet>;


}

#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase" 2 3


# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cerrno" 1 3
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)
# 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error" 3
namespace std {


enum class errc {
 address_family_not_supported = 102,
 address_in_use = 100,
 address_not_available = 101,
 already_connected = 113,
 argument_list_too_long = 7,
 argument_out_of_domain = 33,
 bad_address = 14,
 bad_file_descriptor = 9,
 bad_message = 104,
 broken_pipe = 32,
 connection_aborted = 106,
 connection_already_in_progress = 103,
 connection_refused = 107,
 connection_reset = 108,
 cross_device_link = 18,
 destination_address_required = 109,
 device_or_resource_busy = 16,
 directory_not_empty = 41,
 executable_format_error = 8,
 file_exists = 17,
 file_too_large = 27,
 filename_too_long = 38,
 function_not_supported = 40,
 host_unreachable = 110,
 identifier_removed = 111,
 illegal_byte_sequence = 42,
 inappropriate_io_control_operation = 25,
 interrupted = 4,
 invalid_argument = 22,
 invalid_seek = 29,
 io_error = 5,
 is_a_directory = 21,
 message_size = 115,
 network_down = 116,
 network_reset = 117,
 network_unreachable = 118,
 no_buffer_space = 119,
 no_child_process = 10,
 no_link = 121,
 no_lock_available = 39,
 no_message_available = 120,
 no_message = 122,
 no_protocol_option = 123,
 no_space_on_device = 28,
 no_stream_resources = 124,
 no_such_device_or_address = 6,
 no_such_device = 19,
 no_such_file_or_directory = 2,
 no_such_process = 3,
 not_a_directory = 20,
 not_a_socket = 128,
 not_a_stream = 125,
 not_connected = 126,
 not_enough_memory = 12,
 not_supported = 129,
 operation_canceled = 105,
 operation_in_progress = 112,
 operation_not_permitted = 1,
 operation_not_supported = 130,
 operation_would_block = 140,
 owner_dead = 133,
 permission_denied = 13,
 protocol_error = 134,
 protocol_not_supported = 135,
 read_only_file_system = 30,
 resource_deadlock_would_occur = 36,
 resource_unavailable_try_again = 11,
 result_out_of_range = 34,
 state_not_recoverable = 127,
 stream_timeout = 137,
 text_file_busy = 139,
 timed_out = 138,
 too_many_files_open_in_system = 23,
 too_many_files_open = 24,
 too_many_links = 31,
 too_many_symbolic_link_levels = 114,
 value_too_large = 132,
 wrong_protocol_type = 136
 };

typedef errc _Errc;



enum class io_errc {
 stream = 1
 };

typedef io_errc _Io_errc;


template<class _Enum>
 struct is_error_code_enum
  : public false_type
 {
 };

template<>
 struct is_error_code_enum<_Io_errc>
  : public true_type
 {
 };


template<class _Ty>
 constexpr bool is_error_code_enum_v = is_error_code_enum<_Ty>::value;



template<class _Enum>
 struct is_error_condition_enum
  : public false_type
 {
 };

template<>
 struct is_error_condition_enum<_Errc>
  : public true_type
 {
 };


template<class _Ty>
 constexpr bool is_error_condition_enum_v = is_error_condition_enum<_Ty>::value;


class error_code;
class error_condition;
error_code make_error_code(_Errc) noexcept;
error_code make_error_code(_Io_errc) noexcept;
error_condition make_error_condition(_Errc) noexcept;
error_condition make_error_condition(_Io_errc) noexcept;


class error_category;

const error_category& generic_category() noexcept;
const error_category& iostream_category() noexcept;
const error_category& system_category() noexcept;

class error_category
 {
public:
                 error_category() noexcept
  {
  _Addr = reinterpret_cast<uintptr_t>(this);
  }

 virtual ~error_category() noexcept
  {
  }

 virtual const char *name() const noexcept = 0;

 virtual string message(int _Errval) const = 0;

 virtual error_condition
  default_error_condition(int _Errval) const noexcept;

 virtual bool equivalent(int _Errval,
  const error_condition& _Cond) const noexcept;

 virtual bool equivalent(const error_code& _Code,
  int _Errval) const noexcept;

 bool operator==(const error_category& _Right) const noexcept
  {
  return (_Addr == _Right._Addr);
  }

 bool operator!=(const error_category& _Right) const noexcept
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_category& _Right) const noexcept
  {
  return (_Addr < _Right._Addr);
  }

 error_category(const error_category&) = delete;
 error_category& operator=(const error_category&) = delete;

protected:
 uintptr_t _Addr;

 enum : uintptr_t
  {
  _Future_addr = 1,
  _Generic_addr = 3,
  _Iostream_addr = 5,
  _System_addr = 7
  };
 };


class error_code
 {
public:
 typedef error_code _Myt;

 error_code() noexcept
  : _Myval(0),
   _Mycat(&system_category())
  {
  }

 error_code(int _Val, const error_category& _Cat) noexcept
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum,
  class = typename enable_if<is_error_code_enum<_Enum>::value,
   void>::type>
  error_code(_Enum _Errcode) noexcept
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_code(_Errcode);
  }

 void assign(int _Val, const error_category& _Cat) noexcept
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename enable_if<is_error_code_enum<_Enum>::value,
   error_code>::type& operator=(_Enum _Errcode) noexcept
  {
  *this = make_error_code(_Errcode);
  return (*this);
  }

 void clear() noexcept
  {
  _Myval = 0;
  _Mycat = &system_category();
  }

 int value() const noexcept
  {
  return (_Myval);
  }

 const error_category& category() const noexcept
  {
  return (*_Mycat);
  }

 error_condition default_error_condition() const noexcept;

 string message() const
  {
  return (category().message(value()));
  }

 explicit operator bool() const noexcept
  {
  return (value() != 0);
  }

private:
 int _Myval;
 const error_category *_Mycat;
 };


class error_condition
 {
public:
 typedef error_condition _Myt;

 error_condition() noexcept
  : _Myval(0),
   _Mycat(&generic_category())
  {
  }

 error_condition(int _Val, const error_category& _Cat) noexcept
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum,
  class = typename enable_if<is_error_condition_enum<_Enum>::value,
   void>::type>
  error_condition(_Enum _Errcode) noexcept
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_condition(_Errcode);
  }

 void assign(int _Val, const error_category& _Cat) noexcept
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename enable_if<is_error_condition_enum<_Enum>::value,
   error_condition>::type& operator=(_Enum _Errcode) noexcept
  {
  *this = make_error_condition(_Errcode);
  return (*this);
  }

 void clear() noexcept
  {
  _Myval = 0;
  _Mycat = &generic_category();
  }

 int value() const noexcept
  {
  return (_Myval);
  }

 const error_category& category() const noexcept
  {
  return (*_Mycat);
  }

 string message() const
  {
  return (category().message(value()));
  }

 explicit operator bool() const noexcept
  {
  return (value() != 0);
  }

private:
 int _Myval;
 const error_category *_Mycat;
 };


inline bool operator==(
 const error_code& _Left,
 const error_code& _Right) noexcept
 {
 return (_Left.category() == _Right.category()
  && _Left.value() == _Right.value());
 }

inline bool operator==(
 const error_code& _Left,
 const error_condition& _Right) noexcept
 {
 return (_Left.category().equivalent(_Left.value(), _Right)
  || _Right.category().equivalent(_Left, _Right.value()));
 }

inline bool operator==(
 const error_condition& _Left,
 const error_code& _Right) noexcept
 {
 return (_Right.category().equivalent(_Right.value(), _Left)
  || _Left.category().equivalent(_Right, _Left.value()));
 }

inline bool operator==(
 const error_condition& _Left,
 const error_condition& _Right) noexcept
 {
 return (_Left.category() == _Right.category()
  && _Left.value() == _Right.value());
 }


inline bool operator!=(
 const error_code& _Left,
 const error_code& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_code& _Left,
 const error_condition& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_condition& _Left,
 const error_code& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_condition& _Left,
 const error_condition& _Right) noexcept
 {
 return (!(_Left == _Right));
 }


inline bool operator<(
 const error_code& _Left,
 const error_code& _Right) noexcept
 {
 return (_Left.category() < _Right.category()
  || (_Left.category() == _Right.category()
   && _Left.value() < _Right.value()));
 }

inline bool operator<(
 const error_condition& _Left,
 const error_condition& _Right) noexcept
 {
 return (_Left.category() < _Right.category()
  || (_Left.category() == _Right.category()
   && _Left.value() < _Right.value()));
 }


inline error_condition
 error_category::default_error_condition(int _Errval) const noexcept
 {
 return (error_condition(_Errval, *this));
 }

inline bool
 error_category::equivalent(int _Errval,
  const error_condition& _Cond) const noexcept
 {
 return (default_error_condition(_Errval) == _Cond);
 }

inline bool
 error_category::equivalent(const error_code& _Code,
  int _Errval) const noexcept
 {
 return (*this == _Code.category() && _Code.value() == _Errval);
 }


inline error_condition error_code::default_error_condition() const noexcept
 {
 return (category().default_error_condition(value()));
 }


inline error_code make_error_code(_Errc _Errno) noexcept
 {
 return (error_code((int)_Errno, generic_category()));
 }

inline error_code make_error_code(_Io_errc _Errno) noexcept
 {
 return (error_code((int)_Errno, iostream_category()));
 }


inline error_condition make_error_condition(_Errc _Errno) noexcept
 {
 return (error_condition((int)_Errno, generic_category()));
 }

inline error_condition make_error_condition(_Io_errc _Errno) noexcept
 {
 return (error_condition((int)_Errno, iostream_category()));
 }


template<>
 struct hash<error_code>
 {
 typedef error_code argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (hash<int>()(_Keyval.value()));
  }
 };


class _System_error
 : public runtime_error
 {
private:
 static string _Makestr(error_code _Errcode, string _Message)
  {
  if (!_Message.empty())
   _Message.append(": ");
  _Message.append(_Errcode.message());
  return (_Message);
  }

protected:
 _System_error(error_code _Errcode, const string& _Message)
  : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode)
  {
  }

 error_code _Mycode;
 };

class system_error
 : public _System_error
 {
private:
 typedef _System_error _Mybase;

public:
 system_error(error_code _Errcode)
  : _Mybase(_Errcode, "")
  {
  }

 system_error(error_code _Errcode, const string& _Message)
  : _Mybase(_Errcode, _Message)
  {
  }

 system_error(error_code _Errcode, const char *_Message)
  : _Mybase(_Errcode, _Message)
  {
  }

 system_error(int _Errval, const error_category& _Errcat)
  : _Mybase(error_code(_Errval, _Errcat), "")
  {
  }

 system_error(int _Errval, const error_category& _Errcat,
  const string& _Message)
  : _Mybase(error_code(_Errval, _Errcat), _Message)
  {
  }

 system_error(int _Errval, const error_category& _Errcat,
  const char *_Message)
  : _Mybase(error_code(_Errval, _Errcat), _Message)
  {
  }

 const error_code& code() const noexcept
  {
  return (_Mycode);
  }
# 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error" 3
 };

__declspec(dllimport) const char *__cdecl _Syserror_map(int);
__declspec(dllimport) int __cdecl _Winerror_map(int);
__declspec(dllimport) unsigned long __cdecl _Winerror_message(
 unsigned long _Message_id, char *_Narrow, unsigned long _Size);


class _Generic_error_category
 : public error_category
 {
public:
 _Generic_error_category() noexcept
  {
  _Addr = _Generic_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("generic");
  }

 virtual string message(int _Errcode) const
  {
  return (_Syserror_map(_Errcode));
  }
 };


class _Iostream_error_category
 : public _Generic_error_category
 {
public:
 _Iostream_error_category() noexcept
  {
  _Addr = _Iostream_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("iostream");
  }

 virtual string message(int _Errcode) const
  {
  if (_Errcode == (int)io_errc::stream)
   return ("iostream stream error");
  else
   return (_Generic_error_category::message(_Errcode));
  }
 };


class _System_error_category
 : public error_category
 {
public:
 _System_error_category() noexcept
  {
  _Addr = _System_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("system");
  }

 virtual string message(int _Errcode) const
  {
  const unsigned long _Size = 32767;
  string _Narrow(_Size, '\0');

  const unsigned long _Val = _Winerror_message(
   static_cast<unsigned long>(_Errcode), &_Narrow[0], _Size);

  if (_Val == 0)
   return ("unknown error");

  _Narrow.resize(_Val);
  _Narrow.shrink_to_fit();
  return (_Narrow);
  }

 virtual error_condition
  default_error_condition(int _Errval) const noexcept
  {
  int _Posv = _Winerror_map(_Errval);

  if (_Posv != 0)
   return (error_condition(_Posv, generic_category()));
  else
   return (error_condition(_Errval, system_category()));
  }
 };

template<class _Ty>
 struct _Immortalizer
 {
 _Immortalizer()
  {
  ::new (static_cast<void *>(&_Storage)) _Ty();
  }

 ~_Immortalizer() noexcept
  {
  }

 _Immortalizer(const _Immortalizer&) = delete;
 _Immortalizer& operator=(const _Immortalizer&) = delete;

 typename aligned_union<1, _Ty>::type _Storage;
 };

template<class _Ty> inline
 _Ty& _Immortalize()
 {
             static _Immortalizer<_Ty> _Static;
 return (*reinterpret_cast<_Ty *>(&_Static._Storage));
 }

inline const error_category& generic_category() noexcept
 {
 return (_Immortalize<_Generic_error_category>());
 }

inline const error_category& iostream_category() noexcept
 {
 return (_Immortalize<_Iostream_error_category>());
 }

inline const error_category& system_category() noexcept
 {
 return (_Immortalize<_System_error_category>());
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase" 2 3


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\share.h" 1 3
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412)



namespace std {
# 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase" 3
template<class _Dummy>
 class _Iosb
 {
public:
 enum _Dummy_enum {_Dummy_enum_val = 1};
 enum _Fmtflags
  {
  _Fmtmask = 0xffff, _Fmtzero = 0};

 static constexpr _Fmtflags skipws = (_Fmtflags)0x0001;
 static constexpr _Fmtflags unitbuf = (_Fmtflags)0x0002;
 static constexpr _Fmtflags uppercase = (_Fmtflags)0x0004;
 static constexpr _Fmtflags showbase = (_Fmtflags)0x0008;
 static constexpr _Fmtflags showpoint = (_Fmtflags)0x0010;
 static constexpr _Fmtflags showpos = (_Fmtflags)0x0020;
 static constexpr _Fmtflags left = (_Fmtflags)0x0040;
 static constexpr _Fmtflags right = (_Fmtflags)0x0080;
 static constexpr _Fmtflags internal = (_Fmtflags)0x0100;
 static constexpr _Fmtflags dec = (_Fmtflags)0x0200;
 static constexpr _Fmtflags oct = (_Fmtflags)0x0400;
 static constexpr _Fmtflags hex = (_Fmtflags)0x0800;
 static constexpr _Fmtflags scientific = (_Fmtflags)0x1000;
 static constexpr _Fmtflags fixed = (_Fmtflags)0x2000;

 static constexpr _Fmtflags hexfloat =
  (_Fmtflags)0x3000;

 static constexpr _Fmtflags boolalpha = (_Fmtflags)0x4000;
 static constexpr _Fmtflags _Stdio = (_Fmtflags)0x8000;
 static constexpr _Fmtflags adjustfield = (_Fmtflags)(0x0040
  | 0x0080 | 0x0100);
 static constexpr _Fmtflags basefield = (_Fmtflags)(0x0200
  | 0x0400 | 0x0800);
 static constexpr _Fmtflags floatfield = (_Fmtflags)(0x1000
  | 0x2000);

 enum _Iostate
  {
  _Statmask = 0x17};

 static constexpr _Iostate goodbit = (_Iostate)0x0;
 static constexpr _Iostate eofbit = (_Iostate)0x1;
 static constexpr _Iostate failbit = (_Iostate)0x2;
 static constexpr _Iostate badbit = (_Iostate)0x4;

 enum _Openmode
  {
  _Openmask = 0xff};

 static constexpr _Openmode in = (_Openmode)0x01;
 static constexpr _Openmode out = (_Openmode)0x02;
 static constexpr _Openmode ate = (_Openmode)0x04;
 static constexpr _Openmode app = (_Openmode)0x08;
 static constexpr _Openmode trunc = (_Openmode)0x10;
 static constexpr _Openmode _Nocreate = (_Openmode)0x40;
 static constexpr _Openmode _Noreplace = (_Openmode)0x80;
 static constexpr _Openmode binary = (_Openmode)0x20;

 enum _Seekdir
  {
  _Seekbeg,
  _Seekcur,
  _Seekend
  };

 static constexpr _Seekdir beg = _Seekbeg;
 static constexpr _Seekdir cur = _Seekcur;
 static constexpr _Seekdir end = _Seekend;

 enum
  {
  _Openprot = 0x40};
 };

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags
  _Iosb<_Dummy>::hexfloat;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;


class __declspec(dllimport) ios_base
 : public _Iosb<int>
 {
public:
 typedef int fmtflags;
 typedef int iostate;
 typedef int openmode;
 typedef int seekdir;


 typedef ::std:: streamoff streamoff;
 typedef ::std:: streampos streampos;


 enum event
  {
  erase_event, imbue_event, copyfmt_event};

 typedef void (__cdecl *event_callback)(event, ios_base&, int);


 typedef unsigned int io_state, open_mode, seek_dir;



 class failure

  : public system_error
  {
 public:
  explicit failure(const string &_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }

  explicit failure(const char *_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }
# 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase" 3
  };


 class __declspec(dllimport) Init
  {
 public:
                     Init()
   {
   _Init_ctor(this);
   }

                     ~Init() noexcept
   {
   _Init_dtor(this);
   }

 private:
  static void __cdecl _Init_ctor(Init *);
  static void __cdecl _Init_dtor(Init *);

                          static int _Init_cnt;

  static int& __cdecl _Init_cnt_func();
  };

 explicit operator bool() const
  {
  return (!fail());
  }

 bool operator!() const
  {
  return (fail());
  }

 void clear(iostate _State, bool _Reraise)
  {
  _Mystate = (iostate)(_State & _Statmask);
  if ((_Mystate & _Except) == 0)
   ;
  else if (_Reraise)
   throw;
  else if (_Mystate & _Except & badbit)
   throw failure("ios_base::badbit set");
  else if (_Mystate & _Except & failbit)
   throw failure("ios_base::failbit set");
  else
   throw failure("ios_base::eofbit set");
  }

 void clear(iostate _State = goodbit)
  {
  clear(_State, false);
  }


 void clear(io_state _State)
  {
  clear((iostate)_State);
  }


 iostate rdstate() const
  {
  return (_Mystate);
  }

 void setstate(iostate _State, bool _Exreraise)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
  }

 void setstate(iostate _State)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), false);
  }


 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }


 bool good() const
  {
  return (rdstate() == goodbit);
  }

 bool eof() const
  {
  return ((int)rdstate() & (int)eofbit);
  }

 bool fail() const
  {
  return (((int)rdstate()
   & ((int)badbit | (int)failbit)) != 0);
  }

 bool bad() const
  {
  return (((int)rdstate() & (int)badbit) != 0);
  }

 iostate exceptions() const
  {
  return (_Except);
  }

 void exceptions(iostate _Newexcept)
  {
  _Except = (iostate)((int)_Newexcept & (int)_Statmask);
  clear(_Mystate);
  }


 void exceptions(io_state _State)
  {
  exceptions((iostate)_State);
  }


 fmtflags flags() const
  {
  return (_Fmtfl);
  }

 fmtflags flags(fmtflags _Newfmtflags)
  {
  fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Newfmtflags & (int)_Fmtmask);
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Fmtfl
   | ((int)_Newfmtflags & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
   | ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 void unsetf(fmtflags _Mask)
  {
  _Fmtfl = (fmtflags)((int)_Fmtfl & (int)~_Mask);
  }

 streamsize precision() const
  {
  return (_Prec);
  }

 streamsize precision(streamsize _Newprecision)
  {
  streamsize _Oldprecision = _Prec;
  _Prec = _Newprecision;
  return (_Oldprecision);
  }

 streamsize width() const
  {
  return (_Wide);
  }

 streamsize width(streamsize _Newwidth)
  {
  streamsize _Oldwidth = _Wide;
  _Wide = _Newwidth;
  return (_Oldwidth);
  }

 locale getloc() const
  {
  return (*_Ploc);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = *_Ploc;
  *_Ploc = _Loc;
  _Callfns(imbue_event);
  return (_Oldlocale);
  }

 static int __cdecl xalloc()
  {
  { ::std:: _Lockit _Lock(2);
   return (_Index++);
  }
  }

 long& iword(int _Idx)
  {
  return (_Findarr(_Idx)._Lo);
  }

 void *& pword(int _Idx)
  {
  return (_Findarr(_Idx)._Vp);
  }

 void register_callback(event_callback _Pfn,
  int _Idx)
  {
  _Calls = new _Fnarray(_Idx, _Pfn, _Calls);
  }

 ios_base& copyfmt(const ios_base& _Other)
  {
  if (this != &_Other)
   {
   _Tidy();
   *_Ploc = *_Other._Ploc;
   _Fmtfl = _Other._Fmtfl;
   _Prec = _Other._Prec;
   _Wide = _Other._Wide;
   _Iosarray *_Ptr = _Other._Arr;

   for (_Arr = 0; _Ptr != 0; _Ptr = _Ptr->_Next)
    if (_Ptr->_Lo != 0 || _Ptr->_Vp != 0)
     {
     iword(_Ptr->_Index) = _Ptr->_Lo;
     pword(_Ptr->_Index) = _Ptr->_Vp;
     }

   for (_Fnarray *_Pfa = _Other._Calls; _Pfa != 0;
    _Pfa = _Pfa->_Next)
    register_callback(_Pfa->_Pfn, _Pfa->_Index);

   _Callfns(copyfmt_event);
   exceptions(_Other._Except);
   }
  return (*this);
  }

 static bool __cdecl sync_with_stdio(bool _Newsync = true)
  {
  { ::std:: _Lockit _Lock(2);
   const bool _Oldsync = _Sync;
   _Sync = _Newsync;
   return (_Oldsync);
  }
  }

 void swap(ios_base& _Right)
  {
  if (this != &_Right)
   {
   ::std:: swap(_Mystate, _Right._Mystate);
   ::std:: swap(_Except, _Right._Except);
   ::std:: swap(_Fmtfl, _Right._Fmtfl);
   ::std:: swap(_Prec, _Right._Prec);
   ::std:: swap(_Wide, _Right._Wide);

   ::std:: swap(_Arr, _Right._Arr);
   ::std:: swap(_Calls, _Right._Calls);
   ::std:: swap(_Ploc, _Right._Ploc);
   }
  }

 virtual ~ios_base() noexcept
  {
  _Ios_base_dtor(this);
  }

 static void __cdecl
  _Addstd(ios_base *);

 size_t _Stdstr;

protected:
                    ios_base()
  {
  }

 void _Init()
  {
  _Ploc = 0;
  _Stdstr = 0;
  _Except = goodbit;
  _Fmtfl = (fmtflags)(skipws | dec);
  _Prec = 6;
  _Wide = 0;
  _Arr = 0;
  _Calls = 0;
  clear(goodbit);
  _Ploc = new locale;
  }

private:

 struct _Iosarray
  : public _Crt_new_delete
  {
 public:
                     _Iosarray(int _Idx, _Iosarray *_Link)
   : _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0)
   {
   }

  _Iosarray *_Next;
  int _Index;
  long _Lo;
  void *_Vp;
  };


 struct _Fnarray
  : public _Crt_new_delete
  {
                     _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
   : _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
   {
   }

  _Fnarray *_Next;
  int _Index;
  event_callback _Pfn;
  };

 void _Callfns(event _Ev)
  {
  for (_Fnarray *_Pfa = _Calls; _Pfa != 0; _Pfa = _Pfa->_Next)
   (*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
  }

 _Iosarray& _Findarr(int _Idx)
  {
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr, _Ptr2 = 0; _Ptr1 != 0; _Ptr1 = _Ptr1->_Next)
   if (_Ptr1->_Index == _Idx)
    return (*_Ptr1);
   else if (_Ptr2 == 0 && _Ptr1->_Lo == 0 && _Ptr1->_Vp == 0)
    _Ptr2 = _Ptr1;

  if (_Ptr2 != 0)
   {
   _Ptr2->_Index = _Idx;
   return (*_Ptr2);
   }

  _Arr = new _Iosarray(_Idx, _Arr);
  return (*_Arr);
  }

 void _Tidy()
  {
  _Callfns(erase_event);
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr; _Ptr1 != 0; _Ptr1 = _Ptr2)
   {
   _Ptr2 = _Ptr1->_Next;
   delete _Ptr1;
   }
  _Arr = 0;

  _Fnarray *_Pfa1, *_Pfa2;
  for (_Pfa1 = _Calls; _Pfa1 != 0; _Pfa1 = _Pfa2)
   {
   _Pfa2 = _Pfa1->_Next;
   delete _Pfa1;
   }
  _Calls = 0;
  }

 iostate _Mystate;
 iostate _Except;
 fmtflags _Fmtfl;
 streamsize _Prec;
 streamsize _Wide;
 _Iosarray *_Arr;
 _Fnarray *_Calls;
 locale *_Ploc;

                         static int _Index;
                         static bool _Sync;

 static void __cdecl
  _Ios_base_dtor(ios_base *);

public:
 ios_base(const ios_base&) = delete;
 ios_base& operator=(const ios_base&) = delete;
 };





}

#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4251)

namespace std {

template<class _Elem,
 class _Traits>
 class basic_streambuf
 {
 typedef basic_streambuf<_Elem, _Traits> _Myt;

protected:
                    basic_streambuf()
  : _Plocale(new locale)
  {
  _Init();
  }

                    basic_streambuf(_Uninitialized)
  {
  }

                    basic_streambuf(const _Myt& _Right)
  : _Plocale(new locale(_Right.getloc()))
  {
  _Init();
  setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
  setg(_Right.eback(), _Right.gptr(), _Right.egptr());
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   pubimbue(_Right.getloc());
   }
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Elem *_Pfirst0 = pbase();
   _Elem *_Pnext0 = pptr();
   _Elem *_Pend = epptr();
   _Elem *_Gfirst0 = eback();
   _Elem *_Gnext0 = gptr();
   _Elem *_Gend = egptr();

   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   _Right.setp(_Pfirst0, _Pnext0, _Pend);

   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   _Right.setg(_Gfirst0, _Gnext0, _Gend);

   ::std:: swap(_Plocale, _Right._Plocale);
   }
  }

public:
 typedef _Elem char_type;
 typedef _Traits traits_type;

 virtual ~basic_streambuf() noexcept
  {
  delete _Plocale;
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 pos_type pubseekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekoff(_Off, _Way, _Mode));
  }


 pos_type pubseekoff(off_type _Off,
  ios_base::seek_dir _Way,
  ios_base::open_mode _Mode)
  {
  return (pubseekoff(_Off, (ios_base::seekdir)_Way,
   (ios_base::openmode)_Mode));
  }


 pos_type pubseekpos(pos_type _Pos,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekpos(_Pos, _Mode));
  }


 pos_type pubseekpos(pos_type _Pos,
  ios_base::open_mode _Mode)
  {
  return (seekpos(_Pos, (ios_base::openmode)_Mode));
  }


 _Myt * pubsetbuf(_Elem *_Buffer,
  streamsize _Count)
  {
  return (setbuf(_Buffer, _Count));
  }

 locale pubimbue(const locale &_Newlocale)
  {
  locale _Oldlocale = *_Plocale;
  imbue(_Newlocale);
  *_Plocale = _Newlocale;
  return (_Oldlocale);
  }

 locale getloc() const
  {
  return (*_Plocale);
  }

 streamsize in_avail()
  {
  streamsize _Res = _Gnavail();
  return (0 < _Res ? _Res : showmanyc());
  }

 int pubsync()
  {
  return (sync());
  }

 int_type sbumpc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*_Gninc()) : uflow());
  }

 int_type sgetc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*gptr()) : underflow());
  }

 streamsize sgetn(_Elem *_Ptr,
  streamsize _Count)
  {
  return (xsgetn(_Ptr, _Count));
  }

 int_type snextc()
  {
  return (1 < _Gnavail()
   ? _Traits::to_int_type(*_Gnpreinc())
   : _Traits::eq_int_type(_Traits::eof(), sbumpc())
    ? _Traits::eof() : sgetc());
  }

 int_type sputbackc(_Elem _Ch)
  {
  return (gptr() != 0 && eback() < gptr()
   && _Traits::eq(_Ch, gptr()[-1])
   ? _Traits::to_int_type(*_Gndec())
   : pbackfail(_Traits::to_int_type(_Ch)));
  }


 void stossc()
  {
  if (0 < _Gnavail())
   _Gninc();
  else
   uflow();
  }


 int_type sungetc()
  {
  return (gptr() != 0 && eback() < gptr()
   ? _Traits::to_int_type(*_Gndec()) : pbackfail());
  }

 int_type sputc(_Elem _Ch)
  {
  return (0 < _Pnavail()
   ? _Traits::to_int_type(*_Pninc() = _Ch)
   : overflow(_Traits::to_int_type(_Ch)));
  }

 streamsize sputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  return (xsputn(_Ptr, _Count));
  }

 virtual void _Lock()
  {
  }

 virtual void _Unlock()
  {
  }

protected:
 _Elem * eback() const
  {
  return (*_IGfirst);
  }

 _Elem * gptr() const
  {
  return (*_IGnext);
  }

 _Elem * pbase() const
  {
  return (*_IPfirst);
  }

 _Elem * pptr() const
  {
  return (*_IPnext);
  }

 _Elem * egptr() const
  {
  return (*_IGnext + *_IGcount);
  }

 void gbump(int _Off)
  {
  *_IGcount -= _Off;
  *_IGnext += _Off;
  }

 void setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IGfirst = _First;
  *_IGnext = _Next;
  *_IGcount = (int)(_Last - _Next);
  }

 _Elem * epptr() const
  {
  return (*_IPnext + *_IPcount);
  }

 _Elem * _Gndec()
  {
  ++*_IGcount;
  return (--*_IGnext);
  }

 _Elem * _Gninc()
  {
  --*_IGcount;
  return ((*_IGnext)++);
  }

 _Elem * _Gnpreinc()
  {
  --*_IGcount;
  return (++(*_IGnext));
  }

 streamsize _Gnavail() const
  {
  return (*_IGnext != 0 ? *_IGcount : 0);
  }

 void pbump(int _Off)
  {
  *_IPcount -= _Off;
  *_IPnext += _Off;
  }

 void setp(_Elem *_First, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _First;
  *_IPcount = (int)(_Last - _First);
  }

 void setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _Next;
  *_IPcount = (int)(_Last - _Next);
  }

 _Elem * _Pninc()
  {
  --*_IPcount;
  return ((*_IPnext)++);
  }

 streamsize _Pnavail() const
  {
  return (*_IPnext != 0 ? *_IPcount : 0);
  }

 void _Init()
  {
  _IGfirst = &_Gfirst;
  _IPfirst = &_Pfirst;
  _IGnext = &_Gnext;
  _IPnext = &_Pnext;
  _IGcount = &_Gcount;
  _IPcount = &_Pcount;
  setp(0, 0);
  setg(0, 0, 0);
  }

 void _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
  _Elem **_Pf, _Elem **_Pn, int *_Pc)
  {
  _IGfirst = _Gf;
  _IPfirst = _Pf;
  _IGnext = _Gn;
  _IPnext = _Pn;
  _IGcount = _Gc;
  _IPcount = _Pc;
  }

 virtual int_type overflow(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual int_type pbackfail(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual streamsize showmanyc()
  {
  return (0);
  }

 virtual int_type underflow()
  {
  return (_Traits::eof());
  }

 virtual int_type uflow()
  {
  return (_Traits::eq_int_type(_Traits::eof(), underflow())
   ? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
  }

 virtual streamsize xsgetn(_Elem * _Ptr,
  streamsize _Count)
  {
  int_type _Meta;
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Gnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(_Ptr, gptr(), (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    gbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
    break;
   else
    {
    *_Ptr++ = _Traits::to_char_type(_Meta);
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual streamsize xsputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Pnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(pptr(), _Ptr, (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    pbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(),
    overflow(_Traits::to_int_type(*_Ptr))))
    break;
   else
    {
    ++_Ptr;
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual pos_type seekoff(off_type,
  ios_base::seekdir,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual pos_type seekpos(pos_type,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual _Myt * setbuf(_Elem *, streamsize)
  {
  return (this);
  }

 virtual int sync()
  {
  return (0);
  }

 virtual void imbue(const locale&)
  {
  }

private:
 _Elem *_Gfirst;
 _Elem *_Pfirst;
 _Elem **_IGfirst;
 _Elem **_IPfirst;
 _Elem *_Gnext;
 _Elem *_Pnext;
 _Elem **_IGnext;
 _Elem **_IPnext;

 int _Gcount;
 int _Pcount;
 int *_IGcount;
 int *_IPcount;

protected:
 locale *_Plocale;
 };




template class __declspec(dllimport) basic_streambuf<char, char_traits<char> >;
template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t> >;
# 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf" 3
template<class _Elem,
 class _Traits>
 class istreambuf_iterator
  : public iterator<input_iterator_tag,
   _Elem, typename _Traits::off_type, const _Elem *, _Elem>
 {
 typedef istreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_istream<_Elem, _Traits> istream_type;

 typedef typename traits_type::int_type int_type;
 typedef const _Elem *pointer;

 constexpr istreambuf_iterator(streambuf_type *_Sb = 0) noexcept
  : _Strbuf(_Sb), _Got(_Sb == 0), _Val()
  {
  }

 istreambuf_iterator(istream_type& _Istr) noexcept
  : _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
  {
  }

 _Elem operator*() const
  {
  if (!_Got)
   _Peek();


  if (_Strbuf == 0)
   _Debug_message(L"istreambuf_iterator is not dereferencable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf", 517);


  return (_Val);
  }

 const _Elem *operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {

  if (_Strbuf == 0)
   _Debug_message(L"istreambuf_iterator is not incrementable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf", 532);


  _Inc();
  return (*this);
  }

 _Myt operator++(int)
  {
  if (!_Got)
   _Peek();
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 bool equal(const _Myt& _Right) const
  {
  if (!_Got)
   _Peek();
  if (!_Right._Got)
   _Right._Peek();
  return ((_Strbuf == 0 && _Right._Strbuf == 0)
   || (_Strbuf != 0 && _Right._Strbuf != 0));
  }

private:
 void _Inc()
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Strbuf->sbumpc()))
   _Strbuf = 0, _Got = true;
  else
   _Got = false;
  }

 _Elem _Peek() const
  {
  int_type _Meta;
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Meta = _Strbuf->sgetc()))
   _Strbuf = 0;
  else
   _Val = traits_type::to_char_type(_Meta);
  _Got = true;
  return (_Val);
  }

 mutable streambuf_type *_Strbuf;
 mutable bool _Got;
 mutable _Elem _Val;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<istreambuf_iterator<_Elem, _Traits> >
  : public true_type
 {
 };


template<class _Elem,
 class _Traits> inline
 bool operator==(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (_Left.equal(_Right));
 }

template<class _Elem,
 class _Traits> inline
 bool operator!=(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Elem,
 class _Traits>
 class ostreambuf_iterator
  : public _Outit
 {
 typedef ostreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_ostream<_Elem, _Traits> ostream_type;

 ostreambuf_iterator(streambuf_type *_Sb) noexcept
  : _Failed(false), _Strbuf(_Sb)
  {
  }

 ostreambuf_iterator(ostream_type& _Ostr) noexcept
  : _Failed(false), _Strbuf(_Ostr.rdbuf())
  {
  }

 _Myt& operator=(_Elem _Right)
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(_Traits::eof(),
    _Strbuf->sputc(_Right)))
   _Failed = true;
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt& operator++(int)
  {
  return (*this);
  }

 bool failed() const noexcept
  {
  return (_Failed);
  }

private:
 bool _Failed;
 streambuf_type *_Strbuf;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<ostreambuf_iterator<_Elem, _Traits> >
  : public true_type
 {
 };
}


#pragma warning(pop)
#pragma pack(pop)
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189 4275)




extern "C" {


extern __declspec(dllimport) float __cdecl _Stofx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) double __cdecl _Stodx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) long double __cdecl _Stoldx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) long __cdecl _Stolx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) unsigned long __cdecl _Stoulx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) long long __cdecl _Stollx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) unsigned long long __cdecl _Stoullx(const char *,
                                  char **,
 int, int *);


}


namespace std {


inline double _Stodx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
 {
 int& _Errno_ref = (*_errno());
 const int _Orig = _Errno_ref;

 _Errno_ref = 0;
 double _Val = :: strtod(_Str, _Endptr);
 *_Perr = _Errno_ref;
 _Errno_ref = _Orig;

 if (_Pten != 0)
  _Val *= :: pow(10.0, static_cast<double>(_Pten));

 return (_Val);
 }


inline float _Stofx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
 {
 int& _Errno_ref = (*_errno());
 const int _Orig = _Errno_ref;

 _Errno_ref = 0;
 float _Val = :: strtof(_Str, _Endptr);
 *_Perr = _Errno_ref;
 _Errno_ref = _Orig;

 if (_Pten != 0)
  _Val *= :: powf(10.0f, static_cast<float>(_Pten));

 return (_Val);
 }


template<class _Elem> inline
 size_t _Find_elem(_Elem *_Base, _Elem _Ch)
 {
 _Elem *_Ptr = _Base;
 for (; *_Ptr != (_Elem)0 && *_Ptr != _Ch; ++_Ptr)
  ;
 return ((size_t)(_Ptr - _Base));
 }

inline wchar_t *_Maklocwcs(const wchar_t *_Ptr)
 {
 size_t _Count = :: wcslen(_Ptr) + 1;

 wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),
  2, "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 102);

 if (!_Ptrdest)
  _Xbad_alloc();
 :: wmemcpy(_Ptrdest, _Ptr, _Count);
 return (_Ptrdest);
 }


template<class _Elem>
 class numpunct
  : public locale::facet
 {
public:
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;
 typedef _Elem char_type;

                         __declspec(dllimport) static locale::id id;

 _Elem decimal_point() const
  {
  return (do_decimal_point());
  }

 _Elem thousands_sep() const
  {
  return (do_thousands_sep());
  }

 string grouping() const
  {
  return (do_grouping());
  }

 string_type falsename() const
  {
  return (do_falsename());
  }

 string_type truename() const
  {
  return (do_truename());
  }

 explicit numpunct(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
   if (_Kseparator == 0)
    _Kseparator =
     _Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
  }
  }

 numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  _Init(_Lobj, _Isdef);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new numpunct<_Elem>(
    _Locinfo(_Ploc->c_str()), 0, true);
  return (4);
  }

protected:
 virtual ~numpunct() noexcept
  {
  _Tidy();
  }

 numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj, _Isdef);
  }
  }

 template<class _Elem2>
  void _Getvals(_Elem2, const lconv *_Ptr, _Locinfo::_Cvtvec _Cvt)
  {
  _Dp = _Maklocchr(_Ptr->decimal_point[0], (_Elem2 *)0, _Cvt);
  _Kseparator = _Maklocchr(_Ptr->thousands_sep[0], (_Elem2 *)0, _Cvt);
  }

 template<>
  void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)
  {
  _Dp = (_Elem)_Ptr->_W_decimal_point[0];
  _Kseparator = (_Elem)_Ptr->_W_thousands_sep[0];
  }

 void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
  {
  const lconv *_Ptr = _Lobj._Getlconv();
  _Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();

  _Grouping = 0;
  _Falsename = 0;
  _Truename = 0;

  try {
  _Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, (char *)0, _Lobj._Getcvt());

  _Falsename = _Maklocstr(_Lobj._Getfalse(), (_Elem *)0, _Cvt);
  _Truename = _Maklocstr(_Lobj._Gettrue(), (_Elem *)0, _Cvt);
  } catch (...) {
  _Tidy();
  throw;
  }

  if (_Isdef)
   {

   _Dp = _Maklocchr('.', (_Elem *)0, _Cvt);
   _Kseparator = _Maklocchr(',', (_Elem *)0, _Cvt);
   }
  else
   _Getvals((_Elem)0, _Ptr, _Cvt);
  }

 virtual _Elem do_decimal_point() const
  {
  return (_Dp);
  }

 virtual _Elem do_thousands_sep() const
  {
  return (_Kseparator);
  }

 virtual string do_grouping() const
  {
  return (string(_Grouping));
  }

 virtual string_type do_falsename() const
  {
  return (string_type(_Falsename));
  }

 virtual string_type do_truename() const
  {
  return (string_type(_Truename));
  }

private:
 void _Tidy()
  {
  :: free((void *)_Grouping);
  :: free((void *)_Falsename);
  :: free((void *)_Truename);
  }

 const char *_Grouping;
 _Elem _Dp;
 _Elem _Kseparator;
 const _Elem *_Falsename;
 const _Elem *_Truename;
 };


template<class _Elem>
 class numpunct_byname
  : public numpunct<_Elem>
 {
public:
 explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
  : numpunct<_Elem>(_Locname, _Refs)
  {
  }

 explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
  : numpunct<_Elem>(_Str.c_str(), _Refs)
  {
  }

protected:
 virtual ~numpunct_byname() noexcept
  {
  }
 };


template<class _Elem>
                         locale::id numpunct<_Elem>::id;


template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_get
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new num_get<_Elem, _InIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_get() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

public:
 explicit num_get(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _InIt iter_type;

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   bool& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

protected:
 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   bool& _Val) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 427);
  int _Ans = -1;

  if (_Iosbase.flags() & ios_base::boolalpha)
   {
   typedef typename _Mystr::size_type _Mystrsize;
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str((_Mystrsize)1, (char_type)0);
   _Str += _Punct_fac.falsename();
   _Str += (char_type)0;
   _Str += _Punct_fac.truename();
   _Ans = _Getloctxt(_First, _Last, (size_t)2, _Str.c_str());
   }
  else
   {
   char _Ac[32], *_Ep;
   int _Errno = 0;
   const unsigned long _Ulo = :: _Stoulx(_Ac, &_Ep,
    _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
     _Iosbase.getloc()), &_Errno);
   if (_Ep != _Ac && _Errno == 0 && _Ulo <= 1)
    _Ans = _Ulo;
   }

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ans < 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans != 0;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 464);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = (unsigned short)(_Ac[0] == '-'
    ? 0 -_Ans : _Ans);
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 487);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffffffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = _Ac[0] == '-' ? 0 -_Ans : _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 509);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const long _Ans = :: _Stolx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 529);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned long _Ans = :: _Stoulx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long long& _Val) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 549);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const long long _Ans = :: _Stollx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long long& _Val) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 569);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned long long _Ans = :: _Stoullx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }







 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 595);
  char _Ac[(8 + 768 + 16)], *_Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  float _Ans = _Stofx_v2(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 1000000000 && _Hexexp != 0)
   _Ans = :: ldexpf(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 619);
  char _Ac[(8 + 768 + 16)], *_Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  double _Ans = _Stodx_v2(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 1000000000 && _Hexexp != 0)
   _Ans = :: ldexp(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 643);
  char _Ac[(8 + 768 + 16)], *_Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  long double _Ans = _Stodx_v2(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 1000000000 && _Hexexp != 0)
   _Ans = :: ldexpl(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }



 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 669);
  char _Ac[32], *_Ep;
  int _Errno = 0;

  int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex,
   _Iosbase.getloc());
  const unsigned long long _Ans =
   (sizeof (void *) == sizeof (unsigned long))
    ? (unsigned long long):: _Stoulx(_Ac, &_Ep, _Base, &_Errno)
    : :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = (void *)((char *)0 + _Ans);
  return (_First);
  }

private:
 int __cdecl _Getifld(char *_Ac,
  _InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
   const locale& _Loc) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Loc);
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Grouping.size() == 0
   ? (_Elem)0 : _Punct_fac.thousands_sep();

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24};
  static const char _Src[] = {"0123456789ABCDEFabcdef-+Xx"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Loc);
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  char *_Ptr = _Ac;

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  _Basefield &= ios_base::basefield;
  int _Base = _Basefield == ios_base::oct ? 8
   : _Basefield == ios_base::hex ? 16
   : _Basefield == ios_base::_Fmtzero ? 0 : 10;

  bool _Seendigit = false;
  bool _Nonzero = false;

  if (_First != _Last && *_First == _Atoms[0])
   {
   _Seendigit = true, ++_First;
   if (_First != _Last && (*_First == _Atoms[_NUMGET_XOFF + 1]
     || *_First == _Atoms[_NUMGET_XOFF])
    && (_Base == 0 || _Base == 16))
    _Base = 16, _Seendigit = false, ++_First;
   else if (_Base == 0)
    _Base = 8;
   }

  size_t _Dlen = _Base == 0 || _Base == 10 ? 10
   : _Base == 8 ? 8 : 16 + 6;
  string _Groups((size_t)1, (char)_Seendigit);
  size_t _Group = 0;

  for (char *const _Pe = &_Ac[32 - 1];
   _First != _Last; ++_First)
   {
   size_t _Idx = _Find_elem(_Atoms, *_First);
   if (_Idx < _Dlen)
    {
    *_Ptr = _Src[_Idx];
    if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
     ++_Ptr, _Nonzero = true;
    _Seendigit = true;
    if (_Groups[_Group] != 127)
     ++_Groups[_Group];
    }
   else if (_Groups[_Group] == '\0'
    || _Kseparator == (_Elem)0
    || *_First != _Kseparator)
    break;
   else
    {
    _Groups.append((string::size_type)1, '\0');
    ++_Group;
    }
   }

  if (_Group == 0)
   ;
  else if ('\0' < _Groups[_Group])
   ++_Group;
  else
   _Seendigit = false;

  for (const char *_Pg = &_Grouping[0]; _Seendigit && 0 < _Group; )
   if (*_Pg == 127)
    break;
   else if ((0 < --_Group && *_Pg != _Groups[_Group])
    || (0 == _Group && *_Pg < _Groups[_Group]))
    _Seendigit = false;
   else if ('\0' < _Pg[1])
    ++_Pg;

  if (_Seendigit && !_Nonzero)
   *_Ptr++ = '0';
  else if (!_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Base);
  }

 int __cdecl _Getffld(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
   return (_Getffldx(_Ac, _First, _Last,
    _Iosbase, _Phexexp));

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  char *_Ptr = _Ac;
  bool _Bad = false;
  bool _Sticky = false;

  enum {
   _NUMGET_SIGNOFF = 10,
   _NUMGET_EOFF = 12};
  static const char _Src[] = {"0123456789-+Ee"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  char *_Leading = _Ptr;
  *_Ptr++ = '0';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Pten = 0;
  size_t _Idx;

  const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

  const char *_Pg = &_Grouping[0];
  if (*_Pg == 127 || *_Pg <= '\0')
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
     _Seendigit = true, ++_First)
    if (_Max_sig_dig <= _Significant)
     {
     ++_Pten;
     if (0 < _Idx)
      _Sticky = true;
     }
    else if (_Idx == 0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
     {
     _Seendigit = true;
     if (_Max_sig_dig <= _Significant)
      {
      ++_Pten;
      if (0 < _Idx)
       _Sticky = true;
      }
     else if (_Idx == 0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = _Src[_Idx];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   while (!_Bad && 0 < _Group)
    if (*_Pg == 127)
     break;
    else if ((0 < --_Group && *_Pg != _Groups[_Group])
     || (0 == _Group && *_Pg < _Groups[_Group]))
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (*_Phexexp != 1000000000 && _Significant == 0)
   {
   for (; _First != _Last && *_First == _Atoms[0];
    _Seendigit = true, ++_First)
    --_Pten;
   if (_Pten < 0)
    *_Ptr++ = '0', ++_Pten;
   }

  for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
    _Seendigit = true, ++_First)
   if (_Significant < _Max_sig_dig)
    {
    *_Ptr++ = _Src[_Idx];
    ++_Significant;
    }
   else if (0 < _Idx)
    _Sticky = true;

  if (_Sticky)
   {
   char *_Px = _Ptr;
   for (; --_Px != _Leading; )
    {
    if (*_Px == localeconv()->decimal_point[0])
     ;
    else if (*_Px != '9')
     {
     ++*_Px;
     break;
     }
    else
     *_Px = '0';
    }

   if (_Px == _Leading)
    {
    *_Px = '1';
    ++_Pten;
    }
   }

  if (_Seendigit && _First != _Last
   && (*_First == _Atoms[_NUMGET_EOFF + 1]
    || *_First == _Atoms[_NUMGET_EOFF]))
   {
   *_Ptr++ = 'e', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF])
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _Atoms[0]; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Pten);
  }

 int __cdecl _Getffldx(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24,
   _NUMGET_POFF = 26};
  static const char _Src[] = {"0123456789ABCDEFabcdef-+XxPp"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  char *_Ptr = _Ac;
  bool _Bad = false;
  size_t _Idx;

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  *_Ptr++ = '0';
  *_Ptr++ = 'x';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Phex = 0;

  if (_First == _Last || *_First != _Atoms[0])
   ;
  else if (++_First != _Last
   && (*_First == _Atoms[_NUMGET_XOFF + 1]
    || *_First == _Atoms[_NUMGET_XOFF]))
   ++_First;
  else
   _Seendigit = true;

  const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

  const char *_Pg = &_Grouping[0];
  if (*_Pg == 127 || *_Pg <= '\0')
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
     _Seendigit = true, ++_First)
    if (_Max_sig_dig <= _Significant)
     ++_Phex;
    else if (_Idx == 0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if ((_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF)
     {
     _Seendigit = true;
     if (_Max_sig_dig <= _Significant)
      ++_Phex;
     else if (_Idx == 0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = _Src[_Idx];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   while (!_Bad && 0 < _Group)
    if (*_Pg == 127)
     break;
    else if ((0 < --_Group && *_Pg != _Groups[_Group])
     || (0 == _Group && *_Pg < _Groups[_Group]))
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_Seendigit && _Significant == 0)
   *_Ptr++ = '0';

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (_Significant == 0)
   {
   for (; _First != _Last && *_First == _Atoms[0];
    _Seendigit = true, ++_First)
    --_Phex;
   if (_Phex < 0)
    *_Ptr++ = '0', ++_Phex;
   }

  for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++_First)
   if (_Significant < _Max_sig_dig)
    {
    *_Ptr++ = _Src[_Idx];
    ++_Significant;
    }

  if (_Seendigit && _First != _Last
   && (*_First == _Atoms[_NUMGET_POFF + 1]
    || *_First == _Atoms[_NUMGET_POFF]))
   {
   *_Ptr++ = 'p', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF])
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _Atoms[0]; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  *_Phexexp = _Phex;
  return (0);
  }



 };


template<class _Elem,
 class _InIt>
                         locale::id num_get<_Elem, _InIt>::id;


template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_put
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new num_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_put() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

public:
 explicit num_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _OutIt iter_type;

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, bool _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

protected:
 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, bool _Val) const
  {
  _Debug_pointer(_Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 1256);
  if (!(_Iosbase.flags() & ios_base::boolalpha))
   return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
  else
   {
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str;
   if (_Val)
    _Str.assign(_Punct_fac.truename());
   else
    _Str.assign(_Punct_fac.falsename());

   size_t _Fillcount = _Iosbase.width() <= 0
    || (size_t)_Iosbase.width() <= _Str.size()
     ? 0 : (size_t)_Iosbase.width() - _Str.size();

   if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
    {
    _Dest = _Rep(_Dest, _Fill, _Fillcount);
    _Fillcount = 0;
    }
   _Dest = _Put(_Dest, _Str.c_str(), _Str.size());
   _Iosbase.width(0);
   return (_Rep(_Dest, _Fill, _Fillcount));
   }
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long long _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  string _Buf;
  char _Fmt[8];
  bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
   == ios_base::fixed;
  streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
   ? 6 : _Iosbase.precision();
  size_t _Bufsize = (size_t)_Precision;
  if (_Isfixed && 1e10 < :: fabs(_Val))
   {
   int _Ptwo;
   (void):: frexp(_Val, &_Ptwo);
   _Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
   }
  _Buf.resize(_Bufsize + 50);

  int _Ngen = :: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
   _Ffmt(_Fmt, 0, _Iosbase.flags()), (int)_Precision, _Val);

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  string _Buf;
  char _Fmt[8];
  bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
   == ios_base::fixed;
  streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
   ? 6 : _Iosbase.precision();
  size_t _Bufsize = (size_t)_Precision;
  if (_Isfixed && 1e10 < :: fabsl(_Val))
   {
   int _Ptwo;
   (void):: frexpl(_Val, &_Ptwo);
   _Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
   }
  _Buf.resize(_Bufsize + 50);

  int _Ngen = :: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
   _Ffmt(_Fmt, 'L', _Iosbase.flags()), (int)_Precision, _Val);

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  char _Buf[2 * 32];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
  }

private:
 char *__cdecl _Ffmt(char *_Fmt,
  char _Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showpoint)
   *_Ptr++ = '#';
  *_Ptr++ = '.';
  *_Ptr++ = '*';
  if (_Spec != '\0')
   *_Ptr++ = _Spec;

  ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
  if (_Flags & ios_base::uppercase)
   *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
    : _Ffl == ios_base::hexfloat ? 'A'
    : _Ffl == ios_base::scientific ? 'E' : 'G';
  else
   *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
    : _Ffl == ios_base::hexfloat ? 'a'
    : _Ffl == ios_base::scientific ? 'e' : 'g';

  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Fput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
   size_t _Count) const
  {
  _Debug_pointer(_Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 1414);
  size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
   ? 1 : 0;

  const char *_Exps;
  if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)
   _Exps = "eE";
  else
   {
   _Exps = "pP";
   if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
    && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
    _Prefix += 2;
   }
  const size_t _Eoff =
   :: strcspn(&_Buf[0], _Exps);
  char _Dp[2] = {"."};
  _Dp[0] = :: localeconv()->decimal_point[0];
  const size_t _Poff =
   :: strcspn(&_Buf[0], &_Dp[0]);

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Mystr _Groupstring(_Count, _Elem(0));
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Punct_fac.thousands_sep();

  if (_Poff != _Count)
   _Groupstring[_Poff] = _Punct_fac.decimal_point();

  size_t _Off = _Poff == _Count ? _Eoff : _Poff;
  const char *_Pg = &_Grouping[0];
  while (*_Pg != 127 && '\0' < *_Pg
   && (size_t)*_Pg < _Off - _Prefix)
   {
   _Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
   if ('\0' < _Pg[1])
    ++_Pg;
   }

  _Count = _Groupstring.size();
  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 char *__cdecl _Ifmt(char *_Fmt,
  const char *_Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showbase)
   *_Ptr++ = '#';
  if (_Spec[0] != 'L')
   *_Ptr++ = _Spec[0];
  else

   {
   *_Ptr++ = 'I';
   *_Ptr++ = '6';
   *_Ptr++ = '4';
   }

  ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
  *_Ptr++ = _Basefield == ios_base::oct ? 'o'
   : _Basefield != ios_base::hex ? _Spec[1]
   : _Flags & ios_base::uppercase ? 'X' : 'x';
  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Iput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
  {
  _Debug_pointer(_Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 1516);
  size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
   ? 1 : 0;
  if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
   && _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
   && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
   _Prefix += 2;

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Mystr _Groupstring(_Count, _Elem(0));
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const char *_Pg = &_Grouping[0];
  if (*_Pg != 127 && '\0' < *_Pg)
   {
   const _Elem _Kseparator = _Punct_fac.thousands_sep();
   while (*_Pg != 127 && '\0' < *_Pg
    && (size_t)*_Pg < _Count - _Prefix)
    {
    _Count -= *_Pg;
    _Groupstring.insert(_Count, 1, _Kseparator);
    if ('\0' < _Pg[1])
     ++_Pg;
    }
   }

  _Count = _Groupstring.size();
  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 _OutIt __cdecl _Put(_OutIt _Dest,
  const _Elem *_Ptr, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)
   *_Dest = *_Ptr;
  return (_Dest);
  }

 _OutIt __cdecl _Rep(_OutIt _Dest,
  _Elem _Ch, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, (void)++_Dest)
   *_Dest = _Ch;
  return (_Dest);
  }
 };


template<class _Elem,
 class _OutIt>
                         locale::id num_put<_Elem, _OutIt>::id;




template locale::id numpunct<char>::id;
template class __declspec(dllimport) num_get<char,
 istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) num_put<char,
 ostreambuf_iterator<char, char_traits<char> > >;

template locale::id numpunct<wchar_t>::id;
template class __declspec(dllimport) num_get<wchar_t,
 istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) num_put<wchar_t,
 ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
# 1619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)

namespace std {

template<class _Elem,
 class _Traits>
 class basic_ios
  : public ios_base
 {
public:
 typedef basic_ios<_Elem, _Traits> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ctype<_Elem> _Ctype;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_ios(_Mysb *_Strbuf)
  {
  init(_Strbuf);
  }

 virtual ~basic_ios() noexcept
  {
  }

 void clear(iostate _State = goodbit,
  bool _Reraise = false)
  {
  ios_base::clear((iostate)(_Mystrbuf == 0
   ? (int)_State | (int)badbit : (int)_State), _Reraise);
  }


 void clear(io_state _State)
  {
  clear((iostate)_State);
  }


 void setstate(iostate _State,
  bool _Reraise = false)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Reraise);
  }


 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }


 _Myt& copyfmt(const _Myt& _Right)
  {
  _Tiestr = _Right.tie();
  _Fillch = _Right.fill();
  ios_base::copyfmt(_Right);
  return (*this);
  }

 _Myos * tie() const
  {
  return (_Tiestr);
  }

 _Myos * tie(_Myos *_Newtie)
  {
  _Myos *_Oldtie = _Tiestr;
  _Tiestr = _Newtie;
  return (_Oldtie);
  }

 _Mysb * rdbuf() const
  {
  return (_Mystrbuf);
  }

 _Mysb * rdbuf(_Mysb *_Strbuf)
  {
  _Mysb *_Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  clear();
  return (_Oldstrbuf);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = ios_base::imbue(_Loc);
  if (rdbuf() != 0)
   rdbuf()->pubimbue(_Loc);
  return (_Oldlocale);
  }

 _Elem fill() const
  {
  return (_Fillch);
  }

 _Elem fill(_Elem _Newfill)
  {
  _Elem _Oldfill = _Fillch;
  _Fillch = _Newfill;
  return (_Oldfill);
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.narrow(_Ch, _Dflt));
  }

 _Elem widen(char _Byte) const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.widen(_Byte));
  }

 void move(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void move(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right) noexcept
  {
  ios_base::swap(_Right);
  ::std:: swap(_Fillch, _Right._Fillch);
  ::std:: swap(_Tiestr, _Right._Tiestr);
  }

 void set_rdbuf(_Mysb *_Strbuf)
  {
  _Mystrbuf = _Strbuf;
  }

protected:
 void init(_Mysb *_Strbuf = 0,
  bool _Isstd = false)
  {
  _Init();
  _Mystrbuf = _Strbuf;
  _Tiestr = 0;
  _Fillch = widen(' ');

  if (_Mystrbuf == 0)
   setstate(badbit);

  if (_Isstd)
   _Addstd(this);
  }

                    basic_ios()
  {
  }

private:
 _Mysb *_Mystrbuf;
 _Myos *_Tiestr;
 _Elem _Fillch;

public:
                    basic_ios(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;
 };




template class __declspec(dllimport) basic_ios<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ios<wchar_t,
 char_traits<wchar_t> >;
# 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios" 3
inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl dec(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::dec, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl fixed(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::fixed, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hex(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hex, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hexfloat(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hexfloat, ios_base::floatfield);
 return (_Iosbase);
 }


namespace tr1 {
using ::std:: hexfloat;
}


inline ios_base& __cdecl internal(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::internal, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl left(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::left, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::uppercase);
 return (_Iosbase);
 }

inline ios_base& __cdecl oct(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::oct, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl right(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::right, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::scientific, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::uppercase);
 return (_Iosbase);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189 4390)

namespace std {
# 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream" 3
#pragma vtordisp(push, 2)


template<class _Elem,
 class _Traits>
 class basic_ostream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_ostream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
 typedef num_put<_Elem, _Iter> _Nput;

 explicit basic_ostream(
  basic_streambuf<_Elem, _Traits> *_Strbuf,

  bool _Isstd = false)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_ostream(_Uninitialized, bool _Addit = true)
  {
  if (_Addit)
   this->_Addstd(this);
  }

protected:
                    basic_ostream(_Myt&& _Right)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   _Myios::swap(_Right);
  }

public:
                    basic_ostream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_ostream() noexcept
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Ostr)
   : _Myostr(_Ostr)
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Lock();
   }

                     ~_Sentry_base() noexcept
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Unlock();
   }

  _Myt& _Myostr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Ostr)
   : _Sentry_base(_Ostr)
   {
   if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)
    _Ostr.tie()->flush();
   _Ok = _Ostr.good();
   }

                     ~sentry() noexcept
   {

   if (!::std:: uncaught_exception())
    this->_Myostr._Osfx();




   }

  explicit operator bool() const
   {
   return (_Ok);
   }

                     sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;

 private:
  bool _Ok;
  };

 bool opfx()
  {
  if (this->good() && _Myios::tie() != 0 && _Myios::tie() != this)
   _Myios::tie()->flush();
  return (this->good());
  }

 void osfx()
  {
  _Osfx();
  }

 void _Osfx()
  {
  try {
  if (this->good() && this->flags() & ios_base::unitbuf)
   if (_Myios::rdbuf()->pubsync() == -1)
    _Myios::setstate(ios_base::badbit);
  } catch (...) {
  }
  }
# 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream" 3
 _Myt& operator<<(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
  _Debug_pointer(_Pfn, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream", 198);
  return ((*_Pfn)(*this));
  }

 _Myt& operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
  _Debug_pointer(_Pfn, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream", 204);
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
  _Debug_pointer(_Pfn, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream", 211);
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator<<(bool _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
   ios_base::fmtflags _Bfl =
    this->flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned short)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }
# 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream" 3
 _Myt& operator<<(unsigned short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
   ios_base::fmtflags _Bfl =
    this->flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned int)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned long long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(float _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (double)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(const void *_Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   for (int_type _Meta = _Traits::eof(); ; _Copied = true)
    {
    try {
    _Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
     ? _Strbuf->sgetc() : _Strbuf->snextc();
    } catch (...) {
     _Myios::setstate(ios_base::failbit);
     throw;
    }

    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     break;

    try {
     if (_Traits::eq_int_type(_Traits::eof(),
      _Myios::rdbuf()->sputc(
       _Traits::to_char_type(_Meta))))
      {
      _State |= ios_base::badbit;
      break;
      }
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

  this->width(0);
  _Myios::setstate(_Strbuf == 0 ? ios_base::badbit
   : !_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& put(_Elem _Ch)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputc(_Ch)))
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& write(const _Elem *_Str,
  streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else if (0 < _Count)
   {
   _Debug_pointer(_Str, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream", 562);
   try {
   if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& flush()
  {
  if (_Myios::rdbuf() != 0)
   {
   const sentry _Ok(*this);

   if (_Ok && _Myios::rdbuf()->pubsync() == -1)
    _Myios::setstate(ios_base::badbit);
   }
  return (*this);
  }

 _Myt& seekp(pos_type _Pos)
  {
  const sentry _Ok(*this);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 _Myt& seekp(off_type _Off, ios_base::seekdir _Way)
  {
  const sentry _Ok(*this);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 pos_type tellp()
  {
  const sentry _Ok(*this);

  if (!this->fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::out));
  else
   return (pos_type(_BADOFF));
  }
 };

#pragma vtordisp(pop)
# 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream" 3
template class __declspec(dllimport) basic_ostream<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ostream<wchar_t,
 char_traits<wchar_t> >;
# 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream" 3
template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
 {
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize):: strlen(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
 {
 ios_base::iostate _State = ios_base::goodbit;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (_Ok)
  {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr,
  const char *_Val)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, char _Ch)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>&& _Ostr, const _Ty& _Val)
 {
 return (_Ostr << _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Ostr.widen('\n'));
 _Ostr.flush();
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Elem());
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.flush();
 return (_Ostr);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
   const error_code& _Errcode)
 {
 return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)

namespace std {
#pragma vtordisp(push, 2)


template<class _Elem,
 class _Traits>
 class basic_istream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_istream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef istreambuf_iterator<_Elem, _Traits> _Iter;
 typedef ctype<_Elem> _Ctype;
 typedef num_get<_Elem, _Iter> _Nget;
# 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 3
 explicit basic_istream(_Mysb *_Strbuf,
  bool _Isstd = false)

  : _Chcount(0)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_istream(_Uninitialized)
  {
  this->_Addstd(this);
  }

protected:
                    basic_istream(_Myt&& _Right)
  : _Chcount(_Right._Chcount)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  _Right._Chcount = 0;
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  _Myios::swap(_Right);
  ::std:: swap(_Chcount, _Right._Chcount);
  }

public:
                    basic_istream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_istream() noexcept
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;


 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Istr)
   : _Myistr(_Istr)
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Lock();
   }

                     ~_Sentry_base() noexcept
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Unlock();
   }

  _Myt& _Myistr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Istr, bool _Noskip = false)
   : _Sentry_base(_Istr)
   {
   _Ok = this->_Myistr._Ipfx(_Noskip);
   }

  explicit operator bool() const
   {
   return (_Ok);
   }

                     sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;

 private:
  bool _Ok;
  };

 bool _Ipfx(bool _Noskip = false)
  {
  if (this->good())
   {
   if (_Myios::tie() != 0)
    _Myios::tie()->flush();

   if (!_Noskip && this->flags() & ios_base::skipws)
    {
    const _Ctype& _Ctype_fac = use_facet< _Ctype >(this->getloc());

    try {
    int_type _Meta = _Myios::rdbuf()->sgetc();

    for (; ; _Meta = _Myios::rdbuf()->snextc())
     if (_Traits::eq_int_type(_Traits::eof(), _Meta))
      {
      _Myios::setstate(ios_base::eofbit);
      break;
      }
     else if (!_Ctype_fac.is(_Ctype::space,
      _Traits::to_char_type(_Meta)))
      break;
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

   if (this->good())
    return (true);
   }
  _Myios::setstate(ios_base::failbit);
  return (false);
  }

 bool ipfx(bool _Noskip = false)
  {
  return (_Ipfx(_Noskip));
  }

 void isfx()
  {
  }
# 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 3
 _Myt& operator>>(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
  _Debug_pointer(_Pfn, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 199);
  return ((*_Pfn)(*this));
  }

 _Myt& operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
  _Debug_pointer(_Pfn, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 205);
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
  _Debug_pointer(_Pfn, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 212);
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator>>(bool& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-32768) || 32767 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = (short)_Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }
# 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 3
 _Myt& operator>>(unsigned short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-2147483647 - 1) || 2147483647 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = _Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned long long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(float& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(void *& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      if (_Traits::eq_int_type(_Traits::eof(),
       _Strbuf->sputc(_Traits::to_char_type(_Meta))))
       break;
     } catch (...) {
      break;
     }
     _Copied = true;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(!_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 int_type get()
  {
  int_type _Meta = 0;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   _Meta = _Myios::rdbuf()->sgetc();

   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    _State |= ios_base::eofbit | ios_base::failbit;
   else
    {
    _Myios::rdbuf()->sbumpc();
    ++_Chcount;
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& get(_Elem *_Str, streamsize _Count)
  {
  return (get(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& get(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Traits::to_char_type(_Meta) == _Delim)
     break;
    else
     {
     _Debug_pointer(_Str, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 572);
     *_Str++ = _Traits::to_char_type(_Meta);
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_Chcount == 0
   ? _State | ios_base::failbit : _State);
  *_Str = _Elem();
  return (*this);
  }

 _Myt& get(_Elem& _Ch)
  {
  int_type _Meta = get();
  if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
   _Ch = _Traits::to_char_type(_Meta);
  return (*this);
  }

 _Myt& get(_Mysb& _Strbuf)
  {
  return (get(_Strbuf, _Myios::widen('\n')));
  }

 _Myt& get(_Mysb& _Strbuf, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      _Elem _Ch = _Traits::to_char_type(_Meta);
      if (_Ch == _Delim
       || _Traits::eq_int_type(_Traits::eof(),
        _Strbuf.sputc(_Ch)))
       break;
     } catch (...) {
      break;
     }
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  if (_Chcount == 0)
   _State |= ios_base::failbit;
  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& getline(_Elem *_Str, streamsize _Count)
  {
  return (getline(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& getline(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   int_type _Metadelim = _Traits::to_int_type(_Delim);

   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Meta == _Metadelim)
     {
     ++_Chcount;
     _Myios::rdbuf()->sbumpc();
     break;
     }
    else if (--_Count <= 0)
     {
     _State |= ios_base::failbit;
     break;
     }
    else
     {
     _Debug_pointer(_Str, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 675);
     *_Str++ = _Traits::to_char_type(_Meta);
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  *_Str = _Elem();
  _Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& ignore(streamsize _Count = 1,
  int_type _Metadelim = _Traits::eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   for (; ; )
    {
    int_type _Meta;
    if (_Count != (numeric_limits<streamsize>::max)()
     && --_Count < 0)
     break;
    else if (_Traits::eq_int_type(_Traits::eof(),
     _Meta = _Myios::rdbuf()->sbumpc()))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     ++_Chcount;
     if (_Meta == _Metadelim)
      break;
     }
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& read(_Elem *_Str, streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   _Debug_pointer(_Str, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 732);
   const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
   _Chcount += _Num;
   if (_Num != _Count)
    _State |= ios_base::eofbit | ios_base::failbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize readsome(_Elem *_Str,
  streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);
  streamsize _Num;

  if (!_Ok)
   _State |= ios_base::failbit;
  else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
   _State |= ios_base::eofbit;
  else if (0 < _Count && 0 < _Num)
   {
   _Debug_pointer(_Str, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 758);
   read(_Str, _Num < _Count ? _Num : _Count);
   }

  _Myios::setstate(_State);
  return (gcount());
  }

 int_type peek()
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  int_type _Meta = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Meta = _Myios::rdbuf()->sgetc()))
    _State |= ios_base::eofbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& putback(_Elem _Ch)
  {
  _Chcount = 0;
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputbackc(_Ch)))
    _State |= ios_base::badbit | _Oldstate;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& unget()
  {
  _Chcount = 0;
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sungetc()))
    _State |= ios_base::badbit | _Oldstate;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize gcount() const
  {
  return (_Chcount);
  }

 int sync()
  {
  const sentry _Ok(*this, true);

  if (_Myios::rdbuf() == 0)
   return (-1);
  else if (_Myios::rdbuf()->pubsync() == -1)
   {
   _Myios::setstate(ios_base::badbit);
   return (-1);
   }
  else
   return (0);
  }

 _Myt& seekg(pos_type _Pos)
  {
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::in) == _BADOFF)
   _Myios::setstate(_State | ios_base::failbit);
  return (*this);
  }

 _Myt& seekg(off_type _Off, ios_base::seekdir _Way)
  {
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::in) == _BADOFF)
   _Myios::setstate(_State | ios_base::failbit);
  return (*this);
  }

 pos_type tellg()
  {
  const sentry _Ok(*this, true);

  if (!this->fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::in));
  else
   return (pos_type(_BADOFF));
  }

private:
 streamsize _Chcount;
 };



#pragma vtordisp(pop)
# 923 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 3
template class __declspec(dllimport) basic_istream<char, char_traits<char> >;
template class __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >;
# 934 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 3
template<class _Elem,
 class _Traits>
 class basic_iostream
 : public basic_istream<_Elem, _Traits>,
  public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_iostream<_Elem, _Traits> _Myt;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
  : _Myis(_Strbuf, false),
   _Myos(_Noinit, false)
  {
  }

protected:
                    basic_iostream(_Myt&& _Right)
  : _Myis(_Right.rdbuf(), false),
   _Myos(_Noinit, false)
  {
  _Myios::init();
  _Myios::move(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   _Myios::swap(_Right);
  }

public:
                    basic_iostream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_iostream() noexcept
  {
  }
 };






template class __declspec(dllimport) basic_iostream<char, char_traits<char> >;
template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t> >;
# 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 3
template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
 {
 _Debug_pointer(_Str, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 1009);
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;
 ios_base::iostate _State = ios_base::goodbit;
 _Elem *_Str0 = _Str;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

  try {
  streamsize _Count = 0 < _Istr.width() ? _Istr.width()
   : (numeric_limits<streamsize>::max)();
  typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
  _Elem _Ch;
  for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Ch = _Traits::to_char_type(_Meta))
     || _Ch == _Elem())
    break;
   else
    *_Str++ = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 *_Str = _Elem();
 _Istr.width(0);
 _Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 typename _Myis::int_type _Meta;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  try {
  _Meta = _Istr.rdbuf()->sbumpc();
  if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   _State |= ios_base::eofbit | ios_base::failbit;
  else
   _Ch = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_istream<_Elem, _Traits>&
  operator>>(basic_istream<_Elem, _Traits>&& _Istr, _Ty& _Val)
 {
 return (_Istr >> _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>&
  __cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const typename _Myis::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

   try {
   for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(_Ctype::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iostream" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {
# 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iostream" 3
                        extern __declspec(dllimport) istream cin, *_Ptr_cin;
                        extern __declspec(dllimport) ostream cout, *_Ptr_cout;
                        extern __declspec(dllimport) ostream cerr, *_Ptr_cerr;
                        extern __declspec(dllimport) ostream clog, *_Ptr_clog;

                        extern __declspec(dllimport) wistream wcin, *_Ptr_wcin;
                        extern __declspec(dllimport) wostream wcout, *_Ptr_wcout;
                        extern __declspec(dllimport) wostream wcerr, *_Ptr_wcerr;
                        extern __declspec(dllimport) wostream wclog, *_Ptr_wclog;


class __declspec(dllimport) _Winit {
public:
 __thiscall _Winit();
 __thiscall ~_Winit() noexcept;
private:
                         static int _Init_cnt;
 };

}

#pragma warning(pop)
#pragma pack(pop)
# 19 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 2

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\set" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4700)

namespace std {

template<class _Ty> inline
 pair<_Ty *, ptrdiff_t>
  get_temporary_buffer(ptrdiff_t _Count) noexcept
 {
 _Ty *_Pbuf;

 if (_Count < 0)
  _Count = 0;
 else if (((size_t)(-1) / sizeof (_Ty) < _Count))
  _Xbad_alloc();
 for (_Pbuf = 0; 0 < _Count; _Count /= 2)
  if ((_Pbuf = (_Ty *)operator new(
   (size_t)_Count * sizeof (_Ty), nothrow)) != 0)
   break;

 return (pair<_Ty *, ptrdiff_t>(_Pbuf, _Count));
 }


template<class _Ty> inline
 void return_temporary_buffer(_Ty *_Pbuf)
 {
 operator delete(_Pbuf);
 }


template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_unchecked1(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _General_ptr_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  _Construct(_Unfancy(_Dest), *_First);
 } catch (...) {
 _Destroy_range(_Next, _Dest);
 throw;
 }

 return (_Dest);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_unchecked1(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_unchecked(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy_unchecked1(_First, _Last,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy1(_InIt _First, _InIt _Last,
  _FwdIt _Dest, input_iterator_tag, forward_iterator_tag)
 {
 return (_Rechecked(_Dest,
  _Uninitialized_copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy1(_InIt _First, _InIt _Last,
  _FwdIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) + ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Uninitialized_copy_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt uninitialized_copy(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "uninitialized_copy" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 _Debug_range_ptr(_First, _Last, _Dest, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 103);
 return (_Uninitialized_copy1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_FwdIt>()));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: uninitialized_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }



template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n_unchecked1(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _General_ptr_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
  _Construct(_Unfancy(_Dest), *_First);
 } catch (...) {
 _Destroy_range(_Next, _Dest);
 throw;
 }

 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n_unchecked1(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
 {
 if (0 < _Count)
  return (_Copy_memmove(_First, _First + _Count, _Dest));
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n_unchecked(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy_n_unchecked1(_First, _Count,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {

 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "uninitialized_copy_n" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Rechecked(_Dest,
  _Uninitialized_copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Unchecked_n(_Dest, _Count))));
 }


template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _FwdIt> inline
 _FwdIt uninitialized_copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _FwdIt _Dest)
 {

 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "uninitialized_copy_n" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 _Debug_array_size2(_First, _Count, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 184);
 return (_Rechecked(_Dest,
  _Uninitialized_copy_n_unchecked(_First, _Count, _Unchecked_n(_Dest, _Count))));
 }

template<class _InIt,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy_n(_InIt _First, _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 _Debug_array_size2(_Dest, _Count, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 196);
 return (_Uninitialized_copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Dest));
 }

template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 _Debug_array_size2(_First, _Count, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 208);
 _Debug_array_size2(_Dest, _Count, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 209);
 return (_Uninitialized_copy_n_unchecked(_First, _Count, _Dest));
 }



template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy_al_unchecked1(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _General_ptr_iterator_tag, _Any_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  _Al.construct(_Unfancy(_Dest), *_First);
 } catch (...) {
 _Destroy_range(_Next, _Dest, _Al);
 throw;
 }

 return (_Dest);
 }

template<class _Ty1,
 class _Ty2,
 class _Alloc> inline
 _Ty2 *_Uninitialized_copy_al_unchecked1(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
  _Wrap_alloc<_Alloc>&, _Really_trivial_ptr_iterator_tag, true_type)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy_al_unchecked(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al)
 {
 return (_Uninitialized_copy_al_unchecked1(_First, _Last, _Dest, _Al,
  _Ptr_copy_cat(_First, _Dest),
  _Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), decltype(*_First)>()));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al)
 {


 return (_Rechecked(_Dest,
  _Uninitialized_copy_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest), _Al)));
 }


template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move_al_unchecked1(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _General_ptr_iterator_tag, _Any_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  _Al.construct(_Unfancy(_Dest), ::std:: move(*_First));
 } catch (...) {
 _Destroy_range(_Next, _Dest, _Al);
 throw;
 }

 return (_Dest);
 }

template<class _Ty1,
 class _Ty2,
 class _Alloc> inline
 _Ty2 *_Uninitialized_move_al_unchecked1(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
  _Wrap_alloc<_Alloc>&, _Really_trivial_ptr_iterator_tag, true_type)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move_al_unchecked(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al)
 {
 typedef decltype(::std:: move(*_First)) _Src_type;
 return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,
  _Ptr_move_cat(_First, _Dest),
  _Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), _Src_type>()));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al)
 {


 return (_Rechecked(_Dest,
  _Uninitialized_move_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest), _Al)));
 }


template<class _FwdIt,
 class _Tval> inline
 void _Uninitialized_fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Tval& _Val, false_type)
 {
 _FwdIt _Next = _First;

 try {
 for (; _First != _Last; ++_First)
  _Construct(_Unfancy(_First), _Val);
 } catch (...) {
 _Destroy_range(_Next, _First);
 throw;
 }
 }

template<class _FwdIt,
 class _Tval> inline
 void _Uninitialized_fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Tval& _Val, true_type)
 {
 :: memset(_First, _Val, _Last - _First);
 }

template<class _FwdIt,
 class _Tval> inline
 void _Uninitialized_fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
 {
 _Uninitialized_fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));
 }

template<class _FwdIt,
 class _Tval> inline
 void uninitialized_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
 {
 _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 355);
 _Uninitialized_fill_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val);
 }


template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt _Uninitialized_fill_n_unchecked1(_FwdIt _First, _Diff _Count, const _Tval& _Val, false_type)
 {
 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)
  _Construct(_Unfancy(_First), _Val);
 } catch (...) {
 _Destroy_range(_Next, _First);
 throw;
 }

 return (_First);
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt _Uninitialized_fill_n_unchecked1(_FwdIt _First, _Diff _Count, const _Tval& _Val, true_type)
 {
 if (0 < _Count)
  {
  :: memset(_First, _Val, _Count);
  return (_First + _Count);
  }

 return (_First);
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt _Uninitialized_fill_n_unchecked(_FwdIt _First, _Diff _Count, const _Tval& _Val)
 {
 return (_Uninitialized_fill_n_unchecked1(_First, _Count, _Val, _Fill_memset_is_safe(_First, _Val)));
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt uninitialized_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval& _Val)
 {
 return (_Rechecked(_First,
  _Uninitialized_fill_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Val)));
 }


template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninit_alloc_fill_n1(_FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt> * _Pval,
  _Wrap_alloc<_Alloc>& _Al, false_type)
 {
 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)
  _Al.construct(_Unfancy(_First), *_Pval);
 } catch (...) {
 _Destroy_range(_Next, _First, _Al);
 throw;
 }
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninit_alloc_fill_n1(_FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt> * _Pval,
  _Wrap_alloc<_Alloc>&, true_type)
 {
 :: memset(_First, *_Pval, _Count);
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_fill_n(_FwdIt _First, _Diff _Count,
  const _Iter_value_t<_FwdIt> * _Pval, _Wrap_alloc<_Alloc>& _Al)
 {
 _Uninit_alloc_fill_n1(_First, _Count, _Pval, _Al,
  typename conjunction<decltype(_Fill_memset_is_safe(_First, *_Pval)),
   _Uses_default_construct<_Alloc, decltype(_Unfancy(_First)), decltype(*_Pval)>>::type());
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_default_fill_n1(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>& _Al, false_type)
 {
 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)
  _Al.construct(_Unfancy(_First));
 } catch (...) {
 _Destroy_range(_Next, _First, _Al);
 throw;
 }
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_default_fill_n1(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>&, true_type)
 {
 :: memset(_First, 0, _Count * sizeof(_Iter_value_t<_FwdIt>));
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_default_fill_n(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>& _Al)
 {
 typedef _Iter_value_t<_FwdIt> _Ty;
 _Uninitialized_default_fill_n1(_First, _Count, _Al,
  typename conjunction<
   is_pointer<_FwdIt>,
   is_scalar<_Ty>,
   negation<is_volatile<_Ty>>,
   negation<is_member_pointer<_Ty>>,
   _Uses_default_construct<_Alloc, decltype(_Unfancy(_First))>>::type());
 }


template<class _OutIt,
 class _Ty>
 class raw_storage_iterator
  : public _Outit
 {
public:
 explicit raw_storage_iterator(_OutIt _First)
  : _Next(_First)
  {
  }

 raw_storage_iterator& operator*()
  {
  return (*this);
  }

 raw_storage_iterator& operator=(const _Ty& _Val)
  {
  _Construct(_Unfancy(_Next), _Val);
  return (*this);
  }

 raw_storage_iterator& operator=(_Ty&& _Val)
  {
  _Construct(_Unfancy(_Next), ::std:: move(_Val));
  return (*this);
  }

 raw_storage_iterator& operator++()
  {
  ++_Next;
  return (*this);
  }

 raw_storage_iterator operator++(int)
  {
  raw_storage_iterator _Ans = *this;
  ++_Next;
  return (_Ans);
  }

 _OutIt base() const
  {
  return (_Next);
  }

private:
 _OutIt _Next;
 };


template<class _Ty>
 class _Temp_iterator
  : public _Outit
 {
public:
 typedef _Ty *_Pty;

 _Temp_iterator(ptrdiff_t _Count = 0)
  {
  _Buf._Begin = 0;
  _Buf._Current = 0;
  _Buf._Hiwater = 0;
  _Buf._Size = _Count;
  _Pbuf = &_Buf;
  }

 _Temp_iterator(const _Temp_iterator& _Right)
  {
  _Buf._Begin = 0;
  _Buf._Current = 0;
  _Buf._Hiwater = 0;
  _Buf._Size = 0;
  *this = _Right;
  }

 ~_Temp_iterator() noexcept
  {
  if (_Buf._Begin != 0)
   {
   for (_Pty _Next = _Buf._Begin;
    _Next != _Buf._Hiwater; ++_Next)
    _Destroy(_Next);
   ::std:: return_temporary_buffer(_Buf._Begin);
   }
  }

 _Temp_iterator& operator=(const _Temp_iterator& _Right)
  {
  _Pbuf = _Right._Pbuf;
  return (*this);
  }

 _Temp_iterator& operator=(const _Ty& _Val)
  {
  if (_Pbuf->_Current < _Pbuf->_Hiwater)
   *_Pbuf->_Current++ = _Val;
  else
   {
   _Pty _Ptr = _Pbuf->_Current;
   _Construct(_Ptr, _Val);
   _Pbuf->_Hiwater = ++_Pbuf->_Current;
   }

  return (*this);
  }

 _Temp_iterator& operator=(_Ty&& _Val)
  {
  if (_Pbuf->_Current < _Pbuf->_Hiwater)
   *_Pbuf->_Current++ =
    ::std:: forward<_Ty>(_Val);
  else
   {
   _Pty _Ptr = _Pbuf->_Current;
   _Construct(_Ptr, ::std:: forward<_Ty>(_Val));
   _Pbuf->_Hiwater = ++_Pbuf->_Current;
   }

  return (*this);
  }

 _Temp_iterator& operator*()
  {
  return (*this);
  }

 _Temp_iterator& operator++()
  {
  return (*this);
  }

 _Temp_iterator& operator++(int)
  {
  return (*this);
  }

 _Temp_iterator& _Init()
  {
  _Pbuf->_Current = _Pbuf->_Begin;
  return (*this);
  }

 _Pty _First() const
  {
  return (_Pbuf->_Begin);
  }

 _Pty _Last() const
  {
  return (_Pbuf->_Current);
  }

 ptrdiff_t _Maxlen()
  {
  if (_Pbuf->_Begin == 0 && 0 < _Pbuf->_Size)
   {
   pair<_Pty, ptrdiff_t> _Pair =

    ::std:: get_temporary_buffer<_Ty>(_Pbuf->_Size);

   _Pbuf->_Begin = _Pair.first;
   _Pbuf->_Current = _Pair.first;
   _Pbuf->_Hiwater = _Pair.first;
   _Pbuf->_Size = _Pair.second;
   }

  return (_Pbuf->_Size);
  }

private:
 struct _Bufpar
  {
  _Pty _Begin;
  _Pty _Current;
  _Pty _Hiwater;
  ptrdiff_t _Size;
  };
 _Bufpar _Buf;
 _Bufpar *_Pbuf;
 };



template<class _Ty>
 class auto_ptr;

template<class _Ty>
 struct auto_ptr_ref
  {
 explicit auto_ptr_ref(_Ty *_Right)
  : _Ref(_Right)
  {
  }

 _Ty *_Ref;
 };

template<class _Ty>
 class auto_ptr
  {
public:
 typedef auto_ptr<_Ty> _Myt;
 typedef _Ty element_type;

 explicit auto_ptr(_Ty *_Ptr = 0) noexcept
  : _Myptr(_Ptr)
  {
  }

 auto_ptr(_Myt& _Right) noexcept
  : _Myptr(_Right.release())
  {
  }

 auto_ptr(auto_ptr_ref<_Ty> _Right) noexcept
  {
  _Ty *_Ptr = _Right._Ref;
  _Right._Ref = 0;
  _Myptr = _Ptr;
  }

 template<class _Other>
  operator auto_ptr<_Other>() noexcept
  {
  return (auto_ptr<_Other>(*this));
  }

 template<class _Other>
  operator auto_ptr_ref<_Other>() noexcept
  {
  _Other *_Cvtptr = _Myptr;
  auto_ptr_ref<_Other> _Ans(_Cvtptr);
  _Myptr = 0;
  return (_Ans);
  }

 template<class _Other>
  _Myt& operator=(auto_ptr<_Other>& _Right) noexcept
  {
  reset(_Right.release());
  return (*this);
  }

 template<class _Other>
  auto_ptr(auto_ptr<_Other>& _Right) noexcept
  : _Myptr(_Right.release())
  {
  }

 _Myt& operator=(_Myt& _Right) noexcept
  {
  reset(_Right.release());
  return (*this);
  }

 _Myt& operator=(auto_ptr_ref<_Ty> _Right) noexcept
  {
  _Ty *_Ptr = _Right._Ref;
  _Right._Ref = 0;
  reset(_Ptr);
  return (*this);
  }

 ~auto_ptr() noexcept
  {
  delete _Myptr;
  }

 _Ty& operator*() const noexcept
  {

  if (_Myptr == 0)
   _Debug_message(L"auto_ptr not dereferencable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 764);


  return (*get());
  }

 _Ty *operator->() const noexcept
  {

  if (_Myptr == 0)
   _Debug_message(L"auto_ptr not dereferencable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 774);


  return (get());
  }

 _Ty *get() const noexcept
  {
  return (_Myptr);
  }

 _Ty *release() noexcept
  {
  _Ty *_Tmp = _Myptr;
  _Myptr = 0;
  return (_Tmp);
  }

 void reset(_Ty *_Ptr = 0)
  {
  if (_Ptr != _Myptr)
   delete _Myptr;
  _Myptr = _Ptr;
  }

private:
 _Ty *_Myptr;
 };

}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127)
namespace std {

template<class _Mytree,
 class _Base = _Iterator_base0>
 class _Tree_unchecked_const_iterator
  : public _Iterator012<bidirectional_iterator_tag,
   typename _Mytree::value_type,
   typename _Mytree::difference_type,
   typename _Mytree::const_pointer,
   typename _Mytree::const_reference,
   _Base>
 {
public:
 typedef _Tree_unchecked_const_iterator<_Mytree, _Base> _Myiter;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;
 typedef typename _Mytree::const_pointer pointer;
 typedef typename _Mytree::const_reference reference;

 _Tree_unchecked_const_iterator()
  : _Ptr()
  {
  }

 _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Ptr(_Pnode)
  {
  this->_Adopt(_Plist);
  }

 reference operator*() const
  {
  return (_Mytree::_Myval(_Ptr));
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  if (_Mytree::_Isnil(_Ptr))
   ;
  else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
   _Ptr = _Mytree::_Min(
    _Mytree::_Right(_Ptr));
  else
   {
   _Nodeptr _Pnode;
   while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
    && _Ptr == _Mytree::_Right(_Pnode))
    _Ptr = _Pnode;
   _Ptr = _Pnode;
   }
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  if (_Mytree::_Isnil(_Ptr))
   _Ptr = _Mytree::_Right(_Ptr);
  else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
   _Ptr = _Mytree::_Max(
    _Mytree::_Left(_Ptr));
  else
   {
   _Nodeptr _Pnode;
   while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
    && _Ptr == _Mytree::_Left(_Pnode))
    _Ptr = _Pnode;
   if (_Mytree::_Isnil(_Ptr))
    ;
   else
    _Ptr = _Pnode;
   }
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _Myiter& _Right) const
  {
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 _Nodeptr _Mynode() const
  {
  return (_Ptr);
  }

 _Nodeptr _Ptr;
 };


template<class _Mytree>
 class _Tree_unchecked_iterator
  : public _Tree_unchecked_const_iterator<_Mytree>
 {
public:
 typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
 typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;
 typedef typename _Mytree::pointer pointer;
 typedef typename _Mytree::reference reference;

 _Tree_unchecked_iterator()
  {
  }

 _Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };


template<class _Mytree>
 class _Tree_const_iterator
  : public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
 {
public:
 typedef _Tree_const_iterator<_Mytree> _Myiter;
 typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;
 typedef typename _Mytree::const_pointer pointer;
 typedef typename _Mytree::const_reference reference;

 _Tree_const_iterator()
  : _Mybase()
  {
  }

 _Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right._Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
  }

 reference operator*() const
  {

  const auto _Mycont = static_cast<const _Mytree *>(this->_Getcont());
  if (_Mycont == 0
   || this->_Ptr == nullptr_t{}
   || this->_Ptr == _Mycont->_Myhead)
   {
   _Debug_message(L"map/set iterator not dereferencable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 238);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 239, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 239, 0); };
   }
# 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree" 3
  return (_Mytree::_Myval(this->_Ptr));
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == nullptr_t{}
   || _Mytree::_Isnil(this->_Ptr))
   {
   _Debug_message(L"map/set iterator not incrementable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 264);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 265, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 265, 0); };
   }






  ++static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == nullptr_t{})
   {
   _Debug_message(L"map/set iterator not decrementable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 290);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 291, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 291, 0); };
   }

  _Nodeptr _Ptrsav = this->_Ptr;
  --static_cast<_Mybase&>(*this);
  if (_Ptrsav == this->_Ptr)
   {
   _Debug_message(L"map/set iterator not decrementable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 298);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 299, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 299, 0); };
   }
# 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree" 3
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _Myiter& _Right) const
  {

  if (this->_Getcont() != _Right._Getcont())
   {
   _Debug_message(L"map/set iterators incompatible", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 328);
   { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 329, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 329, 0); };
   }





  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }
 };

template<class _Mytree> inline
 typename _Tree_const_iterator<_Mytree>::_Unchecked_type
  _Unchecked(_Tree_const_iterator<_Mytree> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mytree> inline
 _Tree_const_iterator<_Mytree>&
  _Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
   typename _Tree_const_iterator<_Mytree>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }


template<class _Mytree>
 class _Tree_iterator
  : public _Tree_const_iterator<_Mytree>
 {
public:
 typedef _Tree_iterator<_Mytree> _Myiter;
 typedef _Tree_const_iterator<_Mytree> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;

 typedef typename _Mytree::pointer pointer;
 typedef typename _Mytree::reference reference;

 _Tree_iterator()
  {
  }

 _Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right._Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };

template<class _Mytree> inline
 typename _Tree_iterator<_Mytree>::_Unchecked_type
  _Unchecked(_Tree_iterator<_Mytree> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mytree> inline
 _Tree_iterator<_Mytree>&
  _Rechecked(_Tree_iterator<_Mytree>& _Iter,
   typename _Tree_iterator<_Mytree>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference,
 class _Nodeptr_type>
 struct _Tree_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 typedef _Nodeptr_type _Nodeptr;
 };

template<class _Value_type,
 class _Voidptr>
 struct _Tree_node
  {
  _Voidptr _Left;
  _Voidptr _Parent;
  _Voidptr _Right;
  char _Color;
  char _Isnil;
  _Value_type _Myval;

 private:
  _Tree_node& operator=(const _Tree_node&);
  };

template<class _Value_type>
 struct _Tree_node<_Value_type, void *>
  {
  typedef _Tree_node<_Value_type, void *> *_Nodeptr;
  _Nodeptr _Left;
  _Nodeptr _Parent;
  _Nodeptr _Right;
  char _Color;
  char _Isnil;
  _Value_type _Myval;

 private:
  _Tree_node& operator=(const _Tree_node&);
  };

template<class _Ty>
 struct _Tree_simple_types
  : public _Simple_types<_Ty>
 {
 typedef _Tree_node<_Ty, void *> _Node;
 typedef _Node *_Nodeptr;
 };

template<class _Ty,
 class _Alloc0>
 struct _Tree_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _Tree_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;

 typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
  _Voidptr;
 typedef _Tree_node<typename _Alty::value_type,
  _Voidptr> _Node;

 typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
 typedef typename _Alnod_type::pointer _Nodeptr;
 typedef _Nodeptr& _Nodepref;

 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Tree_simple_types<typename _Alty::value_type>,
  _Tree_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference,
   _Nodeptr> >::type
  _Val_types;
 };


template<class _Val_types>
 class _Tree_val
  : public _Container_base
 {
public:
 typedef _Tree_val<_Val_types> _Myt;

 typedef typename _Val_types::_Nodeptr _Nodeptr;
 typedef _Nodeptr& _Nodepref;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Tree_const_iterator<_Myt> const_iterator;
 typedef _Tree_iterator<_Myt> iterator;

 _Tree_val()
  : _Myhead(),
  _Mysize(0)
  {
  }

 enum _Redbl
  {
  _Red, _Black};

 static char& _Color(_Nodeptr _Pnode)
  {
  return ((char&)_Pnode->_Color);
  }

 static char& _Isnil(_Nodeptr _Pnode)
  {
  return ((char&)_Pnode->_Isnil);
  }

 static _Nodepref _Left(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Left);
  }

 static _Nodepref _Parent(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Parent);
  }

 static _Nodepref _Right(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Right);
  }

 static reference _Myval(_Nodeptr _Pnode)
  {
  return ((reference)_Pnode->_Myval);
  }

 static _Nodeptr _Max(_Nodeptr _Pnode)
  {
  while (!_Isnil(_Right(_Pnode)))
   _Pnode = _Right(_Pnode);
  return (_Pnode);
  }

 static _Nodeptr _Min(_Nodeptr _Pnode)
  {
  while (!_Isnil(_Left(_Pnode)))
   _Pnode = _Left(_Pnode);
  return (_Pnode);
  }

 _Nodeptr _Myhead;
 size_type _Mysize;
 };


template<class _Traits>
 class _Tree_comp_alloc
 {
public:
 typedef _Tree_comp_alloc<_Traits> _Myt;

 typedef typename _Traits::allocator_type allocator_type;
 typedef typename _Traits::key_compare key_compare;

 typedef _Tree_base_types<typename _Traits::value_type,
  allocator_type> _Alloc_types;

 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alnod_type _Alty;
 typedef typename _Alloc_types::_Node _Node;
 typedef typename _Alloc_types::_Nodeptr _Nodeptr;
 typedef typename _Alloc_types::_Val_types _Val_types;

 typedef _Nodeptr& _Nodepref;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
 typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;

 enum _Redbl
  {
  _Red, _Black
  };

 static char& _Color(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Color(_Pnode));
  }

 static char& _Isnil(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Isnil(_Pnode));
  }

 static _Nodepref _Left(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Left(_Pnode));
  }

 static _Nodepref _Parent(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Parent(_Pnode));
  }

 static _Nodepref _Right(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Right(_Pnode));
  }

 static reference _Myval(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Myval(_Pnode));
  }

 static _Nodeptr _Max(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Max(_Pnode));
  }

 static _Nodeptr _Min(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Min(_Pnode));
  }

 _Tree_comp_alloc(const key_compare& _Parg)
  : _Mypair(_One_then_variadic_args_t(), _Parg,
   _Zero_then_variadic_args_t())
  {
  _Construct();
  }

 template<class _Any_alloc,
  class = enable_if_t<!is_same<decay_t<_Any_alloc>, _Myt>::value> >
  _Tree_comp_alloc(const key_compare& _Parg, _Any_alloc&& _Al)
  : _Mypair(_One_then_variadic_args_t(), _Parg,
   _One_then_variadic_args_t(),
   ::std:: forward<_Any_alloc>(_Al))
  {
  _Construct();
  }
# 740 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree" 3
 void _Construct()
  {
  _Myhead() = _Buyheadnode();
  try {
  _Alloc_proxy();
  } catch (...) {
  _Freeheadnode(_Myhead());
  throw;
  }
  }

 ~_Tree_comp_alloc() noexcept
  {
  _Freeheadnode(_Myhead());
  _Free_proxy();
  }

 void _Copy_alloc(const _Alty& _Al)
  {
  _Free_proxy();
  _Pocca(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Move_alloc(_Alty& _Al)
  {
  _Free_proxy();
  _Pocma(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Myproxy() = _Unfancy(_Alproxy.allocate(1));
  _Alproxy.construct(_Myproxy(), _Container_proxy());
  _Myproxy()->_Mycont = &_Get_data();
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Orphan_all();
  _Alproxy.destroy(_Myproxy());
  _Alproxy.deallocate(_Alproxy.address(*_Myproxy()), 1);
  _Myproxy() = 0;
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Get_data()._Getpfirst());
  }

 _Container_proxy * & _Myproxy() noexcept
  {
  return (_Get_data()._Myproxy);
  }

 _Container_proxy * const & _Myproxy() const noexcept
  {
  return (_Get_data()._Myproxy);
  }


 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_Myt& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Nodeptr _Buyheadnode()
  {
  _Nodeptr _Pnode = _Getal().allocate(1);

  try {
  _Getal().construct(
   ::std:: addressof(_Left(_Pnode)), _Pnode);
  _Getal().construct(
   ::std:: addressof(_Parent(_Pnode)), _Pnode);
  _Getal().construct(
   ::std:: addressof(_Right(_Pnode)), _Pnode);
  } catch (...) {
  _Getal().deallocate(_Pnode, 1);
  throw;
  }

  _Color(_Pnode) = _Black;
  _Isnil(_Pnode) = true;
  return (_Pnode);
  }

 void _Freeheadnode(_Nodeptr _Pnode)
  {
  _Getal().destroy(
   ::std:: addressof(_Left(_Pnode)));
  _Getal().destroy(
   ::std:: addressof(_Parent(_Pnode)));
  _Getal().destroy(
   ::std:: addressof(_Right(_Pnode)));
  _Getal().deallocate(_Pnode, 1);
  }

 _Nodeptr _Buynode0()
  {
  _Nodeptr _Pnode = _Getal().allocate(1);

  try {
  _Getal().construct(
   ::std:: addressof(_Left(_Pnode)), _Myhead());
  _Getal().construct(
   ::std:: addressof(_Parent(_Pnode)), _Myhead());
  _Getal().construct(
   ::std:: addressof(_Right(_Pnode)), _Myhead());
  } catch (...) {
  _Getal().deallocate(_Pnode, 1);
  throw;
  }

  return (_Pnode);
  }

 void _Freenode0(_Nodeptr _Pnode)
  {
  _Getal().destroy(
   ::std:: addressof(_Left(_Pnode)));
  _Getal().destroy(
   ::std:: addressof(_Parent(_Pnode)));
  _Getal().destroy(
   ::std:: addressof(_Right(_Pnode)));
  _Getal().deallocate(_Pnode, 1);
  }

 template<class... _Valty>
  _Nodeptr _Buynode(_Valty&&... _Val)
  {
  _Nodeptr _Pnode = _Buynode0();

  this->_Color(_Pnode) = _Red;
  this->_Isnil(_Pnode) = false;

  try {
  this->_Getal().construct(
   ::std:: addressof(_Myval(_Pnode)),
    ::std:: forward<_Valty>(_Val)...);
  } catch (...) {
  _Freenode0(_Pnode);
  throw;
  }

  return (_Pnode);
  }

 key_compare& _Getcomp() noexcept
  {
  return (_Mypair._Get_first());
  }

 const key_compare& _Getcomp() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _Alty& _Getal() noexcept
  {
  return (_Mypair._Get_second()._Get_first());
  }

 const _Alty& _Getal() const noexcept
  {
  return (_Mypair._Get_second()._Get_first());
  }

 _Tree_val<_Val_types>& _Get_data() noexcept
  {
  return (_Mypair._Get_second()._Get_second());
  }

 const _Tree_val<_Val_types>& _Get_data() const noexcept
  {
  return (_Mypair._Get_second()._Get_second());
  }

 _Nodeptr& _Myhead() noexcept
  {
  return (_Get_data()._Myhead);
  }

 const _Nodeptr& _Myhead() const noexcept
  {
  return (_Get_data()._Myhead);
  }

 size_type& _Mysize() noexcept
  {
  return (_Get_data()._Mysize);
  }

 const size_type& _Mysize() const noexcept
  {
  return (_Get_data()._Mysize);
  }

private:
 _Compressed_pair<key_compare,
  _Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
 };


template<class _Traits>
 class _Tree
  : public _Tree_comp_alloc<_Traits>
 {
public:
 typedef _Tree<_Traits> _Myt;
 typedef _Tree_comp_alloc<_Traits> _Mybase;

 typedef typename _Traits::key_type key_type;
 typedef typename _Traits::value_compare value_compare;
 enum
  {
  _Multi = _Traits::_Multi};

 typedef typename _Mybase::_Node _Node;
 typedef typename _Mybase::_Nodeptr _Nodeptr;
 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::key_compare key_compare;
 typedef typename _Mybase::allocator_type allocator_type;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;

 typedef typename _Mybase::const_iterator const_iterator;
 typedef typename _If<is_same<key_type, value_type>::value,
  typename _Mybase::const_iterator,
  typename _Mybase::iterator>::type iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 typedef pair<iterator, bool> _Pairib;
 typedef pair<iterator, iterator> _Pairii;
 typedef pair<const_iterator, const_iterator> _Paircc;

 struct _Copy_tag
  {
  };
 struct _Move_tag
  {
  };

 _Tree(const key_compare& _Parg)
  : _Mybase(_Parg)
  {
  }

 _Tree(const key_compare& _Parg,
  const allocator_type& _Al)
  : _Mybase(_Parg, _Al)
  {
  }

 template<class _Any_alloc>
  _Tree(const _Myt& _Right, _Any_alloc&& _Al)
  : _Mybase(_Right.key_comp(), ::std:: forward<_Any_alloc>(_Al))
  {
  try {
  _Copy(_Right, _Copy_tag());
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 _Tree(_Myt&& _Right)
  : _Mybase(_Right.key_comp(), ::std:: move(_Right._Getal()))
  {
  _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  }

 _Tree(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(_Right.key_comp(), _Al)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   clear();
   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Move_alloc(_Right._Getal());

   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right, true_type)
  {
  this->_Swap_all(_Right);
  _Swap_adl(this->_Getcomp(), _Right._Getcomp());
  _Swap_adl(this->_Myhead(), _Right._Myhead());
  ::std:: swap(this->_Mysize(), _Right._Mysize());
  }

 void _Assign_rv(_Myt&& _Right, false_type)
  {
  if (get_allocator() == _Right.get_allocator())
   _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  else
   _Copy(_Right, _Move_tag());
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right),
   typename _Alty::propagate_on_container_move_assignment());
  }

 template<class... _Valty>
  _Pairib emplace(_Valty&&... _Val)
  {
  _Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val)...);
  return (_Insert_nohint(false,
   this->_Myval(_Newnode), _Newnode));
  }

 template<class... _Valty>
  iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
  {
  _Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val)...);
  return (_Insert_hint(_Where,
   this->_Myval(_Newnode), _Newnode));
  }

 ~_Tree() noexcept
  {
  _Tidy();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   clear();
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    this->_Copy_alloc(_Right._Getal());

   this->_Getcomp() = _Right._Getcomp();
   _Copy(_Right, _Copy_tag());
   }
  return (*this);
  }

 iterator begin() noexcept
  {
  return (iterator(_Lmost(), &this->_Get_data()));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(_Lmost(), &this->_Get_data()));
  }

 iterator end() noexcept
  {
  return (iterator(this->_Myhead(), &this->_Get_data()));
  }

 const_iterator end() const noexcept
  {
  return (const_iterator(this->_Myhead(), &this->_Get_data()));
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 size_type size() const noexcept
  {
  return (this->_Mysize());
  }

 size_type max_size() const noexcept
  {
  return (this->_Getal().max_size());
  }

 bool empty() const noexcept
  {
  return (size() == 0);
  }

 allocator_type get_allocator() const noexcept
  {
  allocator_type _Ret(this->_Getal());
  return (_Ret);
  }

 key_compare key_comp() const
  {
  return (this->_Getcomp());
  }

 value_compare value_comp() const
  {
  return (value_compare(key_comp()));
  }

 template<bool _Multi2 = _Multi,
  enable_if_t<!_Multi2, int> = 0>
  _Pairib insert(const value_type& _Val)
  {
  return (_Insert_nohint(false,
   _Val, _Nil()));
  }

 template<bool _Multi2 = _Multi,
  enable_if_t<_Multi2, int> = 0>
  iterator insert(const value_type& _Val)
  {
  return (_Insert_nohint(false,
   _Val, _Nil()).first);
  }

 template<bool _Multi2 = _Multi,
  enable_if_t<!_Multi2, int> = 0>
  _Pairib insert(value_type&& _Val)
  {
  return (_Insert_nohint(false,
   ::std:: forward<value_type>(_Val), _Nil()));
  }

 template<bool _Multi2 = _Multi,
  enable_if_t<_Multi2, int> = 0>
  iterator insert(value_type&& _Val)
  {
  return (_Insert_nohint(false,
   ::std:: forward<value_type>(_Val), _Nil()).first);
  }

 iterator insert(const_iterator _Where,
  const value_type& _Val)
  {
  return (_Insert_hint(_Where,
   _Val, _Nil()));
  }

 iterator insert(const_iterator _Where, value_type&& _Val)
  {
  return (_Insert_hint(_Where,
   ::std:: forward<value_type>(_Val), _Nil()));
  }

 template<class _Iter>
  void insert(_Iter _First, _Iter _Last)
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1248);
  for (; _First != _Last; ++_First)
   emplace_hint(end(), *_First);
  }

 void insert(::std:: initializer_list<value_type> _Ilist)
  {
  insert(_Ilist.begin(), _Ilist.end());
  }

 iterator erase(const_iterator _Where)
  {

  if (_Where._Getcont() != &this->_Get_data()
   || this->_Isnil(_Where._Mynode()))
   _Debug_message(L"map/set erase iterator outside range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1263);
  _Nodeptr _Erasednode = _Where._Mynode();
  ++_Where;
  _Orphan_ptr(_Erasednode);






  _Nodeptr _Fixnode;
  _Nodeptr _Fixnodeparent;
  _Nodeptr _Pnode = _Erasednode;

  if (this->_Isnil(this->_Left(_Pnode)))
   _Fixnode = this->_Right(_Pnode);
  else if (this->_Isnil(this->_Right(_Pnode)))
   _Fixnode = this->_Left(_Pnode);
  else
   {
   _Pnode = _Where._Mynode();
   _Fixnode = this->_Right(_Pnode);
   }

  if (_Pnode == _Erasednode)
   {
   _Fixnodeparent = this->_Parent(_Erasednode);
   if (!this->_Isnil(_Fixnode))
    this->_Parent(_Fixnode) = _Fixnodeparent;

   if (_Root() == _Erasednode)
    _Root() = _Fixnode;
   else if (this->_Left(_Fixnodeparent) == _Erasednode)
    this->_Left(_Fixnodeparent) = _Fixnode;
   else
    this->_Right(_Fixnodeparent) =
     _Fixnode;

   if (_Lmost() == _Erasednode)
    _Lmost() = this->_Isnil(_Fixnode)
     ? _Fixnodeparent
     : this->_Min(_Fixnode);

   if (_Rmost() == _Erasednode)
    _Rmost() = this->_Isnil(_Fixnode)
     ? _Fixnodeparent
     : this->_Max(_Fixnode);
   }
  else
   {
   this->_Parent(this->_Left(_Erasednode)) =
    _Pnode;
   this->_Left(_Pnode) =
    this->_Left(_Erasednode);

   if (_Pnode == this->_Right(_Erasednode))
    _Fixnodeparent = _Pnode;
   else
    {
    _Fixnodeparent =
     this->_Parent(_Pnode);
    if (!this->_Isnil(_Fixnode))
     this->_Parent(_Fixnode) = _Fixnodeparent;
    this->_Left(_Fixnodeparent) = _Fixnode;
    this->_Right(_Pnode) =
     this->_Right(_Erasednode);
    this->_Parent(this->_Right(_Erasednode)) =
     _Pnode;
    }

   if (_Root() == _Erasednode)
    _Root() = _Pnode;
   else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
    this->_Left(this->_Parent(_Erasednode)) =
     _Pnode;
   else
    this->_Right(this->_Parent(_Erasednode)) =
     _Pnode;

   this->_Parent(_Pnode) =
    this->_Parent(_Erasednode);
   ::std:: swap(this->_Color(_Pnode),
    this->_Color(_Erasednode));
   }

  if (this->_Color(_Erasednode) == this->_Black)
   {
   for (; _Fixnode != _Root()
    && this->_Color(_Fixnode) == this->_Black;
    _Fixnodeparent = this->_Parent(_Fixnode))
    if (_Fixnode == this->_Left(_Fixnodeparent))
     {
     _Pnode = this->_Right(_Fixnodeparent);
     if (this->_Color(_Pnode) == this->_Red)
      {
      this->_Color(_Pnode) = this->_Black;
      this->_Color(_Fixnodeparent) = this->_Red;
      _Lrotate(_Fixnodeparent);
      _Pnode = this->_Right(_Fixnodeparent);
      }

     if (this->_Isnil(_Pnode))
      _Fixnode = _Fixnodeparent;
     else if (this->_Color(this->_Left(_Pnode)) == this->_Black
      && this->_Color(this->_Right(_Pnode)) == this->_Black)
      {
      this->_Color(_Pnode) = this->_Red;
      _Fixnode = _Fixnodeparent;
      }
     else
      {
      if (this->_Color(this->_Right(_Pnode))
       == this->_Black)
       {
       this->_Color(this->_Left(_Pnode)) = this->_Black;
       this->_Color(_Pnode) = this->_Red;
       _Rrotate(_Pnode);
       _Pnode = this->_Right(_Fixnodeparent);
       }

      this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
      this->_Color(_Fixnodeparent) = this->_Black;
      this->_Color(this->_Right(_Pnode)) = this->_Black;
      _Lrotate(_Fixnodeparent);
      break;
      }
     }
    else
     {
     _Pnode = this->_Left(_Fixnodeparent);
     if (this->_Color(_Pnode) == this->_Red)
      {
      this->_Color(_Pnode) = this->_Black;
      this->_Color(_Fixnodeparent) = this->_Red;
      _Rrotate(_Fixnodeparent);
      _Pnode = this->_Left(_Fixnodeparent);
      }

     if (this->_Isnil(_Pnode))
      _Fixnode = _Fixnodeparent;
     else if (this->_Color(this->_Right(_Pnode)) ==
      this->_Black
      && this->_Color(this->_Left(_Pnode)) == this->_Black)
      {
      this->_Color(_Pnode) = this->_Red;
      _Fixnode = _Fixnodeparent;
      }
     else
      {
      if (this->_Color(this->_Left(_Pnode)) == this->_Black)
       {
       this->_Color(this->_Right(_Pnode)) = this->_Black;
       this->_Color(_Pnode) = this->_Red;
       _Lrotate(_Pnode);
       _Pnode = this->_Left(_Fixnodeparent);
       }

      this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
      this->_Color(_Fixnodeparent) = this->_Black;
      this->_Color(this->_Left(_Pnode)) = this->_Black;
      _Rrotate(_Fixnodeparent);
      break;
      }
     }

   this->_Color(_Fixnode) = this->_Black;
   }

  this->_Getal().destroy(
   ::std:: addressof(this->_Myval(_Erasednode)));

  this->_Getal().deallocate(_Erasednode, 1);

  if (0 < this->_Mysize())
   --this->_Mysize();

  return (iterator(_Where._Ptr,
   &this->_Get_data()));
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
  if (_First == begin() && _Last == end())
   {
   clear();
   return (begin());
   }
  else
   {
   while (_First != _Last)
    erase(_First++);
   return (iterator(_First._Ptr, &this->_Get_data()));
   }
  }

 size_type erase(const key_type& _Keyval)
  {
  _Pairii _Where = equal_range(_Keyval);
  size_type _Num = ::std:: distance(_Where.first, _Where.second);
  erase(_Where.first, _Where.second);
  return (_Num);
  }

 void clear() noexcept
  {

  this->_Orphan_ptr(nullptr_t{});


  _Erase(_Root());
  _Root() = this->_Myhead();
  _Lmost() = this->_Myhead();
  _Rmost() = this->_Myhead();
  this->_Mysize() = 0;
  }

 iterator find(const key_type& _Keyval)
  {
  iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Where._Mynode()), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1484)

     ? end() : _Where);
  }

 const_iterator find(const key_type& _Keyval) const
  {
  const_iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Where._Mynode()), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1493)

     ? end() : _Where);
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  iterator find(const _Other& _Keyval)
  {
  iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Where._Mynode()), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1505)

     ? end() : _Where);
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  const_iterator find(const _Other& _Keyval) const
  {
  const_iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Where._Mynode()), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1517)

     ? end() : _Where);
  }

 size_type count(const key_type& _Keyval) const
  {
  _Paircc _Ans = equal_range(_Keyval);
  return (::std:: distance(_Ans.first, _Ans.second));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  size_type count(const _Other& _Keyval) const
  {
  _Paircc _Ans = equal_range(_Keyval);
  return (::std:: distance(_Ans.first, _Ans.second));
  }

 iterator lower_bound(const key_type& _Keyval)
  {
  return (iterator(_Lbound(_Keyval), &this->_Get_data()));
  }

 const_iterator lower_bound(const key_type& _Keyval) const
  {
  return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  iterator lower_bound(const _Other& _Keyval)
  {
  return (iterator(_Lbound(_Keyval), &this->_Get_data()));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  const_iterator lower_bound(const _Other& _Keyval) const
  {
  return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
  }

 iterator upper_bound(const key_type& _Keyval)
  {
  return (iterator(_Ubound(_Keyval), &this->_Get_data()));
  }

 const_iterator upper_bound(const key_type& _Keyval) const
  {
  return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  iterator upper_bound(const _Other& _Keyval)
  {
  return (iterator(_Ubound(_Keyval), &this->_Get_data()));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  const_iterator upper_bound(const _Other& _Keyval) const
  {
  return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
  }

 _Pairii equal_range(const key_type& _Keyval)
  {
  return (_Eqrange(_Keyval));
  }

 _Paircc equal_range(const key_type& _Keyval) const
  {
  return (_Eqrange(_Keyval));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  _Pairii equal_range(const _Other& _Keyval)
  {
  return (_Eqrange(_Keyval));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  _Paircc equal_range(const _Other& _Keyval) const
  {
  return (_Eqrange(_Keyval));
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Pocs(this->_Getal(), _Right._Getal());
   this->_Swap_all(_Right);
   _Swap_adl(this->_Getcomp(), _Right._Getcomp());
   _Swap_adl(this->_Myhead(), _Right._Myhead());
   ::std:: swap(this->_Mysize(), _Right._Mysize());
   }
  }

protected:
 template<class _Valty>
  _Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
  {
  return (_Node);
  }

 template<class _Valty>
  _Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
  {
  return (this->_Buynode(::std:: forward<_Valty>(_Val)));
  }

 void _Destroy_if_not_nil(_Nodeptr _Newnode)
  {
  this->_Getal().destroy(
   ::std:: addressof(this->_Myval(_Newnode)));

  this->_Getal().deallocate(_Newnode, 1);
  }

 void _Destroy_if_not_nil(_Nil)
  {
  }

 template<class _Valty,
  class _Nodety>
  iterator _Insert_hint(const_iterator _Where,
   _Valty&& _Val, _Nodety _Newnode)
  {
  const_iterator _Next;
  bool _Leftish = false;

  try {


  if (_Where._Getcont() != &this->_Get_data())
   _Debug_message(L"map/set insert iterator outside range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1663);


  if (size() == 0)
   return (_Insert_at(true, this->_Myhead(),
    ::std:: forward<_Valty>(_Val), _Newnode));
  else if (this->_Multi)
   {
   if (_Where == begin())
    {
    if (!_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1674))

     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    _Leftish = true;
    }
   else if (_Where == end())
    {
    if (!_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Rmost()), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1682))

     return (_Insert_at(false, _Rmost(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (!_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1687)

    && !_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key((--(_Next = _Where))._Mynode()), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1690))


    {
    if (this->_Isnil(this->_Right(_Next._Mynode())))
     return (_Insert_at(false, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (!_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Where._Mynode()), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1700)

    && (++(_Next = _Where) == end()
     || !_Debug_lt_pred(this->_Getcomp(), this->_Key(_Next._Mynode()), this->_Kfn(_Val), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1703)))

    {
    if (this->_Isnil(this->_Right(_Where._Mynode())))
     return (_Insert_at(false, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else
    _Leftish = true;
   }
  else
   {
   if (_Where == begin())
    {
    if (_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Where._Mynode()), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1720))

     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (_Where == end())
    {
    if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Rmost()), this->_Kfn(_Val), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1727))

     return (_Insert_at(false, _Rmost(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Where._Mynode()), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1732)

    && _Debug_lt_pred(this->_Getcomp(), this->_Key((--(_Next = _Where))._Mynode()), this->_Kfn(_Val), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1735))


    {
    if (this->_Isnil(this->_Right(_Next._Mynode())))
     return (_Insert_at(false, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1745)

    && (++(_Next = _Where) == end()
     || _Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Next._Mynode()), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1748)))

    {
    if (this->_Isnil(this->_Right(_Where._Mynode())))
     return (_Insert_at(false, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   }
  } catch (...) {
  _Destroy_if_not_nil(_Newnode);
  throw;
  }

  return (_Insert_nohint(_Leftish,
   ::std:: forward<_Valty>(_Val), _Newnode).first);
  }

 template<class _Valty,
  class _Nodety>
  _Pairib _Insert_nohint(bool _Leftish,
   _Valty&& _Val, _Nodety _Newnode)
  {
  try {
  _Nodeptr _Trynode = _Root();
  _Nodeptr _Wherenode = this->_Myhead();
  bool _Addleft = true;

  while (!this->_Isnil(_Trynode))
   {
   _Wherenode = _Trynode;
   if (_Leftish)
    _Addleft = !_Debug_lt_pred(this->_Getcomp(), this->_Key(_Trynode), this->_Kfn(_Val), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1783);


   else
    _Addleft = _Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Trynode), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1787);


   _Trynode = _Addleft ? this->_Left(_Trynode)
    : this->_Right(_Trynode);
   }

  if (this->_Multi)
   return (_Pairib(_Insert_at(_Addleft, _Wherenode,
    ::std:: forward<_Valty>(_Val), _Newnode), true));
  else
   {
   iterator _Where = iterator(_Wherenode, &this->_Get_data());
   if (!_Addleft)
    ;
   else if (_Where == begin())
    return (_Pairib(_Insert_at(true, _Wherenode,
     ::std:: forward<_Valty>(_Val), _Newnode), true));
   else
    --_Where;

   if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1808))


    return (_Pairib(_Insert_at(_Addleft, _Wherenode,
     ::std:: forward<_Valty>(_Val), _Newnode), true));
   else
    {
    _Destroy_if_not_nil(_Newnode);
    return (_Pairib(_Where, false));
    }
   }
  } catch (...) {
  _Destroy_if_not_nil(_Newnode);
  throw;
  }
  }

 template<class _Valty,
  class _Nodety>
  iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
  _Valty&& _Val, _Nodety _Node)
  {
  if (max_size() - 1 <= this->_Mysize())
   {
   _Destroy_if_not_nil(_Node);
   _Xlength_error("map/set<T> too long");
   }
  _Nodeptr _Newnode = _Buynode_if_nil(_Node,
   ::std:: forward<_Valty>(_Val));

  ++this->_Mysize();
  _Newnode->_Parent = _Wherenode;

  if (_Wherenode == this->_Myhead())
   {
   _Root() = _Newnode;
   _Lmost() = _Newnode;
   _Rmost() = _Newnode;
   }
  else if (_Addleft)
   {
   this->_Left(_Wherenode) = _Newnode;
   if (_Wherenode == _Lmost())
    _Lmost() = _Newnode;
   }
  else
   {
   this->_Right(_Wherenode) = _Newnode;
   if (_Wherenode == _Rmost())
    _Rmost() = _Newnode;
   }

  for (_Nodeptr _Pnode = _Newnode;
   this->_Color(this->_Parent(_Pnode)) == this->_Red; )
   if (this->_Parent(_Pnode)
    == this->_Left(this->_Parent(this->_Parent(_Pnode))))
    {
    _Wherenode =
     this->_Right(this->_Parent(this->_Parent(_Pnode)));
    if (this->_Color(_Wherenode) == this->_Red)
     {
     this->_Color(this->_Parent(_Pnode)) = this->_Black;
     this->_Color(_Wherenode) = this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode)))
      = this->_Red;
     _Pnode = this->_Parent(this->_Parent(_Pnode));
     }
    else
     {
     if (_Pnode == this->_Right(this->_Parent(_Pnode)))
      {
      _Pnode = this->_Parent(_Pnode);
      _Lrotate(_Pnode);
      }
     this->_Color(this->_Parent(_Pnode)) =
      this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode))) =
      this->_Red;
     _Rrotate(this->_Parent(this->_Parent(_Pnode)));
     }
    }
   else
    {
    _Wherenode =
     this->_Left(this->_Parent(this->_Parent(_Pnode)));
    if (this->_Color(_Wherenode) == this->_Red)
     {
     this->_Color(this->_Parent(_Pnode)) = this->_Black;
     this->_Color(_Wherenode) = this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode))) =
      this->_Red;
     _Pnode = this->_Parent(this->_Parent(_Pnode));
     }
    else
     {
     if (_Pnode == this->_Left(this->_Parent(_Pnode)))
      {
      _Pnode = this->_Parent(_Pnode);
      _Rrotate(_Pnode);
      }
     this->_Color(this->_Parent(_Pnode)) =
      this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode))) =
      this->_Red;
     _Lrotate(this->_Parent(this->_Parent(_Pnode)));
     }
    }

  this->_Color(_Root()) = this->_Black;
  return (iterator(_Newnode, &this->_Get_data()));
  }

 template<class _Moveit>
  void _Copy(const _Myt& _Right, _Moveit _Movefl)
  {
  _Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
  this->_Mysize() = _Right.size();
  if (!this->_Isnil(_Root()))
   {
   _Lmost() = this->_Min(_Root());
   _Rmost() = this->_Max(_Root());
   }
  else
   {
   _Lmost() = this->_Myhead();
   _Rmost() = this->_Myhead();
   }
  }

 template<class _Ty,
  class _Is_set>
  _Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
  {
  return (this->_Buynode(_Val));
  }

 template<class _Ty>
  _Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
  {
  return (this->_Buynode(::std:: move(_Val)));
  }

 template<class _Ty>
  _Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
  {
  return (this->_Buynode(
   ::std:: move(const_cast<key_type&>(_Val.first)),
   ::std:: move(_Val.second)));
  }

 template<class _Moveit>
  _Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
   _Moveit _Movefl)
  {
  _Nodeptr _Newroot = this->_Myhead();

  if (!this->_Isnil(_Rootnode))
   {
   typename is_same<key_type, value_type>::type _Is_set;
   _Nodeptr _Pnode = _Copy_or_move(
    this->_Myval(_Rootnode), _Movefl, _Is_set);
   _Pnode->_Parent = _Wherenode;
   _Pnode->_Color = this->_Color(_Rootnode);
   if (this->_Isnil(_Newroot))
    _Newroot = _Pnode;

   try {
   this->_Left(_Pnode) =
    _Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
   this->_Right(_Pnode) =
    _Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
   } catch (...) {
   _Erase(_Newroot);
   throw;
   }
   }

  return (_Newroot);
  }

 template<class _Other>
  _Paircc _Eqrange(const _Other& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Lonode = this->_Myhead();
  _Nodeptr _Hinode = this->_Myhead();

  while (!this->_Isnil(_Pnode))
   if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Pnode), _Keyval, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1994))
    _Pnode = this->_Right(_Pnode);
   else
    {
    if (this->_Isnil(_Hinode)
      && _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Pnode), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 2000))

     _Hinode = _Pnode;
    _Lonode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }

  _Pnode = this->_Isnil(_Hinode) ? _Root()
   : this->_Left(_Hinode);
  while (!this->_Isnil(_Pnode))
   if (_Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Pnode), L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 2009))
    {
    _Hinode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }
   else
    _Pnode = this->_Right(_Pnode);

  const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
  const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
  return (_Paircc(_First, _Last));
  }

 template<class _Other>
  _Pairii _Eqrange(const _Other& _Keyval)
  {
  _Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
  iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
  iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
  return (_Pairii(_First, _Last));
  }

 void _Erase(_Nodeptr _Rootnode)
  {
  for (_Nodeptr _Pnode = _Rootnode;
   !this->_Isnil(_Pnode); _Rootnode = _Pnode)
   {
   _Erase(this->_Right(_Pnode));
   _Pnode = this->_Left(_Pnode);
   this->_Getal().destroy(
    ::std:: addressof(this->_Myval(_Rootnode)));

   this->_Getal().deallocate(_Rootnode, 1);
   }
  }

 bool _Compare(const key_type& _Left, const key_type& _Right) const
  {
  return (_Debug_lt_pred(this->_Getcomp(), _Left, _Right, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 2047));
  }

 template<class _Ty1,
  class _Ty2>
  bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
  {
  return (this->_Getcomp()(_Left, _Right));
  }

 template<class _Other>
  _Nodeptr _Lbound(const _Other& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Wherenode = this->_Myhead();

  while (!this->_Isnil(_Pnode))
   if (_Compare(this->_Key(_Pnode), _Keyval))
    _Pnode = this->_Right(_Pnode);
   else
    {
    _Wherenode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }

  return (_Wherenode);
  }

 _Nodeptr& _Lmost() const
  {
  return (this->_Left(this->_Myhead()));
  }

 void _Lrotate(_Nodeptr _Wherenode)
  {
  _Nodeptr _Pnode = this->_Right(_Wherenode);
  this->_Right(_Wherenode) = this->_Left(_Pnode);

  if (!this->_Isnil(this->_Left(_Pnode)))
   this->_Parent(this->_Left(_Pnode)) = _Wherenode;
  this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  if (_Wherenode == _Root())
   _Root() = _Pnode;
  else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
   this->_Left(this->_Parent(_Wherenode)) = _Pnode;
  else
   this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  this->_Left(_Pnode) = _Wherenode;
  this->_Parent(_Wherenode) = _Pnode;
  }

 _Nodeptr& _Rmost() const
  {
  return (this->_Right(this->_Myhead()));
  }

 _Nodeptr& _Root() const
  {
  return (this->_Parent(this->_Myhead()));
  }

 void _Rrotate(_Nodeptr _Wherenode)
  {
  _Nodeptr _Pnode = this->_Left(_Wherenode);
  this->_Left(_Wherenode) = this->_Right(_Pnode);

  if (!this->_Isnil(this->_Right(_Pnode)))
   this->_Parent(this->_Right(_Pnode)) = _Wherenode;
  this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  if (_Wherenode == _Root())
   _Root() = _Pnode;
  else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
   this->_Right(this->_Parent(_Wherenode)) = _Pnode;
  else
   this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  this->_Right(_Pnode) = _Wherenode;
  this->_Parent(_Wherenode) = _Pnode;
  }

 template<class _Other>
  _Nodeptr _Ubound(const _Other& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Wherenode = this->_Myhead();

  while (!this->_Isnil(_Pnode))
   if (_Compare(_Keyval, this->_Key(_Pnode)))
    {
    _Wherenode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }
   else
    _Pnode = this->_Right(_Pnode);

  return (_Wherenode);
  }


 void _Orphan_ptr(_Nodeptr _Ptr)
  {
  _Lockit _Lock(3);
  const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
  if (_Pnext != 0)
   while (*_Pnext != 0)
    if ((*_Pnext)->_Ptr == this->_Myhead()
     || _Ptr != nullptr_t{} && (*_Pnext)->_Ptr != _Ptr)
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
  }


 void _Tidy()
  {
  erase(begin(), end());
  }

 const key_type& _Kfn(const value_type& _Val) const
  {
  return (_Traits::_Kfn(_Val));
  }

 const key_type& _Key(_Nodeptr _Pnode) const
  {
  return ((const key_type&)this->_Kfn(this->_Myval(_Pnode)));
  }
 };


template<class _Traits> inline
 bool operator==(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Traits> inline
 bool operator!=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Traits> inline
 bool operator<(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Traits> inline
 bool operator>(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Traits> inline
 bool operator<=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Traits> inline
 bool operator>=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Left < _Right));
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\set" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {

template<class _Kty,
 class _Pr,
 class _Alloc,
 bool _Mfl>
 class _Tset_traits
 {
public:
 typedef _Kty key_type;
 typedef _Kty value_type;
 typedef _Pr key_compare;
 typedef _Alloc allocator_type;

 enum
  {
  _Multi = _Mfl};

 typedef key_compare value_compare;

 static const _Kty& _Kfn(const value_type& _Val)
  {
  return (_Val);
  }
 };


template<class _Kty,
 class _Pr = less<_Kty>,
 class _Alloc = allocator<_Kty> >
 class set
  : public _Tree<_Tset_traits<_Kty, _Pr, _Alloc, false> >
 {
public:
 typedef set<_Kty, _Pr, _Alloc> _Myt;
 typedef _Tree<_Tset_traits<_Kty, _Pr, _Alloc, false> > _Mybase;
 typedef _Kty key_type;
 typedef _Pr key_compare;
 typedef typename _Mybase::value_compare value_compare;
 typedef typename _Mybase::allocator_type allocator_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;
 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;
 typedef typename _Mybase::reverse_iterator reverse_iterator;
 typedef typename _Mybase::const_reverse_iterator
  const_reverse_iterator;
 typedef typename _Mybase::value_type value_type;

 typedef typename _Mybase::_Alty _Alty;

 set()
  : _Mybase(key_compare())
  {
  }

 explicit set(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 set(const _Myt& _Right)
  : _Mybase(_Right,
   _Right._Getal().select_on_container_copy_construction())
  {
  }

 set(const _Myt& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit set(const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  }

 set(const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  }

 template<class _Iter>
  set(_Iter _First, _Iter _Last)
  : _Mybase(key_compare())
  {
  this->insert(_First, _Last);
  }

 template<class _Iter>
  set(_Iter _First, _Iter _Last,
   const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  this->insert(_First, _Last);
  }

 template<class _Iter>
  set(_Iter _First, _Iter _Last,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  this->insert(_First, _Last);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 set(_Myt&& _Right)
  : _Mybase(::std:: move(_Right))
  {
  }

 set(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(_Alty::is_always_equal::value && is_nothrow_move_assignable<_Pr>::value)

  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 void swap(_Myt& _Right)
  noexcept(_Alty::is_always_equal::value && _Is_nothrow_swappable<_Pr>::value)

  {
  _Mybase::swap(_Right);
  }

 set(::std:: initializer_list<value_type> _Ilist)
  : _Mybase(key_compare())
  {
  this->insert(_Ilist);
  }

 set(::std:: initializer_list<value_type> _Ilist,
   const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  this->insert(_Ilist);
  }

 set(::std:: initializer_list<value_type> _Ilist,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  this->insert(_Ilist);
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  this->clear();
  this->insert(_Ilist);
  return (*this);
  }
 };

template<class _Kty,
 class _Pr,
 class _Alloc> inline
 void swap(set<_Kty, _Pr, _Alloc>& _Left,
  set<_Kty, _Pr, _Alloc>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }


template<class _Kty,
 class _Pr = less<_Kty>,
 class _Alloc = allocator<_Kty> >
 class multiset
  : public _Tree<_Tset_traits<_Kty, _Pr, _Alloc, true> >
 {
public:
 typedef multiset<_Kty, _Pr, _Alloc> _Myt;
 typedef _Tree<_Tset_traits<_Kty, _Pr, _Alloc, true> > _Mybase;
 typedef _Kty key_type;
 typedef _Pr key_compare;
 typedef typename _Mybase::value_compare value_compare;
 typedef typename _Mybase::allocator_type allocator_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;
 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;
 typedef typename _Mybase::reverse_iterator reverse_iterator;
 typedef typename _Mybase::const_reverse_iterator
  const_reverse_iterator;
 typedef typename _Mybase::value_type value_type;

 typedef typename _Mybase::_Alty _Alty;

 multiset()
  : _Mybase(key_compare())
  {
  }

 explicit multiset(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 multiset(const _Myt& _Right)
  : _Mybase(_Right,
   _Right._Getal().select_on_container_copy_construction())
  {
  }

 multiset(const _Myt& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit multiset(const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  }

 multiset(const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  }

 template<class _Iter>
  multiset(_Iter _First, _Iter _Last)
  : _Mybase(key_compare())
  {
  this->insert(_First, _Last);
  }

 template<class _Iter>
  multiset(_Iter _First, _Iter _Last,
   const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  this->insert(_First, _Last);
  }

 template<class _Iter>
  multiset(_Iter _First, _Iter _Last,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  this->insert(_First, _Last);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 multiset(_Myt&& _Right)
  : _Mybase(::std:: move(_Right))
  {
  }

 multiset(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(_Alty::is_always_equal::value && is_nothrow_move_assignable<_Pr>::value)

  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 template<class... _Valty>
  iterator emplace(_Valty&&... _Val)
  {
  return (_Mybase::emplace(::std:: forward<_Valty>(_Val)...).first);
  }

 void swap(_Myt& _Right)
  noexcept(_Alty::is_always_equal::value && _Is_nothrow_swappable<_Pr>::value)

  {
  _Mybase::swap(_Right);
  }

 multiset(::std:: initializer_list<value_type> _Ilist)
  : _Mybase(key_compare())
  {
  this->insert(_Ilist);
  }

 multiset(::std:: initializer_list<value_type> _Ilist,
   const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  this->insert(_Ilist);
  }

 multiset(::std:: initializer_list<value_type> _Ilist,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  this->insert(_Ilist);
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  this->clear();
  this->insert(_Ilist);
  return (*this);
  }
 };

template<class _Kty,
 class _Pr,
 class _Alloc> inline
 void swap(multiset<_Kty, _Pr, _Alloc>& _Left,
  multiset<_Kty, _Pr, _Alloc>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 20 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 2

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 1 3








#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127)
#pragma warning(disable: 4244)

namespace std {



template<class _Myvec>
 class _Vector_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   typename _Myvec::value_type,
   typename _Myvec::difference_type,
   typename _Myvec::const_pointer,
   typename _Myvec::const_reference,
   _Iterator_base>
 {
public:
 typedef _Vector_const_iterator<_Myvec> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Myvec::value_type value_type;
 typedef typename _Myvec::difference_type difference_type;
 typedef typename _Myvec::const_pointer pointer;
 typedef typename _Myvec::const_reference reference;
 typedef typename _Myvec::pointer _Tptr;

 _Vector_const_iterator()
  : _Ptr()
  {
  }

 _Vector_const_iterator(_Tptr _Parg, const _Container_base *_Pvector)
  : _Ptr(_Parg)
  {
  this->_Adopt(_Pvector);
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  _Ptr = _Const_cast(_Right);
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Ptr);
  }

 reference operator*() const
  {

  const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
  if (_Mycont == 0
   || _Ptr == _Tptr()
   || _Ptr < _Mycont->_Myfirst
   || _Mycont->_Mylast <= _Ptr)
   {
   _Debug_message(L"vector iterator not dereferencable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 73);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 74, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 74, 0); };
   }
# 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
                                    ;

  return (*_Ptr);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
  if (_Mycont == 0
   || _Ptr == nullptr_t{}
   || _Mycont->_Mylast <= _Ptr)
   {
   _Debug_message(L"vector iterator not incrementable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 102);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 103, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 103, 0); };
   }
# 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
  ++_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
  if (_Mycont == 0
   || _Ptr == nullptr_t{}
   || _Ptr <= _Mycont->_Myfirst)
   {
   _Debug_message(L"vector iterator not decrementable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 132);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 133, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 133, 0); };
   }
# 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
  --_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  if (_Off != 0)
   {
   const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
   if (_Mycont == 0
    || _Ptr + _Off < _Mycont->_Myfirst
    || _Mycont->_Mylast < _Ptr + _Off)
    {
    _Debug_message(L"vector iterator + offset out of range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 164);
    { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 165, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 165, 0); };
    }
   }
# 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  if (this->_Getcont() != _Right._Getcont())
   {
   _Debug_message(L"vector iterators incompatible", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 248);
   { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 249, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 249, 0); };
   }
  }
# 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
 _Tptr _Ptr;
 };

template<class _Myvec> inline
 typename _Vector_const_iterator<_Myvec>::_Unchecked_type
  _Unchecked(_Vector_const_iterator<_Myvec> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Myvec> inline
 _Vector_const_iterator<_Myvec>&
  _Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
   typename _Vector_const_iterator<_Myvec>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Myvec> inline
 _Vector_const_iterator<_Myvec> operator+(
  typename _Vector_const_iterator<_Myvec>::difference_type _Off,
  _Vector_const_iterator<_Myvec> _Next)
 {
 return (_Next += _Off);
 }


template<class _Myvec>
 class _Vector_iterator
  : public _Vector_const_iterator<_Myvec>
 {
public:
 typedef _Vector_iterator<_Myvec> _Myiter;
 typedef _Vector_const_iterator<_Myvec> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Myvec::value_type value_type;
 typedef typename _Myvec::difference_type difference_type;
 typedef typename _Myvec::pointer pointer;
 typedef typename _Myvec::reference reference;

 _Vector_iterator()
  {
  }

 _Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
  : _Mybase(_Parg, _Pvector)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (this->_Ptr);
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Myvec> inline
 typename _Vector_iterator<_Myvec>::_Unchecked_type
  _Unchecked(_Vector_iterator<_Myvec> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Myvec> inline
 _Vector_iterator<_Myvec>&
  _Rechecked(_Vector_iterator<_Myvec>& _Iter,
   typename _Vector_iterator<_Myvec>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Myvec> inline
 _Vector_iterator<_Myvec> operator+(
  typename _Vector_iterator<_Myvec>::difference_type _Off,
  _Vector_iterator<_Myvec> _Next)
 {
 return (_Next += _Off);
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference>
 struct _Vec_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 };

template<class _Ty,
 class _Alloc0>
 struct _Vec_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _Vec_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Simple_types<typename _Alty::value_type>,
  _Vec_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference> >::type
  _Val_types;
 };


template<class _Val_types>
 class _Vector_val
  : public _Container_base
 {
public:
 typedef _Vector_val<_Val_types> _Myt;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Vector_iterator<_Myt> iterator;
 typedef _Vector_const_iterator<_Myt> const_iterator;

 _Vector_val()
  : _Myfirst(),
  _Mylast(),
  _Myend()
  {
  }

 pointer _Myfirst;
 pointer _Mylast;
 pointer _Myend;
 };


template<class _Alloc_types>
 class _Vector_alloc
 {
public:
 typedef _Vector_alloc<_Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alty _Alty;
 typedef typename _Alloc_types::_Val_types _Val_types;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
 typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
# 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
 _Vector_alloc()
  : _Mypair(_Zero_then_variadic_args_t())
  {
  _Alloc_proxy();
  }

 template<class _Any_alloc,
  class = enable_if_t<!is_same<decay_t<_Any_alloc>, _Myt>::value> >
  _Vector_alloc(_Any_alloc&& _Al)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Any_alloc>(_Al))
  {
  _Alloc_proxy();
  }

 ~_Vector_alloc() noexcept
  {
  _Free_proxy();
  }

 void _Copy_alloc(const _Alty& _Al)
  {
  _Free_proxy();
  _Pocca(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Move_alloc(_Alty& _Al)
  {
  _Free_proxy();
  _Pocma(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Myproxy() = _Unfancy(_Alproxy.allocate(1));
  _Alproxy.construct(_Myproxy(), _Container_proxy());
  _Myproxy()->_Mycont = &_Get_data();
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Orphan_all();
  _Alproxy.destroy(_Myproxy());
  _Alproxy.deallocate(_Alproxy.address(*_Myproxy()), 1);
  _Myproxy() = 0;
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Get_data()._Getpfirst());
  }

 _Container_proxy * & _Myproxy() noexcept
  {
  return (_Get_data()._Myproxy);
  }

 _Container_proxy * const & _Myproxy() const noexcept
  {
  return (_Get_data()._Myproxy);
  }


 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_Myt& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Alty& _Getal() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Alty& _Getal() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _Vector_val<_Val_types>& _Get_data() noexcept
  {
  return (_Mypair._Get_second());
  }

 const _Vector_val<_Val_types>& _Get_data() const noexcept
  {
  return (_Mypair._Get_second());
  }

 pointer& _Myfirst() noexcept
  {
  return (_Get_data()._Myfirst);
  }

 const pointer& _Myfirst() const noexcept
  {
  return (_Get_data()._Myfirst);
  }

 pointer& _Mylast() noexcept
  {
  return (_Get_data()._Mylast);
  }

 const pointer& _Mylast() const noexcept
  {
  return (_Get_data()._Mylast);
  }

 pointer& _Myend() noexcept
  {
  return (_Get_data()._Myend);
  }

 const pointer& _Myend() const noexcept
  {
  return (_Get_data()._Myend);
  }

private:
 _Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
 };


template<class _Ty,
 class _Alloc = allocator<_Ty> >
 class vector
  : public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
 {
public:
 typedef vector<_Ty, _Alloc> _Myt;
 typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
 typedef _Alloc allocator_type;

 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;




 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 vector() noexcept(is_nothrow_default_constructible<_Alloc>::value)
  : _Mybase()
  {
  }

 explicit vector(const _Alloc& _Al) noexcept
  : _Mybase(_Al)
  {
  }

 explicit vector(size_type _Count)
  : _Mybase()
  {
  if (_Buy(_Count))
   {
   try {
   _Uninitialized_default_fill_n(this->_Myfirst(), _Count,
    this->_Getal());
   this->_Mylast() += _Count;
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 vector(size_type _Count, const value_type& _Val)
  : _Mybase()
  {
  _Construct_n(_Count, ::std:: addressof(_Val));
  }

 vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct_n(_Count, ::std:: addressof(_Val));
  }

 vector(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  if (_Buy(_Right.size()))
   try {
   this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
    this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
  }

 vector(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  if (_Buy(_Right.size()))
   try {
   this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
    this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last)
  : _Mybase()
  {
  _Construct(_First, _Last);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct(_First, _Last);
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last)
  {
  _Construct(_First, _Last, _Iter_cat_t<_Iter>());
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last,
   input_iterator_tag)
  {
  try {

  for (; _First != _Last; ++_First)
   emplace_back(*_First);

  } catch (...) {
  _Tidy();
  throw;
  }
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
  if (_Buy(::std:: distance(_First, _Last)))
   {
   try {
   this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 void _Construct_n(size_type _Count, const value_type *_Pval)
  {
  if (_Buy(_Count))
   {
   try {
   this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 vector(_Myt&& _Right) noexcept
  : _Mybase(::std:: move(_Right._Getal()))
  {
  _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  }

 vector(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(_Alty::propagate_on_container_move_assignment::value || _Alty::is_always_equal::value)

  {
  if (this != &_Right)
   {
   _Tidy();
   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Move_alloc(_Right._Getal());

   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right, true_type)
  {
  this->_Swap_all((_Myt&)_Right);
  this->_Myfirst() = _Right._Myfirst();
  this->_Mylast() = _Right._Mylast();
  this->_Myend() = _Right._Myend();

  _Right._Myfirst() = pointer();
  _Right._Mylast() = pointer();
  _Right._Myend() = pointer();
  }

 void _Assign_rv(_Myt&& _Right, false_type)
  {
  if (get_allocator() == _Right.get_allocator())
   _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  else
   _Construct(::std:: make_move_iterator(_Right.begin()),
    ::std:: make_move_iterator(_Right.end()));
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right),
   typename _Alty::propagate_on_container_move_assignment());
  }


 void push_back(value_type&& _Val)
  {
  if (_Inside(::std:: addressof(_Val)))
   {
   size_type _Idx = ::std:: addressof(_Val) - _Unfancy(this->_Myfirst());
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(_Unfancy(this->_Mylast()),
    ::std:: forward<value_type>(this->_Myfirst()[_Idx]));
   ++this->_Mylast();
   }
  else
   {
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(_Unfancy(this->_Mylast()),
    ::std:: forward<value_type>(_Val));
   ++this->_Mylast();
   }
  }

 iterator insert(const_iterator _Where, _Ty&& _Val)
  {
  return (emplace(_Where, ::std:: move(_Val)));
  }

 template<class... _Valty>
  void emplace_back(_Valty&&... _Val)
  {
  if (this->_Mylast() == this->_Myend())
   _Reserve(1);
  _Orphan_range(this->_Mylast(), this->_Mylast());
  this->_Getal().construct(_Unfancy(this->_Mylast()),
   ::std:: forward<_Valty>(_Val)...);
  ++this->_Mylast();
  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst();


  if (size() < _Off)
   _Debug_message(L"vector emplace iterator outside range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 941);


  emplace_back(::std:: forward<_Valty>(_Val)...);
  ::std:: rotate(begin() + _Off, end() - 1, end());
  return (begin() + _Off);
  }


 vector(::std:: initializer_list<value_type> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  _Construct(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<value_type> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<value_type> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~vector() noexcept
  {
  _Tidy();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    _Tidy();
    this->_Copy_alloc(_Right._Getal());
    }

   this->_Orphan_all();

   if (_Right.empty())
    clear();
   else if (_Right.size() <= size())
    {
    pointer _Ptr = _Copy_unchecked(_Right._Myfirst(),
     _Right._Mylast(), this->_Myfirst());
    _Destroy(_Ptr, this->_Mylast());
    this->_Mylast() = this->_Myfirst() + _Right.size();
    }
   else if (_Right.size() <= capacity())
    {
    pointer _Ptr = _Right._Myfirst() + size();
    _Copy_unchecked(_Right._Myfirst(),
     _Ptr, this->_Myfirst());
    this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
     this->_Mylast());
    }
   else
    {
    if (this->_Myfirst() != pointer())
     {
     _Destroy(this->_Myfirst(), this->_Mylast());
     this->_Getal().deallocate(this->_Myfirst(),
      this->_Myend() - this->_Myfirst());
     }
    if (_Buy(_Right.size()))
     try {
     this->_Mylast() =
      _Ucopy(_Right._Myfirst(), _Right._Mylast(),
      this->_Myfirst());
     } catch (...) {
     _Tidy();
     throw;
     }
    }
   }
  return (*this);
  }

 void reserve(size_type _Count)
  {
  if (capacity() < _Count)
   {
   if (max_size() < _Count)
    _Xlen();
   _Reallocate(_Count);
   }
  }

 size_type capacity() const noexcept
  {
  return (this->_Myend() - this->_Myfirst());
  }

 size_type _Unused_capacity() const noexcept
  {
  return (this->_Myend() - this->_Mylast());
  }

 size_type _Has_unused_capacity() const noexcept
  {
  return (this->_Myend() != this->_Mylast());
  }

 iterator begin() noexcept
  {
  return (iterator(this->_Myfirst(), &this->_Get_data()));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(this->_Myfirst(), &this->_Get_data()));
  }

 iterator end() noexcept
  {
  return (iterator(this->_Mylast(), &this->_Get_data()));
  }

 const_iterator end() const noexcept
  {
  return (const_iterator(this->_Mylast(), &this->_Get_data()));
  }

 iterator _Make_iter(const_iterator _Where) const
  {
  return (iterator(_Where._Ptr, &this->_Get_data()));
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void shrink_to_fit()
  {
  if (_Has_unused_capacity())
   {
   if (empty())
    _Tidy();
   else
    _Reallocate(size());
   }
  }

 void resize(size_type _Newsize)
  {
  if (_Newsize < size())
   _Pop_back_n(size() - _Newsize);
  else if (size() < _Newsize)
   {
   _Reserve(_Newsize - size());
   try {
   _Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
    this->_Getal());
   } catch (...) {
   _Tidy();
   throw;
   }
   this->_Mylast() += _Newsize - size();
   }
  }

 void resize(size_type _Newsize, const value_type& _Val)
  {
  if (_Newsize < size())
   _Pop_back_n(size() - _Newsize);
  else if (size() < _Newsize)
   {
   const value_type *_Ptr = ::std:: addressof(_Val);

   if (_Inside(_Ptr))
    {
    const difference_type _Idx = _Ptr
     - _Unfancy(this->_Myfirst());
    _Reserve(_Newsize - size());
    _Ptr = _Unfancy(this->_Myfirst()) + _Idx;
    }
   else
    _Reserve(_Newsize - size());

   try {
   _Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
   } catch (...) {
   _Tidy();
   throw;
   }
   this->_Mylast() += _Newsize - size();
   }
  }

 size_type size() const noexcept
  {
  return (this->_Mylast() - this->_Myfirst());
  }

 size_type max_size() const noexcept
  {
  return (this->_Getal().max_size());
  }

 bool empty() const noexcept
  {
  return (this->_Myfirst() == this->_Mylast());
  }

 _Alloc get_allocator() const noexcept
  {
  _Alloc _Ret(this->_Getal());
  return (_Ret);
  }

 const_reference at(size_type _Pos) const
  {
  if (size() <= _Pos)
   _Xran();
  return (*(this->_Myfirst() + _Pos));
  }

 reference at(size_type _Pos)
  {
  if (size() <= _Pos)
   _Xran();
  return (*(this->_Myfirst() + _Pos));
  }

 const_reference operator[](size_type _Pos) const
  {

  if (size() <= _Pos)
   {
   _Debug_message(L"vector subscript out of range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1218);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1219, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1219, 0); };
   }





  return (*(this->_Myfirst() + _Pos));
  }

 reference operator[](size_type _Pos)
  {

  if (size() <= _Pos)
   {
   _Debug_message(L"vector subscript out of range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1234);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1235, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1235, 0); };
   }





  return (*(this->_Myfirst() + _Pos));
  }

 _Ty * data() noexcept
  {
  return (_Unfancy(this->_Myfirst()));
  }

 const _Ty * data() const noexcept
  {
  return (_Unfancy(this->_Myfirst()));
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_back(const value_type& _Val)
  {
  if (_Inside(::std:: addressof(_Val)))
   {
   size_type _Idx = ::std:: addressof(_Val) - _Unfancy(this->_Myfirst());
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(_Unfancy(this->_Mylast()),
    this->_Myfirst()[_Idx]);
   ++this->_Mylast();
   }
  else
   {
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(_Unfancy(this->_Mylast()),
    _Val);
   ++this->_Mylast();
   }
  }


 void pop_back()
  {
  if (empty())
   _Debug_message(L"vector empty before pop", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1302);
  else
   {
   _Orphan_range(this->_Mylast() - 1, this->_Mylast());
   this->_Getal().destroy(_Unfancy(this->_Mylast() - 1));
   --this->_Mylast();
   }
  }
# 1319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  clear();
  _Assign(_First, _Last, _Iter_cat_t<_Iter>());
  }

 template<class _Iter>
  void _Assign(_Iter _First, _Iter _Last,
   input_iterator_tag)
  {
  for (; _First != _Last; ++_First)
   emplace_back(*_First);
  }

 template<class _Iter>
  void _Assign(_Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
  size_type _Newsize = ::std:: distance(_First, _Last);

  if (capacity() < _Newsize)
   {
   size_type _Newcapacity = _Grow_to(_Newsize);
   _Tidy();
   _Buy(_Newcapacity);
   }

  this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
  }

 void assign(size_type _Count, const value_type& _Val)
  {
  clear();
  insert(begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const _Ty& _Val)
  {
  return (_Insert_n(_Where, (size_type)1, _Val));
  }

 iterator insert(const_iterator _Where, size_type _Count,
  const _Ty& _Val)
  {
  return (_Insert_n(_Where, _Count, _Val));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst();
  _Insert(_Where, _First, _Last, _Iter_cat_t<_Iter>());
  return (begin() + _Off);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
    input_iterator_tag)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst();


  if (size() < _Off)
   _Debug_message(L"vector insert iterator outside range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1388);


  if (_First != _Last)
   {
   size_type _Oldsize = size();

   try {
   for (; _First != _Last; ++_First)
    push_back(*_First);

   } catch (...) {
   erase(begin() + _Oldsize, end());
   throw;
   }

   ::std:: rotate(begin() + _Off, begin() + _Oldsize, end());
   }
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
    forward_iterator_tag)
  {

  if (_Where._Getcont() != &this->_Get_data()
   || (_Where)._Ptr < this->_Myfirst()
   || this->_Mylast() < (_Where)._Ptr)
   _Debug_message(L"vector insert iterator outside range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1417);
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1418);


  size_type _Count = ::std:: distance(_First, _Last);
  if (_Count == 0)
   ;
  else if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();

   size_type _Capacity = _Grow_to(size() + _Count);
   pointer _Newvec = this->_Getal().allocate(_Capacity);
   pointer _Ptr = _Newvec;

   try {
   _Ptr = _Umove(this->_Myfirst(), (_Where)._Ptr,
    _Newvec);
   _Ptr = _Ucopy(_First, _Last, _Ptr);
   _Umove((_Where)._Ptr, this->_Mylast(),
    _Ptr);
   } catch (...) {
   _Destroy(_Newvec, _Ptr);
   this->_Getal().deallocate(_Newvec, _Capacity);
   throw;
   }

   _Count += size();
   if (this->_Myfirst() != pointer())
    {
    _Destroy(this->_Myfirst(), this->_Mylast());
    this->_Getal().deallocate(this->_Myfirst(),
     this->_Myend() - this->_Myfirst());
    }

   this->_Orphan_all();
   this->_Myend() = _Newvec + _Capacity;
   this->_Mylast() = _Newvec + _Count;
   this->_Myfirst() = _Newvec;
   }
  else
   {
   _Ucopy(_First, _Last, this->_Mylast());
   ::std:: rotate((_Where)._Ptr, this->_Mylast(),
    this->_Mylast() + _Count);
   this->_Mylast() += _Count;
   _Orphan_range((_Where)._Ptr, this->_Mylast());
   }
  }


 iterator erase(const_iterator _Where)
  {
  if (_Where._Getcont() != &this->_Get_data()
   || (_Where)._Ptr < this->_Myfirst()
   || this->_Mylast() <= (_Where)._Ptr)
   _Debug_message(L"vector erase iterator outside range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1474);
  _Move_unchecked((_Where)._Ptr + 1, this->_Mylast(), (_Where)._Ptr);
  _Destroy(this->_Mylast() - 1, this->_Mylast());
  _Orphan_range((_Where)._Ptr, this->_Mylast());
  --this->_Mylast();
  return (_Make_iter(_Where));
  }
# 1493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
 iterator erase(const_iterator _First_arg,
  const_iterator _Last_arg)
  {
  if (_First_arg == begin() && _Last_arg == end())
   clear();
  else if (_First_arg != _Last_arg)
   {
   iterator _First = _Make_iter(_First_arg);
   iterator _Last = _Make_iter(_Last_arg);

   if (_First != _Last)
    {

    if (_Last < _First || _First._Getcont() != &this->_Get_data()
     || (_First)._Ptr < this->_Myfirst()
     || this->_Mylast() < (_Last)._Ptr)
     _Debug_message(L"vector erase iterator outside range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1509);
    pointer _Ptr = _Move_unchecked((_Last)._Ptr, this->_Mylast(),
     (_First)._Ptr);
    _Orphan_range((_First)._Ptr, this->_Mylast());






    _Destroy(_Ptr, this->_Mylast());
    this->_Mylast() = _Ptr;
    }
   }
  return (_Make_iter(_First_arg));
  }

 void _Pop_back_n(size_type _Count)
  {
  pointer _Ptr = this->_Mylast() - _Count;


  _Orphan_range(_Ptr, this->_Mylast());


  _Destroy(_Ptr, this->_Mylast());
  this->_Mylast() = _Ptr;
  }

 void clear() noexcept
  {
  this->_Orphan_all();
  _Destroy(this->_Myfirst(), this->_Mylast());
  this->_Mylast() = this->_Myfirst();
  }

 void swap(_Myt& _Right)
  noexcept(_Alty::propagate_on_container_swap::value || _Alty::is_always_equal::value)

  {
  if (this != &_Right)
   {
   _Pocs(this->_Getal(), _Right._Getal());
   this->_Swap_all(_Right);
   _Swap_adl(this->_Myfirst(), _Right._Myfirst());
   _Swap_adl(this->_Mylast(), _Right._Mylast());
   _Swap_adl(this->_Myend(), _Right._Myend());
   }
  }

protected:
 bool _Buy(size_type _Capacity)
  {
  this->_Myfirst() = pointer();
  this->_Mylast() = pointer();
  this->_Myend() = pointer();

  if (_Capacity == 0)
   return (false);
  else if (max_size() < _Capacity)
   _Xlen();
  else
   {
   this->_Myfirst() = this->_Getal().allocate(_Capacity);
   this->_Mylast() = this->_Myfirst();
   this->_Myend() = this->_Myfirst() + _Capacity;
   }
  return (true);
  }

 void _Destroy(pointer _First, pointer _Last)
  {
  _Destroy_range(_First, _Last, this->_Getal());
  }

 size_type _Grow_to(size_type _Count) const
  {
  size_type _Capacity = capacity();

  _Capacity = max_size() - _Capacity / 2 < _Capacity
   ? 0 : _Capacity + _Capacity / 2;
  if (_Capacity < _Count)
   _Capacity = _Count;
  return (_Capacity);
  }

 bool _Inside(const value_type *_Ptr) const
  {
  return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);
  }

 void _Reallocate(size_type _Count)
  {
  pointer _Ptr = this->_Getal().allocate(_Count);

  try {
  _Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
  } catch (...) {
  this->_Getal().deallocate(_Ptr, _Count);
  throw;
  }

  size_type _Size = size();
  if (this->_Myfirst() != pointer())
   {
   _Destroy(this->_Myfirst(), this->_Mylast());
   this->_Getal().deallocate(this->_Myfirst(),
    this->_Myend() - this->_Myfirst());
   }

  this->_Orphan_all();
  this->_Myend() = _Ptr + _Count;
  this->_Mylast() = _Ptr + _Size;
  this->_Myfirst() = _Ptr;
  }

 void _Reserve(size_type _Count)
  {
  if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();
   _Reallocate(_Grow_to(size() + _Count));
   }
  }

 void _Tidy()
  {
  if (this->_Myfirst() != pointer())
   {
   this->_Orphan_all();
   _Destroy(this->_Myfirst(), this->_Mylast());
   this->_Getal().deallocate(this->_Myfirst(),
    this->_Myend() - this->_Myfirst());
   this->_Myfirst() = pointer();
   this->_Mylast() = pointer();
   this->_Myend() = pointer();
   }
  }

 template<class _Iter>
  pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
  {
  return (_Uninitialized_copy(_First, _Last,
   _Ptr, this->_Getal()));
  }

 template<class _Iter>
  pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
  {
  return (_Uninitialized_move(_First, _Last,
   _Ptr, this->_Getal()));
  }

 iterator _Insert_n(const_iterator _Where,
  size_type _Count, const value_type& _Val)
  {

  if (_Where._Getcont() != &this->_Get_data()
   || (_Where)._Ptr < this->_Myfirst()
   || this->_Mylast() < (_Where)._Ptr)
   _Debug_message(L"vector insert iterator outside range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1670);


  size_type _Off = (_Where)._Ptr - this->_Myfirst();
  if (_Count == 0)
   ;
  else if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();

   size_type _Capacity = _Grow_to(size() + _Count);
   pointer _Newvec = this->_Getal().allocate(_Capacity);
   size_type _Whereoff = (_Where)._Ptr - this->_Myfirst();
   int _Ncopied = 0;

   try {
   _Ufill(_Newvec + _Whereoff, _Count,
    ::std:: addressof(_Val));
   ++_Ncopied;
   _Umove(this->_Myfirst(), (_Where)._Ptr,
    _Newvec);
   ++_Ncopied;
   _Umove((_Where)._Ptr, this->_Mylast(),
    _Newvec + (_Whereoff + _Count));
   } catch (...) {
   if (1 < _Ncopied)
    _Destroy(_Newvec, _Newvec + _Whereoff);
   if (0 < _Ncopied)
    _Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
   this->_Getal().deallocate(_Newvec, _Capacity);
   throw;
   }

   _Count += size();
   if (this->_Myfirst() != pointer())
    {
    _Destroy(this->_Myfirst(), this->_Mylast());
    this->_Getal().deallocate(this->_Myfirst(),
     this->_Myend() - this->_Myfirst());
    }

   this->_Orphan_all();
   this->_Myend() = _Newvec + _Capacity;
   this->_Mylast() = _Newvec + _Count;
   this->_Myfirst() = _Newvec;
   }
  else if ((size_type)(this->_Mylast() - (_Where)._Ptr)
   < _Count)
   {
   value_type _Tmp = _Val;

   _Umove((_Where)._Ptr, this->_Mylast(),
    (_Where)._Ptr + _Count);

   try {
   _Ufill(this->_Mylast(),
    _Count - (this->_Mylast() - (_Where)._Ptr),
    ::std:: addressof(_Tmp));
   } catch (...) {
   _Destroy((_Where)._Ptr + _Count,
    this->_Mylast() + _Count);
   throw;
   }

   this->_Mylast() += _Count;
   _Orphan_range((_Where)._Ptr, this->_Mylast());
   ::std:: fill((_Where)._Ptr, this->_Mylast() - _Count,
    _Tmp);
   }
  else
   {
   value_type _Tmp = _Val;

   pointer _Oldend = this->_Mylast();
   this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
    this->_Mylast());

   _Orphan_range((_Where)._Ptr, this->_Mylast());
   _Move_backward_unchecked((_Where)._Ptr, _Oldend - _Count,
    _Oldend);
   ::std:: fill((_Where)._Ptr,
    (_Where)._Ptr + _Count, _Tmp);
   }
  return (begin() + _Off);
  }

 pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
  {
  _Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
  return (_Ptr + _Count);
  }

 [[noreturn]] void _Xlen() const
  {
  _Xlength_error("vector<T> too long");
  }

 [[noreturn]] void _Xran() const
  {
  _Xout_of_range("invalid vector<T> subscript");
  }


 void _Orphan_range(pointer _First, pointer _Last) const
  {
  _Lockit _Lock(3);
  const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
  if (_Pnext != 0)
   {
   while (*_Pnext != 0)
    if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
   }
  }






 };



template<class _Ty,
 class _Alloc> inline
 void swap(vector<_Ty, _Alloc>& _Left, vector<_Ty, _Alloc>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator==(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator!=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }




typedef unsigned int _Vbase;
const int _VBITS = 8 * sizeof (_Vbase);


template<class _Alloc>
 class _Vb_iter_base
  : public _Iterator012<random_access_iterator_tag,
   bool,
   typename _Alloc::difference_type,
   bool *,
   bool,
   _Iterator_base>
 {
public:
 typedef typename _Alloc::size_type _Sizet;
 typedef vector<bool, _Alloc> _Mycont;

 _Vb_iter_base()
  : _Myptr(0), _Myoff(0)
  {
  }

 _Vb_iter_base(const _Vbase *_Ptr, _Sizet _Off,
  const _Container_base *_Mypvbool)
  : _Myptr(_Ptr), _Myoff(_Off)
  {
  this->_Adopt(_Mypvbool);
  }

 void _Advance(_Sizet _Off)
  {
  _Myoff += _Off;
  _Myptr += _Myoff / _VBITS;
  _Myoff %= _VBITS;
  }

 int _Valid(_Sizet _Inc) const
  {

  const auto _Cont = static_cast<const _Mycont *>(this->_Getcont());
  _Sizet _Mysize = _Cont->_Mysize;

  _Inc += _Myoff;
  _Inc += _VBITS * (_Myptr - _Cont->_Myvec.data());
  return (_Inc < _Mysize ? -1 : _Inc == _Mysize ? 0 : +1);





  }

 const _Vbase *_Myptr;
 _Sizet _Myoff;
 };


template<class _Alloc>
 class _Vb_reference
  : public _Vb_iter_base<_Alloc>
 {
 typedef _Vb_iter_base<_Alloc> _Mybase;
 typedef _Vb_reference<_Alloc> _Mytype;

 _Vb_reference() noexcept
  {
  }

public:
 _Vb_reference(const _Mybase& _Right)
  : _Mybase(_Right._Myptr, _Right._Myoff, _Right._Getcont())
  {
  }

 _Mytype& operator=(const _Mytype& _Right) noexcept
  {
  return (*this = bool(_Right));
  }

 _Mytype& operator=(bool _Val) noexcept
  {
  if (_Val)
   *(_Vbase *)_Getptr() |= _Mask();
  else
   *(_Vbase *)_Getptr() &= (~_Mask());
  return (*this);
  }

 void flip() noexcept
  {
  *(_Vbase *)_Getptr() ^= _Mask();
  }

 operator bool() const noexcept
  {
  return ((*_Getptr() & _Mask()) != 0);
  }

 const _Vbase *_Getptr() const
  {

  if (this->_Getcont() == 0
   || this->_Myptr == 0
   || 0 <= this->_Valid(0))
   {
   _Debug_message(L"vector<bool> iterator not dereferencable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1966);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1967, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1967, 0); };
   }






  return (this->_Myptr);
  }

protected:
 _Vbase _Mask() const
  {
  return ((_Vbase)(1) << this->_Myoff);
  }
 };

template<class _Alloc> inline
 void swap(_Vb_reference<_Alloc> _Left,
  _Vb_reference<_Alloc> _Right)
 {
 bool _Val = _Left;
 _Left = _Right;
 _Right = _Val;
 }


template<class _Alloc>
 class _Vb_const_iterator
  : public _Vb_iter_base<_Alloc>
 {
public:
 typedef _Vb_iter_base<_Alloc> _Mybase;
 typedef _Vb_const_iterator<_Alloc> _Mytype;

 typedef _Vb_reference<_Alloc> _Reft;
 typedef bool const_reference;

 typedef random_access_iterator_tag iterator_category;
 typedef bool value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef const_reference *pointer;
 typedef const_reference reference;

 _Vb_const_iterator()
  {
  }

 _Vb_const_iterator(const _Vbase *_Ptr, const _Container_base *_Mypvbool)
  : _Mybase(_Ptr, 0, _Mypvbool)
  {
  }

 const_reference operator*() const
  {
  return (_Reft(*this));
  }

 _Mytype& operator++()
  {
  _Inc();
  return (*this);
  }

 _Mytype operator++(int)
  {
  _Mytype _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Mytype& operator--()
  {
  _Dec();
  return (*this);
  }

 _Mytype operator--(int)
  {
  _Mytype _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Mytype& operator+=(difference_type _Off)
  {
  if (_Off < 0 && this->_Myoff < 0 - (size_type)_Off)
   {
   this->_Myoff += _Off;
   this->_Myptr -= 1 + ((size_type)(-1) - this->_Myoff) / _VBITS;
   this->_Myoff %= _VBITS;
   }
  else
   {
   this->_Myoff += _Off;
   this->_Myptr += this->_Myoff / _VBITS;
   this->_Myoff %= _VBITS;
   }
  return (*this);
  }

 _Mytype operator+(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Mytype& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Mytype operator-(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(
  const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (_VBITS * (this->_Myptr - _Right._Myptr)
   + (difference_type)this->_Myoff
   - (difference_type)_Right._Myoff);
  }

 const_reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (this->_Myptr == _Right._Myptr
   && this->_Myoff == _Right._Myoff);
  }

 bool operator!=(const _Mytype& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (this->_Myptr < _Right._Myptr
   || (this->_Myptr == _Right._Myptr
    && this->_Myoff < _Right._Myoff));
  }

 bool operator>(const _Mytype& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Mytype& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Mytype& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Mytype& _Right) const
  {
  if (this->_Getcont() != _Right._Getcont())
   _Debug_message(L"vector<bool> iterators incompatible", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2140);
  }
# 2155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
 void _Dec()
  {
  if (this->_Myoff != 0)
   --this->_Myoff;
  else
   {

   if (this->_Getcont() == 0 || 0 < this->_Valid((size_type)-1))
    {
    _Debug_message(L"vector<bool> iterator not decrementable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2164);
    { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2165, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2165, 0); };
    }






   this->_Myoff = _VBITS - 1;
   --this->_Myptr;
   }
  }

 void _Inc()
  {
  if (this->_Myoff < _VBITS - 1)
   ++this->_Myoff;
  else
   {

   if (this->_Getcont() == 0 || 0 < this->_Valid(1))
    {
    _Debug_message(L"vector<bool> iterator not incrementable", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2187);
    { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2188, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2188, 0); };
    }






   this->_Myoff = 0;
   ++this->_Myptr;
   }
  }
 };

template<class _Alloc> inline
 _Vb_const_iterator<_Alloc> operator+(
  typename _Alloc::difference_type _Off,
  _Vb_const_iterator<_Alloc> _Right)
  {
  return (_Right += _Off);
  }

template<class _Alloc>
 struct _Is_checked_helper<_Vb_const_iterator<_Alloc> >
  : public true_type
 {
 };


template<class _Alloc>
 class _Vb_iterator
  : public _Vb_const_iterator<_Alloc>
 {
public:
 typedef _Vb_const_iterator<_Alloc> _Mybase;
 typedef _Vb_iterator<_Alloc> _Mytype;

 typedef _Vb_reference<_Alloc> _Reft;
 typedef bool const_reference;

 typedef random_access_iterator_tag iterator_category;
 typedef bool value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef _Reft *pointer;
 typedef _Reft reference;

 _Vb_iterator()
  {
  }

 _Vb_iterator(_Vbase *_Ptr, _Container_base *_Mypvbool)
  : _Mybase(_Ptr, _Mypvbool)
  {
  }

 reference operator*() const
  {
  return (_Reft(*this));
  }

 _Mytype& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Mytype operator++(int)
  {
  _Mytype _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Mytype& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Mytype operator--(int)
  {
  _Mytype _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Mytype& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Mytype operator+(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Mytype& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Mytype operator-(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Alloc> inline
 _Vb_iterator<_Alloc> operator+(typename _Alloc::difference_type _Off,
  _Vb_iterator<_Alloc> _Right)
  {
  return (_Right += _Off);
  }

template<class _Alloc>
 struct _Is_checked_helper<_Vb_iterator<_Alloc> >
  : public true_type
 {
 };


template<class _Alloc>
 class _Vb_val
  : public _Container_base
 {
public:
 typedef vector<_Vbase, _Alloc> _Vectype;
 typedef typename _Vectype::_Alty _Alty;
 typedef typename _Alty::size_type size_type;

 _Vb_val(size_type _Count, const bool& _Val)
  : _Myvec(_Nw(_Count), (_Vbase) (_Val ? -1 : 0))
  {
  _Alloc_proxy();
  _Mysize = 0;
  }

 _Vb_val(size_type _Count, const bool& _Val, const _Alloc& _Al)
  : _Myvec(_Nw(_Count), (_Vbase)(_Val ? -1 : 0), _Al)
  {
  _Alloc_proxy();
  _Mysize = 0;
  }

 _Vb_val(const _Vb_val& _Right)
  : _Myvec(_Right._Myvec),
   _Mysize(_Right._Mysize)
  {
  _Alloc_proxy();
  }

 _Vb_val(const _Vb_val& _Right, const _Alloc& _Al)
  : _Myvec(_Right._Myvec, _Al),
   _Mysize(_Right._Mysize)
  {
  _Alloc_proxy();
  }

 _Vb_val(_Vb_val&& _Right)
  : _Myvec(::std:: forward<_Vectype>(_Right._Myvec)),
   _Mysize(_Right._Mysize)
  {
  _Right._Mysize = 0;
  _Alloc_proxy();
  }

 _Vb_val(_Vb_val&& _Right, const _Alloc& _Al)
  : _Myvec(::std:: forward<_Vectype>(_Right._Myvec), _Al),
   _Mysize(_Right._Mysize)
  {
  _Right._Mysize = 0;
  _Alloc_proxy();
  }

 ~_Vb_val() noexcept
  {
  _Free_proxy();
  }
# 2391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Myvec._Getal());
  this->_Myproxy = _Unfancy(_Alproxy.allocate(1));
  _Alproxy.construct(this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Myvec._Getal());
  this->_Orphan_all();
  _Alproxy.destroy(this->_Myproxy);
  _Alproxy.deallocate(_Alproxy.address(*this->_Myproxy), 1);
  this->_Myproxy = 0;
  }


 static size_type _Nw(size_type _Count)
  {
  return ((_Count + _VBITS - 1) / _VBITS);
  }

 _Vectype _Myvec;
 typename _Alty::size_type _Mysize;
 };



template<class _Alloc>
 class vector<bool, _Alloc>
  : public _Vb_val<_Alloc>
 {
public:
 typedef vector<bool, _Alloc> _Myt;
 typedef _Vb_val<_Alloc> _Mybase;
 typedef typename _Mybase::_Alty _Alty;
 typedef typename _Mybase::_Vectype _Vectype;

 typedef typename _Alty::size_type size_type;
 typedef typename _Alty::difference_type difference_type;
 typedef bool _Ty;
 typedef _Alloc allocator_type;

 typedef _Vb_reference<_Alty> reference;
 typedef bool const_reference;
 typedef bool value_type;

 typedef reference _Reft;
 typedef _Vb_const_iterator<_Alty> const_iterator;
 typedef _Vb_iterator<_Alty> iterator;

 typedef iterator pointer;
 typedef const_iterator const_pointer;
 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 static const int _VBITS = ::std:: _VBITS;
 enum {_EEN_VBITS = _VBITS};
 vector()
  : _Mybase(0, false)
  {
  }

 explicit vector(const _Alloc& _Al)
  : _Mybase(0, false, _Al)
  {
  }

 explicit vector(size_type _Count, const _Alloc& _Al = _Alloc())
  : _Mybase(_Count, false, _Al)
  {
  _Trim(_Count);
  }

 vector(size_type _Count, const bool& _Val, const _Alloc& _Al = _Alloc())
  : _Mybase(_Count, _Val, _Al)
  {
  _Trim(_Count);
  }

 vector(const _Myt& _Right)
  : _Mybase(_Right)
  {
  }

 vector(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
  : _Mybase(0, false, _Al)
  {
  _BConstruct(_First, _Last);
  }

 template<class _Iter>
  void _BConstruct(_Iter _First, _Iter _Last)
  {
  insert(begin(), _First, _Last);
  }

 vector(_Myt&& _Right)
  : _Mybase(::std:: forward<_Myt>(_Right))
  {
  }

 vector(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(::std:: forward<_Myt>(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   clear();

   if (_Alty::propagate_on_container_move_assignment::value
    && this->get_allocator() != _Right.get_allocator())
    {
    this->_Free_proxy();
    this->_Myvec = ::std:: move(_Right._Myvec);
    this->_Alloc_proxy();
    }
   else
    this->_Myvec = ::std:: move(_Right._Myvec);


   this->_Mysize = _Right._Mysize;
   _Right._Mysize = 0;
   }
  return (*this);
  }

 template<class... _Valty>
  void emplace_back(_Valty&&... _Val)
  {
  bool _Tmp(::std:: forward<_Valty>(_Val)...);
  push_back(_Tmp);
  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {
  bool _Tmp(::std:: forward<_Valty>(_Val)...);
  return (insert(_Where, _Tmp));
  }


 vector(::std:: initializer_list<bool> _Ilist,
   const _Alloc& _Al = allocator_type())
  : _Mybase(0, false, _Al)
  {
  insert(begin(), _Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<bool> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<bool> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
   ::std:: initializer_list<bool> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~vector() noexcept
  {
  }

 _Myt& operator=(const _Myt& _Right)
  {
  this->_Mysize = _Right._Mysize;
  this->_Myvec = _Right._Myvec;
  return (*this);
  }

 void reserve(size_type _Count)
  {
  this->_Myvec.reserve(this->_Nw(_Count));
  }

 size_type capacity() const noexcept
  {
  return (this->_Myvec.capacity() * _VBITS);
  }

 iterator begin() noexcept
  {
  return (iterator(this->_Myvec.data(), this));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(this->_Myvec.data(), this));
  }

 iterator end() noexcept
  {
  iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += this->_Mysize;
  return (_Tmp);
  }

 const_iterator end() const noexcept
  {
  const_iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += this->_Mysize;
  return (_Tmp);
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void shrink_to_fit()
  {
  if (this->_Myvec._Has_unused_capacity())
   {
   _Myt _Tmp(*this);
   swap(_Tmp);
   }
  }

 iterator _Make_iter(const_iterator _Where)
  {
  iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += _Where - begin();
  return (_Tmp);
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 void resize(size_type _Newsize, bool _Val = false)
  {
  if (size() < _Newsize)
   _Insert_n(end(), _Newsize - size(), _Val);
  else if (_Newsize < size())
   erase(begin() + _Newsize, end());
  }

 size_type size() const noexcept
  {
  return (this->_Mysize);
  }

 size_type max_size() const noexcept
  {
  const size_type _Maxsize = this->_Myvec.max_size();
  return (_Maxsize < (size_type)(-1) / _VBITS
   ? _Maxsize * _VBITS : (size_type)(-1));
  }

 bool empty() const noexcept
  {
  return (size() == 0);
  }

 _Alloc get_allocator() const noexcept
  {
  _Alloc _Ret(this->_Myvec.get_allocator());
  return (_Ret);
  }

 const_reference at(size_type _Off) const
  {
  if (size() <= _Off)
   _Xran();
  return ((*this)[_Off]);
  }

 reference at(size_type _Off)
  {
  if (size() <= _Off)
   _Xran();
  return ((*this)[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {
  const_iterator _It = begin();
  _It._Advance(_Off);
  return (*_It);
  }

 reference operator[](size_type _Off)
  {
  iterator _It = begin();
  _It._Advance(_Off);
  return (*_It);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_back(const bool& _Val)
  {
  insert(end(), _Val);
  }

 void pop_back()
  {
  erase(end() - 1);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  erase(begin(), end());
  insert(begin(), _First, _Last);
  }

 void assign(size_type _Count, const bool& _Val)
  {
  erase(begin(), end());
  _Insert_n(begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const bool& _Val)
  {
  return (_Insert_n(_Where, (size_type)1, _Val));
  }

 iterator insert(const_iterator _Where, size_type _Count,
  const bool& _Val)
  {
  return (_Insert_n(_Where, _Count, _Val));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = _Where - begin();
  _Insert(_Where, _First, _Last, _Iter_cat_t<_Iter>());
  return (begin() + _Off);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
    input_iterator_tag)
  {
  size_type _Off = _Where - begin();

  for (; _First != _Last; ++_First, (void)++_Off)
   insert(begin() + _Off, *_First);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
  _Debug_range(_First, _Last, L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2816);
  size_type _Count = ::std:: distance(_First, _Last);
  size_type _Off = _Insert_x(_Where, _Count);
  ::std:: copy(_First, _Last, begin() + _Off);
  }

 iterator erase(const_iterator _Where_arg)
  {
  iterator _Where = _Make_iter(_Where_arg);
  size_type _Off = _Where - begin();


  if (end() <= _Where)
   _Debug_message(L"vector<bool> erase iterator outside range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2829);
  ::std:: copy(_Where + 1, end(), _Where);
  _Orphan_range(_Off, this->_Mysize);





  _Trim(this->_Mysize - 1);
  return (begin() + _Off);
  }

 iterator erase(const_iterator _First_arg,
  const_iterator _Last_arg)
  {
  iterator _First = _Make_iter(_First_arg);
  iterator _Last = _Make_iter(_Last_arg);
  size_type _Off = _First - begin();

  if (_First != _Last)
   {

   if (_Last < _First || end() < _Last)
    _Debug_message(L"vector<bool> erase iterator outside range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2852);
   iterator _Next = ::std:: copy(_Last, end(), _First);
   size_type _Newsize = _Next - begin();
   _Orphan_range(_Newsize, this->_Mysize);
   _Trim(_Newsize);





   }
  return (begin() + _Off);
  }

 void clear() noexcept
  {
  erase(begin(), end());
  }

 void flip() noexcept
  {
  for (typename _Vectype::iterator _Next = this->_Myvec.begin();
   _Next != this->_Myvec.end(); ++_Next)
   *_Next = (_Vbase)~*_Next;
  _Trim(this->_Mysize);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   this->_Swap_all(_Right);
   this->_Myvec.swap(_Right._Myvec);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }
  }

 static void swap(reference _Left, reference _Right) noexcept
  {
  bool _Val = _Left;

  _Left = _Right;
  _Right = _Val;
  }

 size_t hash() const
  {
  return (_Hash_seq((const unsigned char *)this->_Myvec.data(),
   this->_Myvec.size() * sizeof (_Vbase)));
  }

 iterator _Insert_n(const_iterator _Where,
  size_type _Count, const bool& _Val)
  {
  size_type _Off = _Insert_x(_Where, _Count);
  ::std:: fill(begin() + _Off, begin() + (_Off + _Count), _Val);
  return (begin() + _Off);
  }

 size_type _Insert_x(const_iterator _Where, size_type _Count)
  {
  size_type _Off = _Where - begin();


  if (end() < _Where)
   _Debug_message(L"vector<bool> insert iterator outside range", L"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2917);
  bool _Realloc = capacity() - size() < _Count;


  if (_Count == 0)
   ;
  else if (max_size() - size() < _Count)
   _Xlen();
  else
   {
   this->_Myvec.resize(this->_Nw(size() + _Count), 0);
   if (empty())
    this->_Mysize += _Count;
   else
    {
    iterator _Oldend = end();
    this->_Mysize += _Count;
    ::std:: copy_backward(begin() + _Off, _Oldend, end());
    }


   _Orphan_range(_Realloc ? 0 : _Off, this->_Mysize);

   }
  return (_Off);
  }


 void _Orphan_range(size_type _Offlo, size_type _Offhi) const
  {
  typedef _Vb_iter_base<_Alty> _Myiterbase;

  _Lockit _Lock(3);
  auto _Base = const_cast<_Vbase *>(this->_Myvec.data());

  const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
  if (_Pnext != 0)
   while (*_Pnext != 0)
    {
    size_type _Off = _VBITS * ((*_Pnext)->_Myptr - _Base)
     + (*_Pnext)->_Myoff;
    if (_Off < _Offlo || _Offhi < _Off)
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
    }
  }







 void _Trim(size_type _Size)
  {
  if (max_size() < _Size)
   _Xlen();
  size_type _Words = this->_Nw(_Size);

  if (_Words < this->_Myvec.size())
   this->_Myvec.erase(this->_Myvec.begin() + _Words,
    this->_Myvec.end());
  this->_Mysize = _Size;
  _Size %= _VBITS;
  if (0 < _Size)
   this->_Myvec[_Words - 1] &= ((_Vbase)(1) << _Size) - 1;
  }

 [[noreturn]] void _Xlen() const
  {
  _Xlength_error("vector<bool> too long");
  }

 [[noreturn]] void _Xran() const
  {
  _Xout_of_range("invalid vector<bool> subscript");
  }
 };

template<class _Alloc> inline
 bool operator==(const vector<bool, _Alloc>& _Left,
  const vector<bool, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left._Myvec.begin(), _Left._Myvec.end(),
   _Right._Myvec.begin()));
 }

template<class _Alloc> inline
 bool operator!=(const vector<bool, _Alloc>& _Left,
  const vector<bool, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Alloc>
 struct hash<vector<bool, _Alloc> >
 {
 typedef vector<bool, _Alloc> argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (_Keyval.hash());
  }
 };
}


#pragma warning(pop)
#pragma pack(pop)
# 21 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 2



# 1 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/Input.h" 1
# 24 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 2





typedef uint32_t uint32;
typedef uint8_t uint8;
# 44 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h"
enum ShaderCompilation
{
 VertexShader,
 PixelShader
};


float lerp(float a, float b, float c);

namespace Keys
{
 int key(int iKey);
 int onekey(int iKey);
 extern char kp[256];
}




std::string ws2s(const std::wstring& wstr);
std::wstring s2ws(const std::string& s);




std::vector<std::string> SplitPath(const std::string& str, const std::set<char> delimiters);


std::vector<std::string> GetFileNamesFromFolder(std::wstring folderpath);


static int __stdcall BrowseCallbackProc(HWND hwnd, UINT uMsg, LPARAM lParam, LPARAM lpData);
std::wstring BrowseFolder(std::string saved_path);



template<typename T>
inline void SafeRelease(T& ptr)
{
 if (ptr != 0 || ptr != nullptr)
 {
  ptr->Release();
  ptr = 0;
 }
}

template <class T>
class TInitZero
{
public:
 TInitZero()
  : Value((T)0)
 {
 }

 TInitZero(const T& InValue)
  : Value(InValue)
 {
 }

 operator const T() const
 {
  return Value;
 }


 T operator ->() const
 {
  return Value;
 }


 operator T& ()
 {
  return Value;
 }

 T& GetRef()
 {
  return Value;
 }


 T* operator&()
 {
  return &Value;
 }


private:
 T Value;
};




# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\chrono" 1 3






# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ratio" 1 3








#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<intmax_t _Val>
 struct _Abs
 {
 static constexpr intmax_t value = _Val < 0 ? -_Val : _Val;
 };


template<intmax_t _Ax,
 intmax_t _Bx,
 bool _Sfinae = false,
 bool _Good = (_Abs<_Ax>::value
  <= 9223372036854775807i64 / (_Bx == 0 ? 1 : _Abs<_Bx>::value))>
 struct _Safe_mult
  : integral_constant<intmax_t, _Ax * _Bx>
 {
 };

template<intmax_t _Ax,
 intmax_t _Bx,
 bool _Sfinae>
 struct _Safe_mult<_Ax, _Bx, _Sfinae, false>
 {
 static_assert(_Sfinae,
  "integer arithmetic overflow");
 };


template<intmax_t _Val>
 struct _Sign_of
 {
 static constexpr intmax_t value = _Val < 0 ? -1 : 1;
 };


template<intmax_t _Ax,
 intmax_t _Bx,
 bool _Good,
 bool _Also_good>
 struct _Safe_addX
 {
 static constexpr intmax_t value = _Ax + _Bx;
 };

template<intmax_t _Ax,
 intmax_t _Bx>
 struct _Safe_addX<_Ax, _Bx, false, false>
 {
 static_assert(_Always_false<_Safe_addX>::value,
  "integer arithmetic overflow");
 };

template<intmax_t _Ax,
 intmax_t _Bx>
 struct _Safe_add
 {
 static constexpr intmax_t value = _Safe_addX<_Ax, _Bx,
  _Sign_of<_Ax>::value != _Sign_of<_Bx>::value,
  (_Abs<_Ax>::value <= 9223372036854775807i64 - _Abs<_Bx>::value)>::value;
 };


template<intmax_t _Ax,
 intmax_t _Bx>
 struct _GcdX
 {
 static constexpr intmax_t value = _GcdX<_Bx, _Ax % _Bx>::value;
 };

template<intmax_t _Ax>
 struct _GcdX<_Ax, 0>
 {
 static constexpr intmax_t value = _Ax;
 };

template<intmax_t _Ax,
 intmax_t _Bx>
 struct _Gcd
 {
 static constexpr intmax_t value =
  _GcdX<_Abs<_Ax>::value, _Abs<_Bx>::value>::value;
 };

template<>
 struct _Gcd<0, 0>
 {
 static constexpr intmax_t value = 1;
 };


template<intmax_t _Nx,
 intmax_t _Dx = 1>
 struct ratio
 {
 static_assert(_Dx != 0,
  "zero denominator");
 static_assert(-9223372036854775807i64 <= _Nx,
  "numerator too negative");
 static_assert(-9223372036854775807i64 <= _Dx,
  "denominator too negative");

 static constexpr intmax_t num = _Sign_of<_Nx>::value
  * _Sign_of<_Dx>::value * _Abs<_Nx>::value / _Gcd<_Nx, _Dx>::value;

 static constexpr intmax_t den = _Abs<_Dx>::value / _Gcd<_Nx, _Dx>
  ::value;

 typedef ratio<num, den> type;
 };


template<class _Ty1,
 class _Ty2>
 struct _Are_ratios
  : false_type
 {
 };

template<intmax_t _N1,
 intmax_t _D1,
 intmax_t _N2,
 intmax_t _D2>
 struct _Are_ratios<ratio<_N1, _D1>, ratio<_N2, _D2> >
  : true_type
 {
 };


template<class _R1,
 class _R2>
 struct _Ratio_add
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_add<R1, R2> requires R1 and R2 to be ratio<>s.");

 static constexpr intmax_t _N1 = _R1::num;
 static constexpr intmax_t _D1 = _R1::den;
 static constexpr intmax_t _N2 = _R2::num;
 static constexpr intmax_t _D2 = _R2::den;

 static constexpr intmax_t _Gx = _Gcd<_D1, _D2>::value;


 typedef typename ratio<
  _Safe_add<
   _Safe_mult<_N1, _D2 / _Gx>::value,
   _Safe_mult<_N2, _D1 / _Gx>::value
   >::value,
  _Safe_mult<_D1, _D2 / _Gx>::value
  >::type type;
 };

template<class _R1,
 class _R2>
 using ratio_add = typename _Ratio_add<_R1, _R2>::type;


template<class _R1,
 class _R2>
 struct _Ratio_subtract
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_subtract<R1, R2> requires R1 and R2 to be ratio<>s.");

 static constexpr intmax_t _N2 = _R2::num;
 static constexpr intmax_t _D2 = _R2::den;

 typedef ratio_add<_R1, ratio<-_N2, _D2> > type;
 };

template<class _R1,
 class _R2>
 using ratio_subtract = typename _Ratio_subtract<_R1, _R2>::type;


template<class _R1,
 class _R2>
 struct _Ratio_multiply
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_multiply<R1, R2> requires R1 and R2 to be ratio<>s.");

 static constexpr intmax_t _N1 = _R1::num;
 static constexpr intmax_t _D1 = _R1::den;
 static constexpr intmax_t _N2 = _R2::num;
 static constexpr intmax_t _D2 = _R2::den;

 static constexpr intmax_t _Gx = _Gcd<_N1, _D2>::value;
 static constexpr intmax_t _Gy = _Gcd<_N2, _D1>::value;

 typedef _Safe_mult<_N1 / _Gx, _N2 / _Gy, true> _Num;
 typedef _Safe_mult<_D1 / _Gy, _D2 / _Gx, true> _Den;
 };

template<class _R1,
 class _R2,
 bool _Sfinae = true,
 class = void>
 struct _Ratio_multiply_sfinae
 {
 static_assert(_Sfinae,
  "integer arithmetic overflow");
 };

template<class _R1,
 class _R2,
 bool _Sfinae>
 struct _Ratio_multiply_sfinae<_R1, _R2, _Sfinae, void_t<
  typename _Ratio_multiply<_R1, _R2>::_Num::type,
  typename _Ratio_multiply<_R1, _R2>::_Den::type> >
 {
 typedef ratio<
  _Ratio_multiply<_R1, _R2>::_Num::value,
  _Ratio_multiply<_R1, _R2>::_Den::value> type;
 };

template<class _R1,
 class _R2>
 using ratio_multiply = typename _Ratio_multiply_sfinae<_R1, _R2, false>
  ::type;


template<class _R1,
 class _R2>
 struct _Ratio_divide
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_divide<R1, R2> requires R1 and R2 to be ratio<>s.");

 static constexpr intmax_t _N2 = _R2::num;
 static constexpr intmax_t _D2 = _R2::den;

 typedef ratio<_D2, _N2> _R2_inverse;
 };

template<class _R1,
 class _R2,
 bool _Sfinae = true>
 using _Ratio_divide_sfinae = typename _Ratio_multiply_sfinae<
  _R1, typename _Ratio_divide<_R1, _R2>::_R2_inverse, _Sfinae>::type;

template<class _R1,
 class _R2>
 using ratio_divide = _Ratio_divide_sfinae<_R1, _R2, false>;


template<class _R1,
 class _R2>
 struct ratio_equal
  : _Cat_base<_R1::num == _R2::num && _R1::den == _R2::den>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct ratio_not_equal
  : integral_constant<bool, !ratio_equal<_R1, _R2>::value>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_not_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct _Ratio_less
 {
 static constexpr intmax_t _N1 = _R1::num;
 static constexpr intmax_t _D1 = _R1::den;
 static constexpr intmax_t _N2 = _R2::num;
 static constexpr intmax_t _D2 = _R2::den;

 static constexpr intmax_t _Gn = _Gcd<_N1, _N2>::value;
 static constexpr intmax_t _Gd = _Gcd<_D1, _D2>::value;

 static constexpr intmax_t _Left = _Safe_mult<_N1 / _Gn, _D2 / _Gd>::value;
 static constexpr intmax_t _Right = _Safe_mult<_N2 / _Gn, _D1 / _Gd>::value;

 typedef integral_constant<bool, (_Left < _Right)> type;
 };

template<class _R1,
 class _R2>
 struct ratio_less
  : _Ratio_less<_R1, _R2>::type
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_less<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct ratio_less_equal
  : integral_constant<bool, !ratio_less<_R2, _R1>::value>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_less_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct ratio_greater
  : integral_constant<bool, ratio_less<_R2, _R1>::value>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_greater<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct ratio_greater_equal
  : integral_constant<bool, !ratio_less<_R1, _R2>::value>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_greater_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
 };



template<class _R1,
 class _R2>
 constexpr bool ratio_equal_v = ratio_equal<_R1, _R2>::value;
template<class _R1,
 class _R2>
 constexpr bool ratio_not_equal_v = ratio_not_equal<_R1, _R2>::value;
template<class _R1,
 class _R2>
 constexpr bool ratio_less_v = ratio_less<_R1, _R2>::value;
template<class _R1,
 class _R2>
 constexpr bool ratio_less_equal_v = ratio_less_equal<_R1, _R2>::value;
template<class _R1,
 class _R2>
 constexpr bool ratio_greater_v = ratio_greater<_R1, _R2>::value;
template<class _R1,
 class _R2>
 constexpr bool ratio_greater_equal_v = ratio_greater_equal<_R1, _R2>::value;




typedef ratio<1, 1000000000000000000LL> atto;
typedef ratio<1, 1000000000000000LL> femto;
typedef ratio<1, 1000000000000LL> pico;

typedef ratio<1, 1000000000> nano;
typedef ratio<1, 1000000> micro;
typedef ratio<1, 1000> milli;
typedef ratio<1, 100> centi;
typedef ratio<1, 10> deci;
typedef ratio<10, 1> deca;
typedef ratio<100, 1> hecto;
typedef ratio<1000, 1> kilo;
typedef ratio<1000000, 1> mega;
typedef ratio<1000000000, 1> giga;

typedef ratio<1000000000000LL, 1> tera;
typedef ratio<1000000000000000LL, 1> peta;
typedef ratio<1000000000000000000LL, 1> exa;
}

#pragma warning(pop)
#pragma pack(pop)
# 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\chrono" 2 3


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
 extern "C" {
# 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
typedef long clock_t;

struct _timespec32
{
    __time32_t tv_sec;
    long tv_nsec;
};

struct _timespec64
{
    __time64_t tv_sec;
    long tv_nsec;
};


    struct timespec
    {
        time_t tv_sec;
        long tv_nsec;
    };
# 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
__declspec(dllimport) int* __cdecl __daylight(void);





__declspec(dllimport) long* __cdecl __dstbias(void);





__declspec(dllimport) long* __cdecl __timezone(void);





__declspec(dllimport) char** __cdecl __tzname(void);




__declspec(dllimport) errno_t __cdecl _get_daylight(
          int* _Daylight
    );


__declspec(dllimport) errno_t __cdecl _get_dstbias(
          long* _DaylightSavingsBias
    );


__declspec(dllimport) errno_t __cdecl _get_timezone(
          long* _TimeZone
    );


__declspec(dllimport) errno_t __cdecl _get_tzname(
                                 size_t* _ReturnValue,
                                 char* _Buffer,
                                 size_t _SizeInBytes,
                                 int _Index
    );
# 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
__declspec(dllimport) char* __cdecl asctime(
         struct tm const* _Tm
    );




    __declspec(dllimport) errno_t __cdecl asctime_s(
                                                            char* _Buffer,
                                                            size_t _SizeInBytes,
                                                            struct tm const* _Tm
        );


extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(char (&_Buffer)[_Size], struct tm const* _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }






__declspec(dllimport) clock_t __cdecl clock(void);




__declspec(dllimport) char* __cdecl _ctime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime32_s(
                                                        char* _Buffer,
                                                        size_t _SizeInBytes,
                                                        __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(char (&_Buffer)[_Size], __time32_t const* _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }
# 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
__declspec(dllimport) char* __cdecl _ctime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime64_s(
                                                          char* _Buffer,
                                                          size_t _SizeInBytes,
                                                          __time64_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(char (&_Buffer)[_Size], __time64_t const* _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }






__declspec(dllimport) double __cdecl _difftime32(
         __time32_t _Time1,
         __time32_t _Time2
    );


__declspec(dllimport) double __cdecl _difftime64(
         __time64_t _Time1,
         __time64_t _Time2
    );



__declspec(dllimport) struct tm* __cdecl _gmtime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime32_s(
          struct tm* _Tm,
          __time32_t const* _Time
    );



__declspec(dllimport) struct tm* __cdecl _gmtime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime64_s(
          struct tm* _Tm,
          __time64_t const* _Time
    );



__declspec(dllimport) struct tm* __cdecl _localtime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime32_s(
          struct tm* _Tm,
          __time32_t const* _Time
    );



__declspec(dllimport) struct tm* __cdecl _localtime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime64_s(
          struct tm* _Tm,
          __time64_t const* _Time
    );


__declspec(dllimport) __time32_t __cdecl _mkgmtime32(
            struct tm* _Tm
    );


__declspec(dllimport) __time64_t __cdecl _mkgmtime64(
            struct tm* _Tm
    );


__declspec(dllimport) __time32_t __cdecl _mktime32(
            struct tm* _Tm
    );


__declspec(dllimport) __time64_t __cdecl _mktime64(
            struct tm* _Tm
    );



__declspec(dllimport) size_t __cdecl strftime(
                                  char* _Buffer,
                                  size_t _SizeInBytes,
                                  char const* _Format,
                                  struct tm const* _Tm
    );



__declspec(dllimport) size_t __cdecl _strftime_l(
                                  char* _Buffer,
                                  size_t _MaxSize,
                                  char const* _Format,
                                  struct tm const* _Tm,
                                  _locale_t _Locale
    );


__declspec(dllimport) errno_t __cdecl _strdate_s(
                                                       char* _Buffer,
                                                       size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }




 __declspec(dllimport) char* __cdecl _strdate( char *_Buffer);





__declspec(dllimport) errno_t __cdecl _strtime_s(
                                                       char* _Buffer,
                                                       size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }




 __declspec(dllimport) char* __cdecl _strtime( char *_Buffer);




__declspec(dllimport) __time32_t __cdecl _time32(
              __time32_t* _Time
    );

__declspec(dllimport) __time64_t __cdecl _time64(
              __time64_t* _Time
    );



__declspec(dllimport) int __cdecl _timespec32_get(
          struct _timespec32* _Ts,
          int _Base
    );



__declspec(dllimport) int __cdecl _timespec64_get(
          struct _timespec64* _Ts,
          int _Base
    );
# 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
    __declspec(dllimport) void __cdecl _tzset(void);


    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _getsystime(
              struct tm* _Tm
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _setsystime(
             struct tm* _Tm,
             unsigned _Milliseconds
        );
# 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
        static __inline char* __cdecl ctime(
                 time_t const* const _Time
            )
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _ctime64(_Time);
#pragma warning(pop)
 }


        static __inline double __cdecl difftime(
                 time_t const _Time1,
                 time_t const _Time2
            )
        {
            return _difftime64(_Time1, _Time2);
        }


        static __inline struct tm* __cdecl gmtime(
                 time_t const* const _Time)
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _gmtime64(_Time);
#pragma warning(pop)
 }


        static __inline struct tm* __cdecl localtime(
                 time_t const* const _Time
            )
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _localtime64(_Time);
#pragma warning(pop)
 }


        static __inline time_t __cdecl _mkgmtime(
                    struct tm* const _Tm
            )
        {
            return _mkgmtime64(_Tm);
        }


        static __inline time_t __cdecl mktime(
                    struct tm* const _Tm
            )
        {
            return _mktime64(_Tm);
        }

        static __inline time_t __cdecl time(
                      time_t* const _Time
            )
        {
            return _time64(_Time);
        }


        static __inline int __cdecl timespec_get(
                  struct timespec* const _Ts,
                  int const _Base
            )
        {
            return _timespec64_get((struct _timespec64*)_Ts, _Base);
        }



            static __inline errno_t __cdecl ctime_s(
                                                                    char* const _Buffer,
                                                                    size_t const _SizeInBytes,
                                                                    time_t const* const _Time
                )
            {
                return _ctime64_s(_Buffer, _SizeInBytes, _Time);
            }


            static __inline errno_t __cdecl gmtime_s(
                      struct tm* const _Tm,
                      time_t const* const _Time
                )
            {
                return _gmtime64_s(_Tm, _Time);
            }


            static __inline errno_t __cdecl localtime_s(
                      struct tm* const _Tm,
                      time_t const* const _Time
                )
            {
                return _localtime64_s(_Tm, _Time);
            }
# 593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tzset" ". See online help for details.")) __declspec(dllimport) void __cdecl tzset(void);






}
# 600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
#pragma pack(pop)
# 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\chrono" 2 3

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\thr/xtimec.h" 1 3





# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\thr/xthrcommon.h" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)
# 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\thr/xthrcommon.h" 3
#pragma warning(disable: 4511 4512)

extern "C" {

#pragma warning(disable: 4115 4100 4097 4245)
# 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\thr/xthrcommon.h" 3
typedef unsigned int _Thrd_id_t;
typedef struct
 {
 void *_Hnd;
 _Thrd_id_t _Id;
 } _Thrd_imp_t;





typedef unsigned int (__stdcall *_Thrd_callback_t)(void *);
# 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\thr/xthrcommon.h" 3
typedef struct _Mtx_internal_imp_t *_Mtx_imp_t;

typedef struct _Cnd_internal_imp_t *_Cnd_imp_t;
typedef int _Tss_imp_t;


__declspec(dllimport) void __cdecl _Thrd_abort(const char *);
__declspec(dllimport) int __cdecl _Thrd_start(_Thrd_imp_t *, _Thrd_callback_t, void *);
void _Tss_destroy(void);
# 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\thr/xthrcommon.h" 3
}
# 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\thr/xthrcommon.h" 3
#pragma warning(pop)
#pragma pack(pop)
# 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\thr/xtimec.h" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)




extern "C" {


typedef struct xtime
 {
 __time64_t sec;
 long nsec;
 } xtime;

__declspec(dllimport) int __cdecl xtime_get(xtime*, int);

__declspec(dllimport) long __cdecl _Xtime_diff_to_millis(const xtime *);
__declspec(dllimport) long __cdecl _Xtime_diff_to_millis2(const xtime*, const xtime *);
__declspec(dllimport) long long __cdecl _Xtime_get_ticks(void);



__declspec(dllimport) long long __cdecl _Query_perf_counter(void);
__declspec(dllimport) long long __cdecl _Query_perf_frequency(void);


}


#pragma warning(pop)
#pragma pack(pop)
# 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\chrono" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4455)
#pragma warning(disable: 6326)

namespace std {
namespace chrono {

template<class _Rep>
 struct treat_as_floating_point
  : is_floating_point<_Rep>
 {
 };


template<class _Rep>
 constexpr bool treat_as_floating_point_v = treat_as_floating_point<_Rep>::value;



template<class _Rep>
 struct duration_values
 {
 static constexpr _Rep zero()
  {
  return (_Rep(0));
  }

 static constexpr _Rep (min)()
  {
  return (numeric_limits<_Rep>::lowest());
  }

 static constexpr _Rep (max)()
  {
  return ((numeric_limits<_Rep>::max)());
  }
 };


template<class _Ty>
 struct _Is_ratio
 {
 static constexpr bool value = false;
 };

template<intmax_t _R1,
 intmax_t _R2>
 struct _Is_ratio<ratio<_R1, _R2> >
 {
 static constexpr bool value = true;
 };


template<class _Rep,
 class _Period = ratio<1> >
 class duration;

template<class _Ty>
 struct _Is_duration
  : false_type
 {
 };

template<class _Rep,
 class _Period>
 struct _Is_duration<duration<_Rep, _Period> >
  : true_type
 {
 };

template<class _To,
 class _Rep,
 class _Period> inline
 constexpr typename enable_if<_Is_duration<_To>::value, _To>::type
  duration_cast(const duration<_Rep, _Period>&);

template<class _Rep,
 class _Period>
 class duration
 {
public:
 typedef duration<_Rep, _Period> _Myt;
 typedef _Rep rep;
 typedef _Period period;

 static_assert(!_Is_duration<_Rep>::value,
  "duration can't have duration as first template argument");
 static_assert(_Is_ratio<_Period>::value,
  "period not an instance of std::ratio");
 static_assert(0 < _Period::num,
  "period negative or zero");

 constexpr duration() = default;

 template<class _Rep2,
  class = typename enable_if<is_convertible<_Rep2, _Rep>::value
   && (treat_as_floating_point<_Rep>::value
    || !treat_as_floating_point<_Rep2>::value),
   void>::type>
  constexpr explicit duration(const _Rep2& _Val)
   : _MyRep(static_cast<_Rep>(_Val))
  {
  }

 template<class _Rep2,
  class _Period2,
  class = typename enable_if<treat_as_floating_point<_Rep>::value

   || (_Ratio_divide_sfinae<_Period2, _Period>::den == 1

    && !treat_as_floating_point<_Rep2>::value),
   void>::type>
  constexpr duration(const duration<_Rep2, _Period2>& _Dur)
   : _MyRep(chrono::duration_cast<_Myt>(_Dur).count())
  {
  }

 constexpr _Rep count() const
  {
  return (_MyRep);
  }

 constexpr _Myt operator+() const
  {
  return (*this);
  }

 constexpr _Myt operator-() const
  {
  return (_Myt(0 - _MyRep));
  }

 _Myt& operator++()
  {
  ++_MyRep;
  return (*this);
  }

 _Myt operator++(int)
  {
  return (_Myt(_MyRep++));
  }

 _Myt& operator--()
  {
  --_MyRep;
  return (*this);
  }

 _Myt operator--(int)
  {
  return (_Myt(_MyRep--));
  }

 _Myt& operator+=(const _Myt& _Right)
  {
  _MyRep += _Right._MyRep;
  return (*this);
  }

 _Myt& operator-=(const _Myt& _Right)
  {
  _MyRep -= _Right._MyRep;
  return (*this);
  }

 _Myt& operator*=(const _Rep& _Right)
  {
  _MyRep *= _Right;
  return (*this);
  }

 _Myt& operator/=(const _Rep& _Right)
  {
  _MyRep /= _Right;
  return (*this);
  }

 _Myt& operator%=(const _Rep& _Right)
  {
  _MyRep %= _Right;
  return (*this);
  }

 _Myt& operator%=(const _Myt& _Right)
  {
  _MyRep %= _Right.count();
  return (*this);
  }

 static constexpr _Myt zero()
  {
  return (_Myt(duration_values<_Rep>::zero()));
  }

 static constexpr _Myt (min)()
  {
  return (_Myt((duration_values<_Rep>::min)()));
  }
 static constexpr _Myt (max)()
  {
  return (_Myt((duration_values<_Rep>::max)()));
  }

private:
 _Rep _MyRep;
 };

template<class _Clock,
 class _Duration = typename _Clock::duration>
 class time_point
 {
public:
 typedef _Clock clock;
 typedef _Duration duration;
 typedef typename _Duration::rep rep;
 typedef typename _Duration::period period;

 static_assert(_Is_duration<_Duration>::value,
  "duration must be an instance of std::duration");

 constexpr time_point()
  : _MyDur(_Duration::zero())
  {
  }

 constexpr explicit time_point(const _Duration& _Other)
  : _MyDur(_Other)
  {
  }

 template<class _Duration2,
  class = typename enable_if<is_convertible<_Duration2,
   _Duration>::value,
   void>::type>
  constexpr time_point(const time_point<_Clock, _Duration2>& _Tp)
  : _MyDur(_Tp.time_since_epoch())
  {
  }

 constexpr _Duration time_since_epoch() const
  {
  return (_MyDur);
  }

 time_point& operator+=(const _Duration& _Dur)
  {
  _MyDur += _Dur;
  return (*this);
  }

 time_point& operator-=(const _Duration& _Dur)
  {
  _MyDur -= _Dur;
  return (*this);
  }

 static constexpr time_point (min)()
  {
  return (time_point((_Duration::min)()));
  }
 static constexpr time_point (max)()
  {
  return (time_point((_Duration::max)()));
  }

private:
 _Duration _MyDur;
 };
}


template<intmax_t _Ax,
 intmax_t _Bx>
 struct _Lcm
 {
 static constexpr intmax_t _Gx = _Gcd<_Ax, _Bx>::value;
 static constexpr intmax_t value = (_Ax / _Gx) * _Bx;
 };


template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2>
 struct common_type<
  chrono::duration<_Rep1, _Period1>,
  chrono::duration<_Rep2, _Period2> >
 {
 typedef chrono::duration<typename common_type<_Rep1, _Rep2>::type,
  ratio<_Gcd<_Period1::num, _Period2::num>::value,
   _Lcm<_Period1::den, _Period2::den>::value> > type;
 };

template<class _Clock,
 class _Duration1,
 class _Duration2>
 struct common_type<
  chrono::time_point<_Clock, _Duration1>,
  chrono::time_point<_Clock, _Duration2> >
 {
 typedef chrono::time_point<
  _Clock, typename common_type<_Duration1, _Duration2>::type> type;
 };

namespace chrono {

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type
  operator+(
   const duration<_Rep1, _Period1>& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type _CD;
 return (_CD(_CD(_Left).count() + _CD(_Right).count()));
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type
  operator-(
   const duration<_Rep1, _Period1>& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _CD;
 return (_CD(_CD(_Left).count() - _CD(_Right).count()));
 }

template<class _Rep1,
 class _Period1,
 class _Rep2> inline
 constexpr typename enable_if<is_convertible<_Rep2,
  typename common_type<_Rep1, _Rep2>::type>::value,
  duration<typename common_type<_Rep1, _Rep2>::type, _Period1> >::type
  operator*(
   const duration<_Rep1, _Period1>& _Left,
   const _Rep2& _Right)
 {
 typedef typename common_type<_Rep1, _Rep2>::type _CR;
 typedef duration<_CR, _Period1> _CD;
 return (_CD(_CD(_Left).count() * _Right));
 }

template<class _Rep1,
 class _Rep2,
 class _Period2> inline
 constexpr typename enable_if<is_convertible<_Rep1,
  typename common_type<_Rep1, _Rep2>::type>::value,
  duration<typename common_type<_Rep1, _Rep2>::type, _Period2> >::type
  operator*(
   const _Rep1& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 return (_Right * _Left);
 }

template<class _CR,
 class _Period1,
 class _Rep2,
 bool = is_convertible<_Rep2, _CR>::value>
 struct _Duration_div_mod1
 {
 typedef duration<_CR, _Period1> type;
 };

template<class _CR,
 class _Period1,
 class _Rep2>
 struct _Duration_div_mod1<_CR, _Period1, _Rep2, false>
 {
 };

template<class _Rep1,
 class _Period1,
 class _Rep2,
 bool = _Is_duration<_Rep2>::value>
 struct _Duration_div_mod
 {
 };

template<class _Rep1,
 class _Period1,
 class _Rep2>
 struct _Duration_div_mod<_Rep1, _Period1, _Rep2, false>
  : _Duration_div_mod1<typename common_type<_Rep1, _Rep2>::type,
   _Period1, _Rep2>
 {
 };

template<class _Rep1,
 class _Period1,
 class _Rep2> inline
 typename _Duration_div_mod<_Rep1, _Period1, _Rep2>::type
  constexpr operator/(
   const duration<_Rep1, _Period1>& _Left,
   const _Rep2& _Right)
 {
 typedef typename common_type<_Rep1, _Rep2>::type _CR;
 typedef duration<_CR, _Period1> _CD;
 return (_CD(_CD(_Left).count() / _Right));
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr typename common_type<_Rep1, _Rep2>::type
  operator/(
   const duration<_Rep1, _Period1>& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _CD;
 return (_CD(_Left).count() / _CD(_Right).count());
 }

template<class _Rep1,
 class _Period1,
 class _Rep2> inline
 constexpr typename _Duration_div_mod<_Rep1, _Period1, _Rep2>::type
  operator%(
   const duration<_Rep1, _Period1>& _Left,
   const _Rep2& _Right)
 {
 typedef typename common_type<_Rep1, _Rep2>::type _CR;
 typedef duration<_CR, _Period1> _CD;
 return (_CD(_CD(_Left).count() % _Right));
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr typename common_type<
  duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type
  operator%(
   const duration<_Rep1, _Period1>& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _CD;
 return (_CD(_CD(_Left).count() % _CD(_Right).count()));
 }


template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr bool operator==(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type _CT;
 return (_CT(_Left).count() == _CT(_Right).count());
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr bool operator!=(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr bool operator<(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type _CT;
 return (_CT(_Left).count() < _CT(_Right).count());
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr bool operator<=(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr bool operator>(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr bool operator>=(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _To,
 class _Rep,
 class _Period> inline
 constexpr typename enable_if<_Is_duration<_To>::value, _To>::type
  duration_cast(const duration<_Rep, _Period>& _Dur)
 {
 typedef ratio_divide<_Period, typename _To::period> _CF;

 typedef typename _To::rep _ToRep;
 typedef typename common_type<_ToRep, _Rep, intmax_t>::type _CR;
 return (_CF::num == 1 && _CF::den == 1
   ? static_cast<_To>(static_cast<_ToRep>(_Dur.count()))
  : _CF::num != 1 && _CF::den == 1
   ? static_cast<_To>(static_cast<_ToRep>(
    static_cast<_CR>(
     _Dur.count()) * static_cast<_CR>(_CF::num)))
  : _CF::num == 1 && _CF::den != 1
   ? static_cast<_To>(static_cast<_ToRep>(
    static_cast<_CR>(_Dur.count())
     / static_cast<_CR>(_CF::den)))
  : static_cast<_To>(static_cast<_ToRep>(
   static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num)
    / static_cast<_CR>(_CF::den))));
 }


template<class _Dur>
 using _As_integral = duration<
  typename conditional<treat_as_floating_point<typename _Dur::rep>::value,
   intmax_t,
   typename _Dur::rep>::type,
  typename _Dur::period>;


template<class _Rep,
 class _Period,
 class _To_integral> inline
 constexpr _To_integral _Floor(const duration<_Rep, _Period>& _Dur,
  const _To_integral& _Dur_integral)
 {
 return (_Dur_integral <= _Dur
  ? _Dur_integral
  : _Dur_integral - static_cast<_To_integral>(1));
 }

template<class _To,
 class _Rep,
 class _Period> inline
 constexpr typename enable_if<_Is_duration<_To>::value, _To>::type
  floor(const duration<_Rep, _Period>& _Dur)
 {

 return (_Floor(_Dur, chrono::duration_cast<_As_integral<_To> >(_Dur)));
 }


template<class _Rep,
 class _Period,
 class _To_integral> inline
 constexpr _To_integral _Ceil(const duration<_Rep, _Period>& _Dur,
  const _To_integral& _Dur_integral)
 {
 return (_Dur <= _Dur_integral
  ? _Dur_integral
  : _Dur_integral + static_cast<_To_integral>(1));
 }

template<class _To,
 class _Rep,
 class _Period> inline
 constexpr typename enable_if<_Is_duration<_To>::value, _To>::type
  ceil(const duration<_Rep, _Period>& _Dur)
 {

 return (_Ceil(_Dur, chrono::duration_cast<_As_integral<_To> >(_Dur)));
 }


template<class _Rep> inline
 constexpr typename make_unsigned<_Rep>::type _Make_unsigned(_Rep _Val)
 {
 return (static_cast<typename make_unsigned<_Rep>::type>(_Val));
 }


template<class _Rep> inline
 constexpr bool _Is_even(_Rep _Val)
 {
 return (_Val % 2 == 0);
 }


template<class _Rep> inline
 constexpr _Rep _Bankers_divide_impl(_Rep _Truncated, _Rep _Mod,
  _Rep _Half_divisor, bool _Half_divisor_is_exact)
 {
 return (_Truncated + static_cast<_Rep>(

  _Mod > _Half_divisor

   || (_Mod == _Half_divisor

   && _Half_divisor_is_exact
   && !_Is_even(_Truncated)
  )));
 }

template<class _Rep> inline
 constexpr _Rep _Bankers_divide_tag(_Rep _Dividend, _Rep _Divisor, false_type)
 {
 return (_Bankers_divide_impl(
  _Dividend / _Divisor,
  _Dividend % _Divisor,
  _Divisor / static_cast<_Rep>(2),
  _Is_even(_Divisor)));
 }

template<class _Rep> inline
 constexpr _Rep _Bankers_divide_tag(_Rep _Dividend, _Rep _Divisor, true_type)
 {
 return (static_cast<_Rep>(duration_values<_Rep>::zero() <= _Dividend
  ? _Bankers_divide_tag(_Make_unsigned(_Dividend),
   _Make_unsigned(_Divisor), false_type())
  : duration_values<_Rep>::zero() - _Bankers_divide_tag(
   duration_values<_Rep>::zero() - _Make_unsigned(_Dividend),
   _Make_unsigned(_Divisor), false_type())));
 }

template<class _Rep> inline
 constexpr _Rep _Bankers_divide(_Rep _Dividend, _Rep _Divisor)
 {



 return (_Bankers_divide_tag(_Dividend, _Divisor, is_signed<_Rep>()));
 }


template<class _Rep> inline
 constexpr bool _Round_should_truncate(_Rep _Val, intmax_t _Val_trunc)
 {
 return (_Val - static_cast<_Rep>(_Val_trunc) < static_cast<_Rep>(_Val_trunc + 1) - _Val
  || (_Val - static_cast<_Rep>(_Val_trunc) == static_cast<_Rep>(_Val_trunc + 1) - _Val
   && _Is_even(_Val_trunc)));
 }

template<class _Rep> inline
 constexpr intmax_t _Round_fp_non_negative(_Rep _Val, intmax_t _Val_trunc)
 {
 return (_Round_should_truncate(_Val, _Val_trunc) ? _Val_trunc : _Val_trunc + 1);
 }

template<class _Rep> inline
 constexpr intmax_t _Round_fp_non_negative(_Rep _Val)
 {
 return (_Round_fp_non_negative(_Val, static_cast<intmax_t>(_Val)));
 }

template<class _Rep> inline
 constexpr _Rep _Round_fp(_Rep _Val)
 {

 static_assert(treat_as_floating_point<_Rep>::value,
  "_Round_fp needs floating input");
 return (static_cast<_Rep>(duration_values<_Rep>::zero() <= _Val
  ? _Round_fp_non_negative(_Val)
  : (duration_values<_Rep>::zero()
   - _Round_fp_non_negative(duration_values<_Rep>::zero() - _Val))
  ));
 }


template<class _To,
 class _Rep,
 class _Period> inline
 constexpr _To _Round(const duration<_Rep, _Period>& _Dur,
  false_type, false_type)
 {
 typedef ratio_divide<_Period, typename _To::period> _CF;

 typedef typename _To::rep _ToRep;
 typedef typename common_type<_ToRep, _Rep, intmax_t>::type _CR;
 return (_CF::num == 1 && _CF::den == 1
   ? static_cast<_To>(static_cast<_ToRep>(_Dur.count()))
  : _CF::num != 1 && _CF::den == 1
   ? static_cast<_To>(static_cast<_ToRep>(
    static_cast<_CR>(
     _Dur.count()) * static_cast<_CR>(_CF::num)))
  : _CF::num == 1 && _CF::den != 1
   ? static_cast<_To>(static_cast<_ToRep>(_Bankers_divide(
    static_cast<_CR>(_Dur.count()), static_cast<_CR>(_CF::den))))
  : static_cast<_To>(static_cast<_ToRep>(
   _Bankers_divide(
    static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num),
    static_cast<_CR>(_CF::den)))));
 }

template<class _To,
 class _Rep,
 class _Period> inline
 constexpr _To _Round(const duration<_Rep, _Period>& _Dur,
  false_type, true_type)
 {


 typedef duration<_Rep, typename _To::period> _FloatTo;
 return (static_cast<_To>(static_cast<typename _To::rep>(
  _Round_fp(chrono::duration_cast<_FloatTo>(_Dur).count()))));
 }

template<class _To,
 class _Rep,
 class _Period,
 class _Source_integral> inline
 constexpr _To _Round(const duration<_Rep, _Period>& _Dur,
  true_type, _Source_integral)
 {

 return (static_cast<_To>(_Round_fp(chrono::duration_cast<_To>(_Dur).count())));
 }

template<class _To,
 class _Rep,
 class _Period> inline
 constexpr typename enable_if<_Is_duration<_To>::value, _To>::type
  round(const duration<_Rep, _Period>& _Dur)
 {
 return (_Round<_To>(_Dur,
  treat_as_floating_point<typename _To::rep>(),
  treat_as_floating_point<_Rep>()));
 }


template<class _Rep,
 class _Period> inline
 constexpr typename enable_if<numeric_limits<_Rep>::is_signed,
  duration<_Rep, _Period> >::type
  abs(const duration<_Rep, _Period> _Dur)
 {
 return (_Dur < duration<_Rep, _Period>::zero()
  ? duration<_Rep, _Period>::zero() - _Dur
  : _Dur);
 }


typedef duration<long long, nano> nanoseconds;
typedef duration<long long, micro> microseconds;
typedef duration<long long, milli> milliseconds;
typedef duration<long long> seconds;
typedef duration<int, ratio<60> > minutes;
typedef duration<int, ratio<3600> > hours;


template<class _Clock,
 class _Duration,
 class _Rep,
 class _Period> inline
 constexpr time_point<_Clock,
  typename common_type<_Duration, duration<_Rep, _Period> >::type>
  operator+(
   const time_point<_Clock, _Duration>& _Left,
   const duration<_Rep, _Period>& _Right)
 {
 typedef time_point<_Clock, typename common_type<
  _Duration, duration<_Rep, _Period> >::type> _RT;
 return (_RT(_Left.time_since_epoch() + _Right));
 }

template<class _Rep,
 class _Period,
 class _Clock,
 class _Duration> inline
 constexpr time_point<_Clock,
  typename common_type<duration<_Rep, _Period>, _Duration>::type>
  operator+(
   const duration<_Rep, _Period>& _Left,
   const time_point<_Clock, _Duration>& _Right)
 {
 return (_Right + _Left);
 }

template<class _Clock,
 class _Duration,
 class _Rep,
 class _Period> inline
 constexpr time_point<_Clock,
  typename common_type<_Duration, duration<_Rep, _Period> >::type>
  operator-(
   const time_point<_Clock, _Duration>& _Left,
   const duration<_Rep, _Period>& _Right)
 {
 return (_Left + (-_Right));
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 constexpr typename common_type<_Duration1, _Duration2>::type
  operator-(
   const time_point<_Clock, _Duration1>& _Left,
   const time_point<_Clock, _Duration2>& _Right)
 {
 return (_Left.time_since_epoch() - _Right.time_since_epoch());
 }


template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 constexpr bool operator==(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (_Left.time_since_epoch() == _Right.time_since_epoch());
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 constexpr bool operator!=(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 constexpr bool operator<(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (_Left.time_since_epoch() < _Right.time_since_epoch());
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 constexpr bool operator<=(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 constexpr bool operator>(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 constexpr bool operator>=(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _To,
 class _Clock,
 class _Duration> inline
 constexpr typename enable_if<_Is_duration<_To>::value,
  time_point<_Clock, _To> >::type
  time_point_cast(const time_point<_Clock, _Duration>& _Time)
 {
 return (time_point<_Clock, _To>(
  chrono::duration_cast<_To>(_Time.time_since_epoch())));
 }


template<class _To,
 class _Clock,
 class _Duration> inline
 constexpr typename enable_if<_Is_duration<_To>::value,
  time_point<_Clock, _To> >::type
  floor(const time_point<_Clock, _Duration>& _Time)
 {
 return (time_point<_Clock, _To>(
  chrono::floor<_To>(_Time.time_since_epoch())));
 }


template<class _To,
 class _Clock,
 class _Duration> inline
 constexpr typename enable_if<_Is_duration<_To>::value,
  time_point<_Clock, _To> >::type
  ceil(const time_point<_Clock, _Duration>& _Time)
 {
 return (time_point<_Clock, _To>(
  chrono::ceil<_To>(_Time.time_since_epoch())));
 }


template<class _To,
 class _Clock,
 class _Duration> inline
 constexpr typename enable_if<_Is_duration<_To>::value,
  time_point<_Clock, _To> >::type
  round(const time_point<_Clock, _Duration>& _Time)
 {
 return (time_point<_Clock, _To>(
  chrono::round<_To>(_Time.time_since_epoch())));
 }


struct system_clock

 {
 typedef long long rep;

 typedef ratio_multiply<ratio<100, 1>, nano> period;

 typedef chrono::duration<rep, period> duration;
 typedef chrono::time_point<system_clock> time_point;
 static constexpr bool is_steady = false;

 static time_point now() noexcept
  {
  return (time_point(duration(_Xtime_get_ticks())));
  }

 static __time64_t to_time_t(const time_point& _Time) noexcept
  {
  return ((__time64_t)(_Time.time_since_epoch().count()
   / (long long)10000000));
  }

 static time_point from_time_t(__time64_t _Tm) noexcept
  {
  return (time_point(duration(_Tm * (long long)10000000)));
  }
 };

struct steady_clock
 {
 typedef long long rep;
 typedef nano period;
 typedef nanoseconds duration;
 typedef chrono::time_point<steady_clock> time_point;
 static constexpr bool is_steady = true;

 static time_point now() noexcept
  {
  const long long _Freq = _Query_perf_frequency();
  const long long _Ctr = _Query_perf_counter();
  static_assert(period::num == 1, "This assumes period::num == 1.");
  const long long _Whole = (_Ctr / _Freq) * period::den;
  const long long _Part = (_Ctr % _Freq) * period::den / _Freq;
  return (time_point(duration(_Whole + _Part)));
  }
 };

typedef steady_clock high_resolution_clock;
}


template<class _Rep,
 class _Period> inline
 xtime _To_xtime(const chrono::duration<_Rep, _Period>& _Rel_time)
 {
 xtime _Xt;
 if (_Rel_time <= chrono::duration<_Rep, _Period>::zero())
  {
  _Xt.sec = 0;
  _Xt.nsec = 0;
  }
 else
  {
  chrono::nanoseconds _T0 =
   chrono::system_clock::now().time_since_epoch();
  _T0 += chrono::duration_cast<chrono::nanoseconds>(_Rel_time);
  _Xt.sec = chrono::duration_cast<chrono::seconds>(_T0).count();
  _T0 -= chrono::seconds(_Xt.sec);
  _Xt.nsec = (long)_T0.count();
  }
 return (_Xt);
 }







inline namespace literals {
inline namespace chrono_literals {
inline constexpr chrono::hours operator "" h(unsigned long long _Val)
 {
 return (chrono::hours(_Val));
 }

inline constexpr chrono::duration<double, ratio<3600> > operator "" h(
 long double _Val)
 {
 return (chrono::duration<double, ratio<3600> >(_Val));
 }

inline constexpr chrono::minutes (operator "" min)(unsigned long long _Val)
 {
 return (chrono::minutes(_Val));
 }

inline constexpr chrono::duration<double, ratio<60> > (operator "" min)(
 long double _Val)
 {
 return (chrono::duration<double, ratio<60> >(_Val));
 }

inline constexpr chrono::seconds operator "" s(unsigned long long _Val)
 {
 return (chrono::seconds(_Val));
 }

inline constexpr chrono::duration<double> operator "" s(long double _Val)
 {
 return (chrono::duration<double>(_Val));
 }

inline constexpr chrono::milliseconds operator "" ms(unsigned long long _Val)
 {
 return (chrono::milliseconds(_Val));
 }

inline constexpr chrono::duration<double, milli> operator "" ms(
 long double _Val)
 {
 return (chrono::duration<double, milli>(_Val));
 }

inline constexpr chrono::microseconds operator "" us(unsigned long long _Val)
 {
 return (chrono::microseconds(_Val));
 }

inline constexpr chrono::duration<double, micro> operator "" us(
 long double _Val)
 {
 return (chrono::duration<double, micro>(_Val));
 }

inline constexpr chrono::nanoseconds operator "" ns(unsigned long long _Val)
 {
 return (chrono::nanoseconds(_Val));
 }

inline constexpr chrono::duration<double, nano> operator "" ns(
 long double _Val)
 {
 return (chrono::duration<double, nano>(_Val));
 }
}
}

namespace chrono {
 using namespace literals::chrono_literals;
}





}

#pragma warning(pop)
#pragma pack(pop)
# 139 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 2


typedef std::chrono::high_resolution_clock::time_point TimeVar;




template<typename F, typename... Args>
double funcTime(F func, Args&&... args) {
 TimeVar t1 = std::chrono::high_resolution_clock::now();
 func(std::forward<Args>(args)...);
 return std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::high_resolution_clock::now() - t1).count();
}
# 193 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h" 1
# 25 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
extern "C" const GUID IID_IPrintDialogCallback;






extern "C" const GUID IID_IPrintDialogServices;
# 41 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h" 1
# 48 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h"
#pragma warning(push)
#pragma warning(disable: 4201)





# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 54 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h" 2






extern "C" {
# 94 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h"
struct _PSP;
typedef struct _PSP * HPROPSHEETPAGE;


struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;


typedef UINT (__stdcall *LPFNPSPCALLBACKA)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEA *ppsp);
typedef UINT (__stdcall *LPFNPSPCALLBACKW)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEW *ppsp);
# 138 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h"
typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;
# 194 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h"
typedef struct _PROPSHEETPAGEA_V1
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;
} PROPSHEETPAGEA_V1, *LPPROPSHEETPAGEA_V1;
typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;

typedef struct _PROPSHEETPAGEA_V2
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;
} PROPSHEETPAGEA_V2, *LPPROPSHEETPAGEA_V2;
typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;

typedef struct _PROPSHEETPAGEA_V3
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;

    HANDLE hActCtx;
} PROPSHEETPAGEA_V3, *LPPROPSHEETPAGEA_V3;
typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3;


typedef struct _PROPSHEETPAGEA
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;

    HANDLE hActCtx;

    union
    {
        HBITMAP hbmHeader;
        LPCSTR pszbmHeader;
    } ;

} PROPSHEETPAGEA_V4, *LPPROPSHEETPAGEA_V4;
typedef const PROPSHEETPAGEA_V4 *LPCPROPSHEETPAGEA_V4;


typedef struct _PROPSHEETPAGEW_V1
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
} PROPSHEETPAGEW_V1, *LPPROPSHEETPAGEW_V1;
typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;

typedef struct _PROPSHEETPAGEW_V2
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;
} PROPSHEETPAGEW_V2, *LPPROPSHEETPAGEW_V2;
typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;

typedef struct _PROPSHEETPAGEW_V3
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;

    HANDLE hActCtx;
} PROPSHEETPAGEW_V3, *LPPROPSHEETPAGEW_V3;
typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3;


typedef struct _PROPSHEETPAGEW
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;

    HANDLE hActCtx;

    union
    {
        HBITMAP hbmHeader;
        LPCWSTR pszbmHeader;
    } ;

} PROPSHEETPAGEW_V4, *LPPROPSHEETPAGEW_V4;
typedef const PROPSHEETPAGEW_V4 *LPCPROPSHEETPAGEW_V4;
# 302 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h"
typedef PROPSHEETPAGEA_V4 PROPSHEETPAGEA_LATEST;
typedef PROPSHEETPAGEW_V4 PROPSHEETPAGEW_LATEST;
typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA_LATEST;
typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW_LATEST;
typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA_LATEST;
typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW_LATEST;
# 319 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h"
typedef PROPSHEETPAGEA_V4 PROPSHEETPAGEA;
typedef PROPSHEETPAGEW_V4 PROPSHEETPAGEW;
typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA;
typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW;
typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA;
typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW;
# 443 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h"
typedef int (__stdcall *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);
# 469 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h"
typedef struct _PROPSHEETHEADERA_V1
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCSTR pStartPage; } ; union { LPCPROPSHEETPAGEA ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADERA_V1, *LPPROPSHEETHEADERA_V1;
typedef const PROPSHEETHEADERA_V1 *LPCPROPSHEETHEADERA_V1;

typedef struct _PROPSHEETHEADERA_V2
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCSTR pStartPage; } ; union { LPCPROPSHEETPAGEA ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
    union
    {
        HBITMAP hbmWatermark;
        LPCSTR pszbmWatermark;
    } ;
    HPALETTE hplWatermark;
    union
    {
        HBITMAP hbmHeader;
        LPCSTR pszbmHeader;
    } ;
} PROPSHEETHEADERA_V2, *LPPROPSHEETHEADERA_V2;
typedef const PROPSHEETHEADERA_V2 *LPCPROPSHEETHEADERA_V2;
# 516 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h"
typedef struct _PROPSHEETHEADERW_V1
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCWSTR pStartPage; } ; union { LPCPROPSHEETPAGEW ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADERW_V1, *LPPROPSHEETHEADERW_V1;
typedef const PROPSHEETHEADERW_V1 *LPCPROPSHEETHEADERW_V1;

typedef struct _PROPSHEETHEADERW_V2
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCWSTR pStartPage; } ; union { LPCPROPSHEETPAGEW ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
    union
    {
        HBITMAP hbmWatermark;
        LPCWSTR pszbmWatermark;
    } ;
    HPALETTE hplWatermark;
    union
    {
        HBITMAP hbmHeader;
        LPCWSTR pszbmHeader;
    } ;
} PROPSHEETHEADERW_V2, *LPPROPSHEETHEADERW_V2;
typedef const PROPSHEETHEADERW_V2 *LPCPROPSHEETHEADERW_V2;
# 547 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h"
typedef PROPSHEETHEADERA_V2 PROPSHEETHEADERA;
typedef PROPSHEETHEADERW_V2 PROPSHEETHEADERW;
typedef LPPROPSHEETHEADERA_V2 LPPROPSHEETHEADERA;
typedef LPPROPSHEETHEADERW_V2 LPPROPSHEETHEADERW;
typedef LPCPROPSHEETHEADERA_V2 LPCPROPSHEETHEADERA;
typedef LPCPROPSHEETHEADERW_V2 LPCPROPSHEETHEADERW;
# 583 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h"
__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer);
__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer);
__declspec(dllimport) BOOL __stdcall DestroyPropertySheetPage(HPROPSHEETPAGE);

__declspec(dllimport) INT_PTR __stdcall PropertySheetA(LPCPROPSHEETHEADERA);

__declspec(dllimport) INT_PTR __stdcall PropertySheetW(LPCPROPSHEETHEADERW);
# 601 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h"
typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);


typedef struct _PSHNOTIFY
{
    NMHDR hdr;
    LPARAM lParam;
} PSHNOTIFY, *LPPSHNOTIFY;
# 885 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h"
#pragma warning(pop)
# 901 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h"
}



# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 904 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\prsht.h" 2
# 41 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h" 2







extern "C" {
# 99 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
typedef UINT_PTR (__stdcall *LPOFNHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
# 115 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
typedef struct tagOFN_NT4A {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   LPCSTR lpstrFilter;
   LPSTR lpstrCustomFilter;
   DWORD nMaxCustFilter;
   DWORD nFilterIndex;
   LPSTR lpstrFile;
   DWORD nMaxFile;
   LPSTR lpstrFileTitle;
   DWORD nMaxFileTitle;
   LPCSTR lpstrInitialDir;
   LPCSTR lpstrTitle;
   DWORD Flags;
   WORD nFileOffset;
   WORD nFileExtension;
   LPCSTR lpstrDefExt;
   LPARAM lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;
} OPENFILENAME_NT4A, *LPOPENFILENAME_NT4A;
typedef struct tagOFN_NT4W {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   LPCWSTR lpstrFilter;
   LPWSTR lpstrCustomFilter;
   DWORD nMaxCustFilter;
   DWORD nFilterIndex;
   LPWSTR lpstrFile;
   DWORD nMaxFile;
   LPWSTR lpstrFileTitle;
   DWORD nMaxFileTitle;
   LPCWSTR lpstrInitialDir;
   LPCWSTR lpstrTitle;
   DWORD Flags;
   WORD nFileOffset;
   WORD nFileExtension;
   LPCWSTR lpstrDefExt;
   LPARAM lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;
} OPENFILENAME_NT4W, *LPOPENFILENAME_NT4W;

typedef OPENFILENAME_NT4W OPENFILENAME_NT4;
typedef LPOPENFILENAME_NT4W LPOPENFILENAME_NT4;





typedef struct tagOFNA {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   LPCSTR lpstrFilter;
   LPSTR lpstrCustomFilter;
   DWORD nMaxCustFilter;
   DWORD nFilterIndex;
   LPSTR lpstrFile;
   DWORD nMaxFile;
   LPSTR lpstrFileTitle;
   DWORD nMaxFileTitle;
   LPCSTR lpstrInitialDir;
   LPCSTR lpstrTitle;
   DWORD Flags;
   WORD nFileOffset;
   WORD nFileExtension;
   LPCSTR lpstrDefExt;
   LPARAM lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;





   void * pvReserved;
   DWORD dwReserved;
   DWORD FlagsEx;

} OPENFILENAMEA, *LPOPENFILENAMEA;
typedef struct tagOFNW {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   LPCWSTR lpstrFilter;
   LPWSTR lpstrCustomFilter;
   DWORD nMaxCustFilter;
   DWORD nFilterIndex;
   LPWSTR lpstrFile;
   DWORD nMaxFile;
   LPWSTR lpstrFileTitle;
   DWORD nMaxFileTitle;
   LPCWSTR lpstrInitialDir;
   LPCWSTR lpstrTitle;
   DWORD Flags;
   WORD nFileOffset;
   WORD nFileExtension;
   LPCWSTR lpstrDefExt;
   LPARAM lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;





   void * pvReserved;
   DWORD dwReserved;
   DWORD FlagsEx;

} OPENFILENAMEW, *LPOPENFILENAMEW;

typedef OPENFILENAMEW OPENFILENAME;
typedef LPOPENFILENAMEW LPOPENFILENAME;
# 248 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
__declspec(dllimport) BOOL __stdcall GetOpenFileNameA(LPOPENFILENAMEA);
__declspec(dllimport) BOOL __stdcall GetOpenFileNameW(LPOPENFILENAMEW);





__declspec(dllimport) BOOL __stdcall GetSaveFileNameA(LPOPENFILENAMEA);
__declspec(dllimport) BOOL __stdcall GetSaveFileNameW(LPOPENFILENAMEW);







__declspec(dllimport) short __stdcall GetFileTitleA(LPCSTR, LPSTR Buf, WORD cchSize);
__declspec(dllimport) short __stdcall GetFileTitleW(LPCWSTR, LPWSTR Buf, WORD cchSize);
# 324 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
typedef UINT_PTR (__stdcall *LPCCHOOKPROC) (HWND, UINT, WPARAM, LPARAM);



typedef struct _OFNOTIFYA
{
        NMHDR hdr;
        LPOPENFILENAMEA lpOFN;
        LPSTR pszFile;
} OFNOTIFYA, *LPOFNOTIFYA;

typedef struct _OFNOTIFYW
{
        NMHDR hdr;
        LPOPENFILENAMEW lpOFN;
        LPWSTR pszFile;
} OFNOTIFYW, *LPOFNOTIFYW;

typedef OFNOTIFYW OFNOTIFY;
typedef LPOFNOTIFYW LPOFNOTIFY;







typedef struct _OFNOTIFYEXA
{
        NMHDR hdr;
        LPOPENFILENAMEA lpOFN;
        LPVOID psf;
        LPVOID pidl;
} OFNOTIFYEXA, *LPOFNOTIFYEXA;

typedef struct _OFNOTIFYEXW
{
        NMHDR hdr;
        LPOPENFILENAMEW lpOFN;
        LPVOID psf;
        LPVOID pidl;
} OFNOTIFYEXW, *LPOFNOTIFYEXW;

typedef OFNOTIFYEXW OFNOTIFYEX;
typedef LPOFNOTIFYEXW LPOFNOTIFYEX;
# 468 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
typedef struct tagCHOOSECOLORA {
   DWORD lStructSize;
   HWND hwndOwner;
   HWND hInstance;
   COLORREF rgbResult;
   COLORREF* lpCustColors;
   DWORD Flags;
   LPARAM lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;
} CHOOSECOLORA, *LPCHOOSECOLORA;
typedef struct tagCHOOSECOLORW {
   DWORD lStructSize;
   HWND hwndOwner;
   HWND hInstance;
   COLORREF rgbResult;
   COLORREF* lpCustColors;
   DWORD Flags;
   LPARAM lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;
} CHOOSECOLORW, *LPCHOOSECOLORW;

typedef CHOOSECOLORW CHOOSECOLOR;
typedef LPCHOOSECOLORW LPCHOOSECOLOR;
# 531 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
__declspec(dllimport) BOOL __stdcall ChooseColorA(LPCHOOSECOLORA);
__declspec(dllimport) BOOL __stdcall ChooseColorW(LPCHOOSECOLORW);
# 551 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
typedef UINT_PTR (__stdcall *LPFRHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagFINDREPLACEA {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;

   DWORD Flags;
   LPSTR lpstrFindWhat;
   LPSTR lpstrReplaceWith;
   WORD wFindWhatLen;
   WORD wReplaceWithLen;
   LPARAM lCustData;
   LPFRHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;
} FINDREPLACEA, *LPFINDREPLACEA;
typedef struct tagFINDREPLACEW {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;

   DWORD Flags;
   LPWSTR lpstrFindWhat;
   LPWSTR lpstrReplaceWith;
   WORD wFindWhatLen;
   WORD wReplaceWithLen;
   LPARAM lCustData;
   LPFRHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;
} FINDREPLACEW, *LPFINDREPLACEW;

typedef FINDREPLACEW FINDREPLACE;
typedef LPFINDREPLACEW LPFINDREPLACE;
# 613 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
__declspec(dllimport) HWND __stdcall FindTextA(LPFINDREPLACEA);
__declspec(dllimport) HWND __stdcall FindTextW(LPFINDREPLACEW);






__declspec(dllimport) HWND __stdcall ReplaceTextA(LPFINDREPLACEA);
__declspec(dllimport) HWND __stdcall ReplaceTextW(LPFINDREPLACEW);
# 638 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
typedef UINT_PTR (__stdcall *LPCFHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagCHOOSEFONTA {
   DWORD lStructSize;
   HWND hwndOwner;
   HDC hDC;
   LPLOGFONTA lpLogFont;
   INT iPointSize;
   DWORD Flags;
   COLORREF rgbColors;
   LPARAM lCustData;
   LPCFHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;
   HINSTANCE hInstance;

   LPSTR lpszStyle;

   WORD nFontType;


   WORD ___MISSING_ALIGNMENT__;
   INT nSizeMin;
   INT nSizeMax;

} CHOOSEFONTA;
typedef struct tagCHOOSEFONTW {
   DWORD lStructSize;
   HWND hwndOwner;
   HDC hDC;
   LPLOGFONTW lpLogFont;
   INT iPointSize;
   DWORD Flags;
   COLORREF rgbColors;
   LPARAM lCustData;
   LPCFHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;
   HINSTANCE hInstance;

   LPWSTR lpszStyle;

   WORD nFontType;


   WORD ___MISSING_ALIGNMENT__;
   INT nSizeMin;
   INT nSizeMax;

} CHOOSEFONTW;

typedef CHOOSEFONTW CHOOSEFONT;



typedef CHOOSEFONTA *LPCHOOSEFONTA;
typedef CHOOSEFONTW *LPCHOOSEFONTW;

typedef LPCHOOSEFONTW LPCHOOSEFONT;



typedef const CHOOSEFONTA *PCCHOOSEFONTA;
typedef const CHOOSEFONTW *PCCHOOSEFONTW;

typedef CHOOSEFONTW CHOOSEFONT;
typedef PCCHOOSEFONTW PCCHOOSEFONT;





__declspec(dllimport) BOOL __stdcall ChooseFontA(LPCHOOSEFONTA);
__declspec(dllimport) BOOL __stdcall ChooseFontW(LPCHOOSEFONTW);
# 826 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
typedef UINT_PTR (__stdcall *LPPRINTHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (__stdcall *LPSETUPHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagPDA {
   DWORD lStructSize;
   HWND hwndOwner;
   HGLOBAL hDevMode;
   HGLOBAL hDevNames;
   HDC hDC;
   DWORD Flags;
   WORD nFromPage;
   WORD nToPage;
   WORD nMinPage;
   WORD nMaxPage;
   WORD nCopies;
   HINSTANCE hInstance;
   LPARAM lCustData;
   LPPRINTHOOKPROC lpfnPrintHook;
   LPSETUPHOOKPROC lpfnSetupHook;
   LPCSTR lpPrintTemplateName;
   LPCSTR lpSetupTemplateName;
   HGLOBAL hPrintTemplate;
   HGLOBAL hSetupTemplate;
} PRINTDLGA, *LPPRINTDLGA;
typedef struct tagPDW {
   DWORD lStructSize;
   HWND hwndOwner;
   HGLOBAL hDevMode;
   HGLOBAL hDevNames;
   HDC hDC;
   DWORD Flags;
   WORD nFromPage;
   WORD nToPage;
   WORD nMinPage;
   WORD nMaxPage;
   WORD nCopies;
   HINSTANCE hInstance;
   LPARAM lCustData;
   LPPRINTHOOKPROC lpfnPrintHook;
   LPSETUPHOOKPROC lpfnSetupHook;
   LPCWSTR lpPrintTemplateName;
   LPCWSTR lpSetupTemplateName;
   HGLOBAL hPrintTemplate;
   HGLOBAL hSetupTemplate;
} PRINTDLGW, *LPPRINTDLGW;

typedef PRINTDLGW PRINTDLG;
typedef LPPRINTDLGW LPPRINTDLG;





__declspec(dllimport) BOOL __stdcall PrintDlgA( LPPRINTDLGA pPD);
__declspec(dllimport) BOOL __stdcall PrintDlgW( LPPRINTDLGW pPD);
# 1116 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
typedef struct tagDEVNAMES {
   WORD wDriverOffset;
   WORD wDeviceOffset;
   WORD wOutputOffset;
   WORD wDefault;
} DEVNAMES;
typedef DEVNAMES *LPDEVNAMES;
typedef const DEVNAMES *PCDEVNAMES;




__declspec(dllimport) DWORD __stdcall CommDlgExtendedError(void);
# 1139 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
typedef UINT_PTR (__stdcall* LPPAGEPAINTHOOK)( HWND, UINT, WPARAM, LPARAM );
typedef UINT_PTR (__stdcall* LPPAGESETUPHOOK)( HWND, UINT, WPARAM, LPARAM );

typedef struct tagPSDA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
} PAGESETUPDLGA, * LPPAGESETUPDLGA;
typedef struct tagPSDW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCWSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
} PAGESETUPDLGW, * LPPAGESETUPDLGW;

typedef PAGESETUPDLGW PAGESETUPDLG;
typedef LPPAGESETUPDLGW LPPAGESETUPDLG;





__declspec(dllimport) BOOL __stdcall PageSetupDlgA( LPPAGESETUPDLGA );
__declspec(dllimport) BOOL __stdcall PageSetupDlgW( LPPAGESETUPDLGW );
# 1227 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\Commdlg.h"
}
# 193 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 2



class OpenFileDialog
{
public:
 OpenFileDialog(void);

 TCHAR*DefaultExtension;
 TCHAR*FileName;
 TCHAR*Filter;
 int FilterIndex;
 int Flags;
 TCHAR*InitialDir;
 HWND Owner;
 TCHAR*Title;

 bool ShowDialog();
};




# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)
#pragma warning(disable: 4172)
#pragma warning(disable: 4455)

namespace std {

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef ctype<_Elem> _Ctype;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());
  _Str.erase();

  try {
  _Mysizt _Size = 0 < _Istr.width()
   && (_Mysizt)_Istr.width() < _Str.max_size()
    ? (_Mysizt)_Istr.width() : _Str.max_size();
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Traits::to_char_type(_Meta)))
    break;
   else
    {
    _Str.append(1, _Traits::to_char_type(_Meta));
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.width(0);
 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr, true);

 if (_Ok)
  {
  try {
  _Str.erase();
  const typename _Traits::int_type _Metadelim =
   _Traits::to_int_type(_Delim);
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; ; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Traits::eq_int_type(_Meta, _Metadelim))
    {
    _Changed = true;
    _Istr.rdbuf()->sbumpc();
    break;
    }
   else if (_Str.max_size() <= _Str.size())
    {
    _State |= ios_base::failbit;
    break;
    }
   else
    {
    _Str += _Traits::to_char_type(_Meta);
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(_Istr, _Str, _Istr.widen('\n')));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (::std:: move(_Istr) >> _Str);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 return (getline(::std:: move(_Istr), _Str, _Delim));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(::std:: move(_Istr), _Str, _Istr.widen('\n')));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 _Mysizt _Size = _Str.size();
 _Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
  ? 0 : (_Mysizt)_Ostr.width() - _Size;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
 try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Str.c_str(), (streamsize)_Size)
    != (streamsize)_Size)
    _State |= ios_base::badbit;
  else
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }



inline int stoi(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 unsigned long _Ans = :: strtoul(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long long stoll(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long long _Ans = :: strtoll(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long long stoull(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 unsigned long long _Ans = :: strtoull(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 float _Ans = :: strtof(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 double _Ans = :: strtod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long double _Ans = :: strtold(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }


inline int stoi(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 unsigned long _Ans = :: wcstoul(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long long stoll(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long long _Ans = :: wcstoll(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long long stoull(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 unsigned long long _Ans = :: wcstoull(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 float _Ans = :: wcstof(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 double _Ans = :: wcstod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long double _Ans = :: wcstold(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }


#pragma warning(push)
#pragma warning(disable: 4127)
template<class _Elem,
 class _UTy> inline
 _Elem* _UIntegral_to_buff(_Elem* _RNext, _UTy _UVal)
 {
 static_assert(is_unsigned<_UTy>::value, "_UTy must be unsigned");


 auto _UVal_trunc = _UVal;
# 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string" 3
 do
  {
  *--_RNext = '0' + _UVal_trunc % 10;
  _UVal_trunc /= 10;
  }
 while (_UVal_trunc != 0);
 return (_RNext);
 }
#pragma warning(pop)

template<class _Elem,
 class _Ty> inline
 basic_string<_Elem> _Integral_to_string(const _Ty _Val)
 {
 static_assert(is_integral<_Ty>::value, "_Ty must be integral");
 using _UTy = make_unsigned_t<_Ty>;
 _Elem _Buff[21];
 _Elem* const _Buff_end = ::std:: end(_Buff);
 _Elem* _RNext = _Buff_end;
 auto _UVal = static_cast<_UTy>(_Val);
 if (_Val < 0)
  {
  _RNext = _UIntegral_to_buff(_RNext, 0 - _UVal);
  *--_RNext = '-';
  }
 else
  _RNext = _UIntegral_to_buff(_RNext, _UVal);

 return (basic_string<_Elem>(_RNext, _Buff_end));
 }

template<class _Ty> inline
 string _Floating_to_string(const char *_Fmt, _Ty _Val)
 {
 static_assert(is_floating_point<_Ty>::value,
  "_Ty must be floating point");

 int _Len = :: _scprintf(_Fmt, _Val);
 string _Str(_Len + 1, '\0');
 :: sprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
 _Str.resize(_Len);
 return (_Str);
 }

template<class _Ty> inline
 wstring _Floating_to_wstring(const wchar_t *_Fmt, _Ty _Val)
 {
 static_assert(is_floating_point<_Ty>::value,
  "_Ty must be floating point");

 int _Len = :: _scwprintf(_Fmt, _Val);
 wstring _Str(_Len + 1, L'\0');
 :: swprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
 _Str.resize(_Len);
 return (_Str);
 }




inline string to_string(int _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(unsigned int _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(unsigned long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(long long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(unsigned long long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(float _Val)
 {
 return (_Floating_to_string("%f", _Val));
 }

inline string to_string(double _Val)
 {
 return (_Floating_to_string("%f", _Val));
 }

inline string to_string(long double _Val)
 {
 return (_Floating_to_string("%Lf", _Val));
 }


inline wstring to_wstring(int _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(unsigned int _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(unsigned long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(long long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(unsigned long long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(float _Val)
 {
 return (_Floating_to_wstring(L"%f", _Val));
 }

inline wstring to_wstring(double _Val)
 {
 return (_Floating_to_wstring(L"%f", _Val));
 }

inline wstring to_wstring(long double _Val)
 {
 return (_Floating_to_wstring(L"%Lf", _Val));
 }







inline namespace literals {
inline namespace string_literals {
inline string operator "" s(const char *_Str, size_t _Len)
 {
 return (string(_Str, _Len));
 }

inline wstring operator "" s(const wchar_t *_Str, size_t _Len)
 {
 return (wstring(_Str, _Len));
 }

inline u16string operator "" s(const char16_t *_Str, size_t _Len)
 {
 return (u16string(_Str, _Len));
 }

inline u32string operator "" s(const char32_t *_Str, size_t _Len)
 {
 return (u32string(_Str, _Len));
 }
}
}





}


#pragma warning(pop)
#pragma pack(pop)
# 215 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 2

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {
#pragma warning(disable: 4251)


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_stringbuf
  : public basic_streambuf<_Elem, _Traits>
 {
public:
 typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Myt;
 typedef _Alloc allocator_type;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

 explicit basic_stringbuf(ios_base::openmode _Mode =
  ios_base::in | ios_base::out)
  {
  _Init(0, 0, _Getstate(_Mode));
  }

 explicit basic_stringbuf(const _Mystr& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  _Init(_Str.c_str(), _Str.size(), _Getstate(_Mode));
  }

 basic_stringbuf(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Tidy();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mysb::swap(_Right);
   ::std:: swap(_Seekhigh, _Right._Seekhigh);
   ::std:: swap(_Mystate, _Right._Mystate);
   _Swap_adl(_Al, _Right._Al);
   }
  }

 basic_stringbuf(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_stringbuf() noexcept
  {
  _Tidy();
  }

 enum
  {
  _Allocated = 1,
  _Constant = 2,
  _Noread = 4,
  _Append = 8,
  _Atend = 16};
 typedef int _Strstate;

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 _Mystr str() const
  {
  if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)
   {
   _Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
    ? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
   return (_Str);
   }
  else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)
   {
   _Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());
   return (_Str);
   }
  else
   {
   _Mystr _Nul;
   return (_Nul);
   }
  }

 void str(const _Mystr& _Newstr)
  {
  _Tidy();
  _Init(_Newstr.c_str(), _Newstr.size(), _Mystate);
  }

protected:
 virtual int_type overflow(int_type _Meta = _Traits::eof())
  {
  if (_Mystate & _Constant)
   return (_Traits::eof());
  else if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   return (_Traits::not_eof(_Meta));

  if (_Mystate & _Append
   && _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)
   _Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  if (_Mysb::pptr() != 0
   && _Mysb::pptr() < _Mysb::epptr())
   {
   *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
   return (_Meta);
   }
  else
   {
   size_t _Oldsize = _Mysb::pptr() == 0
    ? 0 : _Mysb::epptr() - _Mysb::eback();
   size_t _Newsize = _Oldsize;
   size_t _Inc = _Newsize / 2 < _MINSIZE
    ? _MINSIZE : _Newsize / 2;

   while (0 < _Inc && 2147483647 - _Inc < _Newsize)
    _Inc /= 2;
   if (_Inc == 0)
    return (_Traits::eof());

   _Newsize += _Inc;

   _Elem *_Newptr = _Al.allocate(_Newsize);
   _Elem *_Oldptr = _Mysb::eback();

   if (0 < _Oldsize)
    _Traits::copy(_Newptr, _Oldptr, _Oldsize);

   if (_Oldsize == 0)
    {
    _Seekhigh = _Newptr;
    _Mysb::setp(_Newptr, _Newptr + _Newsize);
    if (_Mystate & _Noread)
     _Mysb::setg(_Newptr, 0, _Newptr);
    else
     _Mysb::setg(_Newptr, _Newptr, _Newptr + 1);
    }
   else
    {
    _Seekhigh = _Newptr + (_Seekhigh - _Oldptr);
    _Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
     _Newptr + (_Mysb::pptr() - _Oldptr),
     _Newptr + _Newsize);
    if (_Mystate & _Noread)
     _Mysb::setg(_Newptr, 0, _Newptr);
    else
     _Mysb::setg(_Newptr,
      _Newptr + (_Mysb::gptr() - _Oldptr),
      _Mysb::pptr() + 1);
    }

   if (_Mystate & _Allocated)
    _Al.deallocate(_Oldptr, _Oldsize);
   _Mystate |= _Allocated;

   *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
   return (_Meta);
   }
  }

 virtual int_type pbackfail(int_type _Meta = _Traits::eof())
  {
  if (_Mysb::gptr() == 0
   || _Mysb::gptr() <= _Mysb::eback()
   || (!_Traits::eq_int_type(_Traits::eof(), _Meta)
   && !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
   && _Mystate & _Constant))
   return (_Traits::eof());
  else
   {
   _Mysb::gbump(-1);
   if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
    *_Mysb::gptr() = _Traits::to_char_type(_Meta);
   return (_Traits::not_eof(_Meta));
   }
  }

 virtual int_type underflow()
  {
  if (_Mysb::gptr() == 0)
   return (_Traits::eof());
  else if (_Mysb::gptr() < _Mysb::egptr())
   return (_Traits::to_int_type(*_Mysb::gptr()));
  else if (_Mystate & _Noread || _Mysb::pptr() == 0
   || (_Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr()))
   return (_Traits::eof());
  else
   {
   if (_Seekhigh < _Mysb::pptr())
    _Seekhigh = _Mysb::pptr();
   _Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);
   return (_Traits::to_int_type(*_Mysb::gptr()));
   }
  }

 virtual pos_type seekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode _Which = ios_base::in | ios_base::out)
  {
  if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
   _Seekhigh = _Mysb::pptr();

  if (_Which & ios_base::in && _Mysb::gptr() != 0)
   {
   if (_Way == ios_base::end)
    _Off += (off_type)(_Seekhigh - _Mysb::eback());
   else if (_Way == ios_base::cur
    && (_Which & ios_base::out) == 0)
    _Off += (off_type)(_Mysb::gptr() - _Mysb::eback());
   else if (_Way != ios_base::beg)
    _Off = _BADOFF;

   if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
    {
    _Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));
    if (_Which & ios_base::out && _Mysb::pptr() != 0)
     _Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
      _Mysb::epptr());
    }
   else
    _Off = _BADOFF;
   }
  else if (_Which & ios_base::out && _Mysb::pptr() != 0)
   {
   if (_Way == ios_base::end)
    _Off += (off_type)(_Seekhigh - _Mysb::eback());
   else if (_Way == ios_base::cur)
    _Off += (off_type)(_Mysb::pptr() - _Mysb::eback());
   else if (_Way != ios_base::beg)
    _Off = _BADOFF;

   if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
    _Mysb::pbump((int)(_Mysb::eback()
     - _Mysb::pptr() + _Off));
   else
    _Off = _BADOFF;
   }

  else if (_Off != 0)


   _Off = _BADOFF;
  return (pos_type(_Off));
  }

 virtual pos_type seekpos(pos_type _Ptr,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  streamoff _Off = (streamoff)_Ptr;
  if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
   _Seekhigh = _Mysb::pptr();

  if (_Off == _BADOFF)
   ;
  else if (_Mode & ios_base::in && _Mysb::gptr() != 0)
   {
   if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
    {
    _Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));
    if (_Mode & ios_base::out && _Mysb::pptr() != 0)
     _Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
      _Mysb::epptr());
    }
   else
    _Off = _BADOFF;
   }
  else if (_Mode & ios_base::out && _Mysb::pptr() != 0)
   {
   if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
    _Mysb::pbump((int)(_Mysb::eback()
     - _Mysb::pptr() + _Off));
   else
    _Off = _BADOFF;
   }
  else
   _Off = _BADOFF;
  return (streampos(_Off));
  }

 void _Init(const _Elem *_Ptr,
  size_t _Count, _Strstate _State)
  {
  _Seekhigh = 0;
  _Mystate = _State;

  if (_Count != 0
   && (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))
   {
   _Elem *_Pnew = _Al.allocate(_Count);
   _Traits::copy(_Pnew, _Ptr, _Count);
   _Seekhigh = _Pnew + _Count;

   if (!(_Mystate & _Noread))
    _Mysb::setg(_Pnew, _Pnew,
     _Pnew + _Count);
   if (!(_Mystate & _Constant))
    {
    _Mysb::setp(_Pnew,
     (_Mystate & (_Atend | _Append)) ? _Pnew + _Count : _Pnew,
     _Pnew + _Count);
    if (_Mysb::gptr() == 0)
     _Mysb::setg(_Pnew, 0, _Pnew);
    }
   _Mystate |= _Allocated;
   }
  }

 void _Tidy()
  {
  if (_Mystate & _Allocated)
   _Al.deallocate(_Mysb::eback(),
    (_Mysb::pptr() != 0 ? _Mysb::epptr()
     : _Mysb::egptr()) - _Mysb::eback());
  _Mysb::setg(0, 0, 0);
  _Mysb::setp(0, 0);
  _Seekhigh = 0;
  _Mystate &= ~_Allocated;
  }

private:
 enum
  {
  _MINSIZE = 32};

 _Strstate _Getstate(ios_base::openmode _Mode)
  {
  _Strstate _State = (_Strstate)0;
  if (!(_Mode & ios_base::in))
   _State |= _Noread;
  if (!(_Mode & ios_base::out))
   _State |= _Constant;
  if (_Mode & ios_base::app)
   _State |= _Append;
  if (_Mode & ios_base::ate)
   _State |= _Atend;
  return (_State);
  }

 _Elem *_Seekhigh;
 _Strstate _Mystate;
 allocator_type _Al;
 };


template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_stringbuf<_Elem, _Traits, _Alloc>& _Left,
  basic_stringbuf<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_istringstream
  : public basic_istream<_Elem, _Traits>
 {
public:
 typedef basic_istringstream<_Elem, _Traits, _Alloc> _Myt;
 typedef basic_istream<_Elem, _Traits> _Mybase;
 typedef _Alloc allocator_type;
 typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

 explicit basic_istringstream(ios_base::openmode _Mode = ios_base::in)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Mode | ios_base::in)
  {
  }

 explicit basic_istringstream(const _Mystr& _Str,
  ios_base::openmode _Mode = ios_base::in)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Str, _Mode | ios_base::in)
  {
  }

 basic_istringstream(_Myt&& _Right)
  : _Mybase(&_Stringbuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Stringbuffer.str(_Mystr());
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Stringbuffer.swap(_Right._Stringbuffer);
   }
  }

 basic_istringstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_istringstream() noexcept
  {
  }

 _Mysb *rdbuf() const
  {
  return ((_Mysb *)&_Stringbuffer);
  }

 _Mystr str() const
  {
  return (_Stringbuffer.str());
  }

 void str(const _Mystr& _Newstr)
  {
  _Stringbuffer.str(_Newstr);
  }

private:
 _Mysb _Stringbuffer;
 };


template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_istringstream<_Elem, _Traits, _Alloc>& _Left,
  basic_istringstream<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_ostringstream
  : public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_ostringstream<_Elem, _Traits, _Alloc> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Mybase;
 typedef _Alloc allocator_type;
 typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

 explicit basic_ostringstream(ios_base::openmode _Mode = ios_base::out)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Mode | ios_base::out)
  {
  }

 explicit basic_ostringstream(const _Mystr& _Str,
  ios_base::openmode _Mode = ios_base::out)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Str, _Mode | ios_base::out)
  {
  }

 basic_ostringstream(_Myt&& _Right)
  : _Mybase(&_Stringbuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Stringbuffer.str(_Mystr());
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Stringbuffer.swap(_Right._Stringbuffer);
   }
  }

 basic_ostringstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_ostringstream() noexcept
  {
  }

 _Mysb *rdbuf() const
  {
  return ((_Mysb *)&_Stringbuffer);
  }

 _Mystr str() const
  {
  return (_Stringbuffer.str());
  }

 void str(const _Mystr& _Newstr)
  {
  _Stringbuffer.str(_Newstr);
  }

private:
 _Mysb _Stringbuffer;
 };


template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_ostringstream<_Elem, _Traits, _Alloc>& _Left,
  basic_ostringstream<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_stringstream
  : public basic_iostream<_Elem, _Traits>
 {
public:
 typedef basic_stringstream<_Elem, _Traits, _Alloc> _Myt;
 typedef basic_iostream<_Elem, _Traits> _Mybase;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;
 typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

 explicit basic_stringstream(ios_base::openmode _Mode =
  ios_base::in | ios_base::out)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Mode)
  {
  }

 explicit basic_stringstream(const _Mystr& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Str, _Mode)
  {
  }

 basic_stringstream(_Myt&& _Right)
  : _Mybase(&_Stringbuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Stringbuffer.str(_Mystr());
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Stringbuffer.swap(_Right._Stringbuffer);
   }
  }

 basic_stringstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_stringstream() noexcept
  {
  }

 _Mysb *rdbuf() const
  {
  return ((_Mysb *)&_Stringbuffer);
  }

 _Mystr str() const
  {
  return (_Stringbuffer.str());
  }

 void str(const _Mystr& _Newstr)
  {
  _Stringbuffer.str(_Newstr);
  }

private:
 _Mysb _Stringbuffer;
 };


template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_stringstream<_Elem, _Traits, _Alloc>& _Left,
  basic_stringstream<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 216 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/stdafx.h" 2




void split(const std::string &s, char delim, std::vector<std::string> &elems);
std::vector<std::string> split(const std::string &s, char delim);

const std::string currentDateTime();
# 1 "d:\\graphics-programming\\d3d_template\\d3d_template\\terrainshader.cpp" 2

# 1 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/TerrainShader.h" 1





# 1 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/DeviceClass.h" 1





# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3d11_2.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3d11_2.h"
#pragma warning(disable: 4049)
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3d11_2.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpc.h" 1
# 32 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpc.h"
extern "C" {
# 67 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpc.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 67 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpc.h" 2
# 76 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpc.h"
typedef void * I_RPC_HANDLE;




typedef long RPC_STATUS;
# 158 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpc.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h" 1
# 25 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
extern "C" {
# 57 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef unsigned char * RPC_CSTR;





typedef unsigned short * RPC_WSTR;
typedef const unsigned short * RPC_CWSTR;


typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;
# 77 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef GUID UUID;
# 89 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef struct _RPC_BINDING_VECTOR
{
    unsigned long Count;
                        RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;




typedef struct _UUID_VECTOR
{
  unsigned long Count;
                      UUID *Uuid[1];
} UUID_VECTOR;
# 113 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef void * RPC_IF_HANDLE;
# 123 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef struct _RPC_IF_ID
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;
# 208 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef struct _RPC_PROTSEQ_VECTORA
{
    unsigned int Count;
    unsigned char * Protseq[1];
} RPC_PROTSEQ_VECTORA;

typedef struct _RPC_PROTSEQ_VECTORW
{
    unsigned int Count;
    unsigned short * Protseq[1];
} RPC_PROTSEQ_VECTORW;
# 235 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef struct _RPC_POLICY {
    unsigned int Length ;
    unsigned long EndpointFlags ;
    unsigned long NICFlags ;
    } RPC_POLICY, *PRPC_POLICY ;

typedef void __stdcall
RPC_OBJECT_INQ_FN (
         UUID * ObjectUuid,
          UUID * TypeUuid,
          RPC_STATUS * Status
    );


typedef RPC_STATUS __stdcall
RPC_IF_CALLBACK_FN (
         RPC_IF_HANDLE InterfaceUuid,
         void *Context
    ) ;

typedef void __stdcall
RPC_SECURITY_CALLBACK_FN (
         void *Context
    ) ;
# 274 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef struct
{
    unsigned int Count;
    unsigned long Stats[1];
} RPC_STATS_VECTOR;






typedef struct
{
  unsigned long Count;
  RPC_IF_ID * IfId[1];
} RPC_IF_ID_VECTOR;


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingCopy (
         RPC_BINDING_HANDLE SourceBinding,
          RPC_BINDING_HANDLE * DestinationBinding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFree (
            RPC_BINDING_HANDLE * Binding
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetOption (
         RPC_BINDING_HANDLE hBinding,
         unsigned long option,
         ULONG_PTR optionValue
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqOption (
          RPC_BINDING_HANDLE hBinding,
          unsigned long option,
          ULONG_PTR *pOptionValue
    );







__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingFromStringBindingA (
         RPC_CSTR StringBinding,
          RPC_BINDING_HANDLE * Binding
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingFromStringBindingW (
         RPC_WSTR StringBinding,
          RPC_BINDING_HANDLE * Binding
    );
# 376 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsGetContextBinding (
         void *ContextHandle,
          RPC_BINDING_HANDLE * Binding
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqObject (
         RPC_BINDING_HANDLE Binding,
          UUID * ObjectUuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingReset (
         RPC_BINDING_HANDLE Binding
    );





__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetObject (
         RPC_BINDING_HANDLE Binding,
         UUID * ObjectUuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqDefaultProtectLevel (
          unsigned long AuthnSvc,
          unsigned long *AuthnLevel
    );





__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingToStringBindingA (
         RPC_BINDING_HANDLE Binding,
             RPC_CSTR * StringBinding
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingToStringBindingW (
         RPC_BINDING_HANDLE Binding,
             RPC_WSTR * StringBinding
    );
# 467 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingVectorFree (
            RPC_BINDING_VECTOR * * BindingVector
    );







__declspec(dllimport)

RPC_STATUS
__stdcall
RpcStringBindingComposeA (
             RPC_CSTR ObjUuid,
             RPC_CSTR ProtSeq,
             RPC_CSTR NetworkAddr,
             RPC_CSTR Endpoint,
             RPC_CSTR Options,
                 RPC_CSTR * StringBinding
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcStringBindingComposeW (
             RPC_WSTR ObjUuid,
             RPC_WSTR ProtSeq,
             RPC_WSTR NetworkAddr,
             RPC_WSTR Endpoint,
             RPC_WSTR Options,
                 RPC_WSTR * StringBinding
    );
# 532 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcStringBindingParseA (
         RPC_CSTR StringBinding,
                 RPC_CSTR * ObjUuid,
                 RPC_CSTR * Protseq,
                 RPC_CSTR * NetworkAddr,
                 RPC_CSTR * Endpoint,
                 RPC_CSTR * NetworkOptions
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcStringBindingParseW (
         RPC_WSTR StringBinding,
                 RPC_WSTR * ObjUuid,
                 RPC_WSTR * Protseq,
                 RPC_WSTR * NetworkAddr,
                 RPC_WSTR * Endpoint,
                 RPC_WSTR * NetworkOptions
    );
# 586 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeA (
            RPC_CSTR * String
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeW (
            RPC_WSTR * String
    );
# 619 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcIfInqId (
         RPC_IF_HANDLE RpcIfHandle,
          RPC_IF_ID * RpcIfId
    );





__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidA (
         RPC_CSTR Protseq
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidW (
         RPC_WSTR Protseq
    );
# 666 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqComTimeout (
         RPC_BINDING_HANDLE Binding,
          unsigned int * Timeout
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtSetComTimeout (
         RPC_BINDING_HANDLE Binding,
         unsigned int Timeout
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtSetCancelTimeout(
         long Timeout
    );






__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNetworkInqProtseqsA (
             RPC_PROTSEQ_VECTORA * * ProtseqVector
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNetworkInqProtseqsW (
             RPC_PROTSEQ_VECTORW * * ProtseqVector
    );
# 733 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcObjectInqType (
         UUID * ObjUuid,
                       UUID * TypeUuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcObjectSetInqFn (
         RPC_OBJECT_INQ_FN * InquiryFn
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcObjectSetType (
         UUID * ObjUuid,
                      UUID * TypeUuid
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeA (
            RPC_PROTSEQ_VECTORA * * ProtseqVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeW (
            RPC_PROTSEQ_VECTORW * * ProtseqVector
    );
# 797 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerInqBindings (
             RPC_BINDING_VECTOR * * BindingVector
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerInqIf (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * * MgrEpv
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerListen (
         unsigned int MinimumCallThreads,
         unsigned int MaxCalls,
         unsigned int DontWait
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerRegisterIf (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerRegisterIfEx (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv,
         unsigned int Flags,
         unsigned int MaxCalls,
             RPC_IF_CALLBACK_FN *IfCallback
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf2 (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv,
         unsigned int Flags,
         unsigned int MaxCalls,
         unsigned int MaxRpcSize,
             RPC_IF_CALLBACK_FN *IfCallbackFn
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf3 (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv,
         unsigned int Flags,
         unsigned int MaxCalls,
         unsigned int MaxRpcSize,
             RPC_IF_CALLBACK_FN *IfCallback,
             void * SecurityDescriptor
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUnregisterIf (
             RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
         unsigned int WaitForCallsToComplete
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnregisterIfEx (
             RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
         int RundownContextHandles
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseAllProtseqs (
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseAllProtseqsEx (
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIf (
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIfEx (
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );






__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
# 1032 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqEpA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqEpExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqEpW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqEpExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
# 1115 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqIfA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqIfExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqIfW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqIfExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
# 1194 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)
void
__stdcall
RpcServerYield (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtStatsVectorFree (
            RPC_STATS_VECTOR ** StatsVector
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqStats (
             RPC_BINDING_HANDLE Binding,
             RPC_STATS_VECTOR ** Statistics
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtIsServerListening (
             RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtStopServerListening (
             RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtWaitServerListen (
    void
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtSetServerStackSize (
         unsigned long ThreadStackSize
    );


__declspec(dllimport)
void
__stdcall
RpcSsDontSerializeContext (
    void
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEnableIdleCleanup (
    void
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqIfIds (
             RPC_BINDING_HANDLE Binding,
             RPC_IF_ID_VECTOR * * IfIdVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcIfIdVectorFree (
            RPC_IF_ID_VECTOR * * IfIdVector
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameA (
             RPC_BINDING_HANDLE Binding,
         unsigned long AuthnSvc,
             RPC_CSTR * ServerPrincName
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameW (
             RPC_BINDING_HANDLE Binding,
         unsigned long AuthnSvc,
             RPC_WSTR * ServerPrincName
    );
# 1331 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameA (
         unsigned long AuthnSvc,
             RPC_CSTR * PrincName
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameW (
         unsigned long AuthnSvc,
             RPC_WSTR * PrincName
    );
# 1368 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpResolveBinding (
         RPC_BINDING_HANDLE Binding,
         RPC_IF_HANDLE IfSpec
    );





__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameA (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
             RPC_CSTR * EntryName
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameW (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
             RPC_WSTR * EntryName
    );
# 1426 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef void * RPC_AUTH_IDENTITY_HANDLE;
typedef void * RPC_AUTHZ_HANDLE;
# 1500 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef struct _RPC_SECURITY_QOS {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;







typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
                                                   unsigned short *User;
  unsigned long UserLength;
                                                     unsigned short *Domain;
  unsigned long DomainLength;
                                                       unsigned short *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;





typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
                             unsigned char *User;
  unsigned long UserLength;
                               unsigned char *Domain;
  unsigned long DomainLength;
                                 unsigned char *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;
# 1578 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;



typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
                                       unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_W *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
                                            unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_A *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
    unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;





typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
{
    RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
                                       unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
    RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
                                            unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
{
    RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
                                       unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
    RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
                                            unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;



typedef struct _RPC_SECURITY_QOS_V2_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_W, *PRPC_SECURITY_QOS_V2_W;

typedef struct _RPC_SECURITY_QOS_V2_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_A, *PRPC_SECURITY_QOS_V2_A;




typedef struct _RPC_SECURITY_QOS_V3_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_W, *PRPC_SECURITY_QOS_V3_W;

typedef struct _RPC_SECURITY_QOS_V3_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_A, *PRPC_SECURITY_QOS_V3_A;






typedef struct _RPC_SECURITY_QOS_V4_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_W, *PRPC_SECURITY_QOS_V4_W;

typedef struct _RPC_SECURITY_QOS_V4_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_A, *PRPC_SECURITY_QOS_V4_A;






typedef struct _RPC_SECURITY_QOS_V5_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
  void *ServerSecurityDescriptor;
} RPC_SECURITY_QOS_V5_W, *PRPC_SECURITY_QOS_V5_W;

typedef struct _RPC_SECURITY_QOS_V5_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
  void *ServerSecurityDescriptor;
} RPC_SECURITY_QOS_V5_A, *PRPC_SECURITY_QOS_V5_A;
# 1888 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned short *NetworkAddress;
    unsigned short *StringEndpoint;
    union
    {
        unsigned short *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_W, *PRPC_BINDING_HANDLE_TEMPLATE_V1_W;

typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned char *NetworkAddress;
    unsigned char *StringEndpoint;
    union
    {
        unsigned char *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_A, *PRPC_BINDING_HANDLE_TEMPLATE_V1_A;

typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_W {
    unsigned long Version;
    unsigned short *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_W *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_W, *PRPC_BINDING_HANDLE_SECURITY_V1_W;



typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_A {
    unsigned long Version;
    unsigned char *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_A *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_A, *PRPC_BINDING_HANDLE_SECURITY_V1_A;



typedef struct _RPC_BINDING_HANDLE_OPTIONS_V1 {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ComTimeout;
    unsigned long CallTimeout;
} RPC_BINDING_HANDLE_OPTIONS_V1, *PRPC_BINDING_HANDLE_OPTIONS_V1;
# 1967 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCreateA (
         RPC_BINDING_HANDLE_TEMPLATE_V1_A * Template,
             RPC_BINDING_HANDLE_SECURITY_V1_A * Security,
             RPC_BINDING_HANDLE_OPTIONS_V1 * Options,
          RPC_BINDING_HANDLE * Binding
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCreateW (
         RPC_BINDING_HANDLE_TEMPLATE_V1_W * Template,
             RPC_BINDING_HANDLE_SECURITY_V1_W * Security,
             RPC_BINDING_HANDLE_OPTIONS_V1 * Options,
          RPC_BINDING_HANDLE * Binding
    );







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingGetTrainingContextHandle (
         RPC_BINDING_HANDLE Binding,
             void ** ContextHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqBindingHandle (
          RPC_BINDING_HANDLE * Binding
    );
# 2019 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef enum _RPC_HTTP_REDIRECTOR_STAGE
{
    RPCHTTP_RS_REDIRECT = 1,
    RPCHTTP_RS_ACCESS_1,
    RPCHTTP_RS_SESSION,
    RPCHTTP_RS_ACCESS_2,
    RPCHTTP_RS_INTERFACE
} RPC_HTTP_REDIRECTOR_STAGE;
# 2037 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef RPC_STATUS
(__stdcall * RPC_NEW_HTTP_PROXY_CHANNEL) (
         RPC_HTTP_REDIRECTOR_STAGE RedirectorStage,
         RPC_WSTR ServerName,
         RPC_WSTR ServerPort,
             RPC_WSTR RemoteUser,
             RPC_WSTR AuthType,
            void * ResourceUuid,
            void * SessionId,
             void * Interface,
             void * Reserved,
         unsigned long Flags,
                 RPC_WSTR * NewServerName,
                 RPC_WSTR * NewServerPort
    );
# 2064 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef void
(__stdcall * RPC_HTTP_PROXY_FREE_STRING) (
         RPC_WSTR String
    );
# 2088 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcImpersonateClient (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcImpersonateClient2 (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcRevertToSelfEx (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcRevertToSelf (
    void
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthClientA (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthClientW (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExA (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc,
          unsigned long Flags
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExW (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc,
          unsigned long Flags
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthInfoA (
         RPC_BINDING_HANDLE Binding,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthInfoW (
         RPC_BINDING_HANDLE Binding,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetAuthInfoA (
         RPC_BINDING_HANDLE Binding,
             RPC_CSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExA (
         RPC_BINDING_HANDLE Binding,
             RPC_CSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc,
             RPC_SECURITY_QOS * SecurityQos
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetAuthInfoW (
         RPC_BINDING_HANDLE Binding,
             RPC_WSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExW (
         RPC_BINDING_HANDLE Binding,
             RPC_WSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc,
             RPC_SECURITY_QOS * SecurityQOS
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExA (
         RPC_BINDING_HANDLE Binding,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc,
          unsigned long RpcQosVersion,
              RPC_SECURITY_QOS *SecurityQOS
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExW (
         RPC_BINDING_HANDLE Binding,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc,
         unsigned long RpcQosVersion,
              RPC_SECURITY_QOS * SecurityQOS
    );

typedef void
(__stdcall * RPC_AUTH_KEY_RETRIEVAL_FN) (
         void * Arg,
         RPC_WSTR ServerPrincName,
         unsigned long KeyVer,
             void * * Key,
          RPC_STATUS * Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerCompleteSecurityCallback(
         RPC_BINDING_HANDLE BindingHandle,
         RPC_STATUS Status
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoA (
             RPC_CSTR ServerPrincName,
         unsigned long AuthnSvc,
             RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
             void * Arg
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoW (
             RPC_WSTR ServerPrincName,
         unsigned long AuthnSvc,
             RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
             void * Arg
    );
# 2414 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef struct {
    unsigned char * UserName;
    unsigned char * ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1, * PRPC_CLIENT_INFORMATION1;



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingServerFromClient (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_BINDING_HANDLE * ServerBinding
    );

__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
RpcRaiseException (
         RPC_STATUS exception
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcTestCancel(
    void
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerTestCancel (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcCancelThread(
         void * Thread
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcCancelThreadEx(
         void * Thread,
         long Timeout
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
UuidCreate (
          UUID * Uuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreateSequential (
          UUID * Uuid
    );




__declspec(dllimport)

RPC_STATUS
__stdcall
UuidToStringA (
         const UUID * Uuid,
             RPC_CSTR * StringUuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
UuidFromStringA (
             RPC_CSTR StringUuid,
          UUID * Uuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
UuidToStringW (
         const UUID * Uuid,
             RPC_WSTR * StringUuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
UuidFromStringW (
             RPC_WSTR StringUuid,
          UUID * Uuid
    );
# 2561 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)
signed int
__stdcall
UuidCompare (
         UUID * Uuid1,
         UUID * Uuid2,
          RPC_STATUS * Status
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
UuidCreateNil (
          UUID * NilUuid
    );

__declspec(dllimport)
int
__stdcall
UuidEqual (
         UUID * Uuid1,
         UUID * Uuid2,
          RPC_STATUS * Status
    );

__declspec(dllimport)
unsigned short
__stdcall
UuidHash (
         UUID * Uuid,
          RPC_STATUS * Status
    );

__declspec(dllimport)
int
__stdcall
UuidIsNil (
         UUID * Uuid,
          RPC_STATUS * Status
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceA (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_CSTR Annotation
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceW (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_WSTR Annotation
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpRegisterA (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_CSTR Annotation
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpRegisterW (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_WSTR Annotation
    );
# 2682 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpUnregister(
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector
    );





__declspec(dllimport)

RPC_STATUS
__stdcall
DceErrorInqTextA (
         RPC_STATUS RpcStatus,
                                         RPC_CSTR ErrorText
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
DceErrorInqTextW (
         RPC_STATUS RpcStatus,
                                         RPC_WSTR ErrorText
    );
# 2732 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef I_RPC_HANDLE * RPC_EP_INQ_HANDLE;
# 2745 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpEltInqBegin (
                      RPC_BINDING_HANDLE EpBinding,
         unsigned long InquiryType,
             RPC_IF_ID * IfId,
             unsigned long VersOption,
             UUID * ObjectUuid,
          RPC_EP_INQ_HANDLE * InquiryContext
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpEltInqDone (
            RPC_EP_INQ_HANDLE * InquiryContext
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextA (
         RPC_EP_INQ_HANDLE InquiryContext,
          RPC_IF_ID * IfId,
              RPC_BINDING_HANDLE * Binding,
              UUID * ObjectUuid,
                 RPC_CSTR * Annotation
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextW (
         RPC_EP_INQ_HANDLE InquiryContext,
          RPC_IF_ID * IfId,
              RPC_BINDING_HANDLE * Binding,
              UUID * ObjectUuid,
                 RPC_WSTR * Annotation
    );
# 2812 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpUnregister (
             RPC_BINDING_HANDLE EpBinding,
         RPC_IF_ID * IfId,
         RPC_BINDING_HANDLE Binding,
             UUID * ObjectUuid
    );

typedef int
(__stdcall * RPC_MGMT_AUTHORIZATION_FN) (
         RPC_BINDING_HANDLE ClientBinding,
         unsigned long RequestedMgmtOperation,
          RPC_STATUS * Status
    );







__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtSetAuthorizationFn (
         RPC_MGMT_AUTHORIZATION_FN AuthorizationFn
    );


__declspec(dllimport)
int
__stdcall
RpcExceptionFilter (
         unsigned long ExceptionCode
    );
# 2874 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef void *RPC_INTERFACE_GROUP, **PRPC_INTERFACE_GROUP;


typedef struct
{
    unsigned long Version;
    RPC_WSTR ProtSeq;
    RPC_WSTR Endpoint;
    void * SecurityDescriptor;
    unsigned long Backlog;
} RPC_ENDPOINT_TEMPLATEW, *PRPC_ENDPOINT_TEMPLATEW;

typedef struct
{
    unsigned long Version;
    RPC_CSTR ProtSeq;
    RPC_CSTR Endpoint;
    void * SecurityDescriptor;
    unsigned long Backlog;
} RPC_ENDPOINT_TEMPLATEA, *PRPC_ENDPOINT_TEMPLATEA;
# 2915 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef struct
{
    unsigned long Version;
    RPC_IF_HANDLE IfSpec;
    UUID * MgrTypeUuid;
    void * MgrEpv;
    unsigned int Flags;
    unsigned int MaxCalls;
    unsigned int MaxRpcSize;
    RPC_IF_CALLBACK_FN *IfCallback;
    UUID_VECTOR *UuidVector;
    RPC_CSTR Annotation;
    void * SecurityDescriptor;
} RPC_INTERFACE_TEMPLATEA, *PRPC_INTERFACE_TEMPLATEA;

typedef struct
{
    unsigned long Version;
    RPC_IF_HANDLE IfSpec;
    UUID * MgrTypeUuid;
    void * MgrEpv;
    unsigned int Flags;
    unsigned int MaxCalls;
    unsigned int MaxRpcSize;
    RPC_IF_CALLBACK_FN *IfCallback;
    UUID_VECTOR *UuidVector;
    RPC_WSTR Annotation;
    void * SecurityDescriptor;
} RPC_INTERFACE_TEMPLATEW, *PRPC_INTERFACE_TEMPLATEW;
# 2974 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
typedef void __stdcall
RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN (
         RPC_INTERFACE_GROUP IfGroup,
         void* IdleCallbackContext,
         unsigned long IsGroupIdle
    );




__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupCreateW (
                       RPC_INTERFACE_TEMPLATEW *Interfaces,
         unsigned long NumIfs,
                             RPC_ENDPOINT_TEMPLATEW *Endpoints,
         unsigned long NumEndpoints,
         unsigned long IdlePeriod,
         RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn,
         void* IdleCallbackContext,
          PRPC_INTERFACE_GROUP IfGroup
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupCreateA (
                       RPC_INTERFACE_TEMPLATEA *Interfaces,
         unsigned long NumIfs,
                             RPC_ENDPOINT_TEMPLATEA *Endpoints,
         unsigned long NumEndpoints,
         unsigned long IdlePeriod,
         RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn,
         void* IdleCallbackContext,
          PRPC_INTERFACE_GROUP IfGroup
    );
# 3039 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupClose (
         RPC_INTERFACE_GROUP IfGroup
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupActivate (
         RPC_INTERFACE_GROUP IfGroup
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupDeactivate (
         RPC_INTERFACE_GROUP IfGroup,
         unsigned long ForceDeactivation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupInqBindings (
         RPC_INTERFACE_GROUP IfGroup,
             RPC_BINDING_VECTOR * * BindingVector
    );








# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdcep.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdcep.h"
extern "C" {





typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER, * PRPC_SYNTAX_IDENTIFIER;

typedef struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void * Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void * RpcInterfaceInformation;
    void * ReservedForRuntime;
    void * ManagerEpv;
    void * ImportContext;
    unsigned long RpcFlags;
} RPC_MESSAGE, * PRPC_MESSAGE;







typedef RPC_STATUS
__stdcall RPC_FORWARD_FUNCTION(
                          UUID * InterfaceId,
                          RPC_VERSION * InterfaceVersion,
                          UUID * ObjectId,
                          unsigned char * Rpcpro,
                          void * * ppDestEndpoint);

enum RPC_ADDRESS_CHANGE_TYPE
{
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED,
    PROTOCOL_ADDRESS_CHANGE
};

typedef void
__stdcall RPC_ADDRESS_CHANGE_FN(
                           void * arg
                        );
# 164 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdcep.h"
typedef
void
(__stdcall * RPC_DISPATCH_FUNCTION) (
           PRPC_MESSAGE Message
    );

typedef struct {
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION * DispatchTable;
    LONG_PTR Reserved;
} RPC_DISPATCH_TABLE, * PRPC_DISPATCH_TABLE;

typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char * RpcProtocolSequence;
    unsigned char * Endpoint;
} RPC_PROTSEQ_ENDPOINT, * PRPC_PROTSEQ_ENDPOINT;
# 189 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdcep.h"
typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void *DefaultManagerEpv;
    void const *InterpreterInfo;
    unsigned int Flags ;
} RPC_SERVER_INTERFACE, * PRPC_SERVER_INTERFACE;

typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    ULONG_PTR Reserved;
    void const * InterpreterInfo;
    unsigned int Flags ;
} RPC_CLIENT_INTERFACE, * PRPC_CLIENT_INTERFACE;
# 222 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNegotiateTransferSyntax (
           RPC_MESSAGE * Message
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcGetBuffer (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetBufferWithObject (
           RPC_MESSAGE * Message,
       UUID * ObjectUuid
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcSendReceive (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcFreeBuffer (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcSend (
           PRPC_MESSAGE Message
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcReceive (
           PRPC_MESSAGE Message,
       unsigned int Size
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcFreePipeBuffer (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcReallocPipeBuffer (
         PRPC_MESSAGE Message,
     unsigned int NewSize
    );

typedef void * I_RPC_MUTEX;

__declspec(dllimport)
void
__stdcall
I_RpcRequestMutex (
           I_RPC_MUTEX * Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcClearMutex (
       I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcDeleteMutex (
       I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void *
__stdcall
I_RpcAllocate (
       unsigned int Size
    );

__declspec(dllimport)
void
__stdcall
I_RpcFree (
       void * Object
    );

__declspec(dllimport)
void
__stdcall
I_RpcClntChkSystemHandleLeak (
       void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcSvrChkSystemHandleLeak (
       void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcClntSetSystemHandle (
       void* Handle,
       unsigned char Type,
       unsigned long AccessMask,
    void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcSvrSetSystemHandle (
       void* Handle,
       unsigned char Type,
       unsigned long AccessMask,
    void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcClntGetSystemHandle (
                                              unsigned char** pMemory,
       unsigned char Type,
       unsigned long AccessMask,
    void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcSvrGetSystemHandle (
                                              unsigned char** ppMemory,
       unsigned char Type,
       unsigned long AccessMask,
    void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcPauseExecution (
       unsigned long Milliseconds
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetExtendedError (
    void
    );

typedef
void
(__stdcall * PRPC_RUNDOWN) (
    void * AssociationContext
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcMonitorAssociation (
       RPC_BINDING_HANDLE Handle,
       PRPC_RUNDOWN RundownRoutine,
       void * Context
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcStopMonitorAssociation (
       RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
I_RpcGetCurrentCallHandle(
    void
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcGetAssociationContext (
       RPC_BINDING_HANDLE BindingHandle,
        void * * AssociationContext
    );

__declspec(dllimport)
void *
__stdcall
I_RpcGetServerContextList (
       RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
void
__stdcall
I_RpcSetServerContextList (
       RPC_BINDING_HANDLE BindingHandle,
        void * ServerContextList
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceExported (
       unsigned long EntryNameSyntax,
       unsigned short *EntryName,
       RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceUnexported (
       unsigned long EntryNameSyntax,
       unsigned short *EntryName,
       RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingToStaticStringBindingW (
       RPC_BINDING_HANDLE Binding,
        unsigned short **StringBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContext (
       RPC_BINDING_HANDLE Binding,
        void **SecurityContextHandle
    );


typedef struct _RPC_SEC_CONTEXT_KEY_INFO
{
    unsigned long EncryptAlgorithm;
    unsigned long KeySize;
    unsigned long SignatureAlgorithm;
}
RPC_SEC_CONTEXT_KEY_INFO, *PRPC_SEC_CONTEXT_KEY_INFO;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContextKeyInfo (
             RPC_BINDING_HANDLE Binding,
            void *KeyInfo
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqWireIdForSnego (
         RPC_BINDING_HANDLE Binding,
          unsigned char * WireId
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqMarshalledTargetInfo (
         RPC_BINDING_HANDLE Binding,
          unsigned long * MarshalledTargetInfoSize,
                                                           RPC_CSTR * MarshalledTargetInfo
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqLocalClientPID (
       RPC_BINDING_HANDLE Binding,
        unsigned long *Pid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingHandleToAsyncHandle (
       RPC_BINDING_HANDLE Binding,
        void **AsyncHandle
    );




__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameW (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameA (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2A (
             RPC_CSTR NetworkAddress,
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor,
         void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2W (
             RPC_WSTR NetworkAddress,
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor,
         void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2W (
             RPC_WSTR NetworkAddress,
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2A (
             RPC_CSTR NetworkAddress,
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         void * Policy
    );
# 660 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerStartService (
         RPC_WSTR Protseq,
         RPC_WSTR Endpoint,
         RPC_IF_HANDLE IfSpec
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointW (
         RPC_BINDING_HANDLE Binding,
                              RPC_WSTR *DynamicEndpoint
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointA (
         RPC_BINDING_HANDLE Binding,
                              RPC_CSTR *DynamicEndpoint
    );
# 709 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerCheckClientRestriction (
       RPC_BINDING_HANDLE Context
    );







__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingInqTransportType (
       RPC_BINDING_HANDLE Binding,
        unsigned int * Type
    );

typedef struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcIfInqTransferSyntaxes (
       RPC_IF_HANDLE RpcIfHandle,
        RPC_TRANSFER_SYNTAX * TransferSyntaxes,
       unsigned int TransferSyntaxSize,
        unsigned int * TransferSyntaxCount
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_UuidCreate (
        UUID * Uuid
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingCopy (
       RPC_BINDING_HANDLE SourceBinding,
        RPC_BINDING_HANDLE * DestinationBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingIsClientLocal (
                RPC_BINDING_HANDLE BindingHandle,
        unsigned int * ClientLocalFlag
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqConnId (
       RPC_BINDING_HANDLE Binding,
        void **ConnId,
        int *pfFirstCall
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingCreateNP (
         RPC_WSTR ServerName,
         RPC_WSTR ServiceName,
         RPC_WSTR NetworkOptions,
          RPC_BINDING_HANDLE *Binding
    );

__declspec(dllimport)
void
__stdcall
I_RpcSsDontSerializeContext (
    void
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcLaunchDatagramReceiveThread(
    void * pAddress
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerRegisterForwardFunction (
       RPC_FORWARD_FUNCTION * pForwardFunction
    );

RPC_ADDRESS_CHANGE_FN * __stdcall
I_RpcServerInqAddressChangeFn(
    void
    );

RPC_STATUS __stdcall
I_RpcServerSetAddressChangeFn(
       RPC_ADDRESS_CHANGE_FN * pAddressChangeFn
    );
# 833 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqLocalConnAddress (
       RPC_BINDING_HANDLE Binding,
           void *Buffer,
           unsigned long *BufferSize,
        unsigned long *AddressFormat
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqRemoteConnAddress (
       RPC_BINDING_HANDLE Binding,
           void *Buffer,
           unsigned long *BufferSize,
        unsigned long *AddressFormat
    );

__declspec(dllimport)
void
__stdcall
I_RpcSessionStrictContextHandle (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcTurnOnEEInfoPropagation (
    void
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcConnectionInqSockBuffSize(
      unsigned long * RecvBuffSize,
      unsigned long * SendBuffSize
  );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcConnectionSetSockBuffSize(
      unsigned long RecvBuffSize,
      unsigned long SendBuffSize
   );

typedef
void
(*RPCLT_PDU_FILTER_FUNC) (
       void *Buffer,
       unsigned int BufferLength,
       int fDatagram
    );

typedef
void
(__cdecl *RPC_SETFILTER_FUNC) (
       RPCLT_PDU_FILTER_FUNC pfnFilter
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerStartListening(
    void * hWnd
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerStopListening(
    void
    );

typedef RPC_STATUS (*RPC_BLOCKING_FN) (
       void * hWnd,
       void * Context,
                void * hSyncEvent
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingSetAsync(
       RPC_BINDING_HANDLE Binding,
       RPC_BLOCKING_FN BlockingFn,
       unsigned long ServerTid
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcSetThreadParams(
       int fClientFree,
                void *Context,
                void * hWndClient
    );

__declspec(dllimport)
unsigned int
__stdcall
I_RpcWindowProc(
       void * hWnd,
       unsigned int Message,
       unsigned int wParam,
       unsigned long lParam
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointA (
         RPC_CSTR Protseq,
         RPC_CSTR Endpoint
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointW (
         RPC_WSTR Protseq,
         RPC_WSTR Endpoint
    );
# 978 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqTransportType(
        unsigned int * Type
    );

__declspec(dllimport)
long
__stdcall
I_RpcMapWin32Status (
       RPC_STATUS Status
    );







typedef struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
{
    unsigned long BufferSize;
                                   char *Buffer;
} RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;

typedef struct _RDR_CALLOUT_STATE
{

    RPC_STATUS LastError;
    void *LastEEInfo;

    RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;


    unsigned short *ServerName;
    unsigned short *ServerPort;
    unsigned short *RemoteUser;
    unsigned short *AuthType;
    unsigned char ResourceTypePresent;
    unsigned char SessionIdPresent;
    unsigned char InterfacePresent;
    UUID ResourceType;
    UUID SessionId;
    RPC_SYNTAX_IDENTIFIER Interface;
    void *CertContext;


} RDR_CALLOUT_STATE;



typedef RPC_STATUS
(__stdcall *I_RpcProxyIsValidMachineFn)
        (
             RPC_WSTR Machine,
             RPC_WSTR DotMachine,
             unsigned long PortNumber
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientAddressFn)
        (
           void *Context,
            char *Buffer,
            unsigned long *BufferLength
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetConnectionTimeoutFn)
        (
            unsigned long *ConnectionTimeout
        );


typedef RPC_STATUS
(__stdcall *I_RpcPerformCalloutFn)
    (
       void *Context,
       RDR_CALLOUT_STATE *CallOutState,
       RPC_HTTP_REDIRECTOR_STAGE Stage
    );

typedef void
(__stdcall *I_RpcFreeCalloutStateFn)
    (
       RDR_CALLOUT_STATE *CallOutState
    );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientSessionAndResourceUUID)
        (
             void *Context,
                  int *SessionIdPresent,
                  UUID *SessionId,
              int *ResourceIdPresent,
              UUID *ResourceId
        );




typedef RPC_STATUS
(__stdcall *I_RpcProxyFilterIfFn)
    (
         void *Context,
         UUID *IfUuid,
         unsigned short IfMajorVersion,
          int *fAllow
    );

typedef enum RpcProxyPerfCounters
{
    RpcCurrentUniqueUser = 1,
    RpcBackEndConnectionAttempts,
    RpcBackEndConnectionFailed,
    RpcRequestsPerSecond,
    RpcIncomingConnections,
    RpcIncomingBandwidth,
    RpcOutgoingBandwidth,
    RpcAttemptedLbsDecisions,
    RpcFailedLbsDecisions,
    RpcAttemptedLbsMessages,
    RpcFailedLbsMessages,
    RpcLastCounter
} RpcPerfCounters;

typedef void
(__stdcall *I_RpcProxyUpdatePerfCounterFn)
    (
         RpcPerfCounters Counter,
         int ModifyTrend,
         unsigned long Size
    );

 typedef void
(__stdcall *I_RpcProxyUpdatePerfCounterBackendServerFn)
    (
         unsigned short* MachineName,
         int IsConnectEvent
    );







typedef struct tagI_RpcProxyCallbackInterface
{
    I_RpcProxyIsValidMachineFn IsValidMachineFn;
    I_RpcProxyGetClientAddressFn GetClientAddressFn;
    I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
    I_RpcPerformCalloutFn PerformCalloutFn;
    I_RpcFreeCalloutStateFn FreeCalloutStateFn;
    I_RpcProxyGetClientSessionAndResourceUUID GetClientSessionAndResourceUUIDFn;

    I_RpcProxyFilterIfFn ProxyFilterIfFn;
    I_RpcProxyUpdatePerfCounterFn RpcProxyUpdatePerfCounterFn;
    I_RpcProxyUpdatePerfCounterBackendServerFn RpcProxyUpdatePerfCounterBackendServerFn;

} I_RpcProxyCallbackInterface;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcProxyNewConnection (
       unsigned long ConnectionType,
       unsigned short *ServerAddress,
       unsigned short *ServerPort,
       unsigned short *MinConnTimeout,
       void *ConnectionParameter,
                RDR_CALLOUT_STATE *CallOutState,
       I_RpcProxyCallbackInterface *ProxyCallbackInterface
    );
# 1178 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReplyToClientWithStatus (
       void *ConnectionParameter,
       RPC_STATUS RpcStatus
    );

__declspec(dllimport)
void
__stdcall
I_RpcRecordCalloutFailure (
       RPC_STATUS RpcStatus,
       RDR_CALLOUT_STATE *CallOutState,
       unsigned short *DllName
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcMgmtEnableDedicatedThreadPool (
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetDefaultSD(
          void ** ppSecurityDescriptor
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcOpenClientProcess(
             RPC_BINDING_HANDLE Binding,
         unsigned long DesiredAccess,
             void** ClientProcess
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingIsServerLocal(
         RPC_BINDING_HANDLE Binding,
          unsigned int * ServerLocalFlag
    );

RPC_STATUS __stdcall
I_RpcBindingSetPrivateOption (
         RPC_BINDING_HANDLE hBinding,
         unsigned long option,
         ULONG_PTR optionValue
    );






RPC_STATUS
__stdcall
I_RpcServerSubscribeForDisconnectNotification (
         RPC_BINDING_HANDLE Binding,
         void * hEvent
    );

RPC_STATUS
__stdcall
I_RpcServerGetAssociationID (
         RPC_BINDING_HANDLE Binding,
          unsigned long * AssociationID
    );

__declspec(dllimport)
long
__stdcall
I_RpcServerDisableExceptionFilter (
    );







}
# 3075 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcdce.h" 2



}
# 158 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpc.h" 2


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\rpcnsi.h" 1
# 28 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\rpcnsi.h"
typedef void * RPC_NS_HANDLE;
# 44 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\rpcnsi.h"
__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             RPC_BINDING_VECTOR *BindingVec,
             UUID_VECTOR *ObjectUuidVec
    );


__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectUuidVec
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             RPC_BINDING_VECTOR *BindingVec,
             UUID_VECTOR *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectUuidVec
    );





RPC_STATUS __stdcall
RpcNsBindingExportPnPA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );



RPC_STATUS __stdcall
RpcNsBindingExportPnPW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );





__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
         unsigned long BindingMaxCount,
          RPC_NS_HANDLE *LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
         unsigned long BindingMaxCount,
          RPC_NS_HANDLE *LookupContext
    );


__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupNext(
        RPC_NS_HANDLE LookupContext,
        RPC_BINDING_VECTOR * * BindingVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupDone(
           RPC_NS_HANDLE * LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteA(
         unsigned long GroupNameSyntax,
             RPC_CSTR GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextA(
            RPC_NS_HANDLE InquiryContext,
             RPC_CSTR *MemberName
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteW(
         unsigned long GroupNameSyntax,
             RPC_WSTR GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextW(
            RPC_NS_HANDLE InquiryContext,
             RPC_WSTR *MemberName
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName,
         unsigned long Priority,
             RPC_CSTR Annotation
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
         unsigned long InquiryType,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
         unsigned long MemberNameSyntax,
             RPC_CSTR MemberName,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextA(
         RPC_NS_HANDLE InquiryContext,
              RPC_IF_ID *IfId,
          RPC_CSTR *MemberName,
          unsigned long *Priority,
          RPC_CSTR *Annotation
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName,
         unsigned long Priority,
             RPC_WSTR Annotation
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
         unsigned long InquiryType,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
         unsigned long MemberNameSyntax,
             RPC_WSTR MemberName,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextW(
         RPC_NS_HANDLE InquiryContext,
              RPC_IF_ID *IfId,
          RPC_WSTR *MemberName,
          unsigned long *Priority,
          RPC_WSTR *Annotation
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_NS_HANDLE *InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_NS_HANDLE *InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqNext(
        RPC_NS_HANDLE InquiryContext,
        UUID * ObjUuid
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_CSTR *ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
             UUID_VECTOR *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_IF_ID_VECTOR * *IfIdVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtHandleSetExpAge(
       RPC_NS_HANDLE NsHandle,
       unsigned long ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtInqExpAge(
        unsigned long * ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtSetExpAge(
       unsigned long ExpirationAge
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_WSTR *ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
             UUID_VECTOR *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_IF_ID_VECTOR * *IfIdVec
    );





__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
          RPC_NS_HANDLE *ImportContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
          RPC_NS_HANDLE *ImportContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportNext(
       RPC_NS_HANDLE ImportContext,
        RPC_BINDING_HANDLE * Binding
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportDone(
           RPC_NS_HANDLE * ImportContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingSelect(
           RPC_BINDING_VECTOR * BindingVec,
        RPC_BINDING_HANDLE * Binding
    );
# 160 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpc.h" 2


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcnterr.h" 1
# 162 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpc.h" 2
# 214 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpc.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcasync.h" 1
# 26 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcasync.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 26 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcasync.h" 2




extern "C" {
# 53 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcasync.h"
typedef
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,

    RpcNotificationTypeApc,
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,

    RpcNotificationTypeCallback
} RPC_NOTIFICATION_TYPES;


typedef
enum _RPC_ASYNC_EVENT {
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete,
    RpcClientDisconnect,
    RpcClientCancel
    } RPC_ASYNC_EVENT;
# 87 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcasync.h"
struct _RPC_ASYNC_STATE;

typedef void __stdcall
RPCNOTIFICATION_ROUTINE (
                  struct _RPC_ASYNC_STATE *pAsync,
                  void *Context,
                  RPC_ASYNC_EVENT Event);
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;

typedef union _RPC_ASYNC_NOTIFICATION_INFO {




    struct {
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        HANDLE hThread;
        } APC;







    struct {
        HANDLE hIOPort;
        DWORD dwNumberOfBytesTransferred;
        DWORD_PTR dwCompletionKey;
        LPOVERLAPPED lpOverlapped;
        } IOC;






    struct {
        HWND hWnd;
        UINT Msg;
        } HWND;
# 137 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcasync.h"
    HANDLE hEvent;
# 150 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcasync.h"
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO;

typedef struct _RPC_ASYNC_STATE {
    unsigned int Size;
    unsigned long Signature;
    long Lock;
    unsigned long Flags;
    void *StubInfo;
    void *UserInfo;
    void *RuntimeInfo;
    RPC_ASYNC_EVENT Event;

    RPC_NOTIFICATION_TYPES NotificationType;
    RPC_ASYNC_NOTIFICATION_INFO u;

    LONG_PTR Reserved[4];
    } RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;







__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncInitializeHandle (
                             PRPC_ASYNC_STATE pAsync,
         unsigned int Size
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncRegisterInfo (
         PRPC_ASYNC_STATE pAsync
    ) ;


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncGetCallStatus (
         PRPC_ASYNC_STATE pAsync
    ) ;

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncCompleteCall (
            PRPC_ASYNC_STATE pAsync,
              void *Reply
    ) ;

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncAbortCall (
            PRPC_ASYNC_STATE pAsync,
         unsigned long ExceptionCode
    ) ;

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncCancelCall (
            PRPC_ASYNC_STATE pAsync,
         BOOL fAbort
    ) ;






typedef enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString,
    eeptLongVal,
    eeptShortVal,
    eeptPointerVal,
    eeptNone,
    eeptBinary
} ExtendedErrorParamTypes;




typedef struct tagBinaryParam
{
    void *Buffer;
    short Size;
} BinaryParam;

typedef struct tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;
    union
        {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        long LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
        } u;
} RPC_EE_INFO_PARAM;
# 277 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcasync.h"
typedef struct tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union
        {

        SYSTEMTIME SystemTime;
        FILETIME FileTime;



        } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
} RPC_EXTENDED_ERROR_INFO;

typedef struct tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void *CurrentPos;
    void *Head;
} RPC_ERROR_ENUM_HANDLE;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorStartEnumeration (
          RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorGetNextRecord (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
         BOOL CopyStrings,
          RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorEndEnumeration (
            RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorResetEnumeration (
            RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorGetNumberOfRecords (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
          int *Records
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorSaveErrorInfo (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
                                          PVOID *ErrorBlob,
          size_t *BlobSize
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorLoadErrorInfo (
                               PVOID ErrorBlob,
         size_t BlobSize,
          RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorAddRecord (
         RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
void
__stdcall
RpcErrorClearInformation (
    void
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCleanupThread (
         DWORD dwTimeout
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcGetAuthorizationContextForClient (
             RPC_BINDING_HANDLE ClientBinding,
         BOOL ImpersonateOnReturn,
             PVOID Reserved1,
             PLARGE_INTEGER pExpirationTime,
         LUID Reserved2,
         DWORD Reserved3,
             PVOID Reserved4,
          PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcFreeAuthorizationContext (
            PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockExclusive (
             RPC_BINDING_HANDLE ServerBindingHandle,
         PVOID UserContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockShared (
         RPC_BINDING_HANDLE ServerBindingHandle,
         PVOID UserContext
    );


typedef enum tagRpcLocalAddressFormat
{
    rlafInvalid = 0,
    rlafIPv4,
    rlafIPv6
} RpcLocalAddressFormat;

typedef struct _RPC_CALL_LOCAL_ADDRESS_V1
{
    unsigned int Version;
    void *Buffer;
    unsigned long BufferSize;
    RpcLocalAddressFormat AddressFormat;
} RPC_CALL_LOCAL_ADDRESS_V1, *PRPC_CALL_LOCAL_ADDRESS_V1;
# 463 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcasync.h"
typedef struct tagRPC_CALL_ATTRIBUTES_V1_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V1_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_A;






typedef enum tagRpcCallType
{
    rctInvalid = 0,
    rctNormal,
    rctTraining,
    rctGuaranteed
} RpcCallType;

typedef enum tagRpcCallClientLocality
{
    rcclInvalid = 0,
    rcclLocal,
    rcclRemote,
    rcclClientUnknownLocality
} RpcCallClientLocality;


typedef struct tagRPC_CALL_ATTRIBUTES_V2_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
} RPC_CALL_ATTRIBUTES_V2_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V2_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
} RPC_CALL_ATTRIBUTES_V2_A;



typedef struct tagRPC_CALL_ATTRIBUTES_V3_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
    unsigned long ClientIdentifierBufferLength;
    unsigned char *ClientIdentifier;
} RPC_CALL_ATTRIBUTES_V3_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V3_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
    unsigned long ClientIdentifierBufferLength;
    unsigned char *ClientIdentifier;
} RPC_CALL_ATTRIBUTES_V3_A;



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesW (
             RPC_BINDING_HANDLE ClientBinding,
            void *RpcCallAttributes
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesA (
             RPC_BINDING_HANDLE ClientBinding,
            void *RpcCallAttributes
    );
# 644 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcasync.h"
typedef RPC_CALL_ATTRIBUTES_V3_W RPC_CALL_ATTRIBUTES;
# 653 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcasync.h"
typedef enum _RPC_NOTIFICATIONS
{
    RpcNotificationCallNone = 0,
    RpcNotificationClientDisconnect = 1,
    RpcNotificationCallCancel = 2
} RPC_NOTIFICATIONS;



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerSubscribeForNotification (
             RPC_BINDING_HANDLE Binding,
         RPC_NOTIFICATIONS Notification,
         RPC_NOTIFICATION_TYPES NotificationType,
         RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnsubscribeForNotification (
             RPC_BINDING_HANDLE Binding,
         RPC_NOTIFICATIONS Notification,
          unsigned long *NotificationsQueued
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingBind (
             PRPC_ASYNC_STATE pAsync,
         RPC_BINDING_HANDLE Binding,
         RPC_IF_HANDLE IfSpec
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingUnbind (
         RPC_BINDING_HANDLE Binding
    );







RPC_STATUS __stdcall
I_RpcAsyncSetHandle (
          PRPC_MESSAGE Message,
          PRPC_ASYNC_STATE pAsync
    );


RPC_STATUS __stdcall
I_RpcAsyncAbortCall (
         PRPC_ASYNC_STATE pAsync,
         unsigned long ExceptionCode
    ) ;


int
__stdcall
I_RpcExceptionFilter (
         unsigned long ExceptionCode
    );




__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqClientTokenAttributes (
         RPC_BINDING_HANDLE Binding,
              LUID * TokenId,
              LUID * AuthenticationId,
              LUID * ModifiedId
    );







}




# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 750 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcasync.h" 2
# 214 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpc.h" 2





# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 219 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpc.h" 2




}
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3d11_2.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h" 1
# 39 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 39 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h" 2



# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\rpcnsip.h" 1
# 26 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\rpcnsip.h"
extern "C" {





typedef struct
{
   RPC_NS_HANDLE LookupContext;
   RPC_BINDING_HANDLE ProposedHandle;
   RPC_BINDING_VECTOR * Bindings;

} RPC_IMPORT_CONTEXT_P, * PRPC_IMPORT_CONTEXT_P;




__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsGetBuffer(
       PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsSendReceive(
       PRPC_MESSAGE Message,
        RPC_BINDING_HANDLE * Handle
    );

__declspec(dllimport)

void
__stdcall
I_RpcNsRaiseException(
       PRPC_MESSAGE Message,
       RPC_STATUS Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReBindBuffer(
       PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_NsServerBindSearch(
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_NsClientBindSearch(
    void
    );

__declspec(dllimport)
void
__stdcall
I_NsClientBindDone(
    void
    );





}
# 42 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h" 2



# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcsal.h" 1
# 152 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcsal.h"
extern "C" {
# 328 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcsal.h"
}
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h" 2



extern "C" {
# 176 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
typedef unsigned char byte;
typedef byte cs_byte;
typedef unsigned char boolean;
# 223 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
void * __stdcall MIDL_user_allocate(size_t size);
void __stdcall MIDL_user_free( void * );



void * __stdcall I_RpcDefaultAllocate(
         handle_t bh, size_t size, void * (* RealAlloc)(size_t) );

void __stdcall I_RpcDefaultFree(
         handle_t bh, void *, void (*RealFree)(void *) );
# 258 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
typedef void * NDR_CCONTEXT;

typedef struct
    {
    void * pad[2];
    void * userContext;
    } * NDR_SCONTEXT;





typedef void (__stdcall * NDR_RUNDOWN)(void * context);

typedef void (__stdcall * NDR_NOTIFY_ROUTINE)(void);

typedef void (__stdcall * NDR_NOTIFY2_ROUTINE)(boolean flag);

typedef struct _SCONTEXT_QUEUE {
    unsigned long NumberOfObjects;
    NDR_SCONTEXT * ArrayOfObjects;
    } SCONTEXT_QUEUE, * PSCONTEXT_QUEUE;

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
NDRCContextBinding (
         NDR_CCONTEXT CContext
    );

__declspec(dllimport)
void
__stdcall
NDRCContextMarshall (
              NDR_CCONTEXT CContext,
          void *pBuff
    );

__declspec(dllimport)
void
__stdcall
NDRCContextUnmarshall (
                NDR_CCONTEXT * pCContext,
          RPC_BINDING_HANDLE hBinding,
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRCContextUnmarshall2 (
                NDR_CCONTEXT * pCContext,
          RPC_BINDING_HANDLE hBinding,
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall (
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall (
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshallEx (
          RPC_BINDING_HANDLE BindingHandle,
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall2 (
          RPC_BINDING_HANDLE BindingHandle,
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn,
              void * CtxGuard,
         unsigned long Flags
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshallEx (
          RPC_BINDING_HANDLE BindingHandle,
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall2(
          RPC_BINDING_HANDLE BindingHandle,
              void * pBuff,
          unsigned long DataRepresentation,
              void * CtxGuard,
         unsigned long Flags
    );

__declspec(dllimport)
void
__stdcall
RpcSsDestroyClientContext (
         void * * ContextHandle
    );
# 451 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
typedef unsigned long error_status_t;
# 534 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;

typedef unsigned char * RPC_BUFPTR;
typedef unsigned long RPC_LENGTH;


typedef void (__stdcall * EXPR_EVAL)( struct _MIDL_STUB_MESSAGE * );

typedef const unsigned char * PFORMAT_STRING;




typedef struct
    {
    long Dimension;


    unsigned long * BufferConformanceMark;
    unsigned long * BufferVarianceMark;


    unsigned long * MaxCountArray;
    unsigned long * OffsetArray;
    unsigned long * ActualCountArray;
    } ARRAY_INFO, *PARRAY_INFO;


typedef struct _NDR_ASYNC_MESSAGE * PNDR_ASYNC_MESSAGE;
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;





typedef const unsigned char * PFORMAT_STRING;
typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct NDR_POINTER_QUEUE_STATE;
struct _NDR_PROC_CONTEXT;

typedef struct _MIDL_STUB_MESSAGE
    {

    PRPC_MESSAGE RpcMsg;


    unsigned char * Buffer;





    unsigned char * BufferStart;
    unsigned char * BufferEnd;
# 600 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
    unsigned char * BufferMark;


    unsigned long BufferLength;


    unsigned long MemorySize;


    unsigned char * Memory;


    unsigned char IsClient;
    unsigned char Pad;
    unsigned short uFlags2;


    int ReuseBuffer;


    struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
    struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;






    int IgnoreEmbeddedPointers;





    unsigned char * PointerBufferMark;




    unsigned char CorrDespIncrement;

    unsigned char uFlags;
    unsigned short UniquePtrCount;





    ULONG_PTR MaxCount;





    unsigned long Offset;





    unsigned long ActualCount;


    void * ( __stdcall * pfnAllocate)( size_t );
    void ( __stdcall * pfnFree)(void *);







    unsigned char * StackTop;





    unsigned char * pPresentedType;
    unsigned char * pTransmitType;
# 689 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
    handle_t SavedHandle;




    const struct _MIDL_STUB_DESC * StubDesc;




    struct _FULL_PTR_XLAT_TABLES * FullPtrXlatTables;
    unsigned long FullPtrRefId;

    unsigned long PointerLength;

    int fInDontFree :1;
    int fDontCallFreeInst :1;
    int fInOnlyParam :1;
    int fHasReturn :1;
    int fHasExtensions :1;
    int fHasNewCorrDesc :1;
    int fIsIn :1;
    int fIsOut :1;
    int fIsOicf :1;
    int fBufferValid :1;
    int fHasMemoryValidateCallback: 1;
    int fInFree :1;
    int fNeedMCCP :1;
    int fUnused :3;
    int fUnused2 :16;


    unsigned long dwDestContext;
    void * pvDestContext;

    NDR_SCONTEXT * SavedContextHandles;

    long ParamNumber;

    struct IRpcChannelBuffer * pRpcChannelBuffer;

    PARRAY_INFO pArrayInfo;
    unsigned long * SizePtrCountArray;
    unsigned long * SizePtrOffsetArray;
    unsigned long * SizePtrLengthArray;




    void * pArgQueue;

    unsigned long dwStubPhase;

    void * LowStackMark;




    PNDR_ASYNC_MESSAGE pAsyncMsg;
    PNDR_CORRELATION_INFO pCorrInfo;
    unsigned char * pCorrMemory;

    void * pMemoryList;
# 764 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
    INT_PTR pCSInfo;

    unsigned char * ConformanceMark;
    unsigned char * VarianceMark;




    INT_PTR Unused;


    struct _NDR_PROC_CONTEXT * pContext;
# 787 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
    void * ContextHandleHash;
    void * pUserMarshalList;
    INT_PTR Reserved51_3;
    INT_PTR Reserved51_4;
    INT_PTR Reserved51_5;






    } MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;


typedef struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;




typedef void *
        ( __stdcall * GENERIC_BINDING_ROUTINE)
        (void *);
typedef void
        ( __stdcall * GENERIC_UNBIND_ROUTINE)
        (void *, unsigned char *);

typedef struct _GENERIC_BINDING_ROUTINE_PAIR
    {
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
    } GENERIC_BINDING_ROUTINE_PAIR, *PGENERIC_BINDING_ROUTINE_PAIR;

typedef struct __GENERIC_BINDING_INFO
    {
    void * pObj;
    unsigned int Size;
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
    } GENERIC_BINDING_INFO, *PGENERIC_BINDING_INFO;
# 837 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
typedef void ( __stdcall * XMIT_HELPER_ROUTINE)
    ( PMIDL_STUB_MESSAGE );

typedef struct _XMIT_ROUTINE_QUINTUPLE
    {
    XMIT_HELPER_ROUTINE pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE pfnFreeXmit;
    XMIT_HELPER_ROUTINE pfnFreeInst;
    } XMIT_ROUTINE_QUINTUPLE, *PXMIT_ROUTINE_QUINTUPLE;

typedef unsigned long
( __stdcall * USER_MARSHAL_SIZING_ROUTINE)
    (unsigned long *,
     unsigned long,
     void * );

typedef unsigned char *
( __stdcall * USER_MARSHAL_MARSHALLING_ROUTINE)
    (unsigned long *,
     unsigned char * ,
     void * );

typedef unsigned char *
( __stdcall * USER_MARSHAL_UNMARSHALLING_ROUTINE)
    (unsigned long *,
     unsigned char *,
     void * );

typedef void ( __stdcall * USER_MARSHAL_FREEING_ROUTINE)
    (unsigned long *,
     void * );

typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
    {
    USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE pfnFree;
    } USER_MARSHAL_ROUTINE_QUADRUPLE;



typedef enum _USER_MARSHAL_CB_TYPE
{
    USER_MARSHAL_CB_BUFFER_SIZE,
    USER_MARSHAL_CB_MARSHALL,
    USER_MARSHAL_CB_UNMARSHALL,
    USER_MARSHAL_CB_FREE
} USER_MARSHAL_CB_TYPE;

typedef struct _USER_MARSHAL_CB
{
    unsigned long Flags;
    PMIDL_STUB_MESSAGE pStubMsg;
    PFORMAT_STRING pReserve;
    unsigned long Signature;
    USER_MARSHAL_CB_TYPE CBType;
    PFORMAT_STRING pFormat;
    PFORMAT_STRING pTypeFormat;
} USER_MARSHAL_CB;
# 907 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
typedef struct _MALLOC_FREE_STRUCT
    {
    void * ( __stdcall * pfnAllocate)(size_t);
    void ( __stdcall * pfnFree)(void *);
    } MALLOC_FREE_STRUCT;

typedef struct _COMM_FAULT_OFFSETS
    {
    short CommOffset;
    short FaultOffset;
    } COMM_FAULT_OFFSETS;





typedef enum _IDL_CS_CONVERT
    {
    IDL_CS_NO_CONVERT,
    IDL_CS_IN_PLACE_CONVERT,
    IDL_CS_NEW_BUFFER_CONVERT
    } IDL_CS_CONVERT;

typedef void
( __stdcall * CS_TYPE_NET_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     unsigned long ulLocalBufferSize,
     IDL_CS_CONVERT * conversionType,
     unsigned long * pulNetworkBufferSize,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_LOCAL_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     unsigned long ulNetworkBufferSize,
     IDL_CS_CONVERT * conversionType,
     unsigned long * pulLocalBufferSize,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_TO_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     void * pLocalData,
     unsigned long ulLocalDataLength,
     byte * pNetworkData,
     unsigned long * pulNetworkDataLength,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_FROM_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     byte * pNetworkData,
     unsigned long ulNetworkDataLength,
     unsigned long ulLocalBufferSize,
     void * pLocalData,
     unsigned long * pulLocalDataLength,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TAG_GETTING_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     int fServerSide,
     unsigned long * pulSendingTag,
     unsigned long * pulDesiredReceivingTag,
     unsigned long * pulReceivingTag,
     error_status_t * pStatus);

void __stdcall
RpcCsGetTags(
     RPC_BINDING_HANDLE hBinding,
     int fServerSide,
     unsigned long * pulSendingTag,
     unsigned long * pulDesiredReceivingTag,
     unsigned long * pulReceivingTag,
     error_status_t * pStatus);

typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES
    {
    CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
    } NDR_CS_SIZE_CONVERT_ROUTINES;

typedef struct _NDR_CS_ROUTINES
    {
    NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE *pTagGettingRoutines;
    } NDR_CS_ROUTINES;

typedef struct _NDR_EXPR_DESC
{
    const unsigned short * pOffset;
    PFORMAT_STRING pFormatExpr;
} NDR_EXPR_DESC;




typedef struct _MIDL_STUB_DESC
    {
    void * RpcInterfaceInformation;

    void * ( __stdcall * pfnAllocate)(size_t);
    void ( __stdcall * pfnFree)(void *);

    union
        {
        handle_t * pAutoHandle;
        handle_t * pPrimitiveHandle;
        PGENERIC_BINDING_INFO pGenericBindingInfo;
        } IMPLICIT_HANDLE_INFO;

    const NDR_RUNDOWN * apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR * aGenericBindingRoutinePairs;
    const EXPR_EVAL * apfnExprEval;
    const XMIT_ROUTINE_QUINTUPLE * aXmitQuintuple;

    const unsigned char * pFormatTypes;

    int fCheckBounds;


    unsigned long Version;

    MALLOC_FREE_STRUCT * pMallocFreeStruct;

    long MIDLVersion;

    const COMM_FAULT_OFFSETS * CommFaultOffsets;


    const USER_MARSHAL_ROUTINE_QUADRUPLE * aUserMarshalQuadruple;


    const NDR_NOTIFY_ROUTINE * NotifyRoutineTable;





    ULONG_PTR mFlags;


    const NDR_CS_ROUTINES * CsRoutineTables;

    void * ProxyServerInfo;
    const NDR_EXPR_DESC * pExprInfo;



    } MIDL_STUB_DESC;


typedef const MIDL_STUB_DESC * PMIDL_STUB_DESC;

typedef void * PMIDL_XMIT_TYPE;







#pragma warning(push)

#pragma warning(disable: 4200)

typedef struct _MIDL_FORMAT_STRING
    {
    short Pad;
    unsigned char Format[];
    } MIDL_FORMAT_STRING;


#pragma warning(pop)
# 1096 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
typedef void ( __stdcall * STUB_THUNK)( PMIDL_STUB_MESSAGE );


typedef long ( __stdcall * SERVER_ROUTINE)();







typedef struct _MIDL_SERVER_INFO_
    {
    PMIDL_STUB_DESC pStubDesc;
    const SERVER_ROUTINE * DispatchTable;
    PFORMAT_STRING ProcString;
    const unsigned short * FmtStringOffset;
    const STUB_THUNK * ThunkTable;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
    } MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;






typedef struct _MIDL_STUBLESS_PROXY_INFO
    {
    PMIDL_STUB_DESC pStubDesc;
    PFORMAT_STRING ProcFormatString;
    const unsigned short * FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
    } MIDL_STUBLESS_PROXY_INFO;

typedef MIDL_STUBLESS_PROXY_INFO * PMIDL_STUBLESS_PROXY_INFO;




typedef struct _MIDL_SYNTAX_INFO
{
RPC_SYNTAX_IDENTIFIER TransferSyntax;
RPC_DISPATCH_TABLE * DispatchTable;
PFORMAT_STRING ProcString;
const unsigned short * FmtStringOffset;
PFORMAT_STRING TypeString;
const void * aUserMarshalQuadruple;
ULONG_PTR pReserved1;
ULONG_PTR pReserved2;
} MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

typedef unsigned short * PARAM_OFFSETTABLE, *PPARAM_OFFSETTABLE;




typedef union _CLIENT_CALL_RETURN
    {
    void * Pointer;
    LONG_PTR Simple;
    } CLIENT_CALL_RETURN;


typedef enum
        {
        XLAT_SERVER = 1,
        XLAT_CLIENT
        } XLAT_SIDE;

typedef struct _FULL_PTR_XLAT_TABLES
{
    void * RefIdToPointer;
    void * PointerToRefId;
    unsigned long NextRefId;
    XLAT_SIDE XlatSide;
} FULL_PTR_XLAT_TABLES, *PFULL_PTR_XLAT_TABLES;





typedef enum _system_handle_t
{
     SYSTEM_HANDLE_FILE = 0
    ,SYSTEM_HANDLE_SEMAPHORE = 1
    ,SYSTEM_HANDLE_EVENT = 2
    ,SYSTEM_HANDLE_MUTEX = 3
    ,SYSTEM_HANDLE_PROCESS = 4
    ,SYSTEM_HANDLE_TOKEN = 5
    ,SYSTEM_HANDLE_INVALID = 0xFF
} system_handle_t;






RPC_STATUS __stdcall
NdrClientGetSupportedSyntaxes(
         RPC_CLIENT_INTERFACE * pInf,
          unsigned long * pCount,
          MIDL_SYNTAX_INFO ** pArr );


RPC_STATUS __stdcall
NdrServerGetSupportedSyntaxes(
         RPC_SERVER_INTERFACE * pInf,
          unsigned long * pCount,
          MIDL_SYNTAX_INFO ** pArr,
          unsigned long * pPreferSyntaxIndex);




#pragma warning(push)

#pragma warning(disable: 28740)

__declspec(dllimport)
void
__stdcall
NdrSimpleTypeMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    unsigned char FormatChar
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrPointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrCsArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrCsTagMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrSimpleStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrFixedArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrNonConformantStringMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStringMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNonEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrByteCountPointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrXmitOrRepAsMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrUserMarshalMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrInterfacePointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_CCONTEXT ContextHandle,
    int fCheck
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_SCONTEXT ContextHandle,
    NDR_RUNDOWN RundownRoutine
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextNewMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_SCONTEXT ContextHandle,
    NDR_RUNDOWN RundownRoutine,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrSimpleTypeUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    unsigned char FormatChar
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrCsArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrCsTagUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrRangeUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationInitialize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory,
    unsigned long CacheSize,
    unsigned long flags
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationPass(
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationFree(
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrPointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrSimpleStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrFixedArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrNonConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNonEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrByteCountPointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrXmitOrRepAsUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrUserMarshalUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrInterfacePointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_CCONTEXT * pContextHandle,
    RPC_BINDING_HANDLE BindHandle
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg
    );



__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrContextHandleInitialize(
          PMIDL_STUB_MESSAGE pStubMsg,
                                   PFORMAT_STRING pFormat
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextNewUnmarshall(
          PMIDL_STUB_MESSAGE pStubMsg,
                                   PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsTagBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrConformantStringBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonConformantStringBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrContextHandleSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
unsigned long
__stdcall
NdrPointerMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrContextHandleMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );




__declspec(dllimport)
unsigned long
__stdcall
NdrCsArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrCsTagMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrSimpleStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrFixedArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStringMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonConformantStringMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrXmitOrRepAsMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrUserMarshalMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrInterfacePointerMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrConvert2(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat,
    long NumberParams
    );

__declspec(dllimport)
void
__stdcall
NdrConvert(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );
# 2349 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
__declspec(dllimport)
unsigned char *
__stdcall
NdrUserMarshalSimpleTypeConvert(
    unsigned long * pFlags,
    unsigned char * pBuffer,
    unsigned char FormatChar
    );





__declspec(dllimport)
void
__stdcall
NdrClientInitializeNew(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned int ProcNum
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrServerInitializeNew(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializePartial(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned long RequestedBufferSize
    );

__declspec(dllimport)
void
__stdcall
NdrClientInitialize(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned int ProcNum
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrServerInitialize(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrServerInitializeUnmarshall (
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializeMarshall (
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrGetBuffer(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long BufferLength,
    RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNsGetBuffer(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long BufferLength,
    RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrSendReceive(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pBufferEnd
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNsSendReceive(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pBufferEnd,
    RPC_BINDING_HANDLE * pAutoHandle
    );

__declspec(dllimport)
void
__stdcall
NdrFreeBuffer(
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
NdrGetDcomProtocolVersion(
    PMIDL_STUB_MESSAGE pStubMsg,
    RPC_VERSION * pVersion );

#pragma warning(pop)







CLIENT_CALL_RETURN __cdecl
NdrClientCall2(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrAsyncClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );







CLIENT_CALL_RETURN __cdecl
NdrDcomAsyncClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );
# 2525 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
typedef enum {
    STUB_UNMARSHAL,
    STUB_CALL_SERVER,
    STUB_MARSHAL,
    STUB_CALL_SERVER_NO_HRESULT
}STUB_PHASE;

typedef enum {
    PROXY_CALCSIZE,
    PROXY_GETBUFFER,
    PROXY_MARSHAL,
    PROXY_SENDRECEIVE,
    PROXY_UNMARSHAL
}PROXY_PHASE;

struct IRpcStubBuffer;



__declspec(dllimport)
void
__stdcall
NdrAsyncServerCall(
    PRPC_MESSAGE pRpcMsg
    );


__declspec(dllimport)
long
__stdcall
NdrAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );
# 2569 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
__declspec(dllimport)
long
__stdcall
NdrDcomAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );







__declspec(dllimport)
long
__stdcall
NdrStubCall2(
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall2(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall (
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
int
__stdcall
NdrServerUnmarshall(
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    void * pParamList
    );

__declspec(dllimport)
void
__stdcall
NdrServerMarshall(
    void * pThis,
    void * pChannel,
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
NdrMapCommAndFaultStatus(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long * pCommStatus,
    unsigned long * pFaultStatus,
    RPC_STATUS Status
    );







typedef void * RPC_SS_THREAD_HANDLE;

typedef void * __stdcall
RPC_CLIENT_ALLOC (
         size_t Size
    );

typedef void __stdcall
RPC_CLIENT_FREE (
         void * Ptr
    );





__declspec(dllimport)
void *
__stdcall
RpcSsAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
RpcSsDisableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsEnableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsFree (
         void * NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSsGetThreadHandle (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetThreadHandle (
         RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
void
__stdcall
RpcSsSwapClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree,
          RPC_CLIENT_ALLOC * * OldClientAlloc,
          RPC_CLIENT_FREE * * OldClientFree
    );





__declspec(dllimport)
void *
__stdcall
RpcSmAllocate (
          size_t Size,
          RPC_STATUS * pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmClientFree (
          void * pNodeToFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDestroyClientContext (
         void * * ContextHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDisableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmEnableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmFree (
         void * NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSmGetThreadHandle (
          RPC_STATUS * pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetThreadHandle (
         RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSwapClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree,
          RPC_CLIENT_ALLOC * * OldClientAlloc,
          RPC_CLIENT_FREE * * OldClientFree
    );





__declspec(dllimport)
void
__stdcall
NdrRpcSsEnableAllocate(
    PMIDL_STUB_MESSAGE pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDisableAllocate(
    PMIDL_STUB_MESSAGE pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSmSetClientToOsf(
    PMIDL_STUB_MESSAGE pMessage );

__declspec(dllimport)
void *
__stdcall
NdrRpcSmClientAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSmClientFree (
         void * NodeToFree
    );

__declspec(dllimport)
void *
__stdcall
NdrRpcSsDefaultAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDefaultFree (
         void * NodeToFree
    );
# 2872 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
__declspec(dllimport)
PFULL_PTR_XLAT_TABLES
__stdcall
NdrFullPointerXlatInit(
    unsigned long NumberOfPointers,
    XLAT_SIDE XlatSide
    );

__declspec(dllimport)
void
__stdcall
NdrFullPointerXlatFree(
    PFULL_PTR_XLAT_TABLES pXlatTables
    );


__declspec(dllimport)
void *
__stdcall
NdrAllocate(
    PMIDL_STUB_MESSAGE pStubMsg,
    size_t Len
    );

__declspec(dllimport)
void
__stdcall
NdrClearOutParameters(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat,
    void * ArgAddr
    );






__declspec(dllimport)
void *
__stdcall
NdrOleAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrOleFree (
         void * NodeToFree
    );
# 2971 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
    void * Buffer;
    unsigned long BufferSize;
    void *(__stdcall * pfnAllocate)(size_t);
    void (__stdcall * pfnFree)(void *);
    struct IRpcChannelBuffer * pRpcChannelBuffer;
    ULONG_PTR Reserved[5];
} NDR_USER_MARSHAL_INFO_LEVEL1;



#pragma warning(push)

#pragma warning(disable: 4201)


typedef struct _NDR_USER_MARSHAL_INFO
{
    unsigned long InformationLevel;
    union {
        NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    } ;
} NDR_USER_MARSHAL_INFO;



#pragma warning(pop)






RPC_STATUS
__stdcall
NdrGetUserMarshalInfo (
         unsigned long * pFlags,
         unsigned long InformationLevel,
          NDR_USER_MARSHAL_INFO * pMarshalInfo
    );




RPC_STATUS __stdcall
NdrCreateServerInterfaceFromStub(
                 struct IRpcStubBuffer* pStub,
                    RPC_SERVER_INTERFACE *pServerIf );




CLIENT_CALL_RETURN __cdecl
NdrClientCall3(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );

CLIENT_CALL_RETURN __cdecl
Ndr64AsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );







CLIENT_CALL_RETURN __cdecl
Ndr64DcomAsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );







struct IRpcStubBuffer;


__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCall(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCall64(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCallAll(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
Ndr64AsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );
# 3101 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h"
__declspec(dllimport)
long
__stdcall
Ndr64DcomAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );







__declspec(dllimport)
long
__stdcall
NdrStubCall3 (
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCallAll(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerCallNdr64(
    PRPC_MESSAGE pRpcMsg
    );


__declspec(dllimport)
void
__stdcall
NdrServerCall3(
    PRPC_MESSAGE pRpcMsg
    );



__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreClientMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreServerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    void ** ppMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreClientBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreServerInitialize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void ** ppMemory,
    PFORMAT_STRING pFormat
    );


void __stdcall
RpcUserFree( handle_t AsyncHandle, void * pBuffer );





}



# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 3195 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\rpcndr.h" 2
# 28 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3d11_2.h" 2








# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ole2.h" 1
# 22 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ole2.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 22 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ole2.h" 2
# 32 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ole2.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objbase.h" 1
# 26 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objbase.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 26 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h" 1
# 61 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 61 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h" 2
# 224 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
extern "C++"
{
    template<typename T> void** IID_PPV_ARGS_Helper(T** pp)
    {
#pragma prefast(suppress: 6269, "Tool issue with unused static_cast")
 static_cast<IUnknown*>(*pp);
        return reinterpret_cast<void**>(pp);
    }
}
# 345 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,
    REGCLS_MULTIPLEUSE = 1,

    REGCLS_MULTI_SEPARATE = 2,

    REGCLS_SUSPENDED = 4,

    REGCLS_SURROGATE = 8


} REGCLS;



typedef struct IRpcStubBuffer IRpcStubBuffer;
typedef struct IRpcChannelBuffer IRpcChannelBuffer;


typedef enum tagCOINITBASE
{



  COINITBASE_MULTITHREADED = 0x0,

} COINITBASE;


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypesbase.h" 1








#pragma warning(disable: 4049)
# 41 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypesbase.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/guiddef.h" 1
# 41 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypesbase.h" 2



extern "C"{
# 62 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypesbase.h"
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec;
# 114 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypesbase.h"
typedef WCHAR OLECHAR;

typedef OLECHAR *LPOLESTR;

typedef const OLECHAR *LPCOLESTR;
# 139 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypesbase.h"
typedef unsigned char UCHAR;

typedef short SHORT;

typedef unsigned short USHORT;

typedef DWORD ULONG;

typedef double DOUBLE;
# 259 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypesbase.h"
typedef struct _COAUTHIDENTITY
    {
                    USHORT *User;
                  ULONG UserLength;
                    USHORT *Domain;
                  ULONG DomainLength;
                    USHORT *Password;
                  ULONG PasswordLength;
    ULONG Flags;
    } COAUTHIDENTITY;

typedef struct _COAUTHINFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
    } COAUTHINFO;

typedef LONG SCODE;

typedef SCODE *PSCODE;
# 313 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypesbase.h"
typedef
enum tagMEMCTX
    {
        MEMCTX_TASK = 1,
        MEMCTX_SHARED = 2,
        MEMCTX_MACSYSTEM = 3,
        MEMCTX_UNKNOWN = -1,
        MEMCTX_SAME = -2
    } MEMCTX;
# 347 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypesbase.h"
typedef
enum tagCLSCTX
    {
        CLSCTX_INPROC_SERVER = 0x1,
        CLSCTX_INPROC_HANDLER = 0x2,
        CLSCTX_LOCAL_SERVER = 0x4,
        CLSCTX_INPROC_SERVER16 = 0x8,
        CLSCTX_REMOTE_SERVER = 0x10,
        CLSCTX_INPROC_HANDLER16 = 0x20,
        CLSCTX_RESERVED1 = 0x40,
        CLSCTX_RESERVED2 = 0x80,
        CLSCTX_RESERVED3 = 0x100,
        CLSCTX_RESERVED4 = 0x200,
        CLSCTX_NO_CODE_DOWNLOAD = 0x400,
        CLSCTX_RESERVED5 = 0x800,
        CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
        CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
        CLSCTX_NO_FAILURE_LOG = 0x4000,
        CLSCTX_DISABLE_AAA = 0x8000,
        CLSCTX_ENABLE_AAA = 0x10000,
        CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
        CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
        CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
        CLSCTX_ENABLE_CLOAKING = 0x100000,
        CLSCTX_APPCONTAINER = 0x400000,
        CLSCTX_ACTIVATE_AAA_AS_IU = 0x800000,
        CLSCTX_PS_DLL = ( int )0x80000000
    } CLSCTX;
# 395 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypesbase.h"
typedef
enum tagMSHLFLAGS
    {
        MSHLFLAGS_NORMAL = 0,
        MSHLFLAGS_TABLESTRONG = 1,
        MSHLFLAGS_TABLEWEAK = 2,
        MSHLFLAGS_NOPING = 4,
        MSHLFLAGS_RESERVED1 = 8,
        MSHLFLAGS_RESERVED2 = 16,
        MSHLFLAGS_RESERVED3 = 32,
        MSHLFLAGS_RESERVED4 = 64
    } MSHLFLAGS;

typedef
enum tagMSHCTX
    {
        MSHCTX_LOCAL = 0,
        MSHCTX_NOSHAREDMEM = 1,
        MSHCTX_DIFFERENTMACHINE = 2,
        MSHCTX_INPROC = 3,
        MSHCTX_CROSSCTX = 4
    } MSHCTX;

typedef struct _BYTE_BLOB
    {
    ULONG clSize;
                    byte abData[ 1 ];
    } BYTE_BLOB;

typedef BYTE_BLOB *UP_BYTE_BLOB;

typedef struct _WORD_BLOB
    {
    ULONG clSize;
                    unsigned short asData[ 1 ];
    } WORD_BLOB;

typedef WORD_BLOB *UP_WORD_BLOB;

typedef struct _DWORD_BLOB
    {
    ULONG clSize;
                    ULONG alData[ 1 ];
    } DWORD_BLOB;

typedef DWORD_BLOB *UP_DWORD_BLOB;

typedef struct _FLAGGED_BYTE_BLOB
    {
    ULONG fFlags;
    ULONG clSize;
                    byte abData[ 1 ];
    } FLAGGED_BYTE_BLOB;

typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

typedef struct _FLAGGED_WORD_BLOB
    {
    ULONG fFlags;
    ULONG clSize;
                    unsigned short asData[ 1 ];
    } FLAGGED_WORD_BLOB;

typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

typedef struct _BYTE_SIZEDARR
    {
    ULONG clSize;
                    byte *pData;
    } BYTE_SIZEDARR;

typedef struct _SHORT_SIZEDARR
    {
    ULONG clSize;
                    unsigned short *pData;
    } WORD_SIZEDARR;

typedef struct _LONG_SIZEDARR
    {
    ULONG clSize;
                    ULONG *pData;
    } DWORD_SIZEDARR;

typedef struct _HYPER_SIZEDARR
    {
    ULONG clSize;
                    __int64 *pData;
    } HYPER_SIZEDARR;



extern RPC_IF_HANDLE IWinTypesBase_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypesBase_v0_1_s_ifspec;





typedef boolean BOOLEAN;





typedef struct tagBLOB
    {
    ULONG cbSize;
                    BYTE *pBlobData;
    } BLOB;

typedef struct tagBLOB *LPBLOB;
# 541 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypesbase.h"
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec;






}
# 374 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\unknwnbase.h" 1








#pragma warning(disable: 4049)
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\unknwnbase.h"
typedef struct IUnknown IUnknown;






typedef struct AsyncIUnknown AsyncIUnknown;






typedef struct IClassFactory IClassFactory;
# 68 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\unknwnbase.h"
extern "C"{
# 89 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\unknwnbase.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec;







typedef IUnknown *LPUNKNOWN;







    extern "C" const IID IID_IUnknown;
    extern "C++"
    {
        struct __declspec(uuid("00000000-0000-0000-C000-000000000046")) __declspec(novtable)
        IUnknown
        {
        public:

            virtual HRESULT __stdcall QueryInterface(
                           const IID & riid,
                                                 void * *ppvObject) = 0;

            virtual ULONG __stdcall AddRef( void) = 0;

            virtual ULONG __stdcall Release( void) = 0;

            template<class Q>
            HRESULT



            __stdcall

            QueryInterface( Q** pp)
            {
                return QueryInterface(__uuidof(Q), (void **)pp);
            }


        };
    }
    HRESULT __stdcall IUnknown_QueryInterface_Proxy(
        IUnknown * This,
                   const IID & riid,
                                             void * *ppvObject);

    void __stdcall IUnknown_QueryInterface_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);

    ULONG __stdcall IUnknown_AddRef_Proxy(
        IUnknown * This);

    void __stdcall IUnknown_AddRef_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);

    ULONG __stdcall IUnknown_Release_Proxy(
        IUnknown * This);

    void __stdcall IUnknown_Release_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);
# 286 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\unknwnbase.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec;
# 296 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\unknwnbase.h"
extern "C" const IID IID_AsyncIUnknown;



    struct __declspec(uuid("000e0000-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIUnknown : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_QueryInterface(
                       const IID & riid) = 0;

        virtual HRESULT __stdcall Finish_QueryInterface(

                              void **ppvObject) = 0;

        virtual HRESULT __stdcall Begin_AddRef( void) = 0;

        virtual ULONG __stdcall Finish_AddRef( void) = 0;

        virtual HRESULT __stdcall Begin_Release( void) = 0;

        virtual ULONG __stdcall Finish_Release( void) = 0;

    };
# 422 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\unknwnbase.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec;







typedef IClassFactory *LPCLASSFACTORY;


extern "C" const IID IID_IClassFactory;



    struct __declspec(uuid("00000001-0000-0000-C000-000000000046")) __declspec(novtable)
    IClassFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateInstance(

                      IUnknown *pUnkOuter,

                  const IID & riid,

                          void **ppvObject) = 0;

        virtual HRESULT __stdcall LockServer(
                       BOOL fLock) = 0;

    };
# 523 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\unknwnbase.h"
                HRESULT __stdcall IClassFactory_RemoteCreateInstance_Proxy(
              IClassFactory * This,
                         const IID & riid,
                                             IUnknown **ppvObject);


void __stdcall IClassFactory_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IClassFactory_RemoteLockServer_Proxy(
              IClassFactory * This,
               BOOL fLock);


void __stdcall IClassFactory_RemoteLockServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 559 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\unknwnbase.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec;



              HRESULT __stdcall IClassFactory_CreateInstance_Proxy(
    IClassFactory * This,

              IUnknown *pUnkOuter,

          const IID & riid,

                  void **ppvObject);


                HRESULT __stdcall IClassFactory_CreateInstance_Stub(
              IClassFactory * This,
                         const IID & riid,
                                             IUnknown **ppvObject);

              HRESULT __stdcall IClassFactory_LockServer_Proxy(
    IClassFactory * This,
               BOOL fLock);


                HRESULT __stdcall IClassFactory_LockServer_Stub(
              IClassFactory * This,
               BOOL fLock);






}
# 375 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h" 1








#pragma warning(disable: 4049)
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef struct IMarshal IMarshal;






typedef struct INoMarshal INoMarshal;






typedef struct IAgileObject IAgileObject;






typedef struct IActivationFilter IActivationFilter;






typedef struct IMarshal2 IMarshal2;






typedef struct IMalloc IMalloc;






typedef struct IStdMarshalInfo IStdMarshalInfo;






typedef struct IExternalConnection IExternalConnection;






typedef struct IMultiQI IMultiQI;






typedef struct AsyncIMultiQI AsyncIMultiQI;






typedef struct IInternalUnknown IInternalUnknown;






typedef struct IEnumUnknown IEnumUnknown;






typedef struct IEnumString IEnumString;






typedef struct ISequentialStream ISequentialStream;






typedef struct IStream IStream;






typedef struct IRpcChannelBuffer IRpcChannelBuffer;






typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;






typedef struct IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;






typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;






typedef struct IRpcSyntaxNegotiate IRpcSyntaxNegotiate;






typedef struct IRpcProxyBuffer IRpcProxyBuffer;






typedef struct IRpcStubBuffer IRpcStubBuffer;






typedef struct IPSFactoryBuffer IPSFactoryBuffer;






typedef struct IChannelHook IChannelHook;






typedef struct IClientSecurity IClientSecurity;






typedef struct IServerSecurity IServerSecurity;






typedef struct IRpcOptions IRpcOptions;






typedef struct IGlobalOptions IGlobalOptions;






typedef struct ISurrogate ISurrogate;






typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;






typedef struct ISynchronize ISynchronize;






typedef struct ISynchronizeHandle ISynchronizeHandle;






typedef struct ISynchronizeEvent ISynchronizeEvent;






typedef struct ISynchronizeContainer ISynchronizeContainer;






typedef struct ISynchronizeMutex ISynchronizeMutex;






typedef struct ICancelMethodCalls ICancelMethodCalls;






typedef struct IAsyncManager IAsyncManager;






typedef struct ICallFactory ICallFactory;






typedef struct IRpcHelper IRpcHelper;






typedef struct IReleaseMarshalBuffers IReleaseMarshalBuffers;






typedef struct IWaitMultiple IWaitMultiple;






typedef struct IAddrTrackingControl IAddrTrackingControl;






typedef struct IAddrExclusionControl IAddrExclusionControl;






typedef struct IPipeByte IPipeByte;






typedef struct AsyncIPipeByte AsyncIPipeByte;






typedef struct IPipeLong IPipeLong;






typedef struct AsyncIPipeLong AsyncIPipeLong;






typedef struct IPipeDouble IPipeDouble;






typedef struct AsyncIPipeDouble AsyncIPipeDouble;






typedef struct IEnumContextProps IEnumContextProps;






typedef struct IContext IContext;






typedef struct IObjContext IObjContext;






typedef struct IComThreadingInfo IComThreadingInfo;






typedef struct IProcessInitControl IProcessInitControl;






typedef struct IFastRundown IFastRundown;






typedef struct IMarshalingStream IMarshalingStream;






typedef struct IAgileReference IAgileReference;
# 446 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C"{
# 478 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
#pragma warning(push)

#pragma warning(disable: 4201)
# 502 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef struct _COSERVERINFO
    {
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
    } COSERVERINFO;




extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec;







typedef IMarshal *LPMARSHAL;


extern "C" const IID IID_IMarshal;



    struct __declspec(uuid("00000003-0000-0000-C000-000000000046")) __declspec(novtable)
    IMarshal : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetUnmarshalClass(

                  const IID & riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags,

                   CLSID *pCid) = 0;

        virtual HRESULT __stdcall GetMarshalSizeMax(

                  const IID & riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags,

                   DWORD *pSize) = 0;

        virtual HRESULT __stdcall MarshalInterface(

                  IStream *pStm,

                  const IID & riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags) = 0;

        virtual HRESULT __stdcall UnmarshalInterface(

                  IStream *pStm,

                  const IID & riid,

                      void **ppv) = 0;

        virtual HRESULT __stdcall ReleaseMarshalData(

                  IStream *pStm) = 0;

        virtual HRESULT __stdcall DisconnectObject(

                  DWORD dwReserved) = 0;

    };
# 735 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_INoMarshal;



    struct __declspec(uuid("ecc8691b-c1db-4dc0-855e-65f6c551af49")) __declspec(novtable)
    INoMarshal : public IUnknown
    {
    public:
    };
# 805 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IAgileObject;



    struct __declspec(uuid("94ea2b94-e9cc-49e0-c0ff-ee64ca8f5b90")) __declspec(novtable)
    IAgileObject : public IUnknown
    {
    public:
    };
# 877 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec;







typedef
enum tagACTIVATIONTYPE
    {
        ACTIVATIONTYPE_UNCATEGORIZED = 0,
        ACTIVATIONTYPE_FROM_MONIKER = 0x1,
        ACTIVATIONTYPE_FROM_DATA = 0x2,
        ACTIVATIONTYPE_FROM_STORAGE = 0x4,
        ACTIVATIONTYPE_FROM_STREAM = 0x8,
        ACTIVATIONTYPE_FROM_FILE = 0x10
    } ACTIVATIONTYPE;


extern "C" const IID IID_IActivationFilter;



    struct __declspec(uuid("00000017-0000-0000-C000-000000000046")) __declspec(novtable)
    IActivationFilter : public IUnknown
    {
    public:
        virtual HRESULT __stdcall HandleActivation(
                       DWORD dwActivationType,
                       const IID & rclsid,
                        CLSID *pReplacementClsId) = 0;

    };
# 981 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef IMarshal2 *LPMARSHAL2;


extern "C" const IID IID_IMarshal2;



    struct __declspec(uuid("000001cf-0000-0000-C000-000000000046")) __declspec(novtable)
    IMarshal2 : public IMarshal
    {
    public:
    };
# 1136 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef IMalloc *LPMALLOC;


extern "C" const IID IID_IMalloc;



    struct __declspec(uuid("00000002-0000-0000-C000-000000000046")) __declspec(novtable)
    IMalloc : public IUnknown
    {
    public:
        virtual void *__stdcall Alloc(

                  SIZE_T cb) = 0;

        virtual void *__stdcall Realloc(

                      void *pv,

                  SIZE_T cb) = 0;

        virtual void __stdcall Free(

                      void *pv) = 0;

        virtual SIZE_T __stdcall GetSize(

                      void *pv) = 0;

        virtual int __stdcall DidAlloc(

                      void *pv) = 0;

        virtual void __stdcall HeapMinimize( void) = 0;

    };
# 1280 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef IStdMarshalInfo *LPSTDMARSHALINFO;


extern "C" const IID IID_IStdMarshalInfo;



    struct __declspec(uuid("00000018-0000-0000-C000-000000000046")) __declspec(novtable)
    IStdMarshalInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassForHandler(

                  DWORD dwDestContext,

                        void *pvDestContext,

                   CLSID *pClsid) = 0;

    };
# 1372 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef IExternalConnection *LPEXTERNALCONNECTION;

typedef
enum tagEXTCONN
    {
        EXTCONN_STRONG = 0x1,
        EXTCONN_WEAK = 0x2,
        EXTCONN_CALLABLE = 0x4
    } EXTCONN;


extern "C" const IID IID_IExternalConnection;



    struct __declspec(uuid("00000019-0000-0000-C000-000000000046")) __declspec(novtable)
    IExternalConnection : public IUnknown
    {
    public:
        virtual DWORD __stdcall AddConnection(

                  DWORD extconn,

                  DWORD reserved) = 0;

        virtual DWORD __stdcall ReleaseConnection(

                  DWORD extconn,

                  DWORD reserved,

                  BOOL fLastReleaseCloses) = 0;

    };
# 1485 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef IMultiQI *LPMULTIQI;





typedef struct tagMULTI_QI
    {
    const IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
    } MULTI_QI;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec;
# 1510 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IMultiQI;



    struct __declspec(uuid("00000020-0000-0000-C000-000000000046")) __declspec(novtable)
    IMultiQI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryMultipleInterfaces(

                  ULONG cMQIs,

                                    MULTI_QI *pMQIs) = 0;

    };
# 1596 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_AsyncIMultiQI;



    struct __declspec(uuid("000e0020-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIMultiQI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_QueryMultipleInterfaces(

                  ULONG cMQIs,

                                    MULTI_QI *pMQIs) = 0;

        virtual HRESULT __stdcall Finish_QueryMultipleInterfaces(

                                    MULTI_QI *pMQIs) = 0;

    };
# 1696 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec;
# 1706 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IInternalUnknown;



    struct __declspec(uuid("00000021-0000-0000-C000-000000000046")) __declspec(novtable)
    IInternalUnknown : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryInternalInterface(

                  const IID & riid,

                      void **ppv) = 0;

    };
# 1794 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec;







typedef IEnumUnknown *LPENUMUNKNOWN;


extern "C" const IID IID_IEnumUnknown;



    struct __declspec(uuid("00000100-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumUnknown : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(

                  ULONG celt,

                                                 IUnknown **rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumUnknown **ppenum) = 0;

    };
# 1913 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
                HRESULT __stdcall IEnumUnknown_RemoteNext_Proxy(
              IEnumUnknown * This,
               ULONG celt,
                                                                                IUnknown **rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumUnknown_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1937 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef IEnumString *LPENUMSTRING;


extern "C" const IID IID_IEnumString;



    struct __declspec(uuid("00000101-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumString : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 LPOLESTR *rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumString **ppenum) = 0;

    };
# 2045 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
                HRESULT __stdcall IEnumString_RemoteNext_Proxy(
              IEnumString * This,
               ULONG celt,
                                                                                LPOLESTR *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumString_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2070 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_ISequentialStream;



    struct __declspec(uuid("0c733a30-2a1c-11ce-ade5-00aa0044773d")) __declspec(novtable)
    ISequentialStream : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Read(

                                                 void *pv,

                  ULONG cb,

                       ULONG *pcbRead) = 0;

        virtual HRESULT __stdcall Write(

                                  const void *pv,

                  ULONG cb,

                       ULONG *pcbWritten) = 0;

    };
# 2169 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
                HRESULT __stdcall ISequentialStream_RemoteRead_Proxy(
              ISequentialStream * This,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);


void __stdcall ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ISequentialStream_RemoteWrite_Proxy(
              ISequentialStream * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2207 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef IStream *LPSTREAM;

typedef struct tagSTATSTG
    {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
    } STATSTG;

typedef
enum tagSTGTY
    {
        STGTY_STORAGE = 1,
        STGTY_STREAM = 2,
        STGTY_LOCKBYTES = 3,
        STGTY_PROPERTY = 4
    } STGTY;

typedef
enum tagSTREAM_SEEK
    {
        STREAM_SEEK_SET = 0,
        STREAM_SEEK_CUR = 1,
        STREAM_SEEK_END = 2
    } STREAM_SEEK;

typedef
enum tagLOCKTYPE
    {
        LOCK_WRITE = 1,
        LOCK_EXCLUSIVE = 2,
        LOCK_ONLYONCE = 4
    } LOCKTYPE;


extern "C" const IID IID_IStream;



    struct __declspec(uuid("0000000c-0000-0000-C000-000000000046")) __declspec(novtable)
    IStream : public ISequentialStream
    {
    public:
        virtual HRESULT __stdcall Seek(
                       LARGE_INTEGER dlibMove,
                       DWORD dwOrigin,

                       ULARGE_INTEGER *plibNewPosition) = 0;

        virtual HRESULT __stdcall SetSize(
                       ULARGE_INTEGER libNewSize) = 0;

        virtual HRESULT __stdcall CopyTo(

                  IStream *pstm,
                       ULARGE_INTEGER cb,

                       ULARGE_INTEGER *pcbRead,

                       ULARGE_INTEGER *pcbWritten) = 0;

        virtual HRESULT __stdcall Commit(
                       DWORD grfCommitFlags) = 0;

        virtual HRESULT __stdcall Revert( void) = 0;

        virtual HRESULT __stdcall LockRegion(
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType) = 0;

        virtual HRESULT __stdcall UnlockRegion(
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType) = 0;

        virtual HRESULT __stdcall Stat(
                                   STATSTG *pstatstg,
                       DWORD grfStatFlag) = 0;

        virtual HRESULT __stdcall Clone(
                                             IStream **ppstm) = 0;

    };
# 2450 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
                HRESULT __stdcall IStream_RemoteSeek_Proxy(
              IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                           ULARGE_INTEGER *plibNewPosition);


void __stdcall IStream_RemoteSeek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IStream_RemoteCopyTo_Proxy(
              IStream * This,
                                     IStream *pstm,
               ULARGE_INTEGER cb,
                           ULARGE_INTEGER *pcbRead,
                           ULARGE_INTEGER *pcbWritten);


void __stdcall IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2489 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef ULONG RPCOLEDATAREP;

typedef struct tagRPCOLEMESSAGE
    {
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void *reserved2[ 5 ];
    ULONG rpcFlags;
    } RPCOLEMESSAGE;

typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;


extern "C" const IID IID_IRpcChannelBuffer;



    struct __declspec(uuid("D5F56B60-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcChannelBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBuffer(

                     RPCOLEMESSAGE *pMessage,

                  const IID & riid) = 0;

        virtual HRESULT __stdcall SendReceive(

                     RPCOLEMESSAGE *pMessage,

                       ULONG *pStatus) = 0;

        virtual HRESULT __stdcall FreeBuffer(

                     RPCOLEMESSAGE *pMessage) = 0;

        virtual HRESULT __stdcall GetDestCtx(

                   DWORD *pdwDestContext,

                                       void **ppvDestContext) = 0;

        virtual HRESULT __stdcall IsConnected( void) = 0;

    };
# 2645 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec;
# 2655 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IRpcChannelBuffer2;



    struct __declspec(uuid("594f31d0-7f19-11d0-b194-00a0c90dc8bf")) __declspec(novtable)
    IRpcChannelBuffer2 : public IRpcChannelBuffer
    {
    public:
        virtual HRESULT __stdcall GetProtocolVersion(

                   DWORD *pdwVersion) = 0;

    };
# 2782 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IAsyncRpcChannelBuffer;



    struct __declspec(uuid("a5029fb6-3c34-11d1-9c99-00c04fb998aa")) __declspec(novtable)
    IAsyncRpcChannelBuffer : public IRpcChannelBuffer2
    {
    public:
        virtual HRESULT __stdcall Send(

                     RPCOLEMESSAGE *pMsg,

                  ISynchronize *pSync,

                   ULONG *pulStatus) = 0;

        virtual HRESULT __stdcall Receive(

                     RPCOLEMESSAGE *pMsg,

                   ULONG *pulStatus) = 0;

        virtual HRESULT __stdcall GetDestCtxEx(

                  RPCOLEMESSAGE *pMsg,

                   DWORD *pdwDestContext,

                      void **ppvDestContext) = 0;

    };
# 2962 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IRpcChannelBuffer3;



    struct __declspec(uuid("25B15600-0115-11d0-BF0D-00AA00B8DFD2")) __declspec(novtable)
    IRpcChannelBuffer3 : public IRpcChannelBuffer2
    {
    public:
        virtual HRESULT __stdcall Send(

                     RPCOLEMESSAGE *pMsg,

                   ULONG *pulStatus) = 0;

        virtual HRESULT __stdcall Receive(

                     RPCOLEMESSAGE *pMsg,

                  ULONG ulSize,

                   ULONG *pulStatus) = 0;

        virtual HRESULT __stdcall Cancel(

                     RPCOLEMESSAGE *pMsg) = 0;

        virtual HRESULT __stdcall GetCallContext(

                  RPCOLEMESSAGE *pMsg,

                  const IID & riid,

                      void **pInterface) = 0;

        virtual HRESULT __stdcall GetDestCtxEx(

                  RPCOLEMESSAGE *pMsg,

                   DWORD *pdwDestContext,

                      void **ppvDestContext) = 0;

        virtual HRESULT __stdcall GetState(

                  RPCOLEMESSAGE *pMsg,

                   DWORD *pState) = 0;

        virtual HRESULT __stdcall RegisterAsync(

                     RPCOLEMESSAGE *pMsg,

                  IAsyncManager *pAsyncMgr) = 0;

    };
# 3206 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IRpcSyntaxNegotiate;



    struct __declspec(uuid("58a08519-24c8-4935-b482-3fd823333a4f")) __declspec(novtable)
    IRpcSyntaxNegotiate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall NegotiateSyntax(

                     RPCOLEMESSAGE *pMsg) = 0;

    };
# 3288 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IRpcProxyBuffer;



    struct __declspec(uuid("D5F56A34-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcProxyBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Connect(

                  IRpcChannelBuffer *pRpcChannelBuffer) = 0;

        virtual void __stdcall Disconnect( void) = 0;

    };
# 3380 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec;
# 3390 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IRpcStubBuffer;



    struct __declspec(uuid("D5F56AFC-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcStubBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Connect(

                  IUnknown *pUnkServer) = 0;

        virtual void __stdcall Disconnect( void) = 0;

        virtual HRESULT __stdcall Invoke(

                     RPCOLEMESSAGE *_prpcmsg,

                  IRpcChannelBuffer *_pRpcChannelBuffer) = 0;

        virtual IRpcStubBuffer *__stdcall IsIIDSupported(

                  const IID & riid) = 0;

        virtual ULONG __stdcall CountRefs( void) = 0;

        virtual HRESULT __stdcall DebugServerQueryInterface(

                      void **ppv) = 0;

        virtual void __stdcall DebugServerRelease(

                  void *pv) = 0;

    };
# 3540 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IPSFactoryBuffer;



    struct __declspec(uuid("D5F569D0-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IPSFactoryBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateProxy(

                  IUnknown *pUnkOuter,

                  const IID & riid,

                      IRpcProxyBuffer **ppProxy,

                      void **ppv) = 0;

        virtual HRESULT __stdcall CreateStub(

                  const IID & riid,

                      IUnknown *pUnkServer,

                      IRpcStubBuffer **ppStub) = 0;

    };
# 3656 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef struct SChannelHookCallInfo
    {
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void *pObject;
    } SChannelHookCallInfo;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec;
# 3678 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IChannelHook;



    struct __declspec(uuid("1008c4a0-7613-11cf-9af1-0020af6e72f4")) __declspec(novtable)
    IChannelHook : public IUnknown
    {
    public:
        virtual void __stdcall ClientGetSize(

                  const GUID & uExtent,

                  const IID & riid,

                   ULONG *pDataSize) = 0;

        virtual void __stdcall ClientFillBuffer(

                  const GUID & uExtent,

                  const IID & riid,

                     ULONG *pDataSize,

                  void *pDataBuffer) = 0;

        virtual void __stdcall ClientNotify(

                  const GUID & uExtent,

                  const IID & riid,

                  ULONG cbDataSize,

                  void *pDataBuffer,

                  DWORD lDataRep,

                  HRESULT hrFault) = 0;

        virtual void __stdcall ServerNotify(

                  const GUID & uExtent,

                  const IID & riid,

                  ULONG cbDataSize,

                  void *pDataBuffer,

                  DWORD lDataRep) = 0;

        virtual void __stdcall ServerGetSize(

                  const GUID & uExtent,

                  const IID & riid,

                  HRESULT hrFault,

                   ULONG *pDataSize) = 0;

        virtual void __stdcall ServerFillBuffer(

                  const GUID & uExtent,

                  const IID & riid,

                     ULONG *pDataSize,

                  void *pDataBuffer,

                  HRESULT hrFault) = 0;

    };
# 3909 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec;







typedef struct tagSOLE_AUTHENTICATION_SERVICE
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR *pPrincipalName;
    HRESULT hr;
    } SOLE_AUTHENTICATION_SERVICE;

typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;

typedef
enum tagEOLE_AUTHENTICATION_CAPABILITIES
    {
        EOAC_NONE = 0,
        EOAC_MUTUAL_AUTH = 0x1,
        EOAC_STATIC_CLOAKING = 0x20,
        EOAC_DYNAMIC_CLOAKING = 0x40,
        EOAC_ANY_AUTHORITY = 0x80,
        EOAC_MAKE_FULLSIC = 0x100,
        EOAC_DEFAULT = 0x800,
        EOAC_SECURE_REFS = 0x2,
        EOAC_ACCESS_CONTROL = 0x4,
        EOAC_APPID = 0x8,
        EOAC_DYNAMIC = 0x10,
        EOAC_REQUIRE_FULLSIC = 0x200,
        EOAC_AUTO_IMPERSONATE = 0x400,
        EOAC_NO_CUSTOM_MARSHAL = 0x2000,
        EOAC_DISABLE_AAA = 0x1000
    } EOLE_AUTHENTICATION_CAPABILITIES;





typedef struct tagSOLE_AUTHENTICATION_INFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void *pAuthInfo;
    } SOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_LIST
    {
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO *aAuthInfo;
    } SOLE_AUTHENTICATION_LIST;

typedef struct tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;


extern "C" const IID IID_IClientSecurity;



    struct __declspec(uuid("0000013D-0000-0000-C000-000000000046")) __declspec(novtable)
    IClientSecurity : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryBlanket(

                  IUnknown *pProxy,

                   DWORD *pAuthnSvc,

                       DWORD *pAuthzSvc,

                                  OLECHAR **pServerPrincName,

                       DWORD *pAuthnLevel,

                       DWORD *pImpLevel,

                                       void **pAuthInfo,

                       DWORD *pCapabilites) = 0;

        virtual HRESULT __stdcall SetBlanket(

                  IUnknown *pProxy,

                  DWORD dwAuthnSvc,

                  DWORD dwAuthzSvc,

                           OLECHAR *pServerPrincName,

                  DWORD dwAuthnLevel,

                  DWORD dwImpLevel,

                      void *pAuthInfo,

                  DWORD dwCapabilities) = 0;

        virtual HRESULT __stdcall CopyProxy(

                  IUnknown *pProxy,

                      IUnknown **ppCopy) = 0;

    };
# 4138 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec;
# 4148 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IServerSecurity;



    struct __declspec(uuid("0000013E-0000-0000-C000-000000000046")) __declspec(novtable)
    IServerSecurity : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryBlanket(

                       DWORD *pAuthnSvc,

                       DWORD *pAuthzSvc,

                                  OLECHAR **pServerPrincName,

                       DWORD *pAuthnLevel,

                       DWORD *pImpLevel,

                                       void **pPrivs,

                         DWORD *pCapabilities) = 0;

        virtual HRESULT __stdcall ImpersonateClient( void) = 0;

        virtual HRESULT __stdcall RevertToSelf( void) = 0;

        virtual BOOL __stdcall IsImpersonating( void) = 0;

    };
# 4274 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef
enum tagRPCOPT_PROPERTIES
    {
        COMBND_RPCTIMEOUT = 0x1,
        COMBND_SERVER_LOCALITY = 0x2,
        COMBND_RESERVED1 = 0x4,
        COMBND_RESERVED2 = 0x5
    } RPCOPT_PROPERTIES;

typedef
enum tagRPCOPT_SERVER_LOCALITY_VALUES
    {
        SERVER_LOCALITY_PROCESS_LOCAL = 0,
        SERVER_LOCALITY_MACHINE_LOCAL = 1,
        SERVER_LOCALITY_REMOTE = 2
    } RPCOPT_SERVER_LOCALITY_VALUES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec;
# 4303 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IRpcOptions;



    struct __declspec(uuid("00000144-0000-0000-C000-000000000046")) __declspec(novtable)
    IRpcOptions : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Set(

                  IUnknown *pPrx,

                  RPCOPT_PROPERTIES dwProperty,

                  ULONG_PTR dwValue) = 0;

        virtual HRESULT __stdcall Query(

                  IUnknown *pPrx,

                  RPCOPT_PROPERTIES dwProperty,

                   ULONG_PTR *pdwValue) = 0;

    };
# 4413 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef
enum tagGLOBALOPT_PROPERTIES
    {
        COMGLB_EXCEPTION_HANDLING = 1,
        COMGLB_APPID = 2,
        COMGLB_RPC_THREADPOOL_SETTING = 3,
        COMGLB_RO_SETTINGS = 4,
        COMGLB_UNMARSHALING_POLICY = 5
    } GLOBALOPT_PROPERTIES;

typedef
enum tagGLOBALOPT_EH_VALUES
    {
        COMGLB_EXCEPTION_HANDLE = 0,
        COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
        COMGLB_EXCEPTION_DONOT_HANDLE = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL,
        COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2
    } GLOBALOPT_EH_VALUES;

typedef
enum tagGLOBALOPT_RPCTP_VALUES
    {
        COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0,
        COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1
    } GLOBALOPT_RPCTP_VALUES;

typedef
enum tagGLOBALOPT_RO_FLAGS
    {
        COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 0x1,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 0x2,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x4,
        COMGLB_FAST_RUNDOWN = 0x8,
        COMGLB_RESERVED1 = 0x10,
        COMGLB_RESERVED2 = 0x20,
        COMGLB_RESERVED3 = 0x40,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 0x80,
        COMGLB_RESERVED4 = 0x100,
        COMGLB_RESERVED5 = 0x200
    } GLOBALOPT_RO_FLAGS;

typedef
enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES
    {
        COMGLB_UNMARSHALING_POLICY_NORMAL = 0,
        COMGLB_UNMARSHALING_POLICY_STRONG = 1,
        COMGLB_UNMARSHALING_POLICY_HYBRID = 2
    } GLOBALOPT_UNMARSHALING_POLICY_VALUES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec;
# 4474 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IGlobalOptions;



    struct __declspec(uuid("0000015B-0000-0000-C000-000000000046")) __declspec(novtable)
    IGlobalOptions : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Set(

                  GLOBALOPT_PROPERTIES dwProperty,

                  ULONG_PTR dwValue) = 0;

        virtual HRESULT __stdcall Query(

                  GLOBALOPT_PROPERTIES dwProperty,

                   ULONG_PTR *pdwValue) = 0;

    };
# 4579 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec;







typedef ISurrogate *LPSURROGATE;


extern "C" const IID IID_ISurrogate;



    struct __declspec(uuid("00000022-0000-0000-C000-000000000046")) __declspec(novtable)
    ISurrogate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall LoadDllServer(
                                 const IID & Clsid) = 0;

        virtual HRESULT __stdcall FreeSurrogate( void) = 0;

    };
# 4678 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;


extern "C" const IID IID_IGlobalInterfaceTable;



    struct __declspec(uuid("00000146-0000-0000-C000-000000000046")) __declspec(novtable)
    IGlobalInterfaceTable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterInterfaceInGlobal(

                  IUnknown *pUnk,

                  const IID & riid,

                   DWORD *pdwCookie) = 0;

        virtual HRESULT __stdcall RevokeInterfaceFromGlobal(

                  DWORD dwCookie) = 0;

        virtual HRESULT __stdcall GetInterfaceFromGlobal(

                  DWORD dwCookie,

                  const IID & riid,

                      void **ppv) = 0;

    };
# 4805 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec;
# 4815 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_ISynchronize;



    struct __declspec(uuid("00000030-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronize : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Wait(
                       DWORD dwFlags,
                       DWORD dwMilliseconds) = 0;

        virtual HRESULT __stdcall Signal( void) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

    };
# 4913 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_ISynchronizeHandle;



    struct __declspec(uuid("00000031-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeHandle : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetHandle(

                   HANDLE *ph) = 0;

    };
# 4995 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_ISynchronizeEvent;



    struct __declspec(uuid("00000032-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeEvent : public ISynchronizeHandle
    {
    public:
        virtual HRESULT __stdcall SetEventHandle(

                  HANDLE *ph) = 0;

    };
# 5086 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_ISynchronizeContainer;



    struct __declspec(uuid("00000033-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeContainer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AddSynchronize(

                  ISynchronize *pSync) = 0;

        virtual HRESULT __stdcall WaitMultiple(

                  DWORD dwFlags,

                  DWORD dwTimeOut,

                      ISynchronize **ppSync) = 0;

    };
# 5188 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_ISynchronizeMutex;



    struct __declspec(uuid("00000025-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeMutex : public ISynchronize
    {
    public:
        virtual HRESULT __stdcall ReleaseMutex( void) = 0;

    };
# 5286 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef ICancelMethodCalls *LPCANCELMETHODCALLS;


extern "C" const IID IID_ICancelMethodCalls;



    struct __declspec(uuid("00000029-0000-0000-C000-000000000046")) __declspec(novtable)
    ICancelMethodCalls : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Cancel(

                  ULONG ulSeconds) = 0;

        virtual HRESULT __stdcall TestCancel( void) = 0;

    };
# 5378 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef
enum tagDCOM_CALL_STATE
    {
        DCOM_NONE = 0,
        DCOM_CALL_COMPLETE = 0x1,
        DCOM_CALL_CANCELED = 0x2
    } DCOM_CALL_STATE;


extern "C" const IID IID_IAsyncManager;



    struct __declspec(uuid("0000002A-0000-0000-C000-000000000046")) __declspec(novtable)
    IAsyncManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CompleteCall(

                  HRESULT Result) = 0;

        virtual HRESULT __stdcall GetCallContext(

                  const IID & riid,

                      void **pInterface) = 0;

        virtual HRESULT __stdcall GetState(

                   ULONG *pulStateFlags) = 0;

    };
# 5497 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_ICallFactory;



    struct __declspec(uuid("1c733a30-2a1c-11ce-ade5-00aa0044773d")) __declspec(novtable)
    ICallFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateCall(

                  const IID & riid,

                      IUnknown *pCtrlUnk,

                  const IID & riid2,

                      IUnknown **ppv) = 0;

    };
# 5591 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IRpcHelper;



    struct __declspec(uuid("00000149-0000-0000-C000-000000000046")) __declspec(novtable)
    IRpcHelper : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetDCOMProtocolVersion(

                   DWORD *pComVersion) = 0;

        virtual HRESULT __stdcall GetIIDFromOBJREF(

                  void *pObjRef,

                      IID **piid) = 0;

    };
# 5689 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IReleaseMarshalBuffers;



    struct __declspec(uuid("eb0cb9e8-7996-11d2-872e-0000f8080859")) __declspec(novtable)
    IReleaseMarshalBuffers : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReleaseMarshalBuffer(

                     RPCOLEMESSAGE *pMsg,

                  DWORD dwFlags,

                      IUnknown *pChnl) = 0;

    };
# 5779 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IWaitMultiple;



    struct __declspec(uuid("0000002B-0000-0000-C000-000000000046")) __declspec(novtable)
    IWaitMultiple : public IUnknown
    {
    public:
        virtual HRESULT __stdcall WaitMultiple(

                  DWORD timeout,

                      ISynchronize **pSync) = 0;

        virtual HRESULT __stdcall AddSynchronize(

                  ISynchronize *pSync) = 0;

    };
# 5876 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL;


extern "C" const IID IID_IAddrTrackingControl;



    struct __declspec(uuid("00000147-0000-0000-C000-000000000046")) __declspec(novtable)
    IAddrTrackingControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall EnableCOMDynamicAddrTracking( void) = 0;

        virtual HRESULT __stdcall DisableCOMDynamicAddrTracking( void) = 0;

    };
# 5964 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL;


extern "C" const IID IID_IAddrExclusionControl;



    struct __declspec(uuid("00000148-0000-0000-C000-000000000046")) __declspec(novtable)
    IAddrExclusionControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCurrentAddrExclusionList(

                  const IID & riid,

                      void **ppEnumerator) = 0;

        virtual HRESULT __stdcall UpdateAddrExclusionList(

                  IUnknown *pEnumerator) = 0;

    };
# 6065 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IPipeByte;



    struct __declspec(uuid("DB2F3ACA-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeByte : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull(
                                                                                          BYTE *buf,
                       ULONG cRequest,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Push(
                                                             BYTE *buf,
                       ULONG cSent) = 0;

    };
# 6161 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_AsyncIPipeByte;



    struct __declspec(uuid("DB2F3ACB-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeByte : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull(
                       ULONG cRequest) = 0;

        virtual HRESULT __stdcall Finish_Pull(
                                                                                          BYTE *buf,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Begin_Push(
                                                             BYTE *buf,
                       ULONG cSent) = 0;

        virtual HRESULT __stdcall Finish_Push( void) = 0;

    };
# 6273 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IPipeLong;



    struct __declspec(uuid("DB2F3ACC-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeLong : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull(
                                                                                          LONG *buf,
                       ULONG cRequest,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Push(
                                                             LONG *buf,
                       ULONG cSent) = 0;

    };
# 6369 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_AsyncIPipeLong;



    struct __declspec(uuid("DB2F3ACD-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeLong : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull(
                       ULONG cRequest) = 0;

        virtual HRESULT __stdcall Finish_Pull(
                                                                                          LONG *buf,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Begin_Push(
                                                             LONG *buf,
                       ULONG cSent) = 0;

        virtual HRESULT __stdcall Finish_Push( void) = 0;

    };
# 6481 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IPipeDouble;



    struct __declspec(uuid("DB2F3ACE-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeDouble : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull(
                                                                                          DOUBLE *buf,
                       ULONG cRequest,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Push(
                                                             DOUBLE *buf,
                       ULONG cSent) = 0;

    };
# 6577 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_AsyncIPipeDouble;



    struct __declspec(uuid("DB2F3ACF-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeDouble : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull(
                       ULONG cRequest) = 0;

        virtual HRESULT __stdcall Finish_Pull(
                                                                                          DOUBLE *buf,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Begin_Push(
                                                             DOUBLE *buf,
                       ULONG cSent) = 0;

        virtual HRESULT __stdcall Finish_Push( void) = 0;

    };
# 7155 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef
enum _APTTYPEQUALIFIER
    {
        APTTYPEQUALIFIER_NONE = 0,
        APTTYPEQUALIFIER_IMPLICIT_MTA = 1,
        APTTYPEQUALIFIER_NA_ON_MTA = 2,
        APTTYPEQUALIFIER_NA_ON_STA = 3,
        APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4,
        APTTYPEQUALIFIER_NA_ON_MAINSTA = 5,
        APTTYPEQUALIFIER_APPLICATION_STA = 6
    } APTTYPEQUALIFIER;

typedef
enum _APTTYPE
    {
        APTTYPE_CURRENT = -1,
        APTTYPE_STA = 0,
        APTTYPE_MTA = 1,
        APTTYPE_NA = 2,
        APTTYPE_MAINSTA = 3
    } APTTYPE;





typedef
enum _THDTYPE
    {
        THDTYPE_BLOCKMESSAGES = 0,
        THDTYPE_PROCESSMESSAGES = 1
    } THDTYPE;

typedef DWORD APARTMENTID;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec;
# 7202 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IComThreadingInfo;



    struct __declspec(uuid("000001ce-0000-0000-C000-000000000046")) __declspec(novtable)
    IComThreadingInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCurrentApartmentType(

                   APTTYPE *pAptType) = 0;

        virtual HRESULT __stdcall GetCurrentThreadType(

                   THDTYPE *pThreadType) = 0;

        virtual HRESULT __stdcall GetCurrentLogicalThreadId(

                   GUID *pguidLogicalThreadId) = 0;

        virtual HRESULT __stdcall SetCurrentLogicalThreadId(

                  const GUID & rguid) = 0;

    };
# 7320 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IProcessInitControl;



    struct __declspec(uuid("72380d55-8d2b-43a3-8513-2b6ef31434e9")) __declspec(novtable)
    IProcessInitControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ResetInitializerTimeout(
                       DWORD dwSecondsRemaining) = 0;

    };
# 7400 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IFastRundown;



    struct __declspec(uuid("00000040-0000-0000-C000-000000000046")) __declspec(novtable)
    IFastRundown : public IUnknown
    {
    public:
    };
# 7466 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
typedef
enum CO_MARSHALING_CONTEXT_ATTRIBUTES
    {
        CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = 0x80000000,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = 0x80000001
    } CO_MARSHALING_CONTEXT_ATTRIBUTES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec;
# 7486 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const IID IID_IMarshalingStream;



    struct __declspec(uuid("D8F2F5E6-6102-4863-9F26-389A4676EFDE")) __declspec(novtable)
    IMarshalingStream : public IStream
    {
    public:
        virtual HRESULT __stdcall GetMarshalingContextAttribute(
                       CO_MARSHALING_CONTEXT_ATTRIBUTES attribute,
                        ULONG_PTR *pAttributeValue) = 0;

    };
# 7672 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec;
# 7682 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
    extern "C" const IID IID_IAgileReference;
    extern "C++"
    {
        struct __declspec(uuid("C03F6A43-65A4-9818-987E-E0B810D2A6F2")) __declspec(novtable)
        IAgileReference : public IUnknown
        {
        public:
            virtual HRESULT __stdcall Resolve(
                           const IID & riid,
                                            void **ppvObjectReference) = 0;

            template<class Q>
            HRESULT



            __stdcall

            Resolve( Q** pp)
            {
                return Resolve(__uuidof(Q), (void **)pp);
            }

        };
    }
# 7792 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidlbase.h"
extern "C" const GUID IID_ICallbackWithNoReentrancyToApplicationSTA;






#pragma warning(pop)






extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec;



              HRESULT __stdcall IEnumUnknown_Next_Proxy(
    IEnumUnknown * This,

          ULONG celt,

                                         IUnknown **rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumUnknown_Next_Stub(
              IEnumUnknown * This,
               ULONG celt,
                                                                                IUnknown **rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumString_Next_Proxy(
    IEnumString * This,
               ULONG celt,

                                         LPOLESTR *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumString_Next_Stub(
              IEnumString * This,
               ULONG celt,
                                                                                LPOLESTR *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall ISequentialStream_Read_Proxy(
    ISequentialStream * This,

                                         void *pv,

          ULONG cb,

               ULONG *pcbRead);


                HRESULT __stdcall ISequentialStream_Read_Stub(
              ISequentialStream * This,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);

              HRESULT __stdcall ISequentialStream_Write_Proxy(
    ISequentialStream * This,

                          const void *pv,

          ULONG cb,

               ULONG *pcbWritten);


                HRESULT __stdcall ISequentialStream_Write_Stub(
              ISequentialStream * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IStream_Seek_Proxy(
    IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,

               ULARGE_INTEGER *plibNewPosition);


                HRESULT __stdcall IStream_Seek_Stub(
              IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                           ULARGE_INTEGER *plibNewPosition);

              HRESULT __stdcall IStream_CopyTo_Proxy(
    IStream * This,

          IStream *pstm,
               ULARGE_INTEGER cb,

               ULARGE_INTEGER *pcbRead,

               ULARGE_INTEGER *pcbWritten);


                HRESULT __stdcall IStream_CopyTo_Stub(
              IStream * This,
                                     IStream *pstm,
               ULARGE_INTEGER cb,
                           ULARGE_INTEGER *pcbRead,
                           ULARGE_INTEGER *pcbWritten);






}
# 376 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h" 2


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/guiddef.h" 1
# 378 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h" 2




# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\cguid.h" 1
# 21 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\cguid.h"
#pragma warning(push)

#pragma warning(disable: 4001)



extern "C" {





extern const IID GUID_NULL;
# 42 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\cguid.h"
extern const IID CATID_MARSHALER;


extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const CLSID CLSID_AggStdMarshal;
extern const CLSID CLSID_StdAsyncActManager;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;
extern const CLSID CLSID_DCOMAccessControl;







extern const CLSID CLSID_GlobalOptions;
extern const CLSID CLSID_StdGlobalInterfaceTable;







extern const CLSID CLSID_ComBinding;
extern const CLSID CLSID_StdEvent;
extern const CLSID CLSID_ManualResetEvent;
extern const CLSID CLSID_SynchronizeContainer;


extern const CLSID CLSID_AddrControl;



extern const CLSID CLSID_ContextSwitcher;
# 117 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\cguid.h"
extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;




extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;




extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;

extern const CLSID CLSID_CStdPropertyFrame;

extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;

extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;
extern const CLSID CLSID_IdentityUnmarshal;







extern const CLSID CLSID_InProcFreeMarshaler;







extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;




extern const GUID GUID_TRISTATE;





}




#pragma warning(pop)
# 382 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h" 2
# 394 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetMalloc(
         DWORD dwMemContext,
             LPMALLOC * ppMalloc
    );
# 408 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CreateStreamOnHGlobal(
    HGLOBAL hGlobal,
         BOOL fDeleteOnRelease,
             LPSTREAM * ppstm
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
GetHGlobalFromStream(
         LPSTREAM pstm,
          HGLOBAL * phglobal
    );




extern "C" __declspec(dllimport) void __stdcall
CoUninitialize(
    void
    );
# 438 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
extern "C" __declspec(dllimport) DWORD __stdcall
CoGetCurrentProcess(
    void
    );
# 454 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoInitializeEx(
             LPVOID pvReserved,
         DWORD dwCoInit
    );
# 468 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCallerTID(
          LPDWORD lpdwTID
    );
# 482 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCurrentLogicalThreadId(
          GUID * pguid
    );
# 500 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetContextToken(
          ULONG_PTR * pToken
    );
# 513 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetDefaultContext(
         APTTYPE aptType,
         const IID & riid,
             void ** ppv
    );
# 535 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetApartmentType(
          APTTYPE * pAptType,
          APTTYPEQUALIFIER * pAptQualifier
    );
# 556 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
typedef struct tagServerInformation
{
    DWORD dwServerPid;
    DWORD dwServerTid;
    UINT64 ui64ServerAddress;
} ServerInformation, *PServerInformation;
# 570 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDecodeProxy(
         DWORD dwClientPid,
         UINT64 ui64ProxyAddress,
          PServerInformation pServerInformation
    );
# 585 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
struct CO_MTA_USAGE_COOKIE__{int unused;}; typedef struct CO_MTA_USAGE_COOKIE__ *CO_MTA_USAGE_COOKIE;
# 594 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoIncrementMTAUsage(
          CO_MTA_USAGE_COOKIE * pCookie
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDecrementMTAUsage(
         CO_MTA_USAGE_COOKIE Cookie
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
CoAllowUnmarshalerCLSID(
         const IID & clsid
    );
# 620 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetObjectContext(
         const IID & riid,
             LPVOID * ppv
    );
# 636 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetClassObject(
         const IID & rclsid,
         DWORD dwClsContext,
             LPVOID pvReserved,
         const IID & riid,
             LPVOID * ppv
    );
# 652 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterClassObject(
         const IID & rclsid,
         LPUNKNOWN pUnk,
         DWORD dwClsContext,
         DWORD flags,
          LPDWORD lpdwRegister
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoRevokeClassObject(
         DWORD dwRegister
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoResumeClassObjects(
    void
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoSuspendClassObjects(
    void
    );
# 684 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
extern "C" __declspec(dllimport) ULONG __stdcall
CoAddRefServerProcess(
    void
    );


extern "C" __declspec(dllimport) ULONG __stdcall
CoReleaseServerProcess(
    void
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetPSClsid(
         const IID & riid,
          CLSID * pClsid
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterPSClsid(
         const IID & riid,
         const IID & rclsid
    );



               extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterSurrogate(
         LPSURROGATE pSurrogate
    );
# 725 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetMarshalSizeMax(
          ULONG * pulSize,
         const IID & riid,
         LPUNKNOWN pUnk,
         DWORD dwDestContext,
             LPVOID pvDestContext,
         DWORD mshlflags
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoMarshalInterface(
         LPSTREAM pStm,
         const IID & riid,
         LPUNKNOWN pUnk,
         DWORD dwDestContext,
             LPVOID pvDestContext,
         DWORD mshlflags
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoUnmarshalInterface(
         LPSTREAM pStm,
         const IID & riid,
                 LPVOID * ppv
    );
# 760 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall
CoMarshalHresult(
         LPSTREAM pstm,
         HRESULT hresult
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
CoUnmarshalHresult(
         LPSTREAM pstm,
          HRESULT * phresult
    );
# 780 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoReleaseMarshalData(
         LPSTREAM pStm
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDisconnectObject(
         LPUNKNOWN pUnk,
         DWORD dwReserved
    );
# 799 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoLockObjectExternal(
         LPUNKNOWN pUnk,
         BOOL fLock,
         BOOL fLastUnlockReleases
    );
# 814 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetStandardMarshal(
         const IID & riid,
         LPUNKNOWN pUnk,
         DWORD dwDestContext,
             LPVOID pvDestContext,
         DWORD mshlflags,
             LPMARSHAL * ppMarshal
    );
# 833 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetStdMarshalEx(
         LPUNKNOWN pUnkOuter,
         DWORD smexflags,
             LPUNKNOWN * ppUnkInner
    );
# 849 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
typedef enum tagSTDMSHLFLAGS
{
    SMEXF_SERVER = 0x01,
    SMEXF_HANDLER = 0x02
} STDMSHLFLAGS;
# 863 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall
CoIsHandlerConnected(
         LPUNKNOWN pUnk
    );
# 878 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoMarshalInterThreadInterfaceInStream(
         const IID & riid,
         LPUNKNOWN pUnk,
             LPSTREAM * ppStm
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetInterfaceAndReleaseStream(
         LPSTREAM pStm,
         const IID & iid,
                 LPVOID * ppv
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateFreeThreadedMarshaler(
             LPUNKNOWN punkOuter,
             LPUNKNOWN * ppunkMarshal
    );


extern "C" __declspec(dllimport) void __stdcall
CoFreeUnusedLibraries(
    void
    );



extern "C" __declspec(dllimport) void __stdcall
CoFreeUnusedLibrariesEx(
         DWORD dwUnloadDelay,
         DWORD dwReserved
    );
# 926 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDisconnectContext(
    DWORD dwTimeout
    );
# 946 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoInitializeSecurity(
             PSECURITY_DESCRIPTOR pSecDesc,
         LONG cAuthSvc,
                             SOLE_AUTHENTICATION_SERVICE * asAuthSvc,
             void * pReserved1,
         DWORD dwAuthnLevel,
         DWORD dwImpLevel,
             void * pAuthList,
         DWORD dwCapabilities,
             void * pReserved3
    );
# 967 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCallContext(
         const IID & riid,
             void ** ppInterface
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoQueryProxyBlanket(
         IUnknown * pProxy,
              DWORD * pwAuthnSvc,
              DWORD * pAuthzSvc,
                 LPOLESTR * pServerPrincName,
              DWORD * pAuthnLevel,
              DWORD * pImpLevel,
              RPC_AUTH_IDENTITY_HANDLE * pAuthInfo,
              DWORD * pCapabilites
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoSetProxyBlanket(
         IUnknown * pProxy,
         DWORD dwAuthnSvc,
         DWORD dwAuthzSvc,
             OLECHAR * pServerPrincName,
         DWORD dwAuthnLevel,
         DWORD dwImpLevel,
             RPC_AUTH_IDENTITY_HANDLE pAuthInfo,
         DWORD dwCapabilities
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCopyProxy(
         IUnknown * pProxy,
             IUnknown ** ppCopy
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoQueryClientBlanket(
              DWORD * pAuthnSvc,
              DWORD * pAuthzSvc,
                 LPOLESTR * pServerPrincName,
              DWORD * pAuthnLevel,
              DWORD * pImpLevel,
                                                                        RPC_AUTHZ_HANDLE * pPrivs,
                DWORD * pCapabilities
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoImpersonateClient(
    void
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoRevertToSelf(
    void
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoQueryAuthenticationServices(
          DWORD * pcAuthSvc,
                                       SOLE_AUTHENTICATION_SERVICE ** asAuthSvc
    );
# 1045 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoSwitchCallContext(
             IUnknown * pNewObject,
             IUnknown ** ppOldObject
    );
# 1070 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateInstance(
         const IID & rclsid,
             LPUNKNOWN pUnkOuter,
         DWORD dwClsContext,
         const IID & riid,
                                                                           LPVOID * ppv
    );






               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateInstanceEx(
         const IID & Clsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
             COSERVERINFO * pServerInfo,
         DWORD dwCount,
                             MULTI_QI * pResults
    );







extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterActivationFilter(
         IActivationFilter * pActivationFilter
    );
# 1118 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateInstanceFromApp(
         const IID & Clsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
             PVOID reserved,
         DWORD dwCount,
                             MULTI_QI * pResults
    );
# 1192 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCancelObject(
         DWORD dwThreadId,
         const IID & iid,
             void ** ppUnk
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoSetCancelObject(
             IUnknown * pUnk
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCancelCall(
         DWORD dwThreadId,
         ULONG ulTimeout
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoTestCancel(
    void
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoEnableCallCancellation(
             LPVOID pReserved
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDisableCallCancellation(
             LPVOID pReserved
    );
# 1242 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
StringFromCLSID(
         const IID & rclsid,
             LPOLESTR * lplpsz
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CLSIDFromString(
         LPCOLESTR lpsz,
          LPCLSID pclsid
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
StringFromIID(
         const IID & rclsid,
             LPOLESTR * lplpsz
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
IIDFromString(
         LPCOLESTR lpsz,
          LPIID lpiid
    );
# 1274 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
ProgIDFromCLSID(
         const IID & clsid,
             LPOLESTR * lplpszProgID
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CLSIDFromProgID(
         LPCOLESTR lpszProgID,
          LPCLSID lpclsid
    );
# 1294 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) int __stdcall
StringFromGUID2(
         const GUID & rguid,
                                    LPOLESTR lpsz,
         int cchMax
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateGuid(
          GUID * pguid
    );




typedef struct tagPROPVARIANT PROPVARIANT;


extern "C" __declspec(dllimport) HRESULT __stdcall
PropVariantCopy(
          PROPVARIANT * pvarDest,
         const PROPVARIANT * pvarSrc
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
PropVariantClear(
            PROPVARIANT * pvar
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
FreePropVariantArray(
         ULONG cVariants,
                               PROPVARIANT * rgvars
    );
# 1356 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoWaitForMultipleHandles(
         DWORD dwFlags,
         DWORD dwTimeout,
         ULONG cHandles,
                         LPHANDLE pHandles,
          LPDWORD lpdwindex
    );




typedef enum tagCOWAIT_FLAGS
{
  COWAIT_DEFAULT = 0,
  COWAIT_WAITALL = 1,
  COWAIT_ALERTABLE = 2,
  COWAIT_INPUTAVAILABLE = 4,
  COWAIT_DISPATCH_CALLS = 8,
  COWAIT_DISPATCH_WINDOW_MESSAGES = 0x10,
}COWAIT_FLAGS;




typedef enum CWMO_FLAGS
{
  CWMO_DEFAULT = 0,
  CWMO_DISPATCH_CALLS = 1,
  CWMO_DISPATCH_WINDOW_MESSAGES = 2,
} CWMO_FLAGS;

extern "C" __declspec(dllimport) HRESULT __stdcall
CoWaitForMultipleObjects(
         DWORD dwFlags,
         DWORD dwTimeout,
         ULONG cHandles,
                         const HANDLE * pHandles,
          LPDWORD lpdwindex
    );
# 1411 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetTreatAsClass(
         const IID & clsidOld,
          LPCLSID pClsidNew
    );
# 1430 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoInvalidateRemoteMachineBindings(
         LPOLESTR pszMachineName
    );
# 1448 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
enum AgileReferenceOptions
{
    AGILEREFERENCE_DEFAULT = 0,
    AGILEREFERENCE_DELAYEDMARSHAL = 1,
};




               extern "C" __declspec(dllimport) HRESULT __stdcall
RoGetAgileReference(
         enum AgileReferenceOptions options,
         const IID & riid,
         IUnknown * pUnk,
                 IAgileReference ** ppAgileReference
    );
# 1482 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h"
typedef HRESULT (__stdcall * LPFNGETCLASSOBJECT) (const IID &, const IID &, LPVOID *);
typedef HRESULT (__stdcall * LPFNCANUNLOADNOW)(void);


extern "C" HRESULT __stdcall DllGetClassObject( const IID & rclsid, const IID & riid, LPVOID * ppv);

extern "C" HRESULT __stdcall DllCanUnloadNow(void);



extern "C" __declspec(dllimport) LPVOID __stdcall
CoTaskMemAlloc(
         SIZE_T cb
    );

extern "C" __declspec(dllimport) LPVOID __stdcall
CoTaskMemRealloc(
                                                       LPVOID pv,
         SIZE_T cb
    );

extern "C" __declspec(dllimport) void __stdcall
CoTaskMemFree(
                                                       LPVOID pv
    );




# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 1510 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h" 2
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objbase.h" 2



typedef enum tagCOINIT
{
  COINIT_APARTMENTTHREADED = 0x2,



  COINIT_MULTITHREADED = COINITBASE_MULTITHREADED,
  COINIT_DISABLE_OLE1DDE = 0x4,
  COINIT_SPEED_OVER_MEMORY = 0x8,

} COINIT;
# 96 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objbase.h"
typedef DWORD STGFMT;
# 107 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objbase.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h" 1








#pragma warning(disable: 4049)
# 444 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef struct IMallocSpy IMallocSpy;






typedef struct IBindCtx IBindCtx;






typedef struct IEnumMoniker IEnumMoniker;






typedef struct IRunnableObject IRunnableObject;






typedef struct IRunningObjectTable IRunningObjectTable;






typedef struct IPersist IPersist;






typedef struct IPersistStream IPersistStream;






typedef struct IMoniker IMoniker;






typedef struct IROTData IROTData;






typedef struct IEnumSTATSTG IEnumSTATSTG;






typedef struct IStorage IStorage;






typedef struct IPersistFile IPersistFile;






typedef struct IPersistStorage IPersistStorage;






typedef struct ILockBytes ILockBytes;






typedef struct IEnumFORMATETC IEnumFORMATETC;






typedef struct IEnumSTATDATA IEnumSTATDATA;






typedef struct IRootStorage IRootStorage;






typedef struct IAdviseSink IAdviseSink;






typedef struct AsyncIAdviseSink AsyncIAdviseSink;






typedef struct IAdviseSink2 IAdviseSink2;






typedef struct AsyncIAdviseSink2 AsyncIAdviseSink2;






typedef struct IDataObject IDataObject;






typedef struct IDataAdviseHolder IDataAdviseHolder;






typedef struct IMessageFilter IMessageFilter;






typedef struct IClassActivator IClassActivator;






typedef struct IFillLockBytes IFillLockBytes;






typedef struct IProgressNotify IProgressNotify;






typedef struct ILayoutStorage ILayoutStorage;






typedef struct IBlockingLock IBlockingLock;






typedef struct ITimeAndNoticeControl ITimeAndNoticeControl;






typedef struct IOplockStorage IOplockStorage;






typedef struct IDirectWriterLock IDirectWriterLock;






typedef struct IUrlMon IUrlMon;






typedef struct IForegroundTransfer IForegroundTransfer;






typedef struct IThumbnailExtractor IThumbnailExtractor;






typedef struct IDummyHICONIncluder IDummyHICONIncluder;






typedef struct IProcessLock IProcessLock;






typedef struct ISurrogateService ISurrogateService;






typedef struct IInitializeSpy IInitializeSpy;






typedef struct IApartmentShutdown IApartmentShutdown;






# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/unknwn.h" 1








#pragma warning(disable: 4049)
# 65 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/unknwn.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypes.h" 1








#pragma warning(disable: 4049)
# 43 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypes.h"
extern "C"{
# 61 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypes.h"
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec;







typedef struct tagRemHGLOBAL
    {
    LONG fNullHGlobal;
    ULONG cbData;
                    byte data[ 1 ];
    } RemHGLOBAL;

typedef struct tagRemHMETAFILEPICT
    {
    LONG mm;
    LONG xExt;
    LONG yExt;
    ULONG cbData;
                    byte data[ 1 ];
    } RemHMETAFILEPICT;

typedef struct tagRemHENHMETAFILE
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHENHMETAFILE;

typedef struct tagRemHBITMAP
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHBITMAP;

typedef struct tagRemHPALETTE
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHPALETTE;

typedef struct tagRemBRUSH
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHBRUSH;
# 342 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypes.h"
typedef
enum tagDVASPECT
    {
        DVASPECT_CONTENT = 1,
        DVASPECT_THUMBNAIL = 2,
        DVASPECT_ICON = 4,
        DVASPECT_DOCPRINT = 8
    } DVASPECT;

typedef
enum tagSTGC
    {
        STGC_DEFAULT = 0,
        STGC_OVERWRITE = 1,
        STGC_ONLYIFCURRENT = 2,
        STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
        STGC_CONSOLIDATE = 8
    } STGC;

typedef
enum tagSTGMOVE
    {
        STGMOVE_MOVE = 0,
        STGMOVE_COPY = 1,
        STGMOVE_SHALLOWCOPY = 2
    } STGMOVE;

typedef
enum tagSTATFLAG
    {
        STATFLAG_DEFAULT = 0,
        STATFLAG_NONAME = 1,
        STATFLAG_NOOPEN = 2
    } STATFLAG;

typedef void *HCONTEXT;



typedef DWORD LCID;




typedef USHORT LANGID;
# 395 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypes.h"
typedef struct _userCLIPFORMAT
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0001
        {
                       DWORD dwValue;
                               wchar_t *pwszName;
        } u;
    } userCLIPFORMAT;

typedef userCLIPFORMAT *wireCLIPFORMAT;

typedef WORD CLIPFORMAT;

typedef struct _GDI_NONREMOTE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0002
        {
                       LONG hInproc;
                       DWORD_BLOB *hRemote;
        } u;
    } GDI_NONREMOTE;

typedef struct _userHGLOBAL
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0003
        {
                       LONG hInproc;
                       FLAGGED_BYTE_BLOB *hRemote;
                       __int64 hInproc64;
        } u;
    } userHGLOBAL;

typedef userHGLOBAL *wireHGLOBAL;

typedef struct _userHMETAFILE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0004
        {
                       LONG hInproc;
                       BYTE_BLOB *hRemote;
                       __int64 hInproc64;
        } u;
    } userHMETAFILE;

typedef struct _remoteMETAFILEPICT
    {
    LONG mm;
    LONG xExt;
    LONG yExt;
    userHMETAFILE *hMF;
    } remoteMETAFILEPICT;

typedef struct _userHMETAFILEPICT
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0005
        {
                       LONG hInproc;
                       remoteMETAFILEPICT *hRemote;
                       __int64 hInproc64;
        } u;
    } userHMETAFILEPICT;

typedef struct _userHENHMETAFILE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0006
        {
                       LONG hInproc;
                       BYTE_BLOB *hRemote;
                       __int64 hInproc64;
        } u;
    } userHENHMETAFILE;

typedef struct _userBITMAP
    {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
                    byte pBuffer[ 1 ];
    } userBITMAP;

typedef struct _userHBITMAP
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0007
        {
                       LONG hInproc;
                       userBITMAP *hRemote;
                       __int64 hInproc64;
        } u;
    } userHBITMAP;

typedef struct _userHPALETTE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0008
        {
                       LONG hInproc;
                       LOGPALETTE *hRemote;
                       __int64 hInproc64;
        } u;
    } userHPALETTE;

typedef struct _RemotableHandle
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0009
        {
                       LONG hInproc;
                       LONG hRemote;
        } u;
    } RemotableHandle;

typedef RemotableHandle *wireHWND;

typedef RemotableHandle *wireHMENU;

typedef RemotableHandle *wireHACCEL;

typedef RemotableHandle *wireHBRUSH;

typedef RemotableHandle *wireHFONT;

typedef RemotableHandle *wireHDC;

typedef RemotableHandle *wireHICON;

typedef RemotableHandle *wireHRGN;

typedef RemotableHandle *wireHMONITOR;
# 611 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypes.h"
typedef userHBITMAP *wireHBITMAP;

typedef userHPALETTE *wireHPALETTE;

typedef userHENHMETAFILE *wireHENHMETAFILE;

typedef userHMETAFILE *wireHMETAFILE;

typedef userHMETAFILEPICT *wireHMETAFILEPICT;
# 635 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypes.h"
typedef void *HMETAFILEPICT;



extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;







#pragma warning(push)

#pragma warning(disable: 4201)

typedef double DATE;
# 667 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypes.h"
typedef union tagCY {
    struct {
        ULONG Lo;
        LONG Hi;
    } ;
    LONGLONG int64;
} CY;


typedef CY *LPCY;
# 692 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypes.h"
typedef struct tagDEC {
    USHORT wReserved;
    union {
        struct {
            BYTE scale;
            BYTE sign;
        } ;
        USHORT signscale;
    } ;
    ULONG Hi32;
    union {
        struct {
            ULONG Lo32;
            ULONG Mid32;
        } ;
        ULONGLONG Lo64;
    } ;
} DECIMAL;




typedef DECIMAL *LPDECIMAL;



#pragma warning(pop)




typedef FLAGGED_WORD_BLOB *wireBSTR;


typedef OLECHAR *BSTR;




typedef BSTR *LPBSTR;


typedef short VARIANT_BOOL;
# 749 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypes.h"
typedef struct tagBSTRBLOB
    {
    ULONG cbSize;
                    BYTE *pData;
    } BSTRBLOB;

typedef struct tagBSTRBLOB *LPBSTRBLOB;




typedef struct tagCLIPDATA
    {
    ULONG cbSize;
    LONG ulClipFmt;
                    BYTE *pClipData;
    } CLIPDATA;



typedef unsigned short VARTYPE;
# 830 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\wtypes.h"
enum VARENUM
    {
        VT_EMPTY = 0,
        VT_NULL = 1,
        VT_I2 = 2,
        VT_I4 = 3,
        VT_R4 = 4,
        VT_R8 = 5,
        VT_CY = 6,
        VT_DATE = 7,
        VT_BSTR = 8,
        VT_DISPATCH = 9,
        VT_ERROR = 10,
        VT_BOOL = 11,
        VT_VARIANT = 12,
        VT_UNKNOWN = 13,
        VT_DECIMAL = 14,
        VT_I1 = 16,
        VT_UI1 = 17,
        VT_UI2 = 18,
        VT_UI4 = 19,
        VT_I8 = 20,
        VT_UI8 = 21,
        VT_INT = 22,
        VT_UINT = 23,
        VT_VOID = 24,
        VT_HRESULT = 25,
        VT_PTR = 26,
        VT_SAFEARRAY = 27,
        VT_CARRAY = 28,
        VT_USERDEFINED = 29,
        VT_LPSTR = 30,
        VT_LPWSTR = 31,
        VT_RECORD = 36,
        VT_INT_PTR = 37,
        VT_UINT_PTR = 38,
        VT_FILETIME = 64,
        VT_BLOB = 65,
        VT_STREAM = 66,
        VT_STORAGE = 67,
        VT_STREAMED_OBJECT = 68,
        VT_STORED_OBJECT = 69,
        VT_BLOB_OBJECT = 70,
        VT_CF = 71,
        VT_CLSID = 72,
        VT_VERSIONED_STREAM = 73,
        VT_BSTR_BLOB = 0xfff,
        VT_VECTOR = 0x1000,
        VT_ARRAY = 0x2000,
        VT_BYREF = 0x4000,
        VT_RESERVED = 0x8000,
        VT_ILLEGAL = 0xffff,
        VT_ILLEGALMASKED = 0xfff,
        VT_TYPEMASK = 0xfff
    } ;
typedef ULONG PROPID;



typedef struct _tagpropertykey
    {
    GUID fmtid;
    DWORD pid;
    } PROPERTYKEY;


typedef struct tagCSPLATFORM
    {
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
    } CSPLATFORM;

typedef struct tagQUERYCONTEXT
    {
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    } QUERYCONTEXT;

typedef
enum tagTYSPEC
    {
        TYSPEC_CLSID = 0,
        TYSPEC_FILEEXT = ( TYSPEC_CLSID + 1 ) ,
        TYSPEC_MIMETYPE = ( TYSPEC_FILEEXT + 1 ) ,
        TYSPEC_FILENAME = ( TYSPEC_MIMETYPE + 1 ) ,
        TYSPEC_PROGID = ( TYSPEC_FILENAME + 1 ) ,
        TYSPEC_PACKAGENAME = ( TYSPEC_PROGID + 1 ) ,
        TYSPEC_OBJECTID = ( TYSPEC_PACKAGENAME + 1 )
    } TYSPEC;

typedef struct __MIDL___MIDL_itf_wtypes_0000_0001_0001
    {
    DWORD tyspec;
                                          union __MIDL___MIDL_itf_wtypes_0000_0001_0005
        {
                       CLSID clsid;
                       LPOLESTR pFileExt;
                       LPOLESTR pMimeType;
                       LPOLESTR pProgId;
                       LPOLESTR pFileName;
                       struct
            {
            LPOLESTR pPackageName;
            GUID PolicyId;
            } ByName;
                       struct
            {
            GUID ObjectId;
            GUID PolicyId;
            } ByObjectId;
        } tagged_union;
    } uCLSSPEC;



extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec;






}
# 65 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/unknwn.h" 2



extern "C"{
# 89 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/unknwn.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec;
# 286 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/unknwn.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec;
# 422 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/unknwn.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec;
# 559 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/unknwn.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec;



              HRESULT __stdcall IClassFactory_CreateInstance_Proxy(
    IClassFactory * This,

              IUnknown *pUnkOuter,

          const IID & riid,

                  void **ppvObject);


                HRESULT __stdcall IClassFactory_CreateInstance_Stub(
              IClassFactory * This,
                         const IID & riid,
                                             IUnknown **ppvObject);

              HRESULT __stdcall IClassFactory_LockServer_Proxy(
    IClassFactory * This,
               BOOL fLock);


                HRESULT __stdcall IClassFactory_LockServer_Stub(
              IClassFactory * This,
               BOOL fLock);






}
# 723 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h" 2



extern "C"{
# 758 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
#pragma warning(push)

#pragma warning(disable: 4201)
# 790 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
#pragma warning(push)

#pragma warning(disable: 4201)
# 8111 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
#pragma warning(pop)
# 8129 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec;







typedef IMallocSpy *LPMALLOCSPY;


extern "C" const IID IID_IMallocSpy;



    struct __declspec(uuid("0000001d-0000-0000-C000-000000000046")) __declspec(novtable)
    IMallocSpy : public IUnknown
    {
    public:
        virtual SIZE_T __stdcall PreAlloc(

                  SIZE_T cbRequest) = 0;

        virtual void *__stdcall PostAlloc(

                  void *pActual) = 0;

        virtual void *__stdcall PreFree(

                  void *pRequest,

                  BOOL fSpyed) = 0;

        virtual void __stdcall PostFree(

                  BOOL fSpyed) = 0;

        virtual SIZE_T __stdcall PreRealloc(

                  void *pRequest,

                  SIZE_T cbRequest,

                      void **ppNewRequest,

                  BOOL fSpyed) = 0;

        virtual void *__stdcall PostRealloc(

                  void *pActual,

                  BOOL fSpyed) = 0;

        virtual void *__stdcall PreGetSize(

                  void *pRequest,

                  BOOL fSpyed) = 0;

        virtual SIZE_T __stdcall PostGetSize(

                  SIZE_T cbActual,

                  BOOL fSpyed) = 0;

        virtual void *__stdcall PreDidAlloc(

                  void *pRequest,

                  BOOL fSpyed) = 0;

        virtual int __stdcall PostDidAlloc(

                  void *pRequest,

                  BOOL fSpyed,

                  int fActual) = 0;

        virtual void __stdcall PreHeapMinimize( void) = 0;

        virtual void __stdcall PostHeapMinimize( void) = 0;

    };
# 8389 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec;







typedef IBindCtx *LPBC;

typedef IBindCtx *LPBINDCTX;


    typedef struct tagBIND_OPTS {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    } BIND_OPTS, * LPBIND_OPTS;
# 8422 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
    typedef struct tagBIND_OPTS2 : tagBIND_OPTS {
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO * pServerInfo;
    } BIND_OPTS2, * LPBIND_OPTS2;
# 8446 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
    typedef struct tagBIND_OPTS3 : tagBIND_OPTS2 {
   HWND hwnd;
    } BIND_OPTS3, * LPBIND_OPTS3;
# 8466 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef
enum tagBIND_FLAGS
    {
        BIND_MAYBOTHERUSER = 1,
        BIND_JUSTTESTEXISTENCE = 2
    } BIND_FLAGS;


extern "C" const IID IID_IBindCtx;



    struct __declspec(uuid("0000000e-0000-0000-C000-000000000046")) __declspec(novtable)
    IBindCtx : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterObjectBound(
                                             IUnknown *punk) = 0;

        virtual HRESULT __stdcall RevokeObjectBound(
                                             IUnknown *punk) = 0;

        virtual HRESULT __stdcall ReleaseBoundObjects( void) = 0;

        virtual HRESULT __stdcall SetBindOptions(

                  BIND_OPTS *pbindopts) = 0;

        virtual HRESULT __stdcall GetBindOptions(

                     BIND_OPTS *pbindopts) = 0;

        virtual HRESULT __stdcall GetRunningObjectTable(
                                             IRunningObjectTable **pprot) = 0;

        virtual HRESULT __stdcall RegisterObjectParam(
                                 LPOLESTR pszKey,
                                             IUnknown *punk) = 0;

        virtual HRESULT __stdcall GetObjectParam(
                                 LPOLESTR pszKey,
                                             IUnknown **ppunk) = 0;

        virtual HRESULT __stdcall EnumObjectParam(
                                             IEnumString **ppenum) = 0;

        virtual HRESULT __stdcall RevokeObjectParam(
                                 LPOLESTR pszKey) = 0;

    };
# 8639 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall IBindCtx_RemoteSetBindOptions_Proxy(
              IBindCtx * This,
                         BIND_OPTS2 *pbindopts);


void __stdcall IBindCtx_RemoteSetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IBindCtx_RemoteGetBindOptions_Proxy(
              IBindCtx * This,
                                 BIND_OPTS2 *pbindopts);


void __stdcall IBindCtx_RemoteGetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 8673 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef IEnumMoniker *LPENUMMONIKER;


extern "C" const IID IID_IEnumMoniker;



    struct __declspec(uuid("00000102-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumMoniker : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 IMoniker **rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumMoniker **ppenum) = 0;

    };
# 8781 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall IEnumMoniker_RemoteNext_Proxy(
              IEnumMoniker * This,
               ULONG celt,
                                                                                IMoniker **rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumMoniker_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 8808 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec;







typedef IRunnableObject *LPRUNNABLEOBJECT;


extern "C" const IID IID_IRunnableObject;



    struct __declspec(uuid("00000126-0000-0000-C000-000000000046")) __declspec(novtable)
    IRunnableObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetRunningClass(
                                   LPCLSID lpClsid) = 0;

        virtual HRESULT __stdcall Run(
                                     LPBINDCTX pbc) = 0;

        virtual BOOL __stdcall IsRunning( void) = 0;

        virtual HRESULT __stdcall LockRunning(
                       BOOL fLock,
                       BOOL fLastUnlockCloses) = 0;

        virtual HRESULT __stdcall SetContainedObject(
                       BOOL fContained) = 0;

    };
# 8929 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall IRunnableObject_RemoteIsRunning_Proxy(
              IRunnableObject * This);


void __stdcall IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 8950 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;


extern "C" const IID IID_IRunningObjectTable;



    struct __declspec(uuid("00000010-0000-0000-C000-000000000046")) __declspec(novtable)
    IRunningObjectTable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Register(
                       DWORD grfFlags,
                                             IUnknown *punkObject,
                                             IMoniker *pmkObjectName,
                                   DWORD *pdwRegister) = 0;

        virtual HRESULT __stdcall Revoke(
                       DWORD dwRegister) = 0;

        virtual HRESULT __stdcall IsRunning(
                                             IMoniker *pmkObjectName) = 0;

        virtual HRESULT __stdcall GetObjectW(
                                             IMoniker *pmkObjectName,
                                             IUnknown **ppunkObject) = 0;

        virtual HRESULT __stdcall NoteChangeTime(
                       DWORD dwRegister,
                                 FILETIME *pfiletime) = 0;

        virtual HRESULT __stdcall GetTimeOfLastChange(
                                             IMoniker *pmkObjectName,
                                   FILETIME *pfiletime) = 0;

        virtual HRESULT __stdcall EnumRunning(
                                             IEnumMoniker **ppenumMoniker) = 0;

    };
# 9107 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec;







typedef IPersist *LPPERSIST;


extern "C" const IID IID_IPersist;



    struct __declspec(uuid("0000010c-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersist : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassID(
                                   CLSID *pClassID) = 0;

    };
# 9198 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef IPersistStream *LPPERSISTSTREAM;


extern "C" const IID IID_IPersistStream;



    struct __declspec(uuid("00000109-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistStream : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall Load(
                                             IStream *pStm) = 0;

        virtual HRESULT __stdcall Save(
                                             IStream *pStm,
                       BOOL fClearDirty) = 0;

        virtual HRESULT __stdcall GetSizeMax(
                                   ULARGE_INTEGER *pcbSize) = 0;

    };
# 9318 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef IMoniker *LPMONIKER;

typedef
enum tagMKSYS
    {
        MKSYS_NONE = 0,
        MKSYS_GENERICCOMPOSITE = 1,
        MKSYS_FILEMONIKER = 2,
        MKSYS_ANTIMONIKER = 3,
        MKSYS_ITEMMONIKER = 4,
        MKSYS_POINTERMONIKER = 5,
        MKSYS_CLASSMONIKER = 7,
        MKSYS_OBJREFMONIKER = 8,
        MKSYS_SESSIONMONIKER = 9,
        MKSYS_LUAMONIKER = 10
    } MKSYS;

typedef
enum tagMKREDUCE
    {
        MKRREDUCE_ONE = ( 3 << 16 ) ,
        MKRREDUCE_TOUSER = ( 2 << 16 ) ,
        MKRREDUCE_THROUGHUSER = ( 1 << 16 ) ,
        MKRREDUCE_ALL = 0
    } MKRREDUCE;


extern "C" const IID IID_IMoniker;



    struct __declspec(uuid("0000000f-0000-0000-C000-000000000046")) __declspec(novtable)
    IMoniker : public IPersistStream
    {
    public:
        virtual HRESULT __stdcall BindToObject(

                  IBindCtx *pbc,

                      IMoniker *pmkToLeft,

                  const IID & riidResult,

                      void **ppvResult) = 0;

        virtual HRESULT __stdcall BindToStorage(

                  IBindCtx *pbc,

                      IMoniker *pmkToLeft,

                  const IID & riid,

                      void **ppvObj) = 0;

        virtual HRESULT __stdcall Reduce(
                                             IBindCtx *pbc,
                       DWORD dwReduceHowFar,
                                                               IMoniker **ppmkToLeft,
                                             IMoniker **ppmkReduced) = 0;

        virtual HRESULT __stdcall ComposeWith(
                                             IMoniker *pmkRight,
                       BOOL fOnlyIfNotGeneric,
                                             IMoniker **ppmkComposite) = 0;

        virtual HRESULT __stdcall Enum(
                       BOOL fForward,
                                             IEnumMoniker **ppenumMoniker) = 0;

        virtual HRESULT __stdcall IsEqual(
                                             IMoniker *pmkOtherMoniker) = 0;

        virtual HRESULT __stdcall Hash(
                                   DWORD *pdwHash) = 0;

        virtual HRESULT __stdcall IsRunning(
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                             IMoniker *pmkNewlyRunning) = 0;

        virtual HRESULT __stdcall GetTimeOfLastChange(
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                   FILETIME *pFileTime) = 0;

        virtual HRESULT __stdcall Inverse(
                                             IMoniker **ppmk) = 0;

        virtual HRESULT __stdcall CommonPrefixWith(
                                             IMoniker *pmkOther,
                                             IMoniker **ppmkPrefix) = 0;

        virtual HRESULT __stdcall RelativePathTo(
                                             IMoniker *pmkOther,
                                             IMoniker **ppmkRelPath) = 0;

        virtual HRESULT __stdcall GetDisplayName(
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                             LPOLESTR *ppszDisplayName) = 0;

        virtual HRESULT __stdcall ParseDisplayName(
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                 LPOLESTR pszDisplayName,
                                   ULONG *pchEaten,
                                             IMoniker **ppmkOut) = 0;

        virtual HRESULT __stdcall IsSystemMoniker(
                                   DWORD *pdwMksys) = 0;

    };
# 9655 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall IMoniker_RemoteBindToObject_Proxy(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID & riidResult,
                                             IUnknown **ppvResult);


void __stdcall IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IMoniker_RemoteBindToStorage_Proxy(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID & riid,
                                             IUnknown **ppvObj);


void __stdcall IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 9698 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec;
# 9708 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_IROTData;



    struct __declspec(uuid("f29f6bc0-5021-11ce-aa15-00006901293f")) __declspec(novtable)
    IROTData : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetComparisonData(
                                                               byte *pbData,
                       ULONG cbMax,
                                   ULONG *pcbData) = 0;

    };
# 9794 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec;







typedef IEnumSTATSTG *LPENUMSTATSTG;


extern "C" const IID IID_IEnumSTATSTG;



    struct __declspec(uuid("0000000d-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATSTG : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 STATSTG *rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumSTATSTG **ppenum) = 0;

    };
# 9911 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall IEnumSTATSTG_RemoteNext_Proxy(
              IEnumSTATSTG * This,
               ULONG celt,
                                                                                STATSTG *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 9935 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef IStorage *LPSTORAGE;

typedef struct tagRemSNB
    {
    ULONG ulCntStr;
    ULONG ulCntChar;
                    OLECHAR rgString[ 1 ];
    } RemSNB;

typedef RemSNB *wireSNB;

typedef LPOLESTR *SNB;


extern "C" const IID IID_IStorage;



    struct __declspec(uuid("0000000b-0000-0000-C000-000000000046")) __declspec(novtable)
    IStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateStream(
                                                const OLECHAR *pwcsName,
                       DWORD grfMode,
                       DWORD reserved1,
                       DWORD reserved2,
                                             IStream **ppstm) = 0;

        virtual HRESULT __stdcall OpenStream(

                    const OLECHAR *pwcsName,

                        void *reserved1,
                       DWORD grfMode,
                       DWORD reserved2,

                      IStream **ppstm) = 0;

        virtual HRESULT __stdcall CreateStorage(
                                                const OLECHAR *pwcsName,
                       DWORD grfMode,
                       DWORD reserved1,
                       DWORD reserved2,
                                             IStorage **ppstg) = 0;

        virtual HRESULT __stdcall OpenStorage(
                                                            const OLECHAR *pwcsName,
                                             IStorage *pstgPriority,
                       DWORD grfMode,
                                                       SNB snbExclude,
                       DWORD reserved,
                                             IStorage **ppstg) = 0;

        virtual HRESULT __stdcall CopyTo(
                       DWORD ciidExclude,

                                         const IID *rgiidExclude,

                      SNB snbExclude,

                  IStorage *pstgDest) = 0;

        virtual HRESULT __stdcall MoveElementTo(
                                                const OLECHAR *pwcsName,
                                             IStorage *pstgDest,
                                                const OLECHAR *pwcsNewName,
                       DWORD grfFlags) = 0;

        virtual HRESULT __stdcall Commit(
                       DWORD grfCommitFlags) = 0;

        virtual HRESULT __stdcall Revert( void) = 0;

        virtual HRESULT __stdcall EnumElements(

                        DWORD reserved1,

                        void *reserved2,

                        DWORD reserved3,

                      IEnumSTATSTG **ppenum) = 0;

        virtual HRESULT __stdcall DestroyElement(
                                                const OLECHAR *pwcsName) = 0;

        virtual HRESULT __stdcall RenameElement(
                                                const OLECHAR *pwcsOldName,
                                                const OLECHAR *pwcsNewName) = 0;

        virtual HRESULT __stdcall SetElementTimes(
                                                            const OLECHAR *pwcsName,
                                             const FILETIME *pctime,
                                             const FILETIME *patime,
                                             const FILETIME *pmtime) = 0;

        virtual HRESULT __stdcall SetClass(
                                 const IID & clsid) = 0;

        virtual HRESULT __stdcall SetStateBits(
                       DWORD grfStateBits,
                       DWORD grfMask) = 0;

        virtual HRESULT __stdcall Stat(
                                   STATSTG *pstatstg,
                       DWORD grfStatFlag) = 0;

    };
# 10240 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall IStorage_RemoteOpenStream_Proxy(
              IStorage * This,
                                        const OLECHAR *pwcsName,
               ULONG cbReserved1,
                                                                       byte *reserved1,
               DWORD grfMode,
               DWORD reserved2,
                                     IStream **ppstm);


void __stdcall IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IStorage_RemoteCopyTo_Proxy(
              IStorage * This,
               DWORD ciidExclude,
                                                                       const IID *rgiidExclude,
                                               SNB snbExclude,
                                     IStorage *pstgDest);


void __stdcall IStorage_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IStorage_RemoteEnumElements_Proxy(
              IStorage * This,
               DWORD reserved1,
               ULONG cbReserved2,
                                                                       byte *reserved2,
               DWORD reserved3,
                                     IEnumSTATSTG **ppenum);


void __stdcall IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 10301 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec;







typedef IPersistFile *LPPERSISTFILE;


extern "C" const IID IID_IPersistFile;



    struct __declspec(uuid("0000010b-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistFile : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall Load(
                                 LPCOLESTR pszFileName,
                       DWORD dwMode) = 0;

        virtual HRESULT __stdcall Save(
                                             LPCOLESTR pszFileName,
                       BOOL fRemember) = 0;

        virtual HRESULT __stdcall SaveCompleted(
                                             LPCOLESTR pszFileName) = 0;

        virtual HRESULT __stdcall GetCurFile(
                                             LPOLESTR *ppszFileName) = 0;

    };
# 10442 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef IPersistStorage *LPPERSISTSTORAGE;


extern "C" const IID IID_IPersistStorage;



    struct __declspec(uuid("0000010a-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistStorage : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall InitNew(
                                             IStorage *pStg) = 0;

        virtual HRESULT __stdcall Load(
                                             IStorage *pStg) = 0;

        virtual HRESULT __stdcall Save(
                                             IStorage *pStgSave,
                       BOOL fSameAsLoad) = 0;

        virtual HRESULT __stdcall SaveCompleted(
                                             IStorage *pStgNew) = 0;

        virtual HRESULT __stdcall HandsOffStorage( void) = 0;

    };
# 10583 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec;







typedef ILockBytes *LPLOCKBYTES;


extern "C" const IID IID_ILockBytes;



    struct __declspec(uuid("0000000a-0000-0000-C000-000000000046")) __declspec(novtable)
    ILockBytes : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReadAt(
                       ULARGE_INTEGER ulOffset,

                                                 void *pv,
                       ULONG cb,

                       ULONG *pcbRead) = 0;

        virtual HRESULT __stdcall WriteAt(
                       ULARGE_INTEGER ulOffset,

                                  const void *pv,
                       ULONG cb,

                       ULONG *pcbWritten) = 0;

        virtual HRESULT __stdcall Flush( void) = 0;

        virtual HRESULT __stdcall SetSize(
                       ULARGE_INTEGER cb) = 0;

        virtual HRESULT __stdcall LockRegion(
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType) = 0;

        virtual HRESULT __stdcall UnlockRegion(
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType) = 0;

        virtual HRESULT __stdcall Stat(
                                   STATSTG *pstatstg,
                       DWORD grfStatFlag) = 0;

    };
# 10752 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall ILockBytes_RemoteReadAt_Proxy(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);


void __stdcall ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ILockBytes_RemoteWriteAt_Proxy(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 10792 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef IEnumFORMATETC *LPENUMFORMATETC;


typedef struct tagDVTARGETDEVICE
    {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
                    BYTE tdData[ 1 ];
    } DVTARGETDEVICE;


typedef CLIPFORMAT *LPCLIPFORMAT;

typedef struct tagFORMATETC
    {
    CLIPFORMAT cfFormat;
                   DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } FORMATETC;

typedef struct tagFORMATETC *LPFORMATETC;


extern "C" const IID IID_IEnumFORMATETC;



    struct __declspec(uuid("00000103-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumFORMATETC : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 FORMATETC *rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumFORMATETC **ppenum) = 0;

    };
# 10925 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall IEnumFORMATETC_RemoteNext_Proxy(
              IEnumFORMATETC * This,
               ULONG celt,
                                                                                FORMATETC *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 10949 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef IEnumSTATDATA *LPENUMSTATDATA;

typedef
enum tagADVF
    {
        ADVF_NODATA = 1,
        ADVF_PRIMEFIRST = 2,
        ADVF_ONLYONCE = 4,
        ADVF_DATAONSTOP = 64,
        ADVFCACHE_NOHANDLER = 8,
        ADVFCACHE_FORCEBUILTIN = 16,
        ADVFCACHE_ONSAVE = 32
    } ADVF;

typedef struct tagSTATDATA
    {
    FORMATETC formatetc;
    DWORD advf;
                   IAdviseSink *pAdvSink;
    DWORD dwConnection;
    } STATDATA;

typedef STATDATA *LPSTATDATA;


extern "C" const IID IID_IEnumSTATDATA;



    struct __declspec(uuid("00000105-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATDATA : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 STATDATA *rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumSTATDATA **ppenum) = 0;

    };
# 11079 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall IEnumSTATDATA_RemoteNext_Proxy(
              IEnumSTATDATA * This,
               ULONG celt,
                                                                                STATDATA *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 11103 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef IRootStorage *LPROOTSTORAGE;


extern "C" const IID IID_IRootStorage;



    struct __declspec(uuid("00000012-0000-0000-C000-000000000046")) __declspec(novtable)
    IRootStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SwitchToFile(
                                 LPOLESTR pszFile) = 0;

    };
# 11185 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef IAdviseSink *LPADVISESINK;

typedef
enum tagTYMED
    {
        TYMED_HGLOBAL = 1,
        TYMED_FILE = 2,
        TYMED_ISTREAM = 4,
        TYMED_ISTORAGE = 8,
        TYMED_GDI = 16,
        TYMED_MFPICT = 32,
        TYMED_ENHMF = 64,
        TYMED_NULL = 0
    } TYMED;



#pragma warning(push)

#pragma warning(disable: 4200)

typedef struct tagRemSTGMEDIUM
    {
    DWORD tymed;
    DWORD dwHandleType;
    ULONG pData;
    ULONG pUnkForRelease;
    ULONG cbData;
                    byte data[ 1 ];
    } RemSTGMEDIUM;



#pragma warning(pop)
# 11238 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef struct tagSTGMEDIUM
    {
    DWORD tymed;
                                   union
        {
                       HBITMAP hBitmap;
                       HMETAFILEPICT hMetaFilePict;
                       HENHMETAFILE hEnhMetaFile;
                       HGLOBAL hGlobal;
                       LPOLESTR lpszFileName;
                       IStream *pstm;
                       IStorage *pstg;

        } ;
                   IUnknown *pUnkForRelease;
    } uSTGMEDIUM;


typedef struct _GDI_OBJECT
    {
    DWORD ObjectType;
                                          union __MIDL_IAdviseSink_0002
        {
                       wireHBITMAP hBitmap;
                       wireHPALETTE hPalette;
                        wireHGLOBAL hGeneric;
        } u;
    } GDI_OBJECT;

typedef struct _userSTGMEDIUM
    {
    struct _STGMEDIUM_UNION
        {
        DWORD tymed;
                                              union __MIDL_IAdviseSink_0003
            {

                           wireHMETAFILEPICT hMetaFilePict;
                           wireHENHMETAFILE hHEnhMetaFile;
                           GDI_OBJECT *hGdiHandle;
                           wireHGLOBAL hGlobal;
                           LPOLESTR lpszFileName;
                           BYTE_BLOB *pstm;
                           BYTE_BLOB *pstg;
            } u;
        } ;
    IUnknown *pUnkForRelease;
    } userSTGMEDIUM;

typedef userSTGMEDIUM *wireSTGMEDIUM;

typedef uSTGMEDIUM STGMEDIUM;

typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;

typedef STGMEDIUM ASYNC_STGMEDIUM;

typedef STGMEDIUM *LPSTGMEDIUM;

typedef struct _userFLAG_STGMEDIUM
    {
    LONG ContextFlags;
    LONG fPassOwnership;
    userSTGMEDIUM Stgmed;
    } userFLAG_STGMEDIUM;

typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;

typedef struct _FLAG_STGMEDIUM
    {
    LONG ContextFlags;
    LONG fPassOwnership;
    STGMEDIUM Stgmed;
    } FLAG_STGMEDIUM;


extern "C" const IID IID_IAdviseSink;



    struct __declspec(uuid("0000010f-0000-0000-C000-000000000046")) __declspec(novtable)
    IAdviseSink : public IUnknown
    {
    public:
        virtual void __stdcall OnDataChange(

                  FORMATETC *pFormatetc,

                  STGMEDIUM *pStgmed) = 0;

        virtual void __stdcall OnViewChange(
                       DWORD dwAspect,
                       LONG lindex) = 0;

        virtual void __stdcall OnRename(

                  IMoniker *pmk) = 0;

        virtual void __stdcall OnSave( void) = 0;

        virtual void __stdcall OnClose( void) = 0;

    };
# 11429 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall IAdviseSink_RemoteOnDataChange_Proxy(
              IAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);


void __stdcall IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnViewChange_Proxy(
              IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


void __stdcall IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnRename_Proxy(
              IAdviseSink * This,
                             IMoniker *pmk);


void __stdcall IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnSave_Proxy(
              IAdviseSink * This);


void __stdcall IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnClose_Proxy(
              IAdviseSink * This);


void __stdcall IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 11500 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_AsyncIAdviseSink;



    struct __declspec(uuid("00000150-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIAdviseSink : public IUnknown
    {
    public:
        virtual void __stdcall Begin_OnDataChange(

                  FORMATETC *pFormatetc,

                  STGMEDIUM *pStgmed) = 0;

        virtual void __stdcall Finish_OnDataChange( void) = 0;

        virtual void __stdcall Begin_OnViewChange(
                       DWORD dwAspect,
                       LONG lindex) = 0;

        virtual void __stdcall Finish_OnViewChange( void) = 0;

        virtual void __stdcall Begin_OnRename(

                  IMoniker *pmk) = 0;

        virtual void __stdcall Finish_OnRename( void) = 0;

        virtual void __stdcall Begin_OnSave( void) = 0;

        virtual void __stdcall Finish_OnSave( void) = 0;

        virtual void __stdcall Begin_OnClose( void) = 0;

        virtual void __stdcall Finish_OnClose( void) = 0;

    };
# 11655 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(
              AsyncIAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(
              AsyncIAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(
              AsyncIAdviseSink * This,
                             IMoniker *pmk);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 11783 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec;







typedef IAdviseSink2 *LPADVISESINK2;


extern "C" const IID IID_IAdviseSink2;



    struct __declspec(uuid("00000125-0000-0000-C000-000000000046")) __declspec(novtable)
    IAdviseSink2 : public IAdviseSink
    {
    public:
        virtual void __stdcall OnLinkSrcChange(

                  IMoniker *pmk) = 0;

    };
# 11905 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
              IAdviseSink2 * This,
                                     IMoniker *pmk);


void __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 11928 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_AsyncIAdviseSink2;



    struct __declspec(uuid("00000151-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIAdviseSink2 : public AsyncIAdviseSink
    {
    public:
        virtual void __stdcall Begin_OnLinkSrcChange(

                  IMoniker *pmk) = 0;

        virtual void __stdcall Finish_OnLinkSrcChange( void) = 0;

    };
# 12076 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(
              AsyncIAdviseSink2 * This,
                                     IMoniker *pmk);


void __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(
              AsyncIAdviseSink2 * This);


void __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 12112 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec;







typedef IDataObject *LPDATAOBJECT;

typedef
enum tagDATADIR
    {
        DATADIR_GET = 1,
        DATADIR_SET = 2
    } DATADIR;


extern "C" const IID IID_IDataObject;



    struct __declspec(uuid("0000010e-0000-0000-C000-000000000046")) __declspec(novtable)
    IDataObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetData(

                  FORMATETC *pformatetcIn,

                   STGMEDIUM *pmedium) = 0;

        virtual HRESULT __stdcall GetDataHere(

                  FORMATETC *pformatetc,

                     STGMEDIUM *pmedium) = 0;

        virtual HRESULT __stdcall QueryGetData(
                                             FORMATETC *pformatetc) = 0;

        virtual HRESULT __stdcall GetCanonicalFormatEtc(
                                             FORMATETC *pformatectIn,
                                   FORMATETC *pformatetcOut) = 0;

        virtual HRESULT __stdcall SetData(

                  FORMATETC *pformatetc,

                  STGMEDIUM *pmedium,
                       BOOL fRelease) = 0;

        virtual HRESULT __stdcall EnumFormatEtc(
                       DWORD dwDirection,
                                             IEnumFORMATETC **ppenumFormatEtc) = 0;

        virtual HRESULT __stdcall DAdvise(
                                 FORMATETC *pformatetc,
                       DWORD advf,
                                             IAdviseSink *pAdvSink,
                                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall DUnadvise(
                       DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumDAdvise(
                                             IEnumSTATDATA **ppenumAdvise) = 0;

    };
# 12310 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall IDataObject_RemoteGetData_Proxy(
              IDataObject * This,
                                     FORMATETC *pformatetcIn,
                           STGMEDIUM *pRemoteMedium);


void __stdcall IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IDataObject_RemoteGetDataHere_Proxy(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                 STGMEDIUM *pRemoteMedium);


void __stdcall IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IDataObject_RemoteSetData_Proxy(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                     FLAG_STGMEDIUM *pmedium,
               BOOL fRelease);


void __stdcall IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 12363 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec;







typedef IDataAdviseHolder *LPDATAADVISEHOLDER;


extern "C" const IID IID_IDataAdviseHolder;



    struct __declspec(uuid("00000110-0000-0000-C000-000000000046")) __declspec(novtable)
    IDataAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Advise(

                      IDataObject *pDataObject,

                  FORMATETC *pFetc,

                  DWORD advf,

                  IAdviseSink *pAdvise,

                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall Unadvise(

                  DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumAdvise(

                      IEnumSTATDATA **ppenumAdvise) = 0;

        virtual HRESULT __stdcall SendOnDataChange(

                  IDataObject *pDataObject,

                        DWORD dwReserved,

                  DWORD advf) = 0;

    };
# 12516 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef IMessageFilter *LPMESSAGEFILTER;

typedef
enum tagCALLTYPE
    {
        CALLTYPE_TOPLEVEL = 1,
        CALLTYPE_NESTED = 2,
        CALLTYPE_ASYNC = 3,
        CALLTYPE_TOPLEVEL_CALLPENDING = 4,
        CALLTYPE_ASYNC_CALLPENDING = 5
    } CALLTYPE;

typedef
enum tagSERVERCALL
    {
        SERVERCALL_ISHANDLED = 0,
        SERVERCALL_REJECTED = 1,
        SERVERCALL_RETRYLATER = 2
    } SERVERCALL;

typedef
enum tagPENDINGTYPE
    {
        PENDINGTYPE_TOPLEVEL = 1,
        PENDINGTYPE_NESTED = 2
    } PENDINGTYPE;

typedef
enum tagPENDINGMSG
    {
        PENDINGMSG_CANCELCALL = 0,
        PENDINGMSG_WAITNOPROCESS = 1,
        PENDINGMSG_WAITDEFPROCESS = 2
    } PENDINGMSG;

typedef struct tagINTERFACEINFO
    {
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
    } INTERFACEINFO;

typedef struct tagINTERFACEINFO *LPINTERFACEINFO;


extern "C" const IID IID_IMessageFilter;



    struct __declspec(uuid("00000016-0000-0000-C000-000000000046")) __declspec(novtable)
    IMessageFilter : public IUnknown
    {
    public:
        virtual DWORD __stdcall HandleInComingCall(

                  DWORD dwCallType,

                  HTASK htaskCaller,

                  DWORD dwTickCount,

                      LPINTERFACEINFO lpInterfaceInfo) = 0;

        virtual DWORD __stdcall RetryRejectedCall(

                  HTASK htaskCallee,

                  DWORD dwTickCount,

                  DWORD dwRejectType) = 0;

        virtual DWORD __stdcall MessagePending(

                  HTASK htaskCallee,

                  DWORD dwTickCount,

                  DWORD dwPendingType) = 0;

    };
# 12693 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;

extern const FMTID FMTID_DiscardableInformation;

extern const FMTID FMTID_ImageSummaryInformation;

extern const FMTID FMTID_AudioSummaryInformation;

extern const FMTID FMTID_VideoSummaryInformation;

extern const FMTID FMTID_MediaFileSummaryInformation;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec;
# 12721 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_IClassActivator;



    struct __declspec(uuid("00000140-0000-0000-C000-000000000046")) __declspec(novtable)
    IClassActivator : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassObject(
                                 const IID & rclsid,
                       DWORD dwClassContext,
                       LCID locale,
                                 const IID & riid,
                                                     void **ppv) = 0;

    };
# 12811 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec;
# 12821 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_IFillLockBytes;



    struct __declspec(uuid("99caf010-415e-11cf-8814-00aa00b569f5")) __declspec(novtable)
    IFillLockBytes : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FillAppend(

                                  const void *pv,

                  ULONG cb,

                   ULONG *pcbWritten) = 0;

        virtual HRESULT __stdcall FillAt(

                  ULARGE_INTEGER ulOffset,

                                  const void *pv,

                  ULONG cb,

                   ULONG *pcbWritten) = 0;

        virtual HRESULT __stdcall SetFillSize(
                       ULARGE_INTEGER ulSize) = 0;

        virtual HRESULT __stdcall Terminate(
                       BOOL bCanceled) = 0;

    };
# 12944 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
                HRESULT __stdcall IFillLockBytes_RemoteFillAppend_Proxy(
              IFillLockBytes * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IFillLockBytes_RemoteFillAt_Proxy(
              IFillLockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 12986 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec;
# 12996 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_IProgressNotify;



    struct __declspec(uuid("a9d758a0-4617-11cf-95fc-00aa00680db4")) __declspec(novtable)
    IProgressNotify : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnProgress(
                       DWORD dwProgressCurrent,
                       DWORD dwProgressMaximum,
                       BOOL fAccurate,
                       BOOL fOwner) = 0;

    };
# 13084 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec;







typedef struct tagStorageLayout
    {
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
    } StorageLayout;


extern "C" const IID IID_ILayoutStorage;



    struct __declspec(uuid("0e6d4d90-6738-11cf-9608-00aa00680db4")) __declspec(novtable)
    ILayoutStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall LayoutScript(

                                  StorageLayout *pStorageLayout,

                  DWORD nEntries,

                        DWORD glfInterleavedFlag) = 0;

        virtual HRESULT __stdcall BeginMonitor( void) = 0;

        virtual HRESULT __stdcall EndMonitor( void) = 0;

        virtual HRESULT __stdcall ReLayoutDocfile(

                       OLECHAR *pwcsNewDfName) = 0;

        virtual HRESULT __stdcall ReLayoutDocfileOnILockBytes(

                  ILockBytes *pILockBytes) = 0;

    };
# 13234 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec;
# 13244 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_IBlockingLock;



    struct __declspec(uuid("30f3d47a-6447-11d1-8e3c-00c04fb9386d")) __declspec(novtable)
    IBlockingLock : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Lock(
                       DWORD dwTimeout) = 0;

        virtual HRESULT __stdcall Unlock( void) = 0;

    };
# 13332 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_ITimeAndNoticeControl;



    struct __declspec(uuid("bc0bf6ae-8878-11d1-83e9-00c04fc2c6d4")) __declspec(novtable)
    ITimeAndNoticeControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SuppressChanges(
                       DWORD res1,
                       DWORD res2) = 0;

    };
# 13414 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_IOplockStorage;



    struct __declspec(uuid("8d19c834-8879-11d1-83e9-00c04fc2c6d4")) __declspec(novtable)
    IOplockStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateStorageEx(
                                 LPCWSTR pwcsName,
                       DWORD grfMode,
                       DWORD stgfmt,
                       DWORD grfAttrs,
                                 const IID & riid,
                                                     void **ppstgOpen) = 0;

        virtual HRESULT __stdcall OpenStorageEx(
                                 LPCWSTR pwcsName,
                       DWORD grfMode,
                       DWORD stgfmt,
                       DWORD grfAttrs,
                                 const IID & riid,
                                                     void **ppstgOpen) = 0;

    };
# 13526 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec;
# 13536 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_IDirectWriterLock;



    struct __declspec(uuid("0e6d4d92-6738-11cf-9608-00aa00680db4")) __declspec(novtable)
    IDirectWriterLock : public IUnknown
    {
    public:
        virtual HRESULT __stdcall WaitForWriteAccess(
                       DWORD dwTimeout) = 0;

        virtual HRESULT __stdcall ReleaseWriteAccess( void) = 0;

        virtual HRESULT __stdcall HaveWriteAccess( void) = 0;

    };
# 13634 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec;
# 13644 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_IUrlMon;



    struct __declspec(uuid("00000026-0000-0000-C000-000000000046")) __declspec(novtable)
    IUrlMon : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AsyncGetClassBits(
                                 const IID & rclsid,
                                             LPCWSTR pszTYPE,
                                             LPCWSTR pszExt,
                       DWORD dwFileVersionMS,
                       DWORD dwFileVersionLS,
                                             LPCWSTR pszCodeBase,
                                     IBindCtx *pbc,
                       DWORD dwClassContext,
                                 const IID & riid,
                       DWORD flags) = 0;

    };
# 13742 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_IForegroundTransfer;



    struct __declspec(uuid("00000145-0000-0000-C000-000000000046")) __declspec(novtable)
    IForegroundTransfer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AllowForegroundTransfer(

                        void *lpvReserved) = 0;

    };
# 13824 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_IThumbnailExtractor;



    struct __declspec(uuid("969dc708-5c76-11d1-8d86-0000f804b057")) __declspec(novtable)
    IThumbnailExtractor : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ExtractThumbnail(
                                     IStorage *pStg,
                       ULONG ulLength,
                       ULONG ulHeight,
                                   ULONG *pulOutputLength,
                                   ULONG *pulOutputHeight,
                                             HBITMAP *phOutputBitmap) = 0;

        virtual HRESULT __stdcall OnFileUpdated(
                                     IStorage *pStg) = 0;

    };
# 13924 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_IDummyHICONIncluder;



    struct __declspec(uuid("947990de-cc28-11d2-a0f7-00805f858fb1")) __declspec(novtable)
    IDummyHICONIncluder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Dummy(
                                 HICON h1,
                                 HDC h2) = 0;

    };
# 14002 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
typedef
enum tagApplicationType
    {
        ServerApplication = 0,
        LibraryApplication = ( ServerApplication + 1 )
    } ApplicationType;

typedef
enum tagShutdownType
    {
        IdleShutdown = 0,
        ForcedShutdown = ( IdleShutdown + 1 )
    } ShutdownType;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec;
# 14028 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_IProcessLock;



    struct __declspec(uuid("000001d5-0000-0000-C000-000000000046")) __declspec(novtable)
    IProcessLock : public IUnknown
    {
    public:
        virtual ULONG __stdcall AddRefOnProcess( void) = 0;

        virtual ULONG __stdcall ReleaseRefOnProcess( void) = 0;

    };
# 14114 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_ISurrogateService;



    struct __declspec(uuid("000001d4-0000-0000-C000-000000000046")) __declspec(novtable)
    ISurrogateService : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Init(

                  const GUID & rguidProcessID,

                  IProcessLock *pProcessLock,

                   BOOL *pfApplicationAware) = 0;

        virtual HRESULT __stdcall ApplicationLaunch(

                  const GUID & rguidApplID,

                  ApplicationType appType) = 0;

        virtual HRESULT __stdcall ApplicationFree(

                  const GUID & rguidApplID) = 0;

        virtual HRESULT __stdcall CatalogRefresh(

                        ULONG ulReserved) = 0;

        virtual HRESULT __stdcall ProcessShutdown(

                  ShutdownType shutdownType) = 0;

    };
# 14255 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec;







typedef IInitializeSpy *LPINITIALIZESPY;


extern "C" const IID IID_IInitializeSpy;



    struct __declspec(uuid("00000034-0000-0000-C000-000000000046")) __declspec(novtable)
    IInitializeSpy : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PreInitialize(

                  DWORD dwCoInit,

                  DWORD dwCurThreadAptRefs) = 0;

        virtual HRESULT __stdcall PostInitialize(

                  HRESULT hrCoInit,

                  DWORD dwCoInit,

                  DWORD dwNewThreadAptRefs) = 0;

        virtual HRESULT __stdcall PreUninitialize(

                  DWORD dwCurThreadAptRefs) = 0;

        virtual HRESULT __stdcall PostUninitialize(

                  DWORD dwNewThreadAptRefs) = 0;

    };
# 14400 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec;
# 14410 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
extern "C" const IID IID_IApartmentShutdown;



    struct __declspec(uuid("A2F05A09-27A2-42B5-BC0E-AC163EF49D9B")) __declspec(novtable)
    IApartmentShutdown : public IUnknown
    {
    public:
        virtual void __stdcall OnUninitialize(

                  UINT64 ui64ApartmentIdentifier) = 0;

    };
# 14492 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objidl.h"
#pragma warning(pop)






extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec;



unsigned long __stdcall ASYNC_STGMEDIUM_UserSize( unsigned long *, unsigned long , ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
void __stdcall ASYNC_STGMEDIUM_UserFree( unsigned long *, ASYNC_STGMEDIUM * );

unsigned long __stdcall CLIPFORMAT_UserSize( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall FLAG_STGMEDIUM_UserSize( unsigned long *, unsigned long , FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
void __stdcall FLAG_STGMEDIUM_UserFree( unsigned long *, FLAG_STGMEDIUM * );

unsigned long __stdcall HBITMAP_UserSize( unsigned long *, unsigned long , HBITMAP * );
unsigned char * __stdcall HBITMAP_UserMarshal( unsigned long *, unsigned char *, HBITMAP * );
unsigned char * __stdcall HBITMAP_UserUnmarshal( unsigned long *, unsigned char *, HBITMAP * );
void __stdcall HBITMAP_UserFree( unsigned long *, HBITMAP * );

unsigned long __stdcall HDC_UserSize( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree( unsigned long *, HDC * );

unsigned long __stdcall HICON_UserSize( unsigned long *, unsigned long , HICON * );
unsigned char * __stdcall HICON_UserMarshal( unsigned long *, unsigned char *, HICON * );
unsigned char * __stdcall HICON_UserUnmarshal( unsigned long *, unsigned char *, HICON * );
void __stdcall HICON_UserFree( unsigned long *, HICON * );

unsigned long __stdcall SNB_UserSize( unsigned long *, unsigned long , SNB * );
unsigned char * __stdcall SNB_UserMarshal( unsigned long *, unsigned char *, SNB * );
unsigned char * __stdcall SNB_UserUnmarshal( unsigned long *, unsigned char *, SNB * );
void __stdcall SNB_UserFree( unsigned long *, SNB * );

unsigned long __stdcall STGMEDIUM_UserSize( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree( unsigned long *, STGMEDIUM * );

unsigned long __stdcall ASYNC_STGMEDIUM_UserSize64( unsigned long *, unsigned long , ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
void __stdcall ASYNC_STGMEDIUM_UserFree64( unsigned long *, ASYNC_STGMEDIUM * );

unsigned long __stdcall CLIPFORMAT_UserSize64( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree64( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall FLAG_STGMEDIUM_UserSize64( unsigned long *, unsigned long , FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
void __stdcall FLAG_STGMEDIUM_UserFree64( unsigned long *, FLAG_STGMEDIUM * );

unsigned long __stdcall HBITMAP_UserSize64( unsigned long *, unsigned long , HBITMAP * );
unsigned char * __stdcall HBITMAP_UserMarshal64( unsigned long *, unsigned char *, HBITMAP * );
unsigned char * __stdcall HBITMAP_UserUnmarshal64( unsigned long *, unsigned char *, HBITMAP * );
void __stdcall HBITMAP_UserFree64( unsigned long *, HBITMAP * );

unsigned long __stdcall HDC_UserSize64( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal64( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal64( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree64( unsigned long *, HDC * );

unsigned long __stdcall HICON_UserSize64( unsigned long *, unsigned long , HICON * );
unsigned char * __stdcall HICON_UserMarshal64( unsigned long *, unsigned char *, HICON * );
unsigned char * __stdcall HICON_UserUnmarshal64( unsigned long *, unsigned char *, HICON * );
void __stdcall HICON_UserFree64( unsigned long *, HICON * );

unsigned long __stdcall SNB_UserSize64( unsigned long *, unsigned long , SNB * );
unsigned char * __stdcall SNB_UserMarshal64( unsigned long *, unsigned char *, SNB * );
unsigned char * __stdcall SNB_UserUnmarshal64( unsigned long *, unsigned char *, SNB * );
void __stdcall SNB_UserFree64( unsigned long *, SNB * );

unsigned long __stdcall STGMEDIUM_UserSize64( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree64( unsigned long *, STGMEDIUM * );

              HRESULT __stdcall IEnumUnknown_Next_Proxy(
    IEnumUnknown * This,

          ULONG celt,

                                         IUnknown **rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumUnknown_Next_Stub(
              IEnumUnknown * This,
               ULONG celt,
                                                                                IUnknown **rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumString_Next_Proxy(
    IEnumString * This,
               ULONG celt,

                                         LPOLESTR *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumString_Next_Stub(
              IEnumString * This,
               ULONG celt,
                                                                                LPOLESTR *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall ISequentialStream_Read_Proxy(
    ISequentialStream * This,

                                         void *pv,

          ULONG cb,

               ULONG *pcbRead);


                HRESULT __stdcall ISequentialStream_Read_Stub(
              ISequentialStream * This,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);

              HRESULT __stdcall ISequentialStream_Write_Proxy(
    ISequentialStream * This,

                          const void *pv,

          ULONG cb,

               ULONG *pcbWritten);


                HRESULT __stdcall ISequentialStream_Write_Stub(
              ISequentialStream * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IStream_Seek_Proxy(
    IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,

               ULARGE_INTEGER *plibNewPosition);


                HRESULT __stdcall IStream_Seek_Stub(
              IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                           ULARGE_INTEGER *plibNewPosition);

              HRESULT __stdcall IStream_CopyTo_Proxy(
    IStream * This,

          IStream *pstm,
               ULARGE_INTEGER cb,

               ULARGE_INTEGER *pcbRead,

               ULARGE_INTEGER *pcbWritten);


                HRESULT __stdcall IStream_CopyTo_Stub(
              IStream * This,
                                     IStream *pstm,
               ULARGE_INTEGER cb,
                           ULARGE_INTEGER *pcbRead,
                           ULARGE_INTEGER *pcbWritten);

              HRESULT __stdcall IBindCtx_SetBindOptions_Proxy(
    IBindCtx * This,

          BIND_OPTS *pbindopts);


                HRESULT __stdcall IBindCtx_SetBindOptions_Stub(
              IBindCtx * This,
                         BIND_OPTS2 *pbindopts);

              HRESULT __stdcall IBindCtx_GetBindOptions_Proxy(
    IBindCtx * This,

             BIND_OPTS *pbindopts);


                HRESULT __stdcall IBindCtx_GetBindOptions_Stub(
              IBindCtx * This,
                                 BIND_OPTS2 *pbindopts);

              HRESULT __stdcall IEnumMoniker_Next_Proxy(
    IEnumMoniker * This,
               ULONG celt,

                                         IMoniker **rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumMoniker_Next_Stub(
              IEnumMoniker * This,
               ULONG celt,
                                                                                IMoniker **rgelt,
                           ULONG *pceltFetched);

              BOOL __stdcall IRunnableObject_IsRunning_Proxy(
    IRunnableObject * This);


                HRESULT __stdcall IRunnableObject_IsRunning_Stub(
              IRunnableObject * This);

              HRESULT __stdcall IMoniker_BindToObject_Proxy(
    IMoniker * This,

          IBindCtx *pbc,

              IMoniker *pmkToLeft,

          const IID & riidResult,

              void **ppvResult);


                HRESULT __stdcall IMoniker_BindToObject_Stub(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID & riidResult,
                                             IUnknown **ppvResult);

              HRESULT __stdcall IMoniker_BindToStorage_Proxy(
    IMoniker * This,

          IBindCtx *pbc,

              IMoniker *pmkToLeft,

          const IID & riid,

              void **ppvObj);


                HRESULT __stdcall IMoniker_BindToStorage_Stub(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID & riid,
                                             IUnknown **ppvObj);

              HRESULT __stdcall IEnumSTATSTG_Next_Proxy(
    IEnumSTATSTG * This,
               ULONG celt,

                                         STATSTG *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATSTG_Next_Stub(
              IEnumSTATSTG * This,
               ULONG celt,
                                                                                STATSTG *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IStorage_OpenStream_Proxy(
    IStorage * This,

            const OLECHAR *pwcsName,

                void *reserved1,
               DWORD grfMode,
               DWORD reserved2,

              IStream **ppstm);


                HRESULT __stdcall IStorage_OpenStream_Stub(
              IStorage * This,
                                        const OLECHAR *pwcsName,
               ULONG cbReserved1,
                                                                       byte *reserved1,
               DWORD grfMode,
               DWORD reserved2,
                                     IStream **ppstm);

              HRESULT __stdcall IStorage_CopyTo_Proxy(
    IStorage * This,
               DWORD ciidExclude,

                                 const IID *rgiidExclude,

              SNB snbExclude,

          IStorage *pstgDest);


                HRESULT __stdcall IStorage_CopyTo_Stub(
              IStorage * This,
               DWORD ciidExclude,
                                                                       const IID *rgiidExclude,
                                               SNB snbExclude,
                                     IStorage *pstgDest);

              HRESULT __stdcall IStorage_EnumElements_Proxy(
    IStorage * This,

                DWORD reserved1,

                void *reserved2,

                DWORD reserved3,

              IEnumSTATSTG **ppenum);


                HRESULT __stdcall IStorage_EnumElements_Stub(
              IStorage * This,
               DWORD reserved1,
               ULONG cbReserved2,
                                                                       byte *reserved2,
               DWORD reserved3,
                                     IEnumSTATSTG **ppenum);

              HRESULT __stdcall ILockBytes_ReadAt_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER ulOffset,

                                         void *pv,
               ULONG cb,

               ULONG *pcbRead);


                HRESULT __stdcall ILockBytes_ReadAt_Stub(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);

              HRESULT __stdcall ILockBytes_WriteAt_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER ulOffset,

                          const void *pv,
               ULONG cb,

               ULONG *pcbWritten);


                HRESULT __stdcall ILockBytes_WriteAt_Stub(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IEnumFORMATETC_Next_Proxy(
    IEnumFORMATETC * This,
               ULONG celt,

                                         FORMATETC *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumFORMATETC_Next_Stub(
              IEnumFORMATETC * This,
               ULONG celt,
                                                                                FORMATETC *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumSTATDATA_Next_Proxy(
    IEnumSTATDATA * This,
               ULONG celt,

                                         STATDATA *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATDATA_Next_Stub(
              IEnumSTATDATA * This,
               ULONG celt,
                                                                                STATDATA *rgelt,
                           ULONG *pceltFetched);

              void __stdcall IAdviseSink_OnDataChange_Proxy(
    IAdviseSink * This,

          FORMATETC *pFormatetc,

          STGMEDIUM *pStgmed);


                HRESULT __stdcall IAdviseSink_OnDataChange_Stub(
              IAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);

              void __stdcall IAdviseSink_OnViewChange_Proxy(
    IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


                HRESULT __stdcall IAdviseSink_OnViewChange_Stub(
              IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);

              void __stdcall IAdviseSink_OnRename_Proxy(
    IAdviseSink * This,

          IMoniker *pmk);


                HRESULT __stdcall IAdviseSink_OnRename_Stub(
              IAdviseSink * This,
                             IMoniker *pmk);

              void __stdcall IAdviseSink_OnSave_Proxy(
    IAdviseSink * This);


                HRESULT __stdcall IAdviseSink_OnSave_Stub(
              IAdviseSink * This);

              void __stdcall IAdviseSink_OnClose_Proxy(
    IAdviseSink * This);


                HRESULT __stdcall IAdviseSink_OnClose_Stub(
              IAdviseSink * This);

              void __stdcall IAdviseSink2_OnLinkSrcChange_Proxy(
    IAdviseSink2 * This,

          IMoniker *pmk);


                HRESULT __stdcall IAdviseSink2_OnLinkSrcChange_Stub(
              IAdviseSink2 * This,
                                     IMoniker *pmk);

              HRESULT __stdcall IDataObject_GetData_Proxy(
    IDataObject * This,

          FORMATETC *pformatetcIn,

           STGMEDIUM *pmedium);


                HRESULT __stdcall IDataObject_GetData_Stub(
              IDataObject * This,
                                     FORMATETC *pformatetcIn,
                           STGMEDIUM *pRemoteMedium);

              HRESULT __stdcall IDataObject_GetDataHere_Proxy(
    IDataObject * This,

          FORMATETC *pformatetc,

             STGMEDIUM *pmedium);


                HRESULT __stdcall IDataObject_GetDataHere_Stub(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                 STGMEDIUM *pRemoteMedium);

              HRESULT __stdcall IDataObject_SetData_Proxy(
    IDataObject * This,

          FORMATETC *pformatetc,

          STGMEDIUM *pmedium,
               BOOL fRelease);


                HRESULT __stdcall IDataObject_SetData_Stub(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                     FLAG_STGMEDIUM *pmedium,
               BOOL fRelease);

              HRESULT __stdcall IFillLockBytes_FillAppend_Proxy(
    IFillLockBytes * This,

                          const void *pv,

          ULONG cb,

           ULONG *pcbWritten);


                HRESULT __stdcall IFillLockBytes_FillAppend_Stub(
              IFillLockBytes * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IFillLockBytes_FillAt_Proxy(
    IFillLockBytes * This,

          ULARGE_INTEGER ulOffset,

                          const void *pv,

          ULONG cb,

           ULONG *pcbWritten);


                HRESULT __stdcall IFillLockBytes_FillAt_Stub(
              IFillLockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              void __stdcall AsyncIAdviseSink_Begin_OnDataChange_Proxy(
    AsyncIAdviseSink * This,

          FORMATETC *pFormatetc,

          STGMEDIUM *pStgmed);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnDataChange_Stub(
              AsyncIAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);

              void __stdcall AsyncIAdviseSink_Finish_OnDataChange_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnDataChange_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnViewChange_Proxy(
    AsyncIAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnViewChange_Stub(
              AsyncIAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);

              void __stdcall AsyncIAdviseSink_Finish_OnViewChange_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnViewChange_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnRename_Proxy(
    AsyncIAdviseSink * This,

          IMoniker *pmk);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnRename_Stub(
              AsyncIAdviseSink * This,
                             IMoniker *pmk);

              void __stdcall AsyncIAdviseSink_Finish_OnRename_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnRename_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnSave_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnSave_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Finish_OnSave_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnSave_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnClose_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnClose_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Finish_OnClose_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnClose_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(
    AsyncIAdviseSink2 * This,

          IMoniker *pmk);


                HRESULT __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(
              AsyncIAdviseSink2 * This,
                                     IMoniker *pmk);

              void __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(
    AsyncIAdviseSink2 * This);


                HRESULT __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(
              AsyncIAdviseSink2 * This);






}
# 107 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objbase.h" 2
# 124 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objbase.h"
extern "C" __declspec(dllimport) DWORD __stdcall CoBuildVersion( void );



               extern "C" __declspec(dllimport) HRESULT __stdcall CoInitialize( LPVOID pvReserved);
extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterMallocSpy( LPMALLOCSPY pMallocSpy);
extern "C" __declspec(dllimport) HRESULT __stdcall CoRevokeMallocSpy(void);
extern "C" __declspec(dllimport) HRESULT __stdcall CoCreateStandardMalloc( DWORD memctx, IMalloc * * ppMalloc);




               extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterInitializeSpy( LPINITIALIZESPY pSpy, ULARGE_INTEGER *puliCookie);
               extern "C" __declspec(dllimport) HRESULT __stdcall CoRevokeInitializeSpy( ULARGE_INTEGER uliCookie);



typedef enum tagCOMSD
{
    SD_LAUNCHPERMISSIONS = 0,
    SD_ACCESSPERMISSIONS = 1,
    SD_LAUNCHRESTRICTIONS = 2,
    SD_ACCESSRESTRICTIONS = 3

} COMSD;
               extern "C" __declspec(dllimport) HRESULT __stdcall CoGetSystemSecurityPermissions(COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD);





extern "C" __declspec(dllimport) HINSTANCE __stdcall CoLoadLibrary( LPOLESTR lpszLibName, BOOL bAutoFree);
extern "C" __declspec(dllimport) void __stdcall CoFreeLibrary( HINSTANCE hInst);
extern "C" __declspec(dllimport) void __stdcall CoFreeAllLibraries(void);





               extern "C" __declspec(dllimport) HRESULT __stdcall CoGetInstanceFromFile(
             COSERVERINFO * pServerInfo,
             CLSID * pClsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
         DWORD grfMode,
                           OLECHAR * pwszName,
         DWORD dwCount,
                             MULTI_QI * pResults );


               extern "C" __declspec(dllimport) HRESULT __stdcall CoGetInstanceFromIStorage(
             COSERVERINFO * pServerInfo,
             CLSID * pClsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
         struct IStorage * pstg,
         DWORD dwCount,
                             MULTI_QI * pResults );







extern "C" __declspec(dllimport) HRESULT __stdcall CoAllowSetForegroundWindow( IUnknown *pUnk, LPVOID lpvReserved);


extern "C" __declspec(dllimport) HRESULT __stdcall DcomChannelSetHResult( LPVOID pvReserved, ULONG* pulReserved, HRESULT appsHR);




extern "C" __declspec(dllimport) BOOL __stdcall CoIsOle1Class( const IID & rclsid);
               extern "C" __declspec(dllimport) HRESULT __stdcall CLSIDFromProgIDEx ( LPCOLESTR lpszProgID, LPCLSID lpclsid);

extern "C" __declspec(dllimport) BOOL __stdcall CoFileTimeToDosDateTime(
                      FILETIME * lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime);
extern "C" __declspec(dllimport) BOOL __stdcall CoDosDateTimeToFileTime(
                            WORD nDosDate, WORD nDosTime, FILETIME * lpFileTime);
extern "C" __declspec(dllimport) HRESULT __stdcall CoFileTimeNow( FILETIME * lpFileTime );

               extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterMessageFilter( LPMESSAGEFILTER lpMessageFilter,
                                                              LPMESSAGEFILTER * lplpMessageFilter );



extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterChannelHook( const GUID & ExtensionUuid, IChannelHook *pChannelHook );





               extern "C" __declspec(dllimport) HRESULT __stdcall CoTreatAsClass( const IID & clsidOld, const IID & clsidNew);




extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataCache( LPUNKNOWN pUnkOuter, const IID & rclsid,
                               const IID & iid, LPVOID * ppv);
# 237 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objbase.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateDocfile( const WCHAR* pwcsName,
                 DWORD grfMode,
                       DWORD reserved,
                     IStorage** ppstgOpen);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateDocfileOnILockBytes( ILockBytes* plkbyt,
                         DWORD grfMode,
                         DWORD reserved,
                             IStorage** ppstgOpen);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorage( const WCHAR* pwcsName,
                       IStorage* pstgPriority,
                   DWORD grfMode,
                         SNB snbExclude,
                   DWORD reserved,
                       IStorage** ppstgOpen);
               extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorageOnILockBytes( ILockBytes* plkbyt,
                           IStorage* pstgPriority,
                       DWORD grfMode,
                             SNB snbExclude,
                             DWORD reserved,
                           IStorage** ppstgOpen);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgIsStorageFile( const WCHAR* pwcsName);
               extern "C" __declspec(dllimport) HRESULT __stdcall StgIsStorageILockBytes( ILockBytes* plkbyt);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgSetTimes( const WCHAR* lpszName,
                            const FILETIME* pctime,
                            const FILETIME* patime,
                            const FILETIME* pmtime);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenAsyncDocfileOnIFillLockBytes( IFillLockBytes *pflb,
                  DWORD grfMode,
                  DWORD asyncFlags,
                      IStorage** ppstgOpen);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnILockBytes( ILockBytes *pilb,
                      IFillLockBytes** ppflb);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnFile( OLECHAR const *pwcsName,
                      IFillLockBytes** ppflb);
# 286 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objbase.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenLayoutDocfile( OLECHAR const *pwcsDfName,
                  DWORD grfMode,
                  DWORD reserved,
                      IStorage** ppstgOpen);
# 303 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objbase.h"
typedef struct tagSTGOPTIONS
{
    USHORT usVersion;
    USHORT reserved;
    ULONG ulSectorSize;

    const WCHAR *pwcsTemplateFile;

} STGOPTIONS;





               extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateStorageEx ( const WCHAR* pwcsName,
                 DWORD grfMode,
                 DWORD stgfmt,
                 DWORD grfAttrs,
                        STGOPTIONS* pStgOptions,
                     PSECURITY_DESCRIPTOR pSecurityDescriptor,
                 const IID & riid,
                     void** ppObjectOpen);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorageEx ( const WCHAR* pwcsName,
                 DWORD grfMode,
                 DWORD stgfmt,
                 DWORD grfAttrs,
                        STGOPTIONS* pStgOptions,
                     PSECURITY_DESCRIPTOR pSecurityDescriptor,
                 const IID & riid,
                     void** ppObjectOpen);






               extern "C" __declspec(dllimport) HRESULT __stdcall BindMoniker( LPMONIKER pmk, DWORD grfOpt, const IID & iidResult, LPVOID * ppvResult);







extern "C" __declspec(dllimport) HRESULT __stdcall CoInstall(
         IBindCtx * pbc,
         DWORD dwFlags,
         uCLSSPEC * pClassSpec,
         QUERYCONTEXT * pQuery,
         LPWSTR pszCodeBase);







               extern "C" __declspec(dllimport) HRESULT __stdcall CoGetObject( LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID & riid, void **ppv);
               extern "C" __declspec(dllimport) HRESULT __stdcall MkParseDisplayName( LPBC pbc, LPCOLESTR szUserName,
                      ULONG * pchEaten, LPMONIKER * ppmk);
               extern "C" __declspec(dllimport) HRESULT __stdcall MonikerRelativePathTo( LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER
                   * ppmkRelPath, BOOL dwReserved);
               extern "C" __declspec(dllimport) HRESULT __stdcall MonikerCommonPrefixWith( LPMONIKER pmkThis, LPMONIKER pmkOther,
                         LPMONIKER * ppmkCommon);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreateBindCtx( DWORD reserved, LPBC * ppbc);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreateGenericComposite( LPMONIKER pmkFirst, LPMONIKER pmkRest,
             LPMONIKER * ppmkComposite);
               extern "C" __declspec(dllimport) HRESULT __stdcall GetClassFile ( LPCOLESTR szFilename, CLSID * pclsid);

               extern "C" __declspec(dllimport) HRESULT __stdcall CreateClassMoniker( const IID & rclsid, LPMONIKER * ppmk);

               extern "C" __declspec(dllimport) HRESULT __stdcall CreateFileMoniker( LPCOLESTR lpszPathName, LPMONIKER * ppmk);

               extern "C" __declspec(dllimport) HRESULT __stdcall CreateItemMoniker( LPCOLESTR lpszDelim, LPCOLESTR lpszItem,
                                   LPMONIKER * ppmk);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreateAntiMoniker( LPMONIKER * ppmk);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreatePointerMoniker( LPUNKNOWN punk, LPMONIKER * ppmk);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreateObjrefMoniker( LPUNKNOWN punk, LPMONIKER * ppmk);







               extern "C" __declspec(dllimport) HRESULT __stdcall GetRunningObjectTable( DWORD reserved, LPRUNNINGOBJECTTABLE * pprot);





# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h" 1








#pragma warning(disable: 4049)
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
typedef struct IPersistMoniker IPersistMoniker;






typedef struct IMonikerProp IMonikerProp;






typedef struct IBindProtocol IBindProtocol;






typedef struct IBinding IBinding;






typedef struct IBindStatusCallback IBindStatusCallback;






typedef struct IBindStatusCallbackEx IBindStatusCallbackEx;






typedef struct IAuthenticate IAuthenticate;






typedef struct IAuthenticateEx IAuthenticateEx;






typedef struct IHttpNegotiate IHttpNegotiate;






typedef struct IHttpNegotiate2 IHttpNegotiate2;






typedef struct IHttpNegotiate3 IHttpNegotiate3;






typedef struct IWinInetFileStream IWinInetFileStream;






typedef struct IWindowForBindingUI IWindowForBindingUI;






typedef struct ICodeInstall ICodeInstall;






typedef struct IUri IUri;






typedef struct IUriContainer IUriContainer;






typedef struct IUriBuilder IUriBuilder;






typedef struct IUriBuilderFactory IUriBuilderFactory;






typedef struct IWinInetInfo IWinInetInfo;






typedef struct IHttpSecurity IHttpSecurity;






typedef struct IWinInetHttpInfo IWinInetHttpInfo;






typedef struct IWinInetHttpTimeouts IWinInetHttpTimeouts;






typedef struct IWinInetCacheHints IWinInetCacheHints;






typedef struct IWinInetCacheHints2 IWinInetCacheHints2;






typedef struct IBindHost IBindHost;






typedef struct IInternet IInternet;






typedef struct IInternetBindInfo IInternetBindInfo;






typedef struct IInternetBindInfoEx IInternetBindInfoEx;






typedef struct IInternetProtocolRoot IInternetProtocolRoot;






typedef struct IInternetProtocol IInternetProtocol;






typedef struct IInternetProtocolEx IInternetProtocolEx;






typedef struct IInternetProtocolSink IInternetProtocolSink;






typedef struct IInternetProtocolSinkStackable IInternetProtocolSinkStackable;






typedef struct IInternetSession IInternetSession;






typedef struct IInternetThreadSwitch IInternetThreadSwitch;






typedef struct IInternetPriority IInternetPriority;






typedef struct IInternetProtocolInfo IInternetProtocolInfo;






typedef struct IInternetSecurityMgrSite IInternetSecurityMgrSite;






typedef struct IInternetSecurityManager IInternetSecurityManager;






typedef struct IInternetSecurityManagerEx IInternetSecurityManagerEx;






typedef struct IInternetSecurityManagerEx2 IInternetSecurityManagerEx2;






typedef struct IZoneIdentifier IZoneIdentifier;






typedef struct IInternetHostSecurityManager IInternetHostSecurityManager;






typedef struct IInternetZoneManager IInternetZoneManager;






typedef struct IInternetZoneManagerEx IInternetZoneManagerEx;






typedef struct IInternetZoneManagerEx2 IInternetZoneManagerEx2;






typedef struct ISoftDistExt ISoftDistExt;






typedef struct ICatalogFileInfo ICatalogFileInfo;






typedef struct IDataFilter IDataFilter;






typedef struct IEncodingFilterFactory IEncodingFilterFactory;






typedef struct IWrappedProtocol IWrappedProtocol;






typedef struct IGetBindHandle IGetBindHandle;






typedef struct IBindCallbackRedirect IBindCallbackRedirect;






typedef struct IBindHttpSecurity IBindHttpSecurity;







# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h" 1








#pragma warning(disable: 4049)
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef struct IOleAdviseHolder IOleAdviseHolder;






typedef struct IOleCache IOleCache;






typedef struct IOleCache2 IOleCache2;






typedef struct IOleCacheControl IOleCacheControl;






typedef struct IParseDisplayName IParseDisplayName;






typedef struct IOleContainer IOleContainer;






typedef struct IOleClientSite IOleClientSite;






typedef struct IOleObject IOleObject;






typedef struct IOleWindow IOleWindow;






typedef struct IOleLink IOleLink;






typedef struct IOleItemContainer IOleItemContainer;






typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;






typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;






typedef struct IOleInPlaceFrame IOleInPlaceFrame;






typedef struct IOleInPlaceObject IOleInPlaceObject;






typedef struct IOleInPlaceSite IOleInPlaceSite;






typedef struct IContinue IContinue;






typedef struct IViewObject IViewObject;






typedef struct IViewObject2 IViewObject2;






typedef struct IDropSource IDropSource;






typedef struct IDropTarget IDropTarget;






typedef struct IDropSourceNotify IDropSourceNotify;






typedef struct IEnumOLEVERB IEnumOLEVERB;
# 208 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
extern "C"{
# 231 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec;







typedef IOleAdviseHolder *LPOLEADVISEHOLDER;


extern "C" const IID IID_IOleAdviseHolder;



    struct __declspec(uuid("00000111-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Advise(

                  IAdviseSink *pAdvise,

                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall Unadvise(
                       DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumAdvise(

                      IEnumSTATDATA **ppenumAdvise) = 0;

        virtual HRESULT __stdcall SendOnRename(

                  IMoniker *pmk) = 0;

        virtual HRESULT __stdcall SendOnSave( void) = 0;

        virtual HRESULT __stdcall SendOnClose( void) = 0;

    };
# 381 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec;







typedef IOleCache *LPOLECACHE;


extern "C" const IID IID_IOleCache;



    struct __declspec(uuid("0000011e-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCache : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Cache(
                                             FORMATETC *pformatetc,
                       DWORD advf,
                                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall Uncache(
                       DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumCache(
                                             IEnumSTATDATA **ppenumSTATDATA) = 0;

        virtual HRESULT __stdcall InitCache(
                                             IDataObject *pDataObject) = 0;

        virtual HRESULT __stdcall SetData(
                                             FORMATETC *pformatetc,
                                             STGMEDIUM *pmedium,
                       BOOL fRelease) = 0;

    };
# 520 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IOleCache2 *LPOLECACHE2;
# 540 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef
enum tagDISCARDCACHE
    {
        DISCARDCACHE_SAVEIFDIRTY = 0,
        DISCARDCACHE_NOSAVE = 1
    } DISCARDCACHE;


extern "C" const IID IID_IOleCache2;



    struct __declspec(uuid("00000128-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCache2 : public IOleCache
    {
    public:
        virtual HRESULT __stdcall UpdateCache(

                  LPDATAOBJECT pDataObject,

                  DWORD grfUpdf,

                        LPVOID pReserved) = 0;

        virtual HRESULT __stdcall DiscardCache(
                       DWORD dwDiscardOptions) = 0;

    };
# 677 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
                HRESULT __stdcall IOleCache2_RemoteUpdateCache_Proxy(
              IOleCache2 * This,
                             LPDATAOBJECT pDataObject,
               DWORD grfUpdf,
               LONG_PTR pReserved);


void __stdcall IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 704 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec;







typedef IOleCacheControl *LPOLECACHECONTROL;


extern "C" const IID IID_IOleCacheControl;



    struct __declspec(uuid("00000129-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCacheControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnRun(
                          LPDATAOBJECT pDataObject) = 0;

        virtual HRESULT __stdcall OnStop( void) = 0;

    };
# 803 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IParseDisplayName *LPPARSEDISPLAYNAME;


extern "C" const IID IID_IParseDisplayName;



    struct __declspec(uuid("0000011a-0000-0000-C000-000000000046")) __declspec(novtable)
    IParseDisplayName : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseDisplayName(
                                             IBindCtx *pbc,
                                 LPOLESTR pszDisplayName,
                                   ULONG *pchEaten,
                                             IMoniker **ppmkOut) = 0;

    };
# 891 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IOleContainer *LPOLECONTAINER;


extern "C" const IID IID_IOleContainer;



    struct __declspec(uuid("0000011b-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleContainer : public IParseDisplayName
    {
    public:
        virtual HRESULT __stdcall EnumObjects(
                       DWORD grfFlags,
                                             IEnumUnknown **ppenum) = 0;

        virtual HRESULT __stdcall LockContainer(
                       BOOL fLock) = 0;

    };
# 996 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IOleClientSite *LPOLECLIENTSITE;


extern "C" const IID IID_IOleClientSite;



    struct __declspec(uuid("00000118-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleClientSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SaveObject( void) = 0;

        virtual HRESULT __stdcall GetMoniker(
                       DWORD dwAssign,
                       DWORD dwWhichMoniker,
                                             IMoniker **ppmk) = 0;

        virtual HRESULT __stdcall GetContainer(
                                             IOleContainer **ppContainer) = 0;

        virtual HRESULT __stdcall ShowObject( void) = 0;

        virtual HRESULT __stdcall OnShowWindow(
                       BOOL fShow) = 0;

        virtual HRESULT __stdcall RequestNewObjectLayout( void) = 0;

    };
# 1126 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IOleObject *LPOLEOBJECT;

typedef
enum tagOLEGETMONIKER
    {
        OLEGETMONIKER_ONLYIFTHERE = 1,
        OLEGETMONIKER_FORCEASSIGN = 2,
        OLEGETMONIKER_UNASSIGN = 3,
        OLEGETMONIKER_TEMPFORUSER = 4
    } OLEGETMONIKER;

typedef
enum tagOLEWHICHMK
    {
        OLEWHICHMK_CONTAINER = 1,
        OLEWHICHMK_OBJREL = 2,
        OLEWHICHMK_OBJFULL = 3
    } OLEWHICHMK;

typedef
enum tagUSERCLASSTYPE
    {
        USERCLASSTYPE_FULL = 1,
        USERCLASSTYPE_SHORT = 2,
        USERCLASSTYPE_APPNAME = 3
    } USERCLASSTYPE;

typedef
enum tagOLEMISC
    {
        OLEMISC_RECOMPOSEONRESIZE = 0x1,
        OLEMISC_ONLYICONIC = 0x2,
        OLEMISC_INSERTNOTREPLACE = 0x4,
        OLEMISC_STATIC = 0x8,
        OLEMISC_CANTLINKINSIDE = 0x10,
        OLEMISC_CANLINKBYOLE1 = 0x20,
        OLEMISC_ISLINKOBJECT = 0x40,
        OLEMISC_INSIDEOUT = 0x80,
        OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
        OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
        OLEMISC_INVISIBLEATRUNTIME = 0x400,
        OLEMISC_ALWAYSRUN = 0x800,
        OLEMISC_ACTSLIKEBUTTON = 0x1000,
        OLEMISC_ACTSLIKELABEL = 0x2000,
        OLEMISC_NOUIACTIVATE = 0x4000,
        OLEMISC_ALIGNABLE = 0x8000,
        OLEMISC_SIMPLEFRAME = 0x10000,
        OLEMISC_SETCLIENTSITEFIRST = 0x20000,
        OLEMISC_IMEMODE = 0x40000,
        OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
        OLEMISC_WANTSTOMENUMERGE = 0x100000,
        OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000
    } OLEMISC;

typedef
enum tagOLECLOSE
    {
        OLECLOSE_SAVEIFDIRTY = 0,
        OLECLOSE_NOSAVE = 1,
        OLECLOSE_PROMPTSAVE = 2
    } OLECLOSE;


extern "C" const IID IID_IOleObject;



    struct __declspec(uuid("00000112-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetClientSite(
                                             IOleClientSite *pClientSite) = 0;

        virtual HRESULT __stdcall GetClientSite(
                                             IOleClientSite **ppClientSite) = 0;

        virtual HRESULT __stdcall SetHostNames(
                                 LPCOLESTR szContainerApp,
                                             LPCOLESTR szContainerObj) = 0;

        virtual HRESULT __stdcall Close(
                       DWORD dwSaveOption) = 0;

        virtual HRESULT __stdcall SetMoniker(
                       DWORD dwWhichMoniker,
                                             IMoniker *pmk) = 0;

        virtual HRESULT __stdcall GetMoniker(
                       DWORD dwAssign,
                       DWORD dwWhichMoniker,
                                             IMoniker **ppmk) = 0;

        virtual HRESULT __stdcall InitFromData(
                                             IDataObject *pDataObject,
                       BOOL fCreation,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall GetClipboardData(
                       DWORD dwReserved,
                                             IDataObject **ppDataObject) = 0;

        virtual HRESULT __stdcall DoVerb(
                       LONG iVerb,
                                             LPMSG lpmsg,
                                             IOleClientSite *pActiveSite,
                       LONG lindex,
                                 HWND hwndParent,
                                             LPCRECT lprcPosRect) = 0;

        virtual HRESULT __stdcall EnumVerbs(
                                             IEnumOLEVERB **ppEnumOleVerb) = 0;

        virtual HRESULT __stdcall Update( void) = 0;

        virtual HRESULT __stdcall IsUpToDate( void) = 0;

        virtual HRESULT __stdcall GetUserClassID(
                                   CLSID *pClsid) = 0;

        virtual HRESULT __stdcall GetUserType(
                       DWORD dwFormOfType,
                                             LPOLESTR *pszUserType) = 0;

        virtual HRESULT __stdcall SetExtent(
                       DWORD dwDrawAspect,
                                 SIZEL *psizel) = 0;

        virtual HRESULT __stdcall GetExtent(
                       DWORD dwDrawAspect,
                                   SIZEL *psizel) = 0;

        virtual HRESULT __stdcall Advise(
                                             IAdviseSink *pAdvSink,
                                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall Unadvise(
                       DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumAdvise(
                                             IEnumSTATDATA **ppenumAdvise) = 0;

        virtual HRESULT __stdcall GetMiscStatus(
                       DWORD dwAspect,
                                   DWORD *pdwStatus) = 0;

        virtual HRESULT __stdcall SetColorScheme(
                                 LOGPALETTE *pLogpal) = 0;

    };
# 1498 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef
enum tagOLERENDER
    {
        OLERENDER_NONE = 0,
        OLERENDER_DRAW = 1,
        OLERENDER_FORMAT = 2,
        OLERENDER_ASIS = 3
    } OLERENDER;

typedef OLERENDER *LPOLERENDER;

typedef struct tagOBJECTDESCRIPTOR
    {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
    } OBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;



extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
# 1543 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IOleWindow *LPOLEWINDOW;


extern "C" const IID IID_IOleWindow;



    struct __declspec(uuid("00000114-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleWindow : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow(
                                             HWND *phwnd) = 0;

        virtual HRESULT __stdcall ContextSensitiveHelp(
                       BOOL fEnterMode) = 0;

    };
# 1635 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IOleLink *LPOLELINK;

typedef
enum tagOLEUPDATE
    {
        OLEUPDATE_ALWAYS = 1,
        OLEUPDATE_ONCALL = 3
    } OLEUPDATE;

typedef OLEUPDATE *LPOLEUPDATE;

typedef OLEUPDATE *POLEUPDATE;

typedef
enum tagOLELINKBIND
    {
        OLELINKBIND_EVENIFCLASSDIFF = 1
    } OLELINKBIND;


extern "C" const IID IID_IOleLink;



    struct __declspec(uuid("0000011d-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleLink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetUpdateOptions(
                       DWORD dwUpdateOpt) = 0;

        virtual HRESULT __stdcall GetUpdateOptions(
                                   DWORD *pdwUpdateOpt) = 0;

        virtual HRESULT __stdcall SetSourceMoniker(
                                             IMoniker *pmk,
                                 const IID & rclsid) = 0;

        virtual HRESULT __stdcall GetSourceMoniker(
                                             IMoniker **ppmk) = 0;

        virtual HRESULT __stdcall SetSourceDisplayName(
                                 LPCOLESTR pszStatusText) = 0;

        virtual HRESULT __stdcall GetSourceDisplayName(
                                             LPOLESTR *ppszDisplayName) = 0;

        virtual HRESULT __stdcall BindToSource(
                       DWORD bindflags,
                                             IBindCtx *pbc) = 0;

        virtual HRESULT __stdcall BindIfRunning( void) = 0;

        virtual HRESULT __stdcall GetBoundSource(
                                             IUnknown **ppunk) = 0;

        virtual HRESULT __stdcall UnbindSource( void) = 0;

        virtual HRESULT __stdcall Update(
                                             IBindCtx *pbc) = 0;

    };
# 1834 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IOleItemContainer *LPOLEITEMCONTAINER;

typedef
enum tagBINDSPEED
    {
        BINDSPEED_INDEFINITE = 1,
        BINDSPEED_MODERATE = 2,
        BINDSPEED_IMMEDIATE = 3
    } BINDSPEED;

typedef
enum tagOLECONTF
    {
        OLECONTF_EMBEDDINGS = 1,
        OLECONTF_LINKS = 2,
        OLECONTF_OTHERS = 4,
        OLECONTF_ONLYUSER = 8,
        OLECONTF_ONLYIFRUNNING = 16
    } OLECONTF;


extern "C" const IID IID_IOleItemContainer;



    struct __declspec(uuid("0000011c-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleItemContainer : public IOleContainer
    {
    public:
        virtual HRESULT __stdcall GetObjectW(
                                 LPOLESTR pszItem,
                       DWORD dwSpeedNeeded,
                                             IBindCtx *pbc,
                                 const IID & riid,
                                                     void **ppvObject) = 0;

        virtual HRESULT __stdcall GetObjectStorage(
                                 LPOLESTR pszItem,
                                             IBindCtx *pbc,
                                 const IID & riid,
                                                     void **ppvStorage) = 0;

        virtual HRESULT __stdcall IsRunning(
                                 LPOLESTR pszItem) = 0;

    };
# 1995 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;

typedef RECT BORDERWIDTHS;

typedef LPRECT LPBORDERWIDTHS;

typedef LPCRECT LPCBORDERWIDTHS;


extern "C" const IID IID_IOleInPlaceUIWindow;



    struct __declspec(uuid("00000115-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceUIWindow : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall GetBorder(
                                   LPRECT lprectBorder) = 0;

        virtual HRESULT __stdcall RequestBorderSpace(
                                             LPCBORDERWIDTHS pborderwidths) = 0;

        virtual HRESULT __stdcall SetBorderSpace(
                                             LPCBORDERWIDTHS pborderwidths) = 0;

        virtual HRESULT __stdcall SetActiveObject(
                                             IOleInPlaceActiveObject *pActiveObject,
                                                            LPCOLESTR pszObjName) = 0;

    };
# 2130 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;


extern "C" const IID IID_IOleInPlaceActiveObject;



    struct __declspec(uuid("00000117-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceActiveObject : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall TranslateAcceleratorW(

                      LPMSG lpmsg) = 0;

        virtual HRESULT __stdcall OnFrameWindowActivate(
                       BOOL fActivate) = 0;

        virtual HRESULT __stdcall OnDocWindowActivate(
                       BOOL fActivate) = 0;

        virtual HRESULT __stdcall ResizeBorder(

                  LPCRECT prcBorder,

                  IOleInPlaceUIWindow *pUIWindow,

                  BOOL fFrameWindow) = 0;

        virtual HRESULT __stdcall EnableModeless(
                       BOOL fEnable) = 0;

    };
# 2269 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
                HRESULT __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
              IOleInPlaceActiveObject * This);


void __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                            HRESULT __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
              IOleInPlaceActiveObject * This,
                         LPCRECT prcBorder,
                         const IID & riid,
                                             IOleInPlaceUIWindow *pUIWindow,
               BOOL fFrameWindow);


void __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2305 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;

typedef struct tagOIFI
    {
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
    } OLEINPLACEFRAMEINFO;

typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;

typedef struct tagOleMenuGroupWidths
    {
    LONG width[ 6 ];
    } OLEMENUGROUPWIDTHS;

typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;

typedef HGLOBAL HOLEMENU;


extern "C" const IID IID_IOleInPlaceFrame;



    struct __declspec(uuid("00000116-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceFrame : public IOleInPlaceUIWindow
    {
    public:
        virtual HRESULT __stdcall InsertMenus(
                                 HMENU hmenuShared,
                                         LPOLEMENUGROUPWIDTHS lpMenuWidths) = 0;

        virtual HRESULT __stdcall SetMenu(
                                 HMENU hmenuShared,
                                 HOLEMENU holemenu,
                                 HWND hwndActiveObject) = 0;

        virtual HRESULT __stdcall RemoveMenus(
                                 HMENU hmenuShared) = 0;

        virtual HRESULT __stdcall SetStatusText(
                                             LPCOLESTR pszStatusText) = 0;

        virtual HRESULT __stdcall EnableModeless(
                       BOOL fEnable) = 0;

        virtual HRESULT __stdcall TranslateAcceleratorW(
                                 LPMSG lpmsg,
                       WORD wID) = 0;

    };
# 2510 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;


extern "C" const IID IID_IOleInPlaceObject;



    struct __declspec(uuid("00000113-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceObject : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall InPlaceDeactivate( void) = 0;

        virtual HRESULT __stdcall UIDeactivate( void) = 0;

        virtual HRESULT __stdcall SetObjectRects(
                                 LPCRECT lprcPosRect,
                                 LPCRECT lprcClipRect) = 0;

        virtual HRESULT __stdcall ReactivateAndUndo( void) = 0;

    };
# 2633 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IOleInPlaceSite *LPOLEINPLACESITE;


extern "C" const IID IID_IOleInPlaceSite;



    struct __declspec(uuid("00000119-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceSite : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall CanInPlaceActivate( void) = 0;

        virtual HRESULT __stdcall OnInPlaceActivate( void) = 0;

        virtual HRESULT __stdcall OnUIActivate( void) = 0;

        virtual HRESULT __stdcall GetWindowContext(
                                             IOleInPlaceFrame **ppFrame,
                                             IOleInPlaceUIWindow **ppDoc,
                                   LPRECT lprcPosRect,
                                   LPRECT lprcClipRect,
                                         LPOLEINPLACEFRAMEINFO lpFrameInfo) = 0;

        virtual HRESULT __stdcall Scroll(
                       SIZE scrollExtant) = 0;

        virtual HRESULT __stdcall OnUIDeactivate(
                       BOOL fUndoable) = 0;

        virtual HRESULT __stdcall OnInPlaceDeactivate( void) = 0;

        virtual HRESULT __stdcall DiscardUndoState( void) = 0;

        virtual HRESULT __stdcall DeactivateAndUndo( void) = 0;

        virtual HRESULT __stdcall OnPosRectChange(
                                 LPCRECT lprcPosRect) = 0;

    };
# 2817 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
extern "C" const IID IID_IContinue;



    struct __declspec(uuid("0000012a-0000-0000-C000-000000000046")) __declspec(novtable)
    IContinue : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FContinue( void) = 0;

    };
# 2894 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IViewObject *LPVIEWOBJECT;


extern "C" const IID IID_IViewObject;



    struct __declspec(uuid("0000010d-0000-0000-C000-000000000046")) __declspec(novtable)
    IViewObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Draw(

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                      DVTARGETDEVICE *ptd,

                      HDC hdcTargetDev,

                  HDC hdcDraw,

                      LPCRECTL lprcBounds,

                      LPCRECTL lprcWBounds,

                      BOOL ( __stdcall *pfnContinue )(
                ULONG_PTR dwContinue),

                  ULONG_PTR dwContinue) = 0;

        virtual HRESULT __stdcall GetColorSet(

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                      DVTARGETDEVICE *ptd,

                      HDC hicTargetDev,

                      LOGPALETTE **ppColorSet) = 0;

        virtual HRESULT __stdcall Freeze(

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                   DWORD *pdwFreeze) = 0;

        virtual HRESULT __stdcall Unfreeze(
                       DWORD dwFreeze) = 0;

        virtual HRESULT __stdcall SetAdvise(
                       DWORD aspects,
                       DWORD advf,
                                             IAdviseSink *pAdvSink) = 0;

        virtual HRESULT __stdcall GetAdvise(

                       DWORD *pAspects,

                       DWORD *pAdvf,

                      IAdviseSink **ppAdvSink) = 0;

    };
# 3106 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
                HRESULT __stdcall IViewObject_RemoteDraw_Proxy(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
                         HDC hdcTargetDev,
                         HDC hdcDraw,
                                     LPCRECTL lprcBounds,
                                     LPCRECTL lprcWBounds,
                             IContinue *pContinue);


void __stdcall IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IViewObject_RemoteGetColorSet_Proxy(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
               ULONG_PTR hicTargetDev,
                                     LOGPALETTE **ppColorSet);


void __stdcall IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IViewObject_RemoteFreeze_Proxy(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                           DWORD *pdwFreeze);


void __stdcall IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IViewObject_RemoteGetAdvise_Proxy(
              IViewObject * This,
                           DWORD *pAspects,
                           DWORD *pAdvf,
                                     IAdviseSink **ppAdvSink);


void __stdcall IViewObject_RemoteGetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3182 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IViewObject2 *LPVIEWOBJECT2;


extern "C" const IID IID_IViewObject2;



    struct __declspec(uuid("00000127-0000-0000-C000-000000000046")) __declspec(novtable)
    IViewObject2 : public IViewObject
    {
    public:
        virtual HRESULT __stdcall GetExtent(
                       DWORD dwDrawAspect,
                       LONG lindex,
                                             DVTARGETDEVICE *ptd,
                                   LPSIZEL lpsizel) = 0;

    };
# 3358 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IDropSource *LPDROPSOURCE;


extern "C" const IID IID_IDropSource;



    struct __declspec(uuid("00000121-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropSource : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryContinueDrag(

                  BOOL fEscapePressed,

                  DWORD grfKeyState) = 0;

        virtual HRESULT __stdcall GiveFeedback(

                  DWORD dwEffect) = 0;

    };
# 3458 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
typedef IDropTarget *LPDROPTARGET;
# 3493 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
extern "C" const IID IID_IDropTarget;



    struct __declspec(uuid("00000122-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropTarget : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DragEnter(
                                             IDataObject *pDataObj,
                       DWORD grfKeyState,
                       POINTL pt,
                                         DWORD *pdwEffect) = 0;

        virtual HRESULT __stdcall DragOver(
                       DWORD grfKeyState,
                       POINTL pt,
                                         DWORD *pdwEffect) = 0;

        virtual HRESULT __stdcall DragLeave( void) = 0;

        virtual HRESULT __stdcall Drop(
                                             IDataObject *pDataObj,
                       DWORD grfKeyState,
                       POINTL pt,
                                         DWORD *pdwEffect) = 0;

    };
# 3617 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
extern "C" const IID IID_IDropSourceNotify;



    struct __declspec(uuid("0000012B-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropSourceNotify : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DragEnterTarget(

                  HWND hwndTarget) = 0;

        virtual HRESULT __stdcall DragLeaveTarget( void) = 0;

    };
# 3709 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0023_v0_0_s_ifspec;







typedef IEnumOLEVERB *LPENUMOLEVERB;

typedef struct tagOLEVERB
    {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
    } OLEVERB;

typedef struct tagOLEVERB *LPOLEVERB;

typedef
enum tagOLEVERBATTRIB
    {
        OLEVERBATTRIB_NEVERDIRTIES = 1,
        OLEVERBATTRIB_ONCONTAINERMENU = 2
    } OLEVERBATTRIB;


extern "C" const IID IID_IEnumOLEVERB;



    struct __declspec(uuid("00000104-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumOLEVERB : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(

                  ULONG celt,

                                                  LPOLEVERB rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumOLEVERB **ppenum) = 0;

    };
# 3845 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
                HRESULT __stdcall IEnumOLEVERB_RemoteNext_Proxy(
              IEnumOLEVERB * This,
               ULONG celt,
                                                                                LPOLEVERB rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3870 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oleidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec;



unsigned long __stdcall CLIPFORMAT_UserSize( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall HACCEL_UserSize( unsigned long *, unsigned long , HACCEL * );
unsigned char * __stdcall HACCEL_UserMarshal( unsigned long *, unsigned char *, HACCEL * );
unsigned char * __stdcall HACCEL_UserUnmarshal( unsigned long *, unsigned char *, HACCEL * );
void __stdcall HACCEL_UserFree( unsigned long *, HACCEL * );

unsigned long __stdcall HDC_UserSize( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree( unsigned long *, HDC * );

unsigned long __stdcall HGLOBAL_UserSize( unsigned long *, unsigned long , HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserMarshal( unsigned long *, unsigned char *, HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserUnmarshal( unsigned long *, unsigned char *, HGLOBAL * );
void __stdcall HGLOBAL_UserFree( unsigned long *, HGLOBAL * );

unsigned long __stdcall HMENU_UserSize( unsigned long *, unsigned long , HMENU * );
unsigned char * __stdcall HMENU_UserMarshal( unsigned long *, unsigned char *, HMENU * );
unsigned char * __stdcall HMENU_UserUnmarshal( unsigned long *, unsigned char *, HMENU * );
void __stdcall HMENU_UserFree( unsigned long *, HMENU * );

unsigned long __stdcall HWND_UserSize( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree( unsigned long *, HWND * );

unsigned long __stdcall STGMEDIUM_UserSize( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree( unsigned long *, STGMEDIUM * );

unsigned long __stdcall CLIPFORMAT_UserSize64( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree64( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall HACCEL_UserSize64( unsigned long *, unsigned long , HACCEL * );
unsigned char * __stdcall HACCEL_UserMarshal64( unsigned long *, unsigned char *, HACCEL * );
unsigned char * __stdcall HACCEL_UserUnmarshal64( unsigned long *, unsigned char *, HACCEL * );
void __stdcall HACCEL_UserFree64( unsigned long *, HACCEL * );

unsigned long __stdcall HDC_UserSize64( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal64( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal64( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree64( unsigned long *, HDC * );

unsigned long __stdcall HGLOBAL_UserSize64( unsigned long *, unsigned long , HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserMarshal64( unsigned long *, unsigned char *, HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserUnmarshal64( unsigned long *, unsigned char *, HGLOBAL * );
void __stdcall HGLOBAL_UserFree64( unsigned long *, HGLOBAL * );

unsigned long __stdcall HMENU_UserSize64( unsigned long *, unsigned long , HMENU * );
unsigned char * __stdcall HMENU_UserMarshal64( unsigned long *, unsigned char *, HMENU * );
unsigned char * __stdcall HMENU_UserUnmarshal64( unsigned long *, unsigned char *, HMENU * );
void __stdcall HMENU_UserFree64( unsigned long *, HMENU * );

unsigned long __stdcall HWND_UserSize64( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal64( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal64( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree64( unsigned long *, HWND * );

unsigned long __stdcall STGMEDIUM_UserSize64( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree64( unsigned long *, STGMEDIUM * );

              HRESULT __stdcall IOleCache2_UpdateCache_Proxy(
    IOleCache2 * This,

          LPDATAOBJECT pDataObject,

          DWORD grfUpdf,

                LPVOID pReserved);


                HRESULT __stdcall IOleCache2_UpdateCache_Stub(
              IOleCache2 * This,
                             LPDATAOBJECT pDataObject,
               DWORD grfUpdf,
               LONG_PTR pReserved);

              HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
    IOleInPlaceActiveObject * This,

              LPMSG lpmsg);


                HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Stub(
              IOleInPlaceActiveObject * This);

              HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Proxy(
    IOleInPlaceActiveObject * This,

          LPCRECT prcBorder,

          IOleInPlaceUIWindow *pUIWindow,

          BOOL fFrameWindow);


                            HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Stub(
              IOleInPlaceActiveObject * This,
                         LPCRECT prcBorder,
                         const IID & riid,
                                             IOleInPlaceUIWindow *pUIWindow,
               BOOL fFrameWindow);

              HRESULT __stdcall IViewObject_Draw_Proxy(
    IViewObject * This,

          DWORD dwDrawAspect,

          LONG lindex,

            void *pvAspect,

              DVTARGETDEVICE *ptd,

              HDC hdcTargetDev,

          HDC hdcDraw,

              LPCRECTL lprcBounds,

              LPCRECTL lprcWBounds,

              BOOL ( __stdcall *pfnContinue )(
        ULONG_PTR dwContinue),

          ULONG_PTR dwContinue);


                HRESULT __stdcall IViewObject_Draw_Stub(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
                         HDC hdcTargetDev,
                         HDC hdcDraw,
                                     LPCRECTL lprcBounds,
                                     LPCRECTL lprcWBounds,
                             IContinue *pContinue);

              HRESULT __stdcall IViewObject_GetColorSet_Proxy(
    IViewObject * This,

          DWORD dwDrawAspect,

          LONG lindex,

            void *pvAspect,

              DVTARGETDEVICE *ptd,

              HDC hicTargetDev,

              LOGPALETTE **ppColorSet);


                HRESULT __stdcall IViewObject_GetColorSet_Stub(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
               ULONG_PTR hicTargetDev,
                                     LOGPALETTE **ppColorSet);

              HRESULT __stdcall IViewObject_Freeze_Proxy(
    IViewObject * This,

          DWORD dwDrawAspect,

          LONG lindex,

            void *pvAspect,

           DWORD *pdwFreeze);


                HRESULT __stdcall IViewObject_Freeze_Stub(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                           DWORD *pdwFreeze);

              HRESULT __stdcall IViewObject_GetAdvise_Proxy(
    IViewObject * This,

               DWORD *pAspects,

               DWORD *pAdvf,

              IAdviseSink **ppAdvSink);


                HRESULT __stdcall IViewObject_GetAdvise_Stub(
              IViewObject * This,
                           DWORD *pAspects,
                           DWORD *pAdvf,
                                     IAdviseSink **ppAdvSink);

              HRESULT __stdcall IEnumOLEVERB_Next_Proxy(
    IEnumOLEVERB * This,

          ULONG celt,

                                          LPOLEVERB rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumOLEVERB_Next_Stub(
              IEnumOLEVERB * This,
               ULONG celt,
                                                                                LPOLEVERB rgelt,
                           ULONG *pceltFetched);






}
# 423 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/servprov.h" 1








#pragma warning(disable: 4049)
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/servprov.h"
typedef struct IServiceProvider IServiceProvider;
# 54 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/servprov.h"
extern "C"{
# 72 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/servprov.h"
#pragma comment(lib,"uuid.lib")
# 83 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/servprov.h"
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec;







typedef IServiceProvider *LPSERVICEPROVIDER;


    extern "C" const IID IID_IServiceProvider;
    extern "C++"
    {
        struct __declspec(uuid("6d5140c1-7436-11ce-8034-00aa006009fa")) __declspec(novtable)
        IServiceProvider : public IUnknown
        {
        public:
            virtual HRESULT __stdcall QueryService(
                                const GUID & guidService,
                                const IID & riid,
                                     void * *ppvObject) = 0;

            template <class Q>
            HRESULT __stdcall QueryService( const GUID & guidService, Q** pp)
            {
                return QueryService(guidService, __uuidof(Q), (void **)pp);
            }
        };
    }

                    HRESULT __stdcall IServiceProvider_RemoteQueryService_Proxy(
             IServiceProvider * This,
                        const GUID & guidService,
                        const IID & riid,
                                     IUnknown * *ppvObject);

    void __stdcall IServiceProvider_RemoteQueryService_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);
# 234 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/servprov.h"
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec;



              HRESULT __stdcall IServiceProvider_QueryService_Proxy(
    IServiceProvider * This,

          const GUID & guidService,

          const IID & riid,

              void **ppvObject);


                HRESULT __stdcall IServiceProvider_QueryService_Stub(
              IServiceProvider * This,
                         const GUID & guidService,
                         const IID & riid,
                                             IUnknown **ppvObject);






}
# 424 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h" 1








#pragma warning(disable: 4049)
# 41 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
typedef struct IXMLDOMImplementation IXMLDOMImplementation;






typedef struct IXMLDOMNode IXMLDOMNode;






typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;






typedef struct IXMLDOMDocument IXMLDOMDocument;






typedef struct IXMLDOMNodeList IXMLDOMNodeList;






typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;






typedef struct IXMLDOMCharacterData IXMLDOMCharacterData;






typedef struct IXMLDOMAttribute IXMLDOMAttribute;






typedef struct IXMLDOMElement IXMLDOMElement;






typedef struct IXMLDOMText IXMLDOMText;






typedef struct IXMLDOMComment IXMLDOMComment;






typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;






typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;






typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;






typedef struct IXMLDOMNotation IXMLDOMNotation;






typedef struct IXMLDOMEntity IXMLDOMEntity;






typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;






typedef struct IXMLDOMParseError IXMLDOMParseError;






typedef struct IXTLRuntime IXTLRuntime;






typedef struct XMLDOMDocumentEvents XMLDOMDocumentEvents;
# 183 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
typedef class DOMDocument DOMDocument;
# 195 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
typedef class DOMFreeThreadedDocument DOMFreeThreadedDocument;
# 205 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
typedef struct IXMLHttpRequest IXMLHttpRequest;
# 214 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
typedef class XMLHTTPRequest XMLHTTPRequest;
# 224 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
typedef struct IXMLDSOControl IXMLDSOControl;
# 233 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
typedef class XMLDSOControl XMLDSOControl;
# 243 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
typedef struct IXMLElementCollection IXMLElementCollection;






typedef struct IXMLDocument IXMLDocument;






typedef struct IXMLDocument2 IXMLDocument2;






typedef struct IXMLElement IXMLElement;






typedef struct IXMLElement2 IXMLElement2;






typedef struct IXMLAttribute IXMLAttribute;






typedef struct IXMLError IXMLError;
# 294 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
typedef class XMLDocument XMLDocument;
# 305 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h" 1








#pragma warning(disable: 4049)
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef struct ICreateTypeInfo ICreateTypeInfo;






typedef struct ICreateTypeInfo2 ICreateTypeInfo2;






typedef struct ICreateTypeLib ICreateTypeLib;






typedef struct ICreateTypeLib2 ICreateTypeLib2;






typedef struct IDispatch IDispatch;






typedef struct IEnumVARIANT IEnumVARIANT;






typedef struct ITypeComp ITypeComp;






typedef struct ITypeInfo ITypeInfo;






typedef struct ITypeInfo2 ITypeInfo2;






typedef struct ITypeLib ITypeLib;






typedef struct ITypeLib2 ITypeLib2;






typedef struct ITypeChangeEvents ITypeChangeEvents;






typedef struct IErrorInfo IErrorInfo;






typedef struct ICreateErrorInfo ICreateErrorInfo;






typedef struct ISupportErrorInfo ISupportErrorInfo;






typedef struct ITypeFactory ITypeFactory;






typedef struct ITypeMarshal ITypeMarshal;






typedef struct IRecordInfo IRecordInfo;






typedef struct IErrorLog IErrorLog;






typedef struct IPropertyBag IPropertyBag;
# 187 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
extern "C"{
# 203 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
#pragma warning(push)

#pragma warning(disable: 4201)
# 244 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec;







typedef CY CURRENCY;

typedef struct tagSAFEARRAYBOUND
    {
    ULONG cElements;
    LONG lLbound;
    } SAFEARRAYBOUND;

typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;


typedef struct _wireVARIANT *wireVARIANT;

typedef struct _wireBRECORD *wireBRECORD;

typedef struct _wireSAFEARR_BSTR
    {
    ULONG Size;
                         wireBSTR *aBstr;
    } SAFEARR_BSTR;

typedef struct _wireSAFEARR_UNKNOWN
    {
    ULONG Size;
                         IUnknown **apUnknown;
    } SAFEARR_UNKNOWN;

typedef struct _wireSAFEARR_DISPATCH
    {
    ULONG Size;
                         IDispatch **apDispatch;
    } SAFEARR_DISPATCH;

typedef struct _wireSAFEARR_VARIANT
    {
    ULONG Size;
                         wireVARIANT *aVariant;
    } SAFEARR_VARIANT;

typedef struct _wireSAFEARR_BRECORD
    {
    ULONG Size;
                         wireBRECORD *aRecord;
    } SAFEARR_BRECORD;

typedef struct _wireSAFEARR_HAVEIID
    {
    ULONG Size;
                         IUnknown **apUnknown;
    IID iid;
    } SAFEARR_HAVEIID;

typedef
enum tagSF_TYPE
    {
        SF_ERROR = VT_ERROR,
        SF_I1 = VT_I1,
        SF_I2 = VT_I2,
        SF_I4 = VT_I4,
        SF_I8 = VT_I8,
        SF_BSTR = VT_BSTR,
        SF_UNKNOWN = VT_UNKNOWN,
        SF_DISPATCH = VT_DISPATCH,
        SF_VARIANT = VT_VARIANT,
        SF_RECORD = VT_RECORD,
        SF_HAVEIID = ( VT_UNKNOWN | VT_RESERVED )
    } SF_TYPE;

typedef struct _wireSAFEARRAY_UNION
    {
    ULONG sfType;
                                          union __MIDL_IOleAutomationTypes_0001
        {
                       SAFEARR_BSTR BstrStr;
                       SAFEARR_UNKNOWN UnknownStr;
                       SAFEARR_DISPATCH DispatchStr;
                       SAFEARR_VARIANT VariantStr;
                       SAFEARR_BRECORD RecordStr;
                       SAFEARR_HAVEIID HaveIidStr;
                       BYTE_SIZEDARR ByteStr;
                       WORD_SIZEDARR WordStr;
                       DWORD_SIZEDARR LongStr;
                       HYPER_SIZEDARR HyperStr;
        } u;
    } SAFEARRAYUNION;

typedef struct _wireSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
                    SAFEARRAYBOUND rgsabound[ 1 ];
    } *wireSAFEARRAY;

typedef wireSAFEARRAY *wirePSAFEARRAY;

typedef struct tagSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[ 1 ];
    } SAFEARRAY;

typedef SAFEARRAY *LPSAFEARRAY;
# 452 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef struct tagVARIANT VARIANT;

struct tagVARIANT
    {
    union
        {
        struct
            {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union
                {
                LONGLONG llVal;
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;

                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                LONGLONG *pllVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;

                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                BSTR *pbstrVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                VARIANT *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                ULONGLONG ullVal;
                INT intVal;
                UINT uintVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                ULONGLONG *pullVal;
                INT *pintVal;
                UINT *puintVal;
                struct
                    {
                    PVOID pvRecord;
                    IRecordInfo *pRecInfo;
                    } ;
                } ;
            } ;
        DECIMAL decVal;
        } ;
    } ;
typedef VARIANT *LPVARIANT;

typedef VARIANT VARIANTARG;

typedef VARIANT *LPVARIANTARG;
# 544 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
struct _wireBRECORD
    {
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo *pRecInfo;
                    byte *pRecord;
    } ;
struct _wireVARIANT
    {
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
                                   union
        {
                       LONGLONG llVal;
                       LONG lVal;
                       BYTE bVal;
                       SHORT iVal;
                       FLOAT fltVal;
                       DOUBLE dblVal;
                       VARIANT_BOOL boolVal;
                       SCODE scode;
                       CY cyVal;
                       DATE date;
                       wireBSTR bstrVal;
                       IUnknown *punkVal;
                       IDispatch *pdispVal;
                       wirePSAFEARRAY parray;
                       wireBRECORD brecVal;
                       BYTE *pbVal;
                       SHORT *piVal;
                       LONG *plVal;
                       LONGLONG *pllVal;
                       FLOAT *pfltVal;
                       DOUBLE *pdblVal;
                       VARIANT_BOOL *pboolVal;
                       SCODE *pscode;
                       CY *pcyVal;
                       DATE *pdate;
                       wireBSTR *pbstrVal;
                       IUnknown **ppunkVal;
                       IDispatch **ppdispVal;
                       wirePSAFEARRAY *pparray;
                       wireVARIANT *pvarVal;
                       CHAR cVal;
                       USHORT uiVal;
                       ULONG ulVal;
                       ULONGLONG ullVal;
                       INT intVal;
                       UINT uintVal;
                       DECIMAL decVal;
                       DECIMAL *pdecVal;
                       CHAR *pcVal;
                       USHORT *puiVal;
                       ULONG *pulVal;
                       ULONGLONG *pullVal;
                       INT *pintVal;
                       UINT *puintVal;


        } ;
    } ;
typedef LONG DISPID;

typedef DISPID MEMBERID;

typedef DWORD HREFTYPE;

typedef
enum tagTYPEKIND
    {
        TKIND_ENUM = 0,
        TKIND_RECORD = ( TKIND_ENUM + 1 ) ,
        TKIND_MODULE = ( TKIND_RECORD + 1 ) ,
        TKIND_INTERFACE = ( TKIND_MODULE + 1 ) ,
        TKIND_DISPATCH = ( TKIND_INTERFACE + 1 ) ,
        TKIND_COCLASS = ( TKIND_DISPATCH + 1 ) ,
        TKIND_ALIAS = ( TKIND_COCLASS + 1 ) ,
        TKIND_UNION = ( TKIND_ALIAS + 1 ) ,
        TKIND_MAX = ( TKIND_UNION + 1 )
    } TYPEKIND;

typedef struct tagTYPEDESC
    {
                                   union
        {
                       struct tagTYPEDESC *lptdesc;
                       struct tagARRAYDESC *lpadesc;
                       HREFTYPE hreftype;

        } ;
    VARTYPE vt;
    } TYPEDESC;

typedef struct tagARRAYDESC
    {
    TYPEDESC tdescElem;
    USHORT cDims;
                    SAFEARRAYBOUND rgbounds[ 1 ];
    } ARRAYDESC;

typedef struct tagPARAMDESCEX
    {
    ULONG cBytes;
    VARIANTARG varDefaultValue;
    } PARAMDESCEX;

typedef struct tagPARAMDESCEX *LPPARAMDESCEX;

typedef struct tagPARAMDESC
    {
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
    } PARAMDESC;

typedef struct tagPARAMDESC *LPPARAMDESC;
# 680 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef struct tagIDLDESC
    {
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
    } IDLDESC;

typedef struct tagIDLDESC *LPIDLDESC;
# 709 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef struct tagELEMDESC {
    TYPEDESC tdesc;
    union {
        IDLDESC idldesc;
        PARAMDESC paramdesc;
    } ;
} ELEMDESC, * LPELEMDESC;



typedef struct tagTYPEATTR
    {
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
    } TYPEATTR;

typedef struct tagTYPEATTR *LPTYPEATTR;

typedef struct tagDISPPARAMS
    {
                    VARIANTARG *rgvarg;
                    DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
    } DISPPARAMS;
# 770 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef struct tagEXCEPINFO {
    WORD wCode;
    WORD wReserved;
    BSTR bstrSource;
    BSTR bstrDescription;
    BSTR bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT (__stdcall *pfnDeferredFillIn)(struct tagEXCEPINFO *);
    SCODE scode;
} EXCEPINFO, * LPEXCEPINFO;



typedef
enum tagCALLCONV
    {
        CC_FASTCALL = 0,
        CC_CDECL = 1,
        CC_MSCPASCAL = ( CC_CDECL + 1 ) ,
        CC_PASCAL = CC_MSCPASCAL,
        CC_MACPASCAL = ( CC_PASCAL + 1 ) ,
        CC_STDCALL = ( CC_MACPASCAL + 1 ) ,
        CC_FPFASTCALL = ( CC_STDCALL + 1 ) ,
        CC_SYSCALL = ( CC_FPFASTCALL + 1 ) ,
        CC_MPWCDECL = ( CC_SYSCALL + 1 ) ,
        CC_MPWPASCAL = ( CC_MPWCDECL + 1 ) ,
        CC_MAX = ( CC_MPWPASCAL + 1 )
    } CALLCONV;

typedef
enum tagFUNCKIND
    {
        FUNC_VIRTUAL = 0,
        FUNC_PUREVIRTUAL = ( FUNC_VIRTUAL + 1 ) ,
        FUNC_NONVIRTUAL = ( FUNC_PUREVIRTUAL + 1 ) ,
        FUNC_STATIC = ( FUNC_NONVIRTUAL + 1 ) ,
        FUNC_DISPATCH = ( FUNC_STATIC + 1 )
    } FUNCKIND;

typedef
enum tagINVOKEKIND
    {
        INVOKE_FUNC = 1,
        INVOKE_PROPERTYGET = 2,
        INVOKE_PROPERTYPUT = 4,
        INVOKE_PROPERTYPUTREF = 8
    } INVOKEKIND;

typedef struct tagFUNCDESC
    {
    MEMBERID memid;
                    SCODE *lprgscode;
                    ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
    } FUNCDESC;

typedef struct tagFUNCDESC *LPFUNCDESC;

typedef
enum tagVARKIND
    {
        VAR_PERINSTANCE = 0,
        VAR_STATIC = ( VAR_PERINSTANCE + 1 ) ,
        VAR_CONST = ( VAR_STATIC + 1 ) ,
        VAR_DISPATCH = ( VAR_CONST + 1 )
    } VARKIND;
# 854 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef struct tagVARDESC
    {
    MEMBERID memid;
    LPOLESTR lpstrSchema;
                                   union
        {
                       ULONG oInst;
                       VARIANT *lpvarValue;
        } ;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
    } VARDESC;

typedef struct tagVARDESC *LPVARDESC;

typedef
enum tagTYPEFLAGS
    {
        TYPEFLAG_FAPPOBJECT = 0x1,
        TYPEFLAG_FCANCREATE = 0x2,
        TYPEFLAG_FLICENSED = 0x4,
        TYPEFLAG_FPREDECLID = 0x8,
        TYPEFLAG_FHIDDEN = 0x10,
        TYPEFLAG_FCONTROL = 0x20,
        TYPEFLAG_FDUAL = 0x40,
        TYPEFLAG_FNONEXTENSIBLE = 0x80,
        TYPEFLAG_FOLEAUTOMATION = 0x100,
        TYPEFLAG_FRESTRICTED = 0x200,
        TYPEFLAG_FAGGREGATABLE = 0x400,
        TYPEFLAG_FREPLACEABLE = 0x800,
        TYPEFLAG_FDISPATCHABLE = 0x1000,
        TYPEFLAG_FREVERSEBIND = 0x2000,
        TYPEFLAG_FPROXY = 0x4000
    } TYPEFLAGS;

typedef
enum tagFUNCFLAGS
    {
        FUNCFLAG_FRESTRICTED = 0x1,
        FUNCFLAG_FSOURCE = 0x2,
        FUNCFLAG_FBINDABLE = 0x4,
        FUNCFLAG_FREQUESTEDIT = 0x8,
        FUNCFLAG_FDISPLAYBIND = 0x10,
        FUNCFLAG_FDEFAULTBIND = 0x20,
        FUNCFLAG_FHIDDEN = 0x40,
        FUNCFLAG_FUSESGETLASTERROR = 0x80,
        FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
        FUNCFLAG_FUIDEFAULT = 0x200,
        FUNCFLAG_FNONBROWSABLE = 0x400,
        FUNCFLAG_FREPLACEABLE = 0x800,
        FUNCFLAG_FIMMEDIATEBIND = 0x1000
    } FUNCFLAGS;

typedef
enum tagVARFLAGS
    {
        VARFLAG_FREADONLY = 0x1,
        VARFLAG_FSOURCE = 0x2,
        VARFLAG_FBINDABLE = 0x4,
        VARFLAG_FREQUESTEDIT = 0x8,
        VARFLAG_FDISPLAYBIND = 0x10,
        VARFLAG_FDEFAULTBIND = 0x20,
        VARFLAG_FHIDDEN = 0x40,
        VARFLAG_FRESTRICTED = 0x80,
        VARFLAG_FDEFAULTCOLLELEM = 0x100,
        VARFLAG_FUIDEFAULT = 0x200,
        VARFLAG_FNONBROWSABLE = 0x400,
        VARFLAG_FREPLACEABLE = 0x800,
        VARFLAG_FIMMEDIATEBIND = 0x1000
    } VARFLAGS;

typedef struct tagCLEANLOCALSTORAGE
    {
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
    } CLEANLOCALSTORAGE;

typedef struct tagCUSTDATAITEM
    {
    GUID guid;
    VARIANTARG varValue;
    } CUSTDATAITEM;

typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;

typedef struct tagCUSTDATA
    {
    DWORD cCustData;
                    LPCUSTDATAITEM prgCustData;
    } CUSTDATA;

typedef struct tagCUSTDATA *LPCUSTDATA;



extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
# 964 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec;







typedef ICreateTypeInfo *LPCREATETYPEINFO;


extern "C" const IID IID_ICreateTypeInfo;



    struct __declspec(uuid("00020405-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetGuid(
                       const GUID & guid) = 0;

        virtual HRESULT __stdcall SetTypeFlags(
                       UINT uTypeFlags) = 0;

        virtual HRESULT __stdcall SetDocString(

                       LPOLESTR pStrDoc) = 0;

        virtual HRESULT __stdcall SetHelpContext(
                       DWORD dwHelpContext) = 0;

        virtual HRESULT __stdcall SetVersion(
                       WORD wMajorVerNum,
                       WORD wMinorVerNum) = 0;

        virtual HRESULT __stdcall AddRefTypeInfo(
                       ITypeInfo *pTInfo,
                       HREFTYPE *phRefType) = 0;

        virtual HRESULT __stdcall AddFuncDesc(
                       UINT index,
                       FUNCDESC *pFuncDesc) = 0;

        virtual HRESULT __stdcall AddImplType(
                       UINT index,
                       HREFTYPE hRefType) = 0;

        virtual HRESULT __stdcall SetImplTypeFlags(
                       UINT index,
                       INT implTypeFlags) = 0;

        virtual HRESULT __stdcall SetAlignment(
                       WORD cbAlignment) = 0;

        virtual HRESULT __stdcall SetSchema(

                       LPOLESTR pStrSchema) = 0;

        virtual HRESULT __stdcall AddVarDesc(
                       UINT index,
                       VARDESC *pVarDesc) = 0;

        virtual HRESULT __stdcall SetFuncAndParamNames(
                       UINT index,

                                      LPOLESTR *rgszNames,
                       UINT cNames) = 0;

        virtual HRESULT __stdcall SetVarName(
                       UINT index,

                       LPOLESTR szName) = 0;

        virtual HRESULT __stdcall SetTypeDescAlias(
                       TYPEDESC *pTDescAlias) = 0;

        virtual HRESULT __stdcall DefineFuncAsDllEntry(
                       UINT index,

                       LPOLESTR szDllName,

                       LPOLESTR szProcName) = 0;

        virtual HRESULT __stdcall SetFuncDocString(
                       UINT index,

                       LPOLESTR szDocString) = 0;

        virtual HRESULT __stdcall SetVarDocString(
                       UINT index,

                       LPOLESTR szDocString) = 0;

        virtual HRESULT __stdcall SetFuncHelpContext(
                       UINT index,
                       DWORD dwHelpContext) = 0;

        virtual HRESULT __stdcall SetVarHelpContext(
                       UINT index,
                       DWORD dwHelpContext) = 0;

        virtual HRESULT __stdcall SetMops(
                       UINT index,
                       BSTR bstrMops) = 0;

        virtual HRESULT __stdcall SetTypeIdldesc(
                       IDLDESC *pIdlDesc) = 0;

        virtual HRESULT __stdcall LayOut( void) = 0;

    };
# 1321 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;


extern "C" const IID IID_ICreateTypeInfo2;



    struct __declspec(uuid("0002040E-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeInfo2 : public ICreateTypeInfo
    {
    public:
        virtual HRESULT __stdcall DeleteFuncDesc(
                       UINT index) = 0;

        virtual HRESULT __stdcall DeleteFuncDescByMemId(
                       MEMBERID memid,
                       INVOKEKIND invKind) = 0;

        virtual HRESULT __stdcall DeleteVarDesc(
                       UINT index) = 0;

        virtual HRESULT __stdcall DeleteVarDescByMemId(
                       MEMBERID memid) = 0;

        virtual HRESULT __stdcall DeleteImplType(
                       UINT index) = 0;

        virtual HRESULT __stdcall SetCustData(
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetFuncCustData(
                       UINT index,
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetParamCustData(
                       UINT indexFunc,
                       UINT indexParam,
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetVarCustData(
                       UINT index,
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetImplTypeCustData(
                       UINT index,
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetHelpStringContext(
                       ULONG dwHelpStringContext) = 0;

        virtual HRESULT __stdcall SetFuncHelpStringContext(
                       UINT index,
                       ULONG dwHelpStringContext) = 0;

        virtual HRESULT __stdcall SetVarHelpStringContext(
                       UINT index,
                       ULONG dwHelpStringContext) = 0;

        virtual HRESULT __stdcall Invalidate( void) = 0;

        virtual HRESULT __stdcall SetName(

                       LPOLESTR szName) = 0;

    };
# 1754 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef ICreateTypeLib *LPCREATETYPELIB;


extern "C" const IID IID_ICreateTypeLib;



    struct __declspec(uuid("00020406-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeLib : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateTypeInfo(

                       LPOLESTR szName,
                       TYPEKIND tkind,
                        ICreateTypeInfo **ppCTInfo) = 0;

        virtual HRESULT __stdcall SetName(

                       LPOLESTR szName) = 0;

        virtual HRESULT __stdcall SetVersion(
                       WORD wMajorVerNum,
                       WORD wMinorVerNum) = 0;

        virtual HRESULT __stdcall SetGuid(
                       const GUID & guid) = 0;

        virtual HRESULT __stdcall SetDocString(

                       LPOLESTR szDoc) = 0;

        virtual HRESULT __stdcall SetHelpFileName(

                       LPOLESTR szHelpFileName) = 0;

        virtual HRESULT __stdcall SetHelpContext(
                       DWORD dwHelpContext) = 0;

        virtual HRESULT __stdcall SetLcid(
                       LCID lcid) = 0;

        virtual HRESULT __stdcall SetLibFlags(
                       UINT uLibFlags) = 0;

        virtual HRESULT __stdcall SaveAllChanges( void) = 0;

    };
# 1938 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef ICreateTypeLib2 *LPCREATETYPELIB2;


extern "C" const IID IID_ICreateTypeLib2;



    struct __declspec(uuid("0002040F-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeLib2 : public ICreateTypeLib
    {
    public:
        virtual HRESULT __stdcall DeleteTypeInfo(

                       LPOLESTR szName) = 0;

        virtual HRESULT __stdcall SetCustData(
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetHelpStringContext(
                       ULONG dwHelpStringContext) = 0;

        virtual HRESULT __stdcall SetHelpStringDll(

                       LPOLESTR szFileName) = 0;

    };
# 2136 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec;







typedef IDispatch *LPDISPATCH;
# 2179 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
extern "C" const IID IID_IDispatch;



    struct __declspec(uuid("00020400-0000-0000-C000-000000000046")) __declspec(novtable)
    IDispatch : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetTypeInfoCount(
                                   UINT *pctinfo) = 0;

        virtual HRESULT __stdcall GetTypeInfo(
                       UINT iTInfo,
                       LCID lcid,
                                             ITypeInfo **ppTInfo) = 0;

        virtual HRESULT __stdcall GetIDsOfNames(
                                 const IID & riid,
                                                              LPOLESTR *rgszNames,
                                                       UINT cNames,
                       LCID lcid,
                                                                DISPID *rgDispId) = 0;

        virtual HRESULT __stdcall Invoke(

                  DISPID dispIdMember,

                  const IID & riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr) = 0;

    };
# 2320 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
                HRESULT __stdcall IDispatch_RemoteInvoke_Proxy(
              IDispatch * This,
               DISPID dispIdMember,
                         const IID & riid,
               LCID lcid,
               DWORD dwFlags,
                         DISPPARAMS *pDispParams,
                           VARIANT *pVarResult,
                           EXCEPINFO *pExcepInfo,
                           UINT *pArgErr,
               UINT cVarRef,
                                                       UINT *rgVarRefIdx,
                                                               VARIANTARG *rgVarRef);


void __stdcall IDispatch_RemoteInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2352 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef IEnumVARIANT *LPENUMVARIANT;


extern "C" const IID IID_IEnumVARIANT;



    struct __declspec(uuid("00020404-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumVARIANT : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,
                                            VARIANT *rgVar,
                        ULONG *pCeltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumVARIANT **ppEnum) = 0;

    };
# 2456 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
                HRESULT __stdcall IEnumVARIANT_RemoteNext_Proxy(
              IEnumVARIANT * This,
               ULONG celt,
                                                                                VARIANT *rgVar,
                           ULONG *pCeltFetched);


void __stdcall IEnumVARIANT_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2480 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef ITypeComp *LPTYPECOMP;

typedef
enum tagDESCKIND
    {
        DESCKIND_NONE = 0,
        DESCKIND_FUNCDESC = ( DESCKIND_NONE + 1 ) ,
        DESCKIND_VARDESC = ( DESCKIND_FUNCDESC + 1 ) ,
        DESCKIND_TYPECOMP = ( DESCKIND_VARDESC + 1 ) ,
        DESCKIND_IMPLICITAPPOBJ = ( DESCKIND_TYPECOMP + 1 ) ,
        DESCKIND_MAX = ( DESCKIND_IMPLICITAPPOBJ + 1 )
    } DESCKIND;

typedef union tagBINDPTR
    {
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
    } BINDPTR;

typedef union tagBINDPTR *LPBINDPTR;


extern "C" const IID IID_ITypeComp;



    struct __declspec(uuid("00020403-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeComp : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Bind(

                       LPOLESTR szName,
                       ULONG lHashVal,
                       WORD wFlags,
                        ITypeInfo **ppTInfo,
                        DESCKIND *pDescKind,
                        BINDPTR *pBindPtr) = 0;

        virtual HRESULT __stdcall BindType(

                       LPOLESTR szName,
                       ULONG lHashVal,
                        ITypeInfo **ppTInfo,
                        ITypeComp **ppTComp) = 0;

    };
# 2602 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
                HRESULT __stdcall ITypeComp_RemoteBind_Proxy(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                                     ITypeInfo **ppTInfo,
                           DESCKIND *pDescKind,
                                     LPFUNCDESC *ppFuncDesc,
                                     LPVARDESC *ppVarDesc,
                                     ITypeComp **ppTypeComp,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeComp_RemoteBind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeComp_RemoteBindType_Proxy(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
                                     ITypeInfo **ppTInfo);


void __stdcall ITypeComp_RemoteBindType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2649 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec;







typedef ITypeInfo *LPTYPEINFO;


extern "C" const IID IID_ITypeInfo;



    struct __declspec(uuid("00020401-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetTypeAttr(
                        TYPEATTR **ppTypeAttr) = 0;

        virtual HRESULT __stdcall GetTypeComp(
                                             ITypeComp **ppTComp) = 0;

        virtual HRESULT __stdcall GetFuncDesc(
                       UINT index,
                        FUNCDESC **ppFuncDesc) = 0;

        virtual HRESULT __stdcall GetVarDesc(
                       UINT index,
                        VARDESC **ppVarDesc) = 0;

        virtual HRESULT __stdcall GetNames(
                       MEMBERID memid,
                                            BSTR *rgBstrNames,
                       UINT cMaxNames,
                        UINT *pcNames) = 0;

        virtual HRESULT __stdcall GetRefTypeOfImplType(
                       UINT index,
                                   HREFTYPE *pRefType) = 0;

        virtual HRESULT __stdcall GetImplTypeFlags(
                       UINT index,
                                   INT *pImplTypeFlags) = 0;

        virtual HRESULT __stdcall GetIDsOfNames(

                                      LPOLESTR *rgszNames,
                       UINT cNames,
                                 MEMBERID *pMemId) = 0;

        virtual HRESULT __stdcall Invoke(
                       PVOID pvInstance,
                       MEMBERID memid,
                       WORD wFlags,
                            DISPPARAMS *pDispParams,
                        VARIANT *pVarResult,
                        EXCEPINFO *pExcepInfo,
                        UINT *puArgErr) = 0;

        virtual HRESULT __stdcall GetDocumentation(
                       MEMBERID memid,
                        BSTR *pBstrName,
                        BSTR *pBstrDocString,
                        DWORD *pdwHelpContext,
                        BSTR *pBstrHelpFile) = 0;

        virtual HRESULT __stdcall GetDllEntry(
                       MEMBERID memid,
                       INVOKEKIND invKind,
                        BSTR *pBstrDllName,
                        BSTR *pBstrName,
                        WORD *pwOrdinal) = 0;

        virtual HRESULT __stdcall GetRefTypeInfo(
                       HREFTYPE hRefType,
                                             ITypeInfo **ppTInfo) = 0;

        virtual HRESULT __stdcall AddressOfMember(
                       MEMBERID memid,
                       INVOKEKIND invKind,
                        PVOID *ppv) = 0;

        virtual HRESULT __stdcall CreateInstance(
                       IUnknown *pUnkOuter,
                       const IID & riid,
                                PVOID *ppvObj) = 0;

        virtual HRESULT __stdcall GetMops(
                       MEMBERID memid,
                                             BSTR *pBstrMops) = 0;

        virtual HRESULT __stdcall GetContainingTypeLib(
                        ITypeLib **ppTLib,
                        UINT *pIndex) = 0;

        virtual void __stdcall ReleaseTypeAttr(
                       TYPEATTR *pTypeAttr) = 0;

        virtual void __stdcall ReleaseFuncDesc(
                       FUNCDESC *pFuncDesc) = 0;

        virtual void __stdcall ReleaseVarDesc(
                       VARDESC *pVarDesc) = 0;

    };
# 2972 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
                HRESULT __stdcall ITypeInfo_RemoteGetTypeAttr_Proxy(
              ITypeInfo * This,
                                     LPTYPEATTR *ppTypeAttr,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetFuncDesc_Proxy(
              ITypeInfo * This,
               UINT index,
                                     LPFUNCDESC *ppFuncDesc,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetVarDesc_Proxy(
              ITypeInfo * This,
               UINT index,
                                     LPVARDESC *ppVarDesc,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetNames_Proxy(
              ITypeInfo * This,
               MEMBERID memid,
                                                                                BSTR *rgBstrNames,
               UINT cMaxNames,
                           UINT *pcNames);


void __stdcall ITypeInfo_RemoteGetNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalGetIDsOfNames_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalGetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalInvoke_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetDocumentation_Proxy(
              ITypeInfo * This,
               MEMBERID memid,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);


void __stdcall ITypeInfo_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetDllEntry_Proxy(
              ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
               DWORD refPtrFlags,
                                     BSTR *pBstrDllName,
                                     BSTR *pBstrName,
                           WORD *pwOrdinal);


void __stdcall ITypeInfo_RemoteGetDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalAddressOfMember_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalAddressOfMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteCreateInstance_Proxy(
              ITypeInfo * This,
                         const IID & riid,
                                             IUnknown **ppvObj);


void __stdcall ITypeInfo_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetContainingTypeLib_Proxy(
              ITypeInfo * This,
                                     ITypeLib **ppTLib,
                           UINT *pIndex);


void __stdcall ITypeInfo_RemoteGetContainingTypeLib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalReleaseTypeAttr_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalReleaseFuncDesc_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalReleaseVarDesc_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3164 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef ITypeInfo2 *LPTYPEINFO2;


extern "C" const IID IID_ITypeInfo2;



    struct __declspec(uuid("00020412-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeInfo2 : public ITypeInfo
    {
    public:
        virtual HRESULT __stdcall GetTypeKind(
                                   TYPEKIND *pTypeKind) = 0;

        virtual HRESULT __stdcall GetTypeFlags(
                                   ULONG *pTypeFlags) = 0;

        virtual HRESULT __stdcall GetFuncIndexOfMemId(
                       MEMBERID memid,
                       INVOKEKIND invKind,
                                   UINT *pFuncIndex) = 0;

        virtual HRESULT __stdcall GetVarIndexOfMemId(
                       MEMBERID memid,
                                   UINT *pVarIndex) = 0;

        virtual HRESULT __stdcall GetCustData(
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetFuncCustData(
                       UINT index,
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetParamCustData(
                       UINT indexFunc,
                       UINT indexParam,
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetVarCustData(
                       UINT index,
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetImplTypeCustData(
                       UINT index,
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetDocumentation2(
                       MEMBERID memid,
                       LCID lcid,
                        BSTR *pbstrHelpString,
                        DWORD *pdwHelpStringContext,
                        BSTR *pbstrHelpStringDll) = 0;

        virtual HRESULT __stdcall GetAllCustData(
                                   CUSTDATA *pCustData) = 0;

        virtual HRESULT __stdcall GetAllFuncCustData(
                       UINT index,
                                   CUSTDATA *pCustData) = 0;

        virtual HRESULT __stdcall GetAllParamCustData(
                       UINT indexFunc,
                       UINT indexParam,
                                   CUSTDATA *pCustData) = 0;

        virtual HRESULT __stdcall GetAllVarCustData(
                       UINT index,
                                   CUSTDATA *pCustData) = 0;

        virtual HRESULT __stdcall GetAllImplTypeCustData(
                       UINT index,
                                   CUSTDATA *pCustData) = 0;

    };
# 3585 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
                HRESULT __stdcall ITypeInfo2_RemoteGetDocumentation2_Proxy(
              ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);


void __stdcall ITypeInfo2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3615 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec;







typedef
enum tagSYSKIND
    {
        SYS_WIN16 = 0,
        SYS_WIN32 = ( SYS_WIN16 + 1 ) ,
        SYS_MAC = ( SYS_WIN32 + 1 ) ,
        SYS_WIN64 = ( SYS_MAC + 1 )
    } SYSKIND;

typedef
enum tagLIBFLAGS
    {
        LIBFLAG_FRESTRICTED = 0x1,
        LIBFLAG_FCONTROL = 0x2,
        LIBFLAG_FHIDDEN = 0x4,
        LIBFLAG_FHASDISKIMAGE = 0x8
    } LIBFLAGS;

typedef ITypeLib *LPTYPELIB;

typedef struct tagTLIBATTR
    {
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
    } TLIBATTR;

typedef struct tagTLIBATTR *LPTLIBATTR;


extern "C" const IID IID_ITypeLib;



    struct __declspec(uuid("00020402-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeLib : public IUnknown
    {
    public:
        virtual UINT __stdcall GetTypeInfoCount( void) = 0;

        virtual HRESULT __stdcall GetTypeInfo(
                       UINT index,
                                             ITypeInfo **ppTInfo) = 0;

        virtual HRESULT __stdcall GetTypeInfoType(
                       UINT index,
                                   TYPEKIND *pTKind) = 0;

        virtual HRESULT __stdcall GetTypeInfoOfGuid(
                                 const GUID & guid,
                                             ITypeInfo **ppTinfo) = 0;

        virtual HRESULT __stdcall GetLibAttr(
                        TLIBATTR **ppTLibAttr) = 0;

        virtual HRESULT __stdcall GetTypeComp(
                                             ITypeComp **ppTComp) = 0;

        virtual HRESULT __stdcall GetDocumentation(
                       INT index,
                        BSTR *pBstrName,
                        BSTR *pBstrDocString,
                        DWORD *pdwHelpContext,
                        BSTR *pBstrHelpFile) = 0;

        virtual HRESULT __stdcall IsName(

                          LPOLESTR szNameBuf,
                       ULONG lHashVal,
                        BOOL *pfName) = 0;

        virtual HRESULT __stdcall FindName(

                          LPOLESTR szNameBuf,
                       ULONG lHashVal,
                                            ITypeInfo **ppTInfo,
                                            MEMBERID *rgMemId,
                            USHORT *pcFound) = 0;

        virtual void __stdcall ReleaseTLibAttr(
                       TLIBATTR *pTLibAttr) = 0;

    };
# 3844 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
                HRESULT __stdcall ITypeLib_RemoteGetTypeInfoCount_Proxy(
              ITypeLib * This,
                           UINT *pcTInfo);


void __stdcall ITypeLib_RemoteGetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteGetLibAttr_Proxy(
              ITypeLib * This,
                                     LPTLIBATTR *ppTLibAttr,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeLib_RemoteGetLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteGetDocumentation_Proxy(
              ITypeLib * This,
               INT index,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);


void __stdcall ITypeLib_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteIsName_Proxy(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                           BOOL *pfName,
                                     BSTR *pBstrLibName);


void __stdcall ITypeLib_RemoteIsName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteFindName_Proxy(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                                                                               ITypeInfo **ppTInfo,
                                                                               MEMBERID *rgMemId,
                                 USHORT *pcFound,
                                     BSTR *pBstrLibName);


void __stdcall ITypeLib_RemoteFindName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeLib_LocalReleaseTLibAttr_Proxy(
              ITypeLib * This);


void __stdcall ITypeLib_LocalReleaseTLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3942 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec;







typedef ITypeLib2 *LPTYPELIB2;


extern "C" const IID IID_ITypeLib2;



    struct __declspec(uuid("00020411-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeLib2 : public ITypeLib
    {
    public:
        virtual HRESULT __stdcall GetCustData(
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetLibStatistics(
                        ULONG *pcUniqueNames,
                        ULONG *pcchUniqueNames) = 0;

        virtual HRESULT __stdcall GetDocumentation2(
                       INT index,
                       LCID lcid,
                        BSTR *pbstrHelpString,
                        DWORD *pdwHelpStringContext,
                        BSTR *pbstrHelpStringDll) = 0;

        virtual HRESULT __stdcall GetAllCustData(
                                   CUSTDATA *pCustData) = 0;

    };
# 4150 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
                HRESULT __stdcall ITypeLib2_RemoteGetLibStatistics_Proxy(
              ITypeLib2 * This,
                           ULONG *pcUniqueNames,
                           ULONG *pcchUniqueNames);


void __stdcall ITypeLib2_RemoteGetLibStatistics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib2_RemoteGetDocumentation2_Proxy(
              ITypeLib2 * This,
               INT index,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);


void __stdcall ITypeLib2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4190 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;

typedef
enum tagCHANGEKIND
    {
        CHANGEKIND_ADDMEMBER = 0,
        CHANGEKIND_DELETEMEMBER = ( CHANGEKIND_ADDMEMBER + 1 ) ,
        CHANGEKIND_SETNAMES = ( CHANGEKIND_DELETEMEMBER + 1 ) ,
        CHANGEKIND_SETDOCUMENTATION = ( CHANGEKIND_SETNAMES + 1 ) ,
        CHANGEKIND_GENERAL = ( CHANGEKIND_SETDOCUMENTATION + 1 ) ,
        CHANGEKIND_INVALIDATE = ( CHANGEKIND_GENERAL + 1 ) ,
        CHANGEKIND_CHANGEFAILED = ( CHANGEKIND_INVALIDATE + 1 ) ,
        CHANGEKIND_MAX = ( CHANGEKIND_CHANGEFAILED + 1 )
    } CHANGEKIND;


extern "C" const IID IID_ITypeChangeEvents;



    struct __declspec(uuid("00020410-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeChangeEvents : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RequestTypeChange(
                       CHANGEKIND changeKind,
                       ITypeInfo *pTInfoBefore,

                       LPOLESTR pStrName,
                        INT *pfCancel) = 0;

        virtual HRESULT __stdcall AfterTypeChange(
                       CHANGEKIND changeKind,
                       ITypeInfo *pTInfoAfter,

                       LPOLESTR pStrName) = 0;

    };
# 4309 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef IErrorInfo *LPERRORINFO;


extern "C" const IID IID_IErrorInfo;



    struct __declspec(uuid("1CF2B120-547D-101B-8E65-08002B2BD119")) __declspec(novtable)
    IErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetGUID(
                                   GUID *pGUID) = 0;

        virtual HRESULT __stdcall GetSource(
                                             BSTR *pBstrSource) = 0;

        virtual HRESULT __stdcall GetDescription(
                                             BSTR *pBstrDescription) = 0;

        virtual HRESULT __stdcall GetHelpFile(
                                             BSTR *pBstrHelpFile) = 0;

        virtual HRESULT __stdcall GetHelpContext(
                                   DWORD *pdwHelpContext) = 0;

    };
# 4431 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef ICreateErrorInfo *LPCREATEERRORINFO;


extern "C" const IID IID_ICreateErrorInfo;



    struct __declspec(uuid("22F03340-547D-101B-8E65-08002B2BD119")) __declspec(novtable)
    ICreateErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetGUID(
                                 const GUID & rguid) = 0;

        virtual HRESULT __stdcall SetSource(
                                 LPOLESTR szSource) = 0;

        virtual HRESULT __stdcall SetDescription(
                                 LPOLESTR szDescription) = 0;

        virtual HRESULT __stdcall SetHelpFile(
                                 LPOLESTR szHelpFile) = 0;

        virtual HRESULT __stdcall SetHelpContext(
                       DWORD dwHelpContext) = 0;

    };
# 4553 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef ISupportErrorInfo *LPSUPPORTERRORINFO;


extern "C" const IID IID_ISupportErrorInfo;



    struct __declspec(uuid("DF0B3D60-548F-101B-8E65-08002B2BD119")) __declspec(novtable)
    ISupportErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall InterfaceSupportsErrorInfo(
                                 const IID & riid) = 0;

    };
# 4636 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
extern "C" const IID IID_ITypeFactory;



    struct __declspec(uuid("0000002E-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateFromTypeInfo(
                                     ITypeInfo *pTypeInfo,
                                 const IID & riid,
                                                     IUnknown **ppv) = 0;

    };
# 4720 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
extern "C" const IID IID_ITypeMarshal;



    struct __declspec(uuid("0000002D-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeMarshal : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Size(
                       PVOID pvType,
                       DWORD dwDestContext,
                       PVOID pvDestContext,
                        ULONG *pSize) = 0;

        virtual HRESULT __stdcall Marshal(
                       PVOID pvType,
                       DWORD dwDestContext,
                       PVOID pvDestContext,
                       ULONG cbBufferLength,

                                                                BYTE *pBuffer,

                   ULONG *pcbWritten) = 0;

        virtual HRESULT __stdcall Unmarshal(
                        PVOID pvType,
                       DWORD dwFlags,
                       ULONG cbBufferLength,

                                        BYTE *pBuffer,

                   ULONG *pcbRead) = 0;

        virtual HRESULT __stdcall Free(
                       PVOID pvType) = 0;

    };
# 4861 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef IRecordInfo *LPRECORDINFO;


extern "C" const IID IID_IRecordInfo;



    struct __declspec(uuid("0000002F-0000-0000-C000-000000000046")) __declspec(novtable)
    IRecordInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RecordInit(
                        PVOID pvNew) = 0;

        virtual HRESULT __stdcall RecordClear(
                       PVOID pvExisting) = 0;

        virtual HRESULT __stdcall RecordCopy(
                       PVOID pvExisting,
                        PVOID pvNew) = 0;

        virtual HRESULT __stdcall GetGuid(
                        GUID *pguid) = 0;

        virtual HRESULT __stdcall GetName(
                        BSTR *pbstrName) = 0;

        virtual HRESULT __stdcall GetSize(
                        ULONG *pcbSize) = 0;

        virtual HRESULT __stdcall GetTypeInfo(
                        ITypeInfo **ppTypeInfo) = 0;

        virtual HRESULT __stdcall GetField(
                       PVOID pvData,
                       LPCOLESTR szFieldName,
                        VARIANT *pvarField) = 0;

        virtual HRESULT __stdcall GetFieldNoCopy(
                       PVOID pvData,
                       LPCOLESTR szFieldName,
                        VARIANT *pvarField,
                        PVOID *ppvDataCArray) = 0;

        virtual HRESULT __stdcall PutField(
                       ULONG wFlags,
                            PVOID pvData,
                       LPCOLESTR szFieldName,
                       VARIANT *pvarField) = 0;

        virtual HRESULT __stdcall PutFieldNoCopy(
                       ULONG wFlags,
                            PVOID pvData,
                       LPCOLESTR szFieldName,
                       VARIANT *pvarField) = 0;

        virtual HRESULT __stdcall GetFieldNames(
                            ULONG *pcNames,
                                            BSTR *rgBstrNames) = 0;

        virtual BOOL __stdcall IsMatchingType(
                       IRecordInfo *pRecordInfo) = 0;

        virtual PVOID __stdcall RecordCreate( void) = 0;

        virtual HRESULT __stdcall RecordCreateCopy(
                       PVOID pvSource,
                        PVOID *ppvDest) = 0;

        virtual HRESULT __stdcall RecordDestroy(
                       PVOID pvRecord) = 0;

    };
# 5119 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef IErrorLog *LPERRORLOG;


extern "C" const IID IID_IErrorLog;



    struct __declspec(uuid("3127CA40-446E-11CE-8135-00AA004BB851")) __declspec(novtable)
    IErrorLog : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AddError(
                                 LPCOLESTR pszPropName,
                                 EXCEPINFO *pExcepInfo) = 0;

    };
# 5203 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
typedef IPropertyBag *LPPROPERTYBAG;


extern "C" const IID IID_IPropertyBag;



    struct __declspec(uuid("55272A00-42CB-11CE-8135-00AA004BB851")) __declspec(novtable)
    IPropertyBag : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Read(
                       LPCOLESTR pszPropName,
                            VARIANT *pVar,
                               IErrorLog *pErrorLog) = 0;

        virtual HRESULT __stdcall Write(
                                 LPCOLESTR pszPropName,
                                 VARIANT *pVar) = 0;

    };
# 5291 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
                HRESULT __stdcall IPropertyBag_RemoteRead_Proxy(
              IPropertyBag * This,
                         LPCOLESTR pszPropName,
                           VARIANT *pVar,
                                     IErrorLog *pErrorLog,
               DWORD varType,
                             IUnknown *pUnkObj);


void __stdcall IPropertyBag_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5318 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/oaidl.h"
#pragma warning(pop)






extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall CLEANLOCALSTORAGE_UserSize( unsigned long *, unsigned long , CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserMarshal( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserUnmarshal( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
void __stdcall CLEANLOCALSTORAGE_UserFree( unsigned long *, CLEANLOCALSTORAGE * );

unsigned long __stdcall VARIANT_UserSize( unsigned long *, unsigned long , VARIANT * );
unsigned char * __stdcall VARIANT_UserMarshal( unsigned long *, unsigned char *, VARIANT * );
unsigned char * __stdcall VARIANT_UserUnmarshal( unsigned long *, unsigned char *, VARIANT * );
void __stdcall VARIANT_UserFree( unsigned long *, VARIANT * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall CLEANLOCALSTORAGE_UserSize64( unsigned long *, unsigned long , CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserMarshal64( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserUnmarshal64( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
void __stdcall CLEANLOCALSTORAGE_UserFree64( unsigned long *, CLEANLOCALSTORAGE * );

unsigned long __stdcall VARIANT_UserSize64( unsigned long *, unsigned long , VARIANT * );
unsigned char * __stdcall VARIANT_UserMarshal64( unsigned long *, unsigned char *, VARIANT * );
unsigned char * __stdcall VARIANT_UserUnmarshal64( unsigned long *, unsigned char *, VARIANT * );
void __stdcall VARIANT_UserFree64( unsigned long *, VARIANT * );

              HRESULT __stdcall IDispatch_Invoke_Proxy(
    IDispatch * This,

          DISPID dispIdMember,

          const IID & riid,

          LCID lcid,

          WORD wFlags,

          DISPPARAMS *pDispParams,

               VARIANT *pVarResult,

               EXCEPINFO *pExcepInfo,

               UINT *puArgErr);


                HRESULT __stdcall IDispatch_Invoke_Stub(
              IDispatch * This,
               DISPID dispIdMember,
                         const IID & riid,
               LCID lcid,
               DWORD dwFlags,
                         DISPPARAMS *pDispParams,
                           VARIANT *pVarResult,
                           EXCEPINFO *pExcepInfo,
                           UINT *pArgErr,
               UINT cVarRef,
                                                       UINT *rgVarRefIdx,
                                                               VARIANTARG *rgVarRef);

              HRESULT __stdcall IEnumVARIANT_Next_Proxy(
    IEnumVARIANT * This,
               ULONG celt,
                                    VARIANT *rgVar,
                ULONG *pCeltFetched);


                HRESULT __stdcall IEnumVARIANT_Next_Stub(
              IEnumVARIANT * This,
               ULONG celt,
                                                                                VARIANT *rgVar,
                           ULONG *pCeltFetched);

              HRESULT __stdcall ITypeComp_Bind_Proxy(
    ITypeComp * This,

               LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                ITypeInfo **ppTInfo,
                DESCKIND *pDescKind,
                BINDPTR *pBindPtr);


                HRESULT __stdcall ITypeComp_Bind_Stub(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                                     ITypeInfo **ppTInfo,
                           DESCKIND *pDescKind,
                                     LPFUNCDESC *ppFuncDesc,
                                     LPVARDESC *ppVarDesc,
                                     ITypeComp **ppTypeComp,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeComp_BindType_Proxy(
    ITypeComp * This,

               LPOLESTR szName,
               ULONG lHashVal,
                ITypeInfo **ppTInfo,
                ITypeComp **ppTComp);


                HRESULT __stdcall ITypeComp_BindType_Stub(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
                                     ITypeInfo **ppTInfo);

              HRESULT __stdcall ITypeInfo_GetTypeAttr_Proxy(
    ITypeInfo * This,
                TYPEATTR **ppTypeAttr);


                HRESULT __stdcall ITypeInfo_GetTypeAttr_Stub(
              ITypeInfo * This,
                                     LPTYPEATTR *ppTypeAttr,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeInfo_GetFuncDesc_Proxy(
    ITypeInfo * This,
               UINT index,
                FUNCDESC **ppFuncDesc);


                HRESULT __stdcall ITypeInfo_GetFuncDesc_Stub(
              ITypeInfo * This,
               UINT index,
                                     LPFUNCDESC *ppFuncDesc,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeInfo_GetVarDesc_Proxy(
    ITypeInfo * This,
               UINT index,
                VARDESC **ppVarDesc);


                HRESULT __stdcall ITypeInfo_GetVarDesc_Stub(
              ITypeInfo * This,
               UINT index,
                                     LPVARDESC *ppVarDesc,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeInfo_GetNames_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
                                    BSTR *rgBstrNames,
               UINT cMaxNames,
                UINT *pcNames);


                HRESULT __stdcall ITypeInfo_GetNames_Stub(
              ITypeInfo * This,
               MEMBERID memid,
                                                                                BSTR *rgBstrNames,
               UINT cMaxNames,
                           UINT *pcNames);

              HRESULT __stdcall ITypeInfo_GetIDsOfNames_Proxy(
    ITypeInfo * This,

                              LPOLESTR *rgszNames,
               UINT cNames,
                         MEMBERID *pMemId);


                        HRESULT __stdcall ITypeInfo_GetIDsOfNames_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo_Invoke_Proxy(
    ITypeInfo * This,
               PVOID pvInstance,
               MEMBERID memid,
               WORD wFlags,
                    DISPPARAMS *pDispParams,
                VARIANT *pVarResult,
                EXCEPINFO *pExcepInfo,
                UINT *puArgErr);


                        HRESULT __stdcall ITypeInfo_Invoke_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo_GetDocumentation_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
                BSTR *pBstrName,
                BSTR *pBstrDocString,
                DWORD *pdwHelpContext,
                BSTR *pBstrHelpFile);


                HRESULT __stdcall ITypeInfo_GetDocumentation_Stub(
              ITypeInfo * This,
               MEMBERID memid,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);

              HRESULT __stdcall ITypeInfo_GetDllEntry_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
                BSTR *pBstrDllName,
                BSTR *pBstrName,
                WORD *pwOrdinal);


                HRESULT __stdcall ITypeInfo_GetDllEntry_Stub(
              ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
               DWORD refPtrFlags,
                                     BSTR *pBstrDllName,
                                     BSTR *pBstrName,
                           WORD *pwOrdinal);

              HRESULT __stdcall ITypeInfo_AddressOfMember_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
                PVOID *ppv);


                        HRESULT __stdcall ITypeInfo_AddressOfMember_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo_CreateInstance_Proxy(
    ITypeInfo * This,
               IUnknown *pUnkOuter,
               const IID & riid,
                        PVOID *ppvObj);


                HRESULT __stdcall ITypeInfo_CreateInstance_Stub(
              ITypeInfo * This,
                         const IID & riid,
                                             IUnknown **ppvObj);

              HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Proxy(
    ITypeInfo * This,
                ITypeLib **ppTLib,
                UINT *pIndex);


                HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Stub(
              ITypeInfo * This,
                                     ITypeLib **ppTLib,
                           UINT *pIndex);

              void __stdcall ITypeInfo_ReleaseTypeAttr_Proxy(
    ITypeInfo * This,
               TYPEATTR *pTypeAttr);


                        HRESULT __stdcall ITypeInfo_ReleaseTypeAttr_Stub(
              ITypeInfo * This);

              void __stdcall ITypeInfo_ReleaseFuncDesc_Proxy(
    ITypeInfo * This,
               FUNCDESC *pFuncDesc);


                        HRESULT __stdcall ITypeInfo_ReleaseFuncDesc_Stub(
              ITypeInfo * This);

              void __stdcall ITypeInfo_ReleaseVarDesc_Proxy(
    ITypeInfo * This,
               VARDESC *pVarDesc);


                        HRESULT __stdcall ITypeInfo_ReleaseVarDesc_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo2_GetDocumentation2_Proxy(
    ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,
                BSTR *pbstrHelpString,
                DWORD *pdwHelpStringContext,
                BSTR *pbstrHelpStringDll);


                HRESULT __stdcall ITypeInfo2_GetDocumentation2_Stub(
              ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);

              UINT __stdcall ITypeLib_GetTypeInfoCount_Proxy(
    ITypeLib * This);


                HRESULT __stdcall ITypeLib_GetTypeInfoCount_Stub(
              ITypeLib * This,
                           UINT *pcTInfo);

              HRESULT __stdcall ITypeLib_GetLibAttr_Proxy(
    ITypeLib * This,
                TLIBATTR **ppTLibAttr);


                HRESULT __stdcall ITypeLib_GetLibAttr_Stub(
              ITypeLib * This,
                                     LPTLIBATTR *ppTLibAttr,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeLib_GetDocumentation_Proxy(
    ITypeLib * This,
               INT index,
                BSTR *pBstrName,
                BSTR *pBstrDocString,
                DWORD *pdwHelpContext,
                BSTR *pBstrHelpFile);


                HRESULT __stdcall ITypeLib_GetDocumentation_Stub(
              ITypeLib * This,
               INT index,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);

              HRESULT __stdcall ITypeLib_IsName_Proxy(
    ITypeLib * This,

                  LPOLESTR szNameBuf,
               ULONG lHashVal,
                BOOL *pfName);


                HRESULT __stdcall ITypeLib_IsName_Stub(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                           BOOL *pfName,
                                     BSTR *pBstrLibName);

              HRESULT __stdcall ITypeLib_FindName_Proxy(
    ITypeLib * This,

                  LPOLESTR szNameBuf,
               ULONG lHashVal,
                                    ITypeInfo **ppTInfo,
                                    MEMBERID *rgMemId,
                    USHORT *pcFound);


                HRESULT __stdcall ITypeLib_FindName_Stub(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                                                                               ITypeInfo **ppTInfo,
                                                                               MEMBERID *rgMemId,
                                 USHORT *pcFound,
                                     BSTR *pBstrLibName);

              void __stdcall ITypeLib_ReleaseTLibAttr_Proxy(
    ITypeLib * This,
               TLIBATTR *pTLibAttr);


                        HRESULT __stdcall ITypeLib_ReleaseTLibAttr_Stub(
              ITypeLib * This);

              HRESULT __stdcall ITypeLib2_GetLibStatistics_Proxy(
    ITypeLib2 * This,
                ULONG *pcUniqueNames,
                ULONG *pcchUniqueNames);


                HRESULT __stdcall ITypeLib2_GetLibStatistics_Stub(
              ITypeLib2 * This,
                           ULONG *pcUniqueNames,
                           ULONG *pcchUniqueNames);

              HRESULT __stdcall ITypeLib2_GetDocumentation2_Proxy(
    ITypeLib2 * This,
               INT index,
               LCID lcid,
                BSTR *pbstrHelpString,
                DWORD *pdwHelpStringContext,
                BSTR *pbstrHelpStringDll);


                HRESULT __stdcall ITypeLib2_GetDocumentation2_Stub(
              ITypeLib2 * This,
               INT index,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);

              HRESULT __stdcall IPropertyBag_Read_Proxy(
    IPropertyBag * This,
               LPCOLESTR pszPropName,
                    VARIANT *pVar,
                       IErrorLog *pErrorLog);


                HRESULT __stdcall IPropertyBag_Read_Stub(
              IPropertyBag * This,
                         LPCOLESTR pszPropName,
                           VARIANT *pVar,
                                     IErrorLog *pErrorLog,
               DWORD varType,
                             IUnknown *pUnkObj);






}
# 305 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h" 2



extern "C"{
# 327 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
typedef struct _xml_error
    {
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
    } XML_ERROR;



extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec;
# 377 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
typedef
enum tagDOMNodeType
    {
        NODE_INVALID = 0,
        NODE_ELEMENT = ( NODE_INVALID + 1 ) ,
        NODE_ATTRIBUTE = ( NODE_ELEMENT + 1 ) ,
        NODE_TEXT = ( NODE_ATTRIBUTE + 1 ) ,
        NODE_CDATA_SECTION = ( NODE_TEXT + 1 ) ,
        NODE_ENTITY_REFERENCE = ( NODE_CDATA_SECTION + 1 ) ,
        NODE_ENTITY = ( NODE_ENTITY_REFERENCE + 1 ) ,
        NODE_PROCESSING_INSTRUCTION = ( NODE_ENTITY + 1 ) ,
        NODE_COMMENT = ( NODE_PROCESSING_INSTRUCTION + 1 ) ,
        NODE_DOCUMENT = ( NODE_COMMENT + 1 ) ,
        NODE_DOCUMENT_TYPE = ( NODE_DOCUMENT + 1 ) ,
        NODE_DOCUMENT_FRAGMENT = ( NODE_DOCUMENT_TYPE + 1 ) ,
        NODE_NOTATION = ( NODE_DOCUMENT_FRAGMENT + 1 )
    } DOMNodeType;
# 412 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
typedef
enum tagXMLEMEM_TYPE
    {
        XMLELEMTYPE_ELEMENT = 0,
        XMLELEMTYPE_TEXT = ( XMLELEMTYPE_ELEMENT + 1 ) ,
        XMLELEMTYPE_COMMENT = ( XMLELEMTYPE_TEXT + 1 ) ,
        XMLELEMTYPE_DOCUMENT = ( XMLELEMTYPE_COMMENT + 1 ) ,
        XMLELEMTYPE_DTD = ( XMLELEMTYPE_DOCUMENT + 1 ) ,
        XMLELEMTYPE_PI = ( XMLELEMTYPE_DTD + 1 ) ,
        XMLELEMTYPE_OTHER = ( XMLELEMTYPE_PI + 1 )
    } XMLELEM_TYPE;


extern "C" const IID LIBID_MSXML;
# 434 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMImplementation;



    struct __declspec(uuid("2933BF8F-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMImplementation : public IDispatch
    {
    public:
        virtual HRESULT __stdcall hasFeature(
                       BSTR feature,
                       BSTR version,
                                VARIANT_BOOL *hasFeature) = 0;

    };
# 568 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMNode;



    struct __declspec(uuid("2933BF80-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNode : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_nodeName(
                                BSTR *name) = 0;

        virtual HRESULT __stdcall get_nodeValue(
                                VARIANT *value) = 0;

        virtual HRESULT __stdcall put_nodeValue(
                       VARIANT value) = 0;

        virtual HRESULT __stdcall get_nodeType(
                                DOMNodeType *type) = 0;

        virtual HRESULT __stdcall get_parentNode(
                                IXMLDOMNode **parent) = 0;

        virtual HRESULT __stdcall get_childNodes(
                                IXMLDOMNodeList **childList) = 0;

        virtual HRESULT __stdcall get_firstChild(
                                IXMLDOMNode **firstChild) = 0;

        virtual HRESULT __stdcall get_lastChild(
                                IXMLDOMNode **lastChild) = 0;

        virtual HRESULT __stdcall get_previousSibling(
                                IXMLDOMNode **previousSibling) = 0;

        virtual HRESULT __stdcall get_nextSibling(
                                IXMLDOMNode **nextSibling) = 0;

        virtual HRESULT __stdcall get_attributes(
                                IXMLDOMNamedNodeMap **attributeMap) = 0;

        virtual HRESULT __stdcall insertBefore(
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild) = 0;

        virtual HRESULT __stdcall replaceChild(
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild) = 0;

        virtual HRESULT __stdcall removeChild(
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild) = 0;

        virtual HRESULT __stdcall appendChild(
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild) = 0;

        virtual HRESULT __stdcall hasChildNodes(
                                VARIANT_BOOL *hasChild) = 0;

        virtual HRESULT __stdcall get_ownerDocument(
                                IXMLDOMDocument **XMLDOMDocument) = 0;

        virtual HRESULT __stdcall cloneNode(
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot) = 0;

        virtual HRESULT __stdcall get_nodeTypeString(
                                BSTR *nodeType) = 0;

        virtual HRESULT __stdcall get_text(
                                BSTR *text) = 0;

        virtual HRESULT __stdcall put_text(
                       BSTR text) = 0;

        virtual HRESULT __stdcall get_specified(
                                VARIANT_BOOL *isSpecified) = 0;

        virtual HRESULT __stdcall get_definition(
                                IXMLDOMNode **definitionNode) = 0;

        virtual HRESULT __stdcall get_nodeTypedValue(
                                VARIANT *typedValue) = 0;

        virtual HRESULT __stdcall put_nodeTypedValue(
                       VARIANT typedValue) = 0;

        virtual HRESULT __stdcall get_dataType(
                                VARIANT *dataTypeName) = 0;

        virtual HRESULT __stdcall put_dataType(
                       BSTR dataTypeName) = 0;

        virtual HRESULT __stdcall get_xml(
                                BSTR *xmlString) = 0;

        virtual HRESULT __stdcall transformNode(
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString) = 0;

        virtual HRESULT __stdcall selectNodes(
                       BSTR queryString,
                                IXMLDOMNodeList **resultList) = 0;

        virtual HRESULT __stdcall selectSingleNode(
                       BSTR queryString,
                                IXMLDOMNode **resultNode) = 0;

        virtual HRESULT __stdcall get_parsed(
                                VARIANT_BOOL *isParsed) = 0;

        virtual HRESULT __stdcall get_namespaceURI(
                                BSTR *namespaceURI) = 0;

        virtual HRESULT __stdcall get_prefix(
                                BSTR *prefixString) = 0;

        virtual HRESULT __stdcall get_baseName(
                                BSTR *nameString) = 0;

        virtual HRESULT __stdcall transformNodeToObject(
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject) = 0;

    };
# 1070 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMDocumentFragment;



    struct __declspec(uuid("3efaa413-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXMLDOMDocumentFragment : public IXMLDOMNode
    {
    public:
    };
# 1454 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMDocument;



    struct __declspec(uuid("2933BF81-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMDocument : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_doctype(
                                IXMLDOMDocumentType **documentType) = 0;

        virtual HRESULT __stdcall get_implementation(
                                IXMLDOMImplementation **impl) = 0;

        virtual HRESULT __stdcall get_documentElement(
                                IXMLDOMElement **DOMElement) = 0;

        virtual HRESULT __stdcall putref_documentElement(
                       IXMLDOMElement *DOMElement) = 0;

        virtual HRESULT __stdcall createElement(
                       BSTR tagName,
                                IXMLDOMElement **element) = 0;

        virtual HRESULT __stdcall createDocumentFragment(
                                IXMLDOMDocumentFragment **docFrag) = 0;

        virtual HRESULT __stdcall createTextNode(
                       BSTR data,
                                IXMLDOMText **text) = 0;

        virtual HRESULT __stdcall createComment(
                       BSTR data,
                                IXMLDOMComment **comment) = 0;

        virtual HRESULT __stdcall createCDATASection(
                       BSTR data,
                                IXMLDOMCDATASection **cdata) = 0;

        virtual HRESULT __stdcall createProcessingInstruction(
                       BSTR target,
                       BSTR data,
                                IXMLDOMProcessingInstruction **pi) = 0;

        virtual HRESULT __stdcall createAttribute(
                       BSTR name,
                                IXMLDOMAttribute **attribute) = 0;

        virtual HRESULT __stdcall createEntityReference(
                       BSTR name,
                                IXMLDOMEntityReference **entityRef) = 0;

        virtual HRESULT __stdcall getElementsByTagName(
                       BSTR tagName,
                                IXMLDOMNodeList **resultList) = 0;

        virtual HRESULT __stdcall createNode(
                       VARIANT Type,
                       BSTR name,
                       BSTR namespaceURI,
                                IXMLDOMNode **node) = 0;

        virtual HRESULT __stdcall nodeFromID(
                       BSTR idString,
                                IXMLDOMNode **node) = 0;

        virtual HRESULT __stdcall load(
                       VARIANT xmlSource,
                                VARIANT_BOOL *isSuccessful) = 0;

        virtual HRESULT __stdcall get_readyState(
                                long *value) = 0;

        virtual HRESULT __stdcall get_parseError(
                                IXMLDOMParseError **errorObj) = 0;

        virtual HRESULT __stdcall get_url(
                                BSTR *urlString) = 0;

        virtual HRESULT __stdcall get_async(
                                VARIANT_BOOL *isAsync) = 0;

        virtual HRESULT __stdcall put_async(
                       VARIANT_BOOL isAsync) = 0;

        virtual HRESULT __stdcall abort( void) = 0;

        virtual HRESULT __stdcall loadXML(
                       BSTR bstrXML,
                                VARIANT_BOOL *isSuccessful) = 0;

        virtual HRESULT __stdcall save(
                       VARIANT destination) = 0;

        virtual HRESULT __stdcall get_validateOnParse(
                                VARIANT_BOOL *isValidating) = 0;

        virtual HRESULT __stdcall put_validateOnParse(
                       VARIANT_BOOL isValidating) = 0;

        virtual HRESULT __stdcall get_resolveExternals(
                                VARIANT_BOOL *isResolving) = 0;

        virtual HRESULT __stdcall put_resolveExternals(
                       VARIANT_BOOL isResolving) = 0;

        virtual HRESULT __stdcall get_preserveWhiteSpace(
                                VARIANT_BOOL *isPreserving) = 0;

        virtual HRESULT __stdcall put_preserveWhiteSpace(
                       VARIANT_BOOL isPreserving) = 0;

        virtual HRESULT __stdcall put_onreadystatechange(
                       VARIANT readystatechangeSink) = 0;

        virtual HRESULT __stdcall put_ondataavailable(
                       VARIANT ondataavailableSink) = 0;

        virtual HRESULT __stdcall put_ontransformnode(
                       VARIANT ontransformnodeSink) = 0;

    };
# 2196 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMNodeList;



    struct __declspec(uuid("2933BF82-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNodeList : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_item(
                       long index,
                                IXMLDOMNode **listItem) = 0;

        virtual HRESULT __stdcall get_length(
                                long *listLength) = 0;

        virtual HRESULT __stdcall nextNode(
                                IXMLDOMNode **nextItem) = 0;

        virtual HRESULT __stdcall reset( void) = 0;

        virtual HRESULT __stdcall get__newEnum(
                                IUnknown **ppUnk) = 0;

    };
# 2366 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMNamedNodeMap;



    struct __declspec(uuid("2933BF83-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNamedNodeMap : public IDispatch
    {
    public:
        virtual HRESULT __stdcall getNamedItem(
                       BSTR name,
                                IXMLDOMNode **namedItem) = 0;

        virtual HRESULT __stdcall setNamedItem(
                       IXMLDOMNode *newItem,
                                IXMLDOMNode **nameItem) = 0;

        virtual HRESULT __stdcall removeNamedItem(
                       BSTR name,
                                IXMLDOMNode **namedItem) = 0;

        virtual HRESULT __stdcall get_item(
                       long index,
                                IXMLDOMNode **listItem) = 0;

        virtual HRESULT __stdcall get_length(
                                long *listLength) = 0;

        virtual HRESULT __stdcall getQualifiedItem(
                       BSTR baseName,
                       BSTR namespaceURI,
                                IXMLDOMNode **qualifiedItem) = 0;

        virtual HRESULT __stdcall removeQualifiedItem(
                       BSTR baseName,
                       BSTR namespaceURI,
                                IXMLDOMNode **qualifiedItem) = 0;

        virtual HRESULT __stdcall nextNode(
                                IXMLDOMNode **nextItem) = 0;

        virtual HRESULT __stdcall reset( void) = 0;

        virtual HRESULT __stdcall get__newEnum(
                                IUnknown **ppUnk) = 0;

    };
# 2600 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMCharacterData;



    struct __declspec(uuid("2933BF84-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMCharacterData : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_data(
                                BSTR *data) = 0;

        virtual HRESULT __stdcall put_data(
                       BSTR data) = 0;

        virtual HRESULT __stdcall get_length(
                                long *dataLength) = 0;

        virtual HRESULT __stdcall substringData(
                       long offset,
                       long count,
                                BSTR *data) = 0;

        virtual HRESULT __stdcall appendData(
                       BSTR data) = 0;

        virtual HRESULT __stdcall insertData(
                       long offset,
                       BSTR data) = 0;

        virtual HRESULT __stdcall deleteData(
                       long offset,
                       long count) = 0;

        virtual HRESULT __stdcall replaceData(
                       long offset,
                       long count,
                       BSTR data) = 0;

    };
# 3076 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMAttribute;



    struct __declspec(uuid("2933BF85-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMAttribute : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_name(
                                BSTR *attributeName) = 0;

        virtual HRESULT __stdcall get_value(
                                VARIANT *attributeValue) = 0;

        virtual HRESULT __stdcall put_value(
                       VARIANT attributeValue) = 0;

    };
# 3490 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMElement;



    struct __declspec(uuid("2933BF86-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMElement : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_tagName(
                                BSTR *tagName) = 0;

        virtual HRESULT __stdcall getAttribute(
                       BSTR name,
                                VARIANT *value) = 0;

        virtual HRESULT __stdcall setAttribute(
                       BSTR name,
                       VARIANT value) = 0;

        virtual HRESULT __stdcall removeAttribute(
                       BSTR name) = 0;

        virtual HRESULT __stdcall getAttributeNode(
                       BSTR name,
                                IXMLDOMAttribute **attributeNode) = 0;

        virtual HRESULT __stdcall setAttributeNode(
                       IXMLDOMAttribute *DOMAttribute,
                                IXMLDOMAttribute **attributeNode) = 0;

        virtual HRESULT __stdcall removeAttributeNode(
                       IXMLDOMAttribute *DOMAttribute,
                                IXMLDOMAttribute **attributeNode) = 0;

        virtual HRESULT __stdcall getElementsByTagName(
                       BSTR tagName,
                                IXMLDOMNodeList **resultList) = 0;

        virtual HRESULT __stdcall normalize( void) = 0;

    };
# 3974 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMText;



    struct __declspec(uuid("2933BF87-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMText : public IXMLDOMCharacterData
    {
    public:
        virtual HRESULT __stdcall splitText(
                       long offset,
                                IXMLDOMText **rightHandTextNode) = 0;

    };
# 4433 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMComment;



    struct __declspec(uuid("2933BF88-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMComment : public IXMLDOMCharacterData
    {
    public:
    };
# 4880 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMProcessingInstruction;



    struct __declspec(uuid("2933BF89-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMProcessingInstruction : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_target(
                                BSTR *name) = 0;

        virtual HRESULT __stdcall get_data(
                                BSTR *value) = 0;

        virtual HRESULT __stdcall put_data(
                       BSTR value) = 0;

    };
# 5294 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMCDATASection;



    struct __declspec(uuid("2933BF8A-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMCDATASection : public IXMLDOMText
    {
    public:
    };
# 5750 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMDocumentType;



    struct __declspec(uuid("2933BF8B-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMDocumentType : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_name(
                                BSTR *rootName) = 0;

        virtual HRESULT __stdcall get_entities(
                                IXMLDOMNamedNodeMap **entityMap) = 0;

        virtual HRESULT __stdcall get_notations(
                                IXMLDOMNamedNodeMap **notationMap) = 0;

    };
# 6164 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMNotation;



    struct __declspec(uuid("2933BF8C-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNotation : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_publicId(
                                VARIANT *publicID) = 0;

        virtual HRESULT __stdcall get_systemId(
                                VARIANT *systemID) = 0;

    };
# 6568 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMEntity;



    struct __declspec(uuid("2933BF8D-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMEntity : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_publicId(
                                VARIANT *publicID) = 0;

        virtual HRESULT __stdcall get_systemId(
                                VARIANT *systemID) = 0;

        virtual HRESULT __stdcall get_notationName(
                                BSTR *name) = 0;

    };
# 6982 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMEntityReference;



    struct __declspec(uuid("2933BF8E-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMEntityReference : public IXMLDOMNode
    {
    public:
    };
# 7366 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDOMParseError;



    struct __declspec(uuid("3efaa426-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXMLDOMParseError : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_errorCode(
                                long *errorCode) = 0;

        virtual HRESULT __stdcall get_url(
                                BSTR *urlString) = 0;

        virtual HRESULT __stdcall get_reason(
                                BSTR *reasonString) = 0;

        virtual HRESULT __stdcall get_srcText(
                                BSTR *sourceString) = 0;

        virtual HRESULT __stdcall get_line(
                                long *lineNumber) = 0;

        virtual HRESULT __stdcall get_linepos(
                                long *linePosition) = 0;

        virtual HRESULT __stdcall get_filepos(
                                long *filePosition) = 0;

    };
# 7556 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXTLRuntime;



    struct __declspec(uuid("3efaa425-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXTLRuntime : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall uniqueID(
                       IXMLDOMNode *pNode,
                                long *pID) = 0;

        virtual HRESULT __stdcall depth(
                       IXMLDOMNode *pNode,
                                long *pDepth) = 0;

        virtual HRESULT __stdcall childNumber(
                       IXMLDOMNode *pNode,
                                long *pNumber) = 0;

        virtual HRESULT __stdcall ancestorChildNumber(
                       BSTR bstrNodeName,
                       IXMLDOMNode *pNode,
                                long *pNumber) = 0;

        virtual HRESULT __stdcall absoluteChildNumber(
                       IXMLDOMNode *pNode,
                                long *pNumber) = 0;

        virtual HRESULT __stdcall formatIndex(
                       long lIndex,
                       BSTR bstrFormat,
                                BSTR *pbstrFormattedString) = 0;

        virtual HRESULT __stdcall formatNumber(
                       double dblNumber,
                       BSTR bstrFormat,
                                BSTR *pbstrFormattedString) = 0;

        virtual HRESULT __stdcall formatDate(
                       VARIANT varDate,
                       BSTR bstrFormat,
                                 VARIANT varDestLocale,
                                BSTR *pbstrFormattedString) = 0;

        virtual HRESULT __stdcall formatTime(
                       VARIANT varTime,
                       BSTR bstrFormat,
                                 VARIANT varDestLocale,
                                BSTR *pbstrFormattedString) = 0;

    };
# 8062 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID DIID_XMLDOMDocumentEvents;



    struct __declspec(uuid("3efaa427-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    XMLDOMDocumentEvents : public IDispatch
    {
    };
# 8170 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const CLSID CLSID_DOMDocument;



class __declspec(uuid("2933BF90-7B36-11d2-B20E-00C04F983E60"))
DOMDocument;


extern "C" const CLSID CLSID_DOMFreeThreadedDocument;



class __declspec(uuid("2933BF91-7B36-11d2-B20E-00C04F983E60"))
DOMFreeThreadedDocument;
# 8193 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLHttpRequest;



    struct __declspec(uuid("ED8C108D-4349-11D2-91A4-00C04F7969E8")) __declspec(novtable)
    IXMLHttpRequest : public IDispatch
    {
    public:
        virtual HRESULT __stdcall open(
                                 BSTR bstrMethod,
                                 BSTR bstrUrl,
                                 VARIANT varAsync,
                                 VARIANT bstrUser,
                                 VARIANT bstrPassword) = 0;

        virtual HRESULT __stdcall setRequestHeader(
                                 BSTR bstrHeader,
                                 BSTR bstrValue) = 0;

        virtual HRESULT __stdcall getResponseHeader(
                                 BSTR bstrHeader,
                                                     BSTR *pbstrValue) = 0;

        virtual HRESULT __stdcall getAllResponseHeaders(
                                                     BSTR *pbstrHeaders) = 0;

        virtual HRESULT __stdcall send(
                                 VARIANT varBody) = 0;

        virtual HRESULT __stdcall abort( void) = 0;

        virtual HRESULT __stdcall get_status(
                                           long *plStatus) = 0;

        virtual HRESULT __stdcall get_statusText(
                                                     BSTR *pbstrStatus) = 0;

        virtual HRESULT __stdcall get_responseXML(
                                                     IDispatch **ppBody) = 0;

        virtual HRESULT __stdcall get_responseText(
                                                     BSTR *pbstrBody) = 0;

        virtual HRESULT __stdcall get_responseBody(
                                           VARIANT *pvarBody) = 0;

        virtual HRESULT __stdcall get_responseStream(
                                           VARIANT *pvarBody) = 0;

        virtual HRESULT __stdcall get_readyState(
                                           long *plState) = 0;

        virtual HRESULT __stdcall put_onreadystatechange(
                                     IDispatch *pReadyStateSink) = 0;

    };
# 8456 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const CLSID CLSID_XMLHTTPRequest;



class __declspec(uuid("ED8C108E-4349-11D2-91A4-00C04F7969E8"))
XMLHTTPRequest;
# 8471 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDSOControl;



    struct __declspec(uuid("310afa62-0575-11d2-9ca9-0060b0ec3d39")) __declspec(novtable)
    IXMLDSOControl : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_XMLDocument(
                                IXMLDOMDocument **ppDoc) = 0;

        virtual HRESULT __stdcall put_XMLDocument(
                       IXMLDOMDocument *ppDoc) = 0;

        virtual HRESULT __stdcall get_JavaDSOCompatible(
                                BOOL *fJavaDSOCompatible) = 0;

        virtual HRESULT __stdcall put_JavaDSOCompatible(
                       BOOL fJavaDSOCompatible) = 0;

        virtual HRESULT __stdcall get_readyState(
                                long *state) = 0;

    };
# 8634 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const CLSID CLSID_XMLDSOControl;



class __declspec(uuid("550dda30-0541-11d2-9ca9-0060b0ec3d39"))
XMLDSOControl;
# 8649 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLElementCollection;



    struct __declspec(uuid("65725580-9B5D-11d0-9BFE-00C04FC99C8E")) __declspec(novtable)
    IXMLElementCollection : public IDispatch
    {
    public:
        virtual HRESULT __stdcall put_length(
                       long v) = 0;

        virtual HRESULT __stdcall get_length(
                                long *p) = 0;

        virtual HRESULT __stdcall get__newEnum(
                                IUnknown **ppUnk) = 0;

        virtual HRESULT __stdcall item(
                                 VARIANT var1,
                                 VARIANT var2,
                                IDispatch **ppDisp) = 0;

    };
# 8813 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDocument;



    struct __declspec(uuid("F52E2B61-18A1-11d1-B105-00805F49916B")) __declspec(novtable)
    IXMLDocument : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_root(
                                IXMLElement **p) = 0;

        virtual HRESULT __stdcall get_fileSize(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_fileModifiedDate(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_fileUpdatedDate(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_URL(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_URL(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_mimeType(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_readyState(
                                long *pl) = 0;

        virtual HRESULT __stdcall get_charset(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_charset(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_version(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_doctype(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_dtdURL(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall createElement(
                       VARIANT vType,
                                 VARIANT var1,
                                IXMLElement **ppElem) = 0;

    };
# 9077 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLDocument2;



    struct __declspec(uuid("2B8DE2FE-8D2D-11d1-B2FC-00C04FD915A9")) __declspec(novtable)
    IXMLDocument2 : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_root(
                                IXMLElement2 **p) = 0;

        virtual HRESULT __stdcall get_fileSize(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_fileModifiedDate(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_fileUpdatedDate(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_URL(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_URL(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_mimeType(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_readyState(
                                long *pl) = 0;

        virtual HRESULT __stdcall get_charset(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_charset(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_version(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_doctype(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_dtdURL(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall createElement(
                       VARIANT vType,
                                 VARIANT var1,
                                IXMLElement2 **ppElem) = 0;

        virtual HRESULT __stdcall get_async(
                                VARIANT_BOOL *pf) = 0;

        virtual HRESULT __stdcall put_async(
                       VARIANT_BOOL f) = 0;

    };
# 9361 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLElement;



    struct __declspec(uuid("3F7F31AC-E15F-11d0-9C25-00C04FC99C8E")) __declspec(novtable)
    IXMLElement : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_tagName(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_tagName(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_parent(
                                IXMLElement **ppParent) = 0;

        virtual HRESULT __stdcall setAttribute(
                       BSTR strPropertyName,
                       VARIANT PropertyValue) = 0;

        virtual HRESULT __stdcall getAttribute(
                       BSTR strPropertyName,
                                VARIANT *PropertyValue) = 0;

        virtual HRESULT __stdcall removeAttribute(
                       BSTR strPropertyName) = 0;

        virtual HRESULT __stdcall get_children(
                                IXMLElementCollection **pp) = 0;

        virtual HRESULT __stdcall get_type(
                                long *plType) = 0;

        virtual HRESULT __stdcall get_text(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_text(
                       BSTR p) = 0;

        virtual HRESULT __stdcall addChild(
                       IXMLElement *pChildElem,
            long lIndex,
            long lReserved) = 0;

        virtual HRESULT __stdcall removeChild(
                       IXMLElement *pChildElem) = 0;

    };
# 9609 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLElement2;



    struct __declspec(uuid("2B8DE2FF-8D2D-11d1-B2FC-00C04FD915A9")) __declspec(novtable)
    IXMLElement2 : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_tagName(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_tagName(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_parent(
                                IXMLElement2 **ppParent) = 0;

        virtual HRESULT __stdcall setAttribute(
                       BSTR strPropertyName,
                       VARIANT PropertyValue) = 0;

        virtual HRESULT __stdcall getAttribute(
                       BSTR strPropertyName,
                                VARIANT *PropertyValue) = 0;

        virtual HRESULT __stdcall removeAttribute(
                       BSTR strPropertyName) = 0;

        virtual HRESULT __stdcall get_children(
                                IXMLElementCollection **pp) = 0;

        virtual HRESULT __stdcall get_type(
                                long *plType) = 0;

        virtual HRESULT __stdcall get_text(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_text(
                       BSTR p) = 0;

        virtual HRESULT __stdcall addChild(
                       IXMLElement2 *pChildElem,
            long lIndex,
            long lReserved) = 0;

        virtual HRESULT __stdcall removeChild(
                       IXMLElement2 *pChildElem) = 0;

        virtual HRESULT __stdcall get_attributes(
                                IXMLElementCollection **pp) = 0;

    };
# 9867 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLAttribute;



    struct __declspec(uuid("D4D4A0FC-3B73-11d1-B2B4-00C04FB92596")) __declspec(novtable)
    IXMLAttribute : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_name(
                                BSTR *n) = 0;

        virtual HRESULT __stdcall get_value(
                                BSTR *v) = 0;

    };
# 10007 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const IID IID_IXMLError;



    struct __declspec(uuid("948C5AD3-C58D-11d0-9C0B-00C04FC99C8E")) __declspec(novtable)
    IXMLError : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetErrorInfo(
            XML_ERROR *pErrorReturn) = 0;

    };
# 10080 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern "C" const CLSID CLSID_XMLDocument;



class __declspec(uuid("CFC399AF-D876-11d0-9C10-00C04FC99C8E"))
XMLDocument;
# 10096 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/msxml.h"
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec;






}
# 425 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h" 2



extern "C"{
# 446 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
#pragma comment(lib,"uuid.lib")
# 469 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID CLSID_SBS_StdURLMoniker;
extern "C" const IID CLSID_SBS_HttpProtocol;
extern "C" const IID CLSID_SBS_FtpProtocol;
extern "C" const IID CLSID_SBS_GopherProtocol;
extern "C" const IID CLSID_SBS_HttpSProtocol;
extern "C" const IID CLSID_SBS_FileProtocol;
extern "C" const IID CLSID_SBS_MkProtocol;
extern "C" const IID CLSID_SBS_UrlMkBindCtx;
extern "C" const IID CLSID_SBS_SoftDistExt;
extern "C" const IID CLSID_SBS_CdlProtocol;
extern "C" const IID CLSID_SBS_ClassInstallFilter;
extern "C" const IID CLSID_SBS_InternetSecurityManager;
extern "C" const IID CLSID_SBS_InternetZoneManager;







extern "C" const IID IID_IAsyncMoniker;
extern "C" const IID CLSID_StdURLMoniker;
extern "C" const IID CLSID_HttpProtocol;
extern "C" const IID CLSID_FtpProtocol;
extern "C" const IID CLSID_GopherProtocol;
extern "C" const IID CLSID_HttpSProtocol;
extern "C" const IID CLSID_FileProtocol;
extern "C" const IID CLSID_ResProtocol;
extern "C" const IID CLSID_AboutProtocol;
extern "C" const IID CLSID_JSProtocol;
extern "C" const IID CLSID_MailtoProtocol;
extern "C" const IID CLSID_IE4_PROTOCOLS;
extern "C" const IID CLSID_MkProtocol;
extern "C" const IID CLSID_StdURLProtocol;
extern "C" const IID CLSID_UrlMkBindCtx;
extern "C" const IID CLSID_CdlProtocol;
extern "C" const IID CLSID_ClassInstallFilter;
extern "C" const IID IID_IAsyncBindCtx;
# 515 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" HRESULT __stdcall CreateURLMoniker( LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER * ppmk);
extern "C" HRESULT __stdcall CreateURLMonikerEx( LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER * ppmk, DWORD dwFlags);
extern "C" HRESULT __stdcall GetClassURL( LPCWSTR szURL, CLSID *pClsID);
extern "C" HRESULT __stdcall CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb,
                                         IEnumFORMATETC *pEFetc, IBindCtx **ppBC);

extern "C" HRESULT __stdcall CreateURLMonikerEx2( LPMONIKER pMkCtx, IUri* pUri, LPMONIKER * ppmk, DWORD dwFlags);

extern "C" HRESULT __stdcall CreateAsyncBindCtxEx( IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum,
                                     IBindCtx **ppBC, DWORD reserved);
extern "C" HRESULT __stdcall MkParseDisplayNameEx( IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten,
                                         LPMONIKER *ppmk);
extern "C" HRESULT __stdcall RegisterBindStatusCallback( LPBC pBC, IBindStatusCallback *pBSCb,
                                         IBindStatusCallback** ppBSCBPrev, DWORD dwReserved);
extern "C" HRESULT __stdcall RevokeBindStatusCallback( LPBC pBC, IBindStatusCallback *pBSCb);
extern "C" HRESULT __stdcall GetClassFileOrMime( LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid);
extern "C" HRESULT __stdcall IsValidURL( LPBC pBC, LPCWSTR szURL, DWORD dwReserved);
extern "C" HRESULT __stdcall CoGetClassObjectFromURL( const IID & rCLASSID,
                 LPCWSTR szCODE, DWORD dwFileVersionMS,
            DWORD dwFileVersionLS, LPCWSTR szTYPE,
                 LPBINDCTX pBindCtx, DWORD dwClsContext,
                       LPVOID pvReserved, const IID & riid, LPVOID * ppv);
extern "C" HRESULT __stdcall IEInstallScope( LPDWORD pdwScope);
extern "C" HRESULT __stdcall FaultInIEFeature( HWND hWnd,
                 uCLSSPEC *pClassSpec,
                        QUERYCONTEXT *pQuery, DWORD dwFlags);
extern "C" HRESULT __stdcall GetComponentIDFromCLSSPEC( uCLSSPEC *pClassspec,
                     LPSTR * ppszComponentID);
# 553 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" HRESULT __stdcall IsAsyncMoniker( IMoniker* pmk);
extern "C" HRESULT __stdcall CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg);

extern "C" HRESULT __stdcall RegisterMediaTypes( UINT ctypes, const LPCSTR* rgszTypes, CLIPFORMAT* rgcfTypes);
extern "C" HRESULT __stdcall FindMediaType( LPCSTR rgszTypes, CLIPFORMAT* rgcfTypes);
extern "C" HRESULT __stdcall CreateFormatEnumerator( UINT cfmtetc, FORMATETC* rgfmtetc, IEnumFORMATETC** ppenumfmtetc);
extern "C" HRESULT __stdcall RegisterFormatEnumerator( LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved);
extern "C" HRESULT __stdcall RevokeFormatEnumerator( LPBC pBC, IEnumFORMATETC *pEFetc);
extern "C" HRESULT __stdcall RegisterMediaTypeClass( LPBC pBC, UINT ctypes, const LPCSTR* rgszTypes, CLSID *rgclsID, DWORD reserved);
extern "C" HRESULT __stdcall FindMediaTypeClass( LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved);
extern "C" HRESULT __stdcall UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);
extern "C" HRESULT __stdcall UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLengthOut, DWORD dwReserved);
extern "C" HRESULT __stdcall FindMimeFromData(
                                 LPBC pBC,
                                 LPCWSTR pwzUrl,
                                 LPVOID pBuffer,
                                 DWORD cbSize,
                                 LPCWSTR pwzMimeProposed,
                                 DWORD dwMimeFlags,
                                 LPWSTR *ppwzMimeOut,
                                 DWORD dwReserved);
# 584 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" HRESULT __stdcall ObtainUserAgentString(
                                         DWORD dwOption,
                                         LPSTR pszUAOut,
                                         DWORD *cbSize);
extern "C" HRESULT __stdcall CompareSecurityIds( BYTE* pbSecurityId1, DWORD dwLen1, BYTE* pbSecurityId2, DWORD dwLen2, DWORD dwReserved);
extern "C" HRESULT __stdcall CompatFlagsFromClsid( CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags);
# 746 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec;







typedef IPersistMoniker *LPPERSISTMONIKER;


extern "C" const IID IID_IPersistMoniker;



    struct __declspec(uuid("79eac9c9-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IPersistMoniker : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassID(
                                   CLSID *pClassID) = 0;

        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall Load(
                       BOOL fFullyAvailable,
                                     IMoniker *pimkName,
                                     LPBC pibc,
                       DWORD grfMode) = 0;

        virtual HRESULT __stdcall Save(
                                     IMoniker *pimkName,
                                     LPBC pbc,
                       BOOL fRemember) = 0;

        virtual HRESULT __stdcall SaveCompleted(
                                     IMoniker *pimkName,
                                     LPBC pibc) = 0;

        virtual HRESULT __stdcall GetCurMoniker(
                                             IMoniker **ppimkName) = 0;

    };
# 899 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec;







typedef IMonikerProp *LPMONIKERPROP;

typedef
enum __MIDL_IMonikerProp_0001
    {
        MIMETYPEPROP = 0,
        USE_SRC_URL = 0x1,
        CLASSIDPROP = 0x2,
        TRUSTEDDOWNLOADPROP = 0x3,
        POPUPLEVELPROP = 0x4
    } MONIKERPROPERTY;


extern "C" const IID IID_IMonikerProp;



    struct __declspec(uuid("a5ca5f7f-1847-4d87-9c5b-918509f7511d")) __declspec(novtable)
    IMonikerProp : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PutProperty(
                       MONIKERPROPERTY mkp,
                                 LPCWSTR val) = 0;

    };
# 1004 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec;







typedef IBindProtocol *LPBINDPROTOCOL;


extern "C" const IID IID_IBindProtocol;



    struct __declspec(uuid("79eac9cd-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBindProtocol : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateBinding(
                       LPCWSTR szUrl,
                       IBindCtx *pbc,
                        IBinding **ppb) = 0;

    };
# 1101 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec;







typedef IBinding *LPBINDING;


extern "C" const IID IID_IBinding;



    struct __declspec(uuid("79eac9c0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBinding : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Abort( void) = 0;

        virtual HRESULT __stdcall Suspend( void) = 0;

        virtual HRESULT __stdcall Resume( void) = 0;

        virtual HRESULT __stdcall SetPriority(
                       LONG nPriority) = 0;

        virtual HRESULT __stdcall GetPriority(
                                   LONG *pnPriority) = 0;

        virtual HRESULT __stdcall GetBindResult(
                        CLSID *pclsidProtocol,
                        DWORD *pdwResult,

                        LPOLESTR *pszResult,
                            DWORD *pdwReserved) = 0;

    };
# 1234 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
                HRESULT __stdcall IBinding_RemoteGetBindResult_Proxy(
              IBinding * This,
                           CLSID *pclsidProtocol,
                           DWORD *pdwResult,
                                     LPOLESTR *pszResult,
               DWORD dwReserved);


void __stdcall IBinding_RemoteGetBindResult_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1265 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec;







typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;

typedef
enum __MIDL_IBindStatusCallback_0001
    {
        BINDVERB_GET = 0,
        BINDVERB_POST = 0x1,
        BINDVERB_PUT = 0x2,
        BINDVERB_CUSTOM = 0x3,
        BINDVERB_RESERVED1 = 0x4
    } BINDVERB;

typedef
enum __MIDL_IBindStatusCallback_0002
    {
        BINDINFOF_URLENCODESTGMEDDATA = 0x1,
        BINDINFOF_URLENCODEDEXTRAINFO = 0x2
    } BINDINFOF;

typedef
enum __MIDL_IBindStatusCallback_0003
    {
        BINDF_ASYNCHRONOUS = 0x1,
        BINDF_ASYNCSTORAGE = 0x2,
        BINDF_NOPROGRESSIVERENDERING = 0x4,
        BINDF_OFFLINEOPERATION = 0x8,
        BINDF_GETNEWESTVERSION = 0x10,
        BINDF_NOWRITECACHE = 0x20,
        BINDF_NEEDFILE = 0x40,
        BINDF_PULLDATA = 0x80,
        BINDF_IGNORESECURITYPROBLEM = 0x100,
        BINDF_RESYNCHRONIZE = 0x200,
        BINDF_HYPERLINK = 0x400,
        BINDF_NO_UI = 0x800,
        BINDF_SILENTOPERATION = 0x1000,
        BINDF_PRAGMA_NO_CACHE = 0x2000,
        BINDF_GETCLASSOBJECT = 0x4000,
        BINDF_RESERVED_1 = 0x8000,
        BINDF_FREE_THREADED = 0x10000,
        BINDF_DIRECT_READ = 0x20000,
        BINDF_FORMS_SUBMIT = 0x40000,
        BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,
        BINDF_FROMURLMON = 0x100000,
        BINDF_FWD_BACK = 0x200000,
        BINDF_PREFERDEFAULTHANDLER = 0x400000,
        BINDF_ENFORCERESTRICTED = 0x800000,
        BINDF_RESERVED_2 = 0x80000000,
        BINDF_RESERVED_3 = 0x1000000,
        BINDF_RESERVED_4 = 0x2000000,
        BINDF_RESERVED_5 = 0x4000000,
        BINDF_RESERVED_6 = 0x8000000,
        BINDF_RESERVED_7 = 0x40000000,
        BINDF_RESERVED_8 = 0x20000000
    } BINDF;

typedef
enum __MIDL_IBindStatusCallback_0004
    {
        URL_ENCODING_NONE = 0,
        URL_ENCODING_ENABLE_UTF8 = 0x10000000,
        URL_ENCODING_DISABLE_UTF8 = 0x20000000
    } URL_ENCODING;

typedef struct _tagBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
    } BINDINFO;

typedef struct _REMSECURITY_ATTRIBUTES
    {
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    BOOL bInheritHandle;
    } REMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;

typedef struct _tagRemBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
    } RemBINDINFO;

typedef struct tagRemFORMATETC
    {
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } RemFORMATETC;

typedef struct tagRemFORMATETC *LPREMFORMATETC;

typedef
enum __MIDL_IBindStatusCallback_0005
    {
        BINDINFO_OPTIONS_WININETFLAG = 0x10000,
        BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,
        BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,
        BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,
        BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,
        BINDINFO_OPTIONS_SECURITYOPTOUT = 0x200000,
        BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 0x400000,
        BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 0x800000,
        BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x1000000,
        BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 0x2000000,
        BINDINFO_WPC_DOWNLOADBLOCKED = 0x8000000,
        BINDINFO_WPC_LOGGING_ENABLED = 0x10000000,
        BINDINFO_OPTIONS_ALLOWCONNECTDATA = 0x20000000,
        BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 0x40000000,
        BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = ( int )0x80000000
    } BINDINFO_OPTIONS;

typedef
enum __MIDL_IBindStatusCallback_0006
    {
        BSCF_FIRSTDATANOTIFICATION = 0x1,
        BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,
        BSCF_LASTDATANOTIFICATION = 0x4,
        BSCF_DATAFULLYAVAILABLE = 0x8,
        BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,
        BSCF_SKIPDRAINDATAFORFILEURLS = 0x20,
        BSCF_64BITLENGTHDOWNLOAD = 0x40
    } BSCF;

typedef
enum tagBINDSTATUS
    {
        BINDSTATUS_FINDINGRESOURCE = 1,
        BINDSTATUS_CONNECTING = ( BINDSTATUS_FINDINGRESOURCE + 1 ) ,
        BINDSTATUS_REDIRECTING = ( BINDSTATUS_CONNECTING + 1 ) ,
        BINDSTATUS_BEGINDOWNLOADDATA = ( BINDSTATUS_REDIRECTING + 1 ) ,
        BINDSTATUS_DOWNLOADINGDATA = ( BINDSTATUS_BEGINDOWNLOADDATA + 1 ) ,
        BINDSTATUS_ENDDOWNLOADDATA = ( BINDSTATUS_DOWNLOADINGDATA + 1 ) ,
        BINDSTATUS_BEGINDOWNLOADCOMPONENTS = ( BINDSTATUS_ENDDOWNLOADDATA + 1 ) ,
        BINDSTATUS_INSTALLINGCOMPONENTS = ( BINDSTATUS_BEGINDOWNLOADCOMPONENTS + 1 ) ,
        BINDSTATUS_ENDDOWNLOADCOMPONENTS = ( BINDSTATUS_INSTALLINGCOMPONENTS + 1 ) ,
        BINDSTATUS_USINGCACHEDCOPY = ( BINDSTATUS_ENDDOWNLOADCOMPONENTS + 1 ) ,
        BINDSTATUS_SENDINGREQUEST = ( BINDSTATUS_USINGCACHEDCOPY + 1 ) ,
        BINDSTATUS_CLASSIDAVAILABLE = ( BINDSTATUS_SENDINGREQUEST + 1 ) ,
        BINDSTATUS_MIMETYPEAVAILABLE = ( BINDSTATUS_CLASSIDAVAILABLE + 1 ) ,
        BINDSTATUS_CACHEFILENAMEAVAILABLE = ( BINDSTATUS_MIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_BEGINSYNCOPERATION = ( BINDSTATUS_CACHEFILENAMEAVAILABLE + 1 ) ,
        BINDSTATUS_ENDSYNCOPERATION = ( BINDSTATUS_BEGINSYNCOPERATION + 1 ) ,
        BINDSTATUS_BEGINUPLOADDATA = ( BINDSTATUS_ENDSYNCOPERATION + 1 ) ,
        BINDSTATUS_UPLOADINGDATA = ( BINDSTATUS_BEGINUPLOADDATA + 1 ) ,
        BINDSTATUS_ENDUPLOADDATA = ( BINDSTATUS_UPLOADINGDATA + 1 ) ,
        BINDSTATUS_PROTOCOLCLASSID = ( BINDSTATUS_ENDUPLOADDATA + 1 ) ,
        BINDSTATUS_ENCODING = ( BINDSTATUS_PROTOCOLCLASSID + 1 ) ,
        BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = ( BINDSTATUS_ENCODING + 1 ) ,
        BINDSTATUS_CLASSINSTALLLOCATION = ( BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_DECODING = ( BINDSTATUS_CLASSINSTALLLOCATION + 1 ) ,
        BINDSTATUS_LOADINGMIMEHANDLER = ( BINDSTATUS_DECODING + 1 ) ,
        BINDSTATUS_CONTENTDISPOSITIONATTACH = ( BINDSTATUS_LOADINGMIMEHANDLER + 1 ) ,
        BINDSTATUS_FILTERREPORTMIMETYPE = ( BINDSTATUS_CONTENTDISPOSITIONATTACH + 1 ) ,
        BINDSTATUS_CLSIDCANINSTANTIATE = ( BINDSTATUS_FILTERREPORTMIMETYPE + 1 ) ,
        BINDSTATUS_IUNKNOWNAVAILABLE = ( BINDSTATUS_CLSIDCANINSTANTIATE + 1 ) ,
        BINDSTATUS_DIRECTBIND = ( BINDSTATUS_IUNKNOWNAVAILABLE + 1 ) ,
        BINDSTATUS_RAWMIMETYPE = ( BINDSTATUS_DIRECTBIND + 1 ) ,
        BINDSTATUS_PROXYDETECTING = ( BINDSTATUS_RAWMIMETYPE + 1 ) ,
        BINDSTATUS_ACCEPTRANGES = ( BINDSTATUS_PROXYDETECTING + 1 ) ,
        BINDSTATUS_COOKIE_SENT = ( BINDSTATUS_ACCEPTRANGES + 1 ) ,
        BINDSTATUS_COMPACT_POLICY_RECEIVED = ( BINDSTATUS_COOKIE_SENT + 1 ) ,
        BINDSTATUS_COOKIE_SUPPRESSED = ( BINDSTATUS_COMPACT_POLICY_RECEIVED + 1 ) ,
        BINDSTATUS_COOKIE_STATE_UNKNOWN = ( BINDSTATUS_COOKIE_SUPPRESSED + 1 ) ,
        BINDSTATUS_COOKIE_STATE_ACCEPT = ( BINDSTATUS_COOKIE_STATE_UNKNOWN + 1 ) ,
        BINDSTATUS_COOKIE_STATE_REJECT = ( BINDSTATUS_COOKIE_STATE_ACCEPT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_PROMPT = ( BINDSTATUS_COOKIE_STATE_REJECT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_LEASH = ( BINDSTATUS_COOKIE_STATE_PROMPT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_DOWNGRADE = ( BINDSTATUS_COOKIE_STATE_LEASH + 1 ) ,
        BINDSTATUS_POLICY_HREF = ( BINDSTATUS_COOKIE_STATE_DOWNGRADE + 1 ) ,
        BINDSTATUS_P3P_HEADER = ( BINDSTATUS_POLICY_HREF + 1 ) ,
        BINDSTATUS_SESSION_COOKIE_RECEIVED = ( BINDSTATUS_P3P_HEADER + 1 ) ,
        BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = ( BINDSTATUS_SESSION_COOKIE_RECEIVED + 1 ) ,
        BINDSTATUS_SESSION_COOKIES_ALLOWED = ( BINDSTATUS_PERSISTENT_COOKIE_RECEIVED + 1 ) ,
        BINDSTATUS_CACHECONTROL = ( BINDSTATUS_SESSION_COOKIES_ALLOWED + 1 ) ,
        BINDSTATUS_CONTENTDISPOSITIONFILENAME = ( BINDSTATUS_CACHECONTROL + 1 ) ,
        BINDSTATUS_MIMETEXTPLAINMISMATCH = ( BINDSTATUS_CONTENTDISPOSITIONFILENAME + 1 ) ,
        BINDSTATUS_PUBLISHERAVAILABLE = ( BINDSTATUS_MIMETEXTPLAINMISMATCH + 1 ) ,
        BINDSTATUS_DISPLAYNAMEAVAILABLE = ( BINDSTATUS_PUBLISHERAVAILABLE + 1 ) ,
        BINDSTATUS_SSLUX_NAVBLOCKED = ( BINDSTATUS_DISPLAYNAMEAVAILABLE + 1 ) ,
        BINDSTATUS_SERVER_MIMETYPEAVAILABLE = ( BINDSTATUS_SSLUX_NAVBLOCKED + 1 ) ,
        BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = ( BINDSTATUS_SERVER_MIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_64BIT_PROGRESS = ( BINDSTATUS_SNIFFED_CLASSIDAVAILABLE + 1 ) ,
        BINDSTATUS_LAST = BINDSTATUS_64BIT_PROGRESS,
        BINDSTATUS_RESERVED_0 = ( BINDSTATUS_LAST + 1 ) ,
        BINDSTATUS_RESERVED_1 = ( BINDSTATUS_RESERVED_0 + 1 ) ,
        BINDSTATUS_RESERVED_2 = ( BINDSTATUS_RESERVED_1 + 1 ) ,
        BINDSTATUS_RESERVED_3 = ( BINDSTATUS_RESERVED_2 + 1 ) ,
        BINDSTATUS_RESERVED_4 = ( BINDSTATUS_RESERVED_3 + 1 ) ,
        BINDSTATUS_RESERVED_5 = ( BINDSTATUS_RESERVED_4 + 1 ) ,
        BINDSTATUS_RESERVED_6 = ( BINDSTATUS_RESERVED_5 + 1 ) ,
        BINDSTATUS_RESERVED_7 = ( BINDSTATUS_RESERVED_6 + 1 ) ,
        BINDSTATUS_RESERVED_8 = ( BINDSTATUS_RESERVED_7 + 1 ) ,
        BINDSTATUS_RESERVED_9 = ( BINDSTATUS_RESERVED_8 + 1 ) ,
        BINDSTATUS_RESERVED_A = ( BINDSTATUS_RESERVED_9 + 1 ) ,
        BINDSTATUS_RESERVED_B = ( BINDSTATUS_RESERVED_A + 1 ) ,
        BINDSTATUS_RESERVED_C = ( BINDSTATUS_RESERVED_B + 1 ) ,
        BINDSTATUS_RESERVED_D = ( BINDSTATUS_RESERVED_C + 1 ) ,
        BINDSTATUS_RESERVED_E = ( BINDSTATUS_RESERVED_D + 1 ) ,
        BINDSTATUS_LAST_PRIVATE = BINDSTATUS_RESERVED_E
    } BINDSTATUS;


extern "C" const IID IID_IBindStatusCallback;



    struct __declspec(uuid("79eac9c1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBindStatusCallback : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnStartBinding(
                       DWORD dwReserved,
                                     IBinding *pib) = 0;

        virtual HRESULT __stdcall GetPriority(
                                   LONG *pnPriority) = 0;

        virtual HRESULT __stdcall OnLowResource(
                       DWORD reserved) = 0;

        virtual HRESULT __stdcall OnProgress(
                       ULONG ulProgress,
                       ULONG ulProgressMax,
                       ULONG ulStatusCode,
                                             LPCWSTR szStatusText) = 0;

        virtual HRESULT __stdcall OnStopBinding(
                       HRESULT hresult,
                                             LPCWSTR szError) = 0;

        virtual HRESULT __stdcall GetBindInfo(
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo) = 0;

        virtual HRESULT __stdcall OnDataAvailable(
                       DWORD grfBSCF,
                       DWORD dwSize,
                       FORMATETC *pformatetc,
                       STGMEDIUM *pstgmed) = 0;

        virtual HRESULT __stdcall OnObjectAvailable(
                                 const IID & riid,
                                             IUnknown *punk) = 0;

    };
# 1664 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
                HRESULT __stdcall IBindStatusCallback_RemoteGetBindInfo_Proxy(
              IBindStatusCallback * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed);


void __stdcall IBindStatusCallback_RemoteGetBindInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IBindStatusCallback_RemoteOnDataAvailable_Proxy(
              IBindStatusCallback * This,
               DWORD grfBSCF,
               DWORD dwSize,
                         RemFORMATETC *pformatetc,
                         RemSTGMEDIUM *pstgmed);


void __stdcall IBindStatusCallback_RemoteOnDataAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1709 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec;







typedef IBindStatusCallbackEx *LPBINDSTATUSCALLBACKEX;

typedef
enum __MIDL_IBindStatusCallbackEx_0001
    {
        BINDF2_DISABLEBASICOVERHTTP = 0x1,
        BINDF2_DISABLEAUTOCOOKIEHANDLING = 0x2,
        BINDF2_READ_DATA_GREATER_THAN_4GB = 0x4,
        BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x8,
        BINDF2_SETDOWNLOADMODE = 0x20,
        BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 0x40,
        BINDF2_KEEP_CALLBACK_MODULE_LOADED = 0x80,
        BINDF2_ALLOW_PROXY_CRED_PROMPT = 0x100,
        BINDF2_RESERVED_15 = 0x800,
        BINDF2_RESERVED_14 = 0x1000,
        BINDF2_RESERVED_13 = 0x2000,
        BINDF2_RESERVED_12 = 0x4000,
        BINDF2_RESERVED_11 = 0x8000,
        BINDF2_RESERVED_10 = 0x10000,
        BINDF2_RESERVED_F = 0x20000,
        BINDF2_RESERVED_E = 0x40000,
        BINDF2_RESERVED_D = 0x80000,
        BINDF2_RESERVED_C = 0x100000,
        BINDF2_RESERVED_B = 0x200000,
        BINDF2_RESERVED_A = 0x400000,
        BINDF2_RESERVED_9 = 0x800000,
        BINDF2_RESERVED_8 = 0x1000000,
        BINDF2_RESERVED_7 = 0x2000000,
        BINDF2_RESERVED_6 = 0x4000000,
        BINDF2_RESERVED_5 = 0x8000000,
        BINDF2_RESERVED_4 = 0x10000000,
        BINDF2_RESERVED_3 = 0x20000000,
        BINDF2_RESERVED_2 = 0x40000000,
        BINDF2_RESERVED_1 = 0x80000000
    } BINDF2;


extern "C" const IID IID_IBindStatusCallbackEx;



    struct __declspec(uuid("aaa74ef9-8ee7-4659-88d9-f8c504da73cc")) __declspec(novtable)
    IBindStatusCallbackEx : public IBindStatusCallback
    {
    public:
        virtual HRESULT __stdcall GetBindInfoEx(
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo,
                        DWORD *grfBINDF2,
                        DWORD *pdwReserved) = 0;

    };
# 1897 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
                HRESULT __stdcall IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(
              IBindStatusCallbackEx * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed,
                           DWORD *grfBINDF2,
                           DWORD *pdwReserved);


void __stdcall IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1925 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec;







typedef IAuthenticate *LPAUTHENTICATION;


extern "C" const IID IID_IAuthenticate;



    struct __declspec(uuid("79eac9d0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IAuthenticate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Authenticate(
                                             HWND *phwnd,
                                             LPWSTR *pszUsername,
                                             LPWSTR *pszPassword) = 0;

    };
# 2022 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec;







typedef IAuthenticateEx *LPAUTHENTICATIONEX;

typedef
enum __MIDL_IAuthenticateEx_0001
    {
        AUTHENTICATEF_PROXY = 0x1,
        AUTHENTICATEF_BASIC = 0x2,
        AUTHENTICATEF_HTTP = 0x4
    } AUTHENTICATEF;

typedef struct _tagAUTHENTICATEINFO
    {
    DWORD dwFlags;
    DWORD dwReserved;
    } AUTHENTICATEINFO;


extern "C" const IID IID_IAuthenticateEx;



    struct __declspec(uuid("2ad1edaf-d83d-48b5-9adf-03dbe19f53bd")) __declspec(novtable)
    IAuthenticateEx : public IAuthenticate
    {
    public:
        virtual HRESULT __stdcall AuthenticateEx(
                                             HWND *phwnd,
                                             LPWSTR *pszUsername,
                                             LPWSTR *pszPassword,
                                 AUTHENTICATEINFO *pauthinfo) = 0;

    };
# 2145 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec;







typedef IHttpNegotiate *LPHTTPNEGOTIATE;


extern "C" const IID IID_IHttpNegotiate;



    struct __declspec(uuid("79eac9d2-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IHttpNegotiate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall BeginningTransaction(
                                 LPCWSTR szURL,
                                             LPCWSTR szHeaders,
                       DWORD dwReserved,
                                             LPWSTR *pszAdditionalHeaders) = 0;

        virtual HRESULT __stdcall OnResponse(
                       DWORD dwResponseCode,
                                             LPCWSTR szResponseHeaders,
                                             LPCWSTR szRequestHeaders,
                                             LPWSTR *pszAdditionalRequestHeaders) = 0;

    };
# 2260 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec;







typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2;


extern "C" const IID IID_IHttpNegotiate2;



    struct __declspec(uuid("4F9F9FCB-E0F4-48eb-B7AB-FA2EA9365CB4")) __declspec(novtable)
    IHttpNegotiate2 : public IHttpNegotiate
    {
    public:
        virtual HRESULT __stdcall GetRootSecurityId(
                                                                        BYTE *pbSecurityId,
                                         DWORD *pcbSecurityId,
                       DWORD_PTR dwReserved) = 0;

    };
# 2378 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec;







typedef IHttpNegotiate3 *LPHTTPNEGOTIATE3;


extern "C" const IID IID_IHttpNegotiate3;



    struct __declspec(uuid("57b6c80a-34c2-4602-bc26-66a02fc57153")) __declspec(novtable)
    IHttpNegotiate3 : public IHttpNegotiate2
    {
    public:
        virtual HRESULT __stdcall GetSerializedClientCertContext(
                                                                                     BYTE **ppbCert,
                                   DWORD *pcbCert) = 0;

    };
# 2504 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec;







typedef IWinInetFileStream *LPWININETFILESTREAM;


extern "C" const IID IID_IWinInetFileStream;



    struct __declspec(uuid("F134C4B7-B1F8-4e75-B886-74B90943BECB")) __declspec(novtable)
    IWinInetFileStream : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetHandleForUnlock(
                       DWORD_PTR hWinInetLockHandle,
                       DWORD_PTR dwReserved) = 0;

        virtual HRESULT __stdcall SetDeleteFile(
                       DWORD_PTR dwReserved) = 0;

    };
# 2609 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec;







typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;


extern "C" const IID IID_IWindowForBindingUI;



    struct __declspec(uuid("79eac9d5-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWindowForBindingUI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow(
                       const GUID & rguidReason,
                        HWND *phwnd) = 0;

    };
# 2704 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec;







typedef ICodeInstall *LPCODEINSTALL;

typedef
enum __MIDL_ICodeInstall_0001
    {
        CIP_DISK_FULL = 0,
        CIP_ACCESS_DENIED = ( CIP_DISK_FULL + 1 ) ,
        CIP_NEWER_VERSION_EXISTS = ( CIP_ACCESS_DENIED + 1 ) ,
        CIP_OLDER_VERSION_EXISTS = ( CIP_NEWER_VERSION_EXISTS + 1 ) ,
        CIP_NAME_CONFLICT = ( CIP_OLDER_VERSION_EXISTS + 1 ) ,
        CIP_TRUST_VERIFICATION_COMPONENT_MISSING = ( CIP_NAME_CONFLICT + 1 ) ,
        CIP_EXE_SELF_REGISTERATION_TIMEOUT = ( CIP_TRUST_VERIFICATION_COMPONENT_MISSING + 1 ) ,
        CIP_UNSAFE_TO_ABORT = ( CIP_EXE_SELF_REGISTERATION_TIMEOUT + 1 ) ,
        CIP_NEED_REBOOT = ( CIP_UNSAFE_TO_ABORT + 1 ) ,
        CIP_NEED_REBOOT_UI_PERMISSION = ( CIP_NEED_REBOOT + 1 )
    } CIP_STATUS;


extern "C" const IID IID_ICodeInstall;



    struct __declspec(uuid("79eac9d1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    ICodeInstall : public IWindowForBindingUI
    {
    public:
        virtual HRESULT __stdcall OnCodeInstallProblem(
                       ULONG ulStatusCode,
                               LPCWSTR szDestination,
                               LPCWSTR szSource,
                       DWORD dwReserved) = 0;

    };
# 2832 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec;







typedef
enum __MIDL_IUri_0001
    {
        Uri_PROPERTY_ABSOLUTE_URI = 0,
        Uri_PROPERTY_STRING_START = Uri_PROPERTY_ABSOLUTE_URI,
        Uri_PROPERTY_AUTHORITY = 1,
        Uri_PROPERTY_DISPLAY_URI = 2,
        Uri_PROPERTY_DOMAIN = 3,
        Uri_PROPERTY_EXTENSION = 4,
        Uri_PROPERTY_FRAGMENT = 5,
        Uri_PROPERTY_HOST = 6,
        Uri_PROPERTY_PASSWORD = 7,
        Uri_PROPERTY_PATH = 8,
        Uri_PROPERTY_PATH_AND_QUERY = 9,
        Uri_PROPERTY_QUERY = 10,
        Uri_PROPERTY_RAW_URI = 11,
        Uri_PROPERTY_SCHEME_NAME = 12,
        Uri_PROPERTY_USER_INFO = 13,
        Uri_PROPERTY_USER_NAME = 14,
        Uri_PROPERTY_STRING_LAST = Uri_PROPERTY_USER_NAME,
        Uri_PROPERTY_HOST_TYPE = 15,
        Uri_PROPERTY_DWORD_START = Uri_PROPERTY_HOST_TYPE,
        Uri_PROPERTY_PORT = 16,
        Uri_PROPERTY_SCHEME = 17,
        Uri_PROPERTY_ZONE = 18,
        Uri_PROPERTY_DWORD_LAST = Uri_PROPERTY_ZONE
    } Uri_PROPERTY;

typedef
enum __MIDL_IUri_0002
    {
        Uri_HOST_UNKNOWN = 0,
        Uri_HOST_DNS = ( Uri_HOST_UNKNOWN + 1 ) ,
        Uri_HOST_IPV4 = ( Uri_HOST_DNS + 1 ) ,
        Uri_HOST_IPV6 = ( Uri_HOST_IPV4 + 1 ) ,
        Uri_HOST_IDN = ( Uri_HOST_IPV6 + 1 )
    } Uri_HOST_TYPE;


extern "C" const IID IID_IUri;



    struct __declspec(uuid("A39EE748-6A27-4817-A6F2-13914BEF5890")) __declspec(novtable)
    IUri : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetPropertyBSTR(
                              Uri_PROPERTY uriProp,
                                             BSTR *pbstrProperty,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetPropertyLength(
                              Uri_PROPERTY uriProp,
                                   DWORD *pcchProperty,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetPropertyDWORD(
                              Uri_PROPERTY uriProp,
                                   DWORD *pdwProperty,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall HasProperty(
                              Uri_PROPERTY uriProp,
                                   BOOL *pfHasProperty) = 0;

        virtual HRESULT __stdcall GetAbsoluteUri(
                                             BSTR *pbstrAbsoluteUri) = 0;

        virtual HRESULT __stdcall GetAuthority(
                                             BSTR *pbstrAuthority) = 0;

        virtual HRESULT __stdcall GetDisplayUri(
                                             BSTR *pbstrDisplayString) = 0;

        virtual HRESULT __stdcall GetDomain(
                                             BSTR *pbstrDomain) = 0;

        virtual HRESULT __stdcall GetExtension(
                                             BSTR *pbstrExtension) = 0;

        virtual HRESULT __stdcall GetFragment(
                                             BSTR *pbstrFragment) = 0;

        virtual HRESULT __stdcall GetHost(
                                             BSTR *pbstrHost) = 0;

        virtual HRESULT __stdcall GetPassword(
                                             BSTR *pbstrPassword) = 0;

        virtual HRESULT __stdcall GetPath(
                                             BSTR *pbstrPath) = 0;

        virtual HRESULT __stdcall GetPathAndQuery(
                                             BSTR *pbstrPathAndQuery) = 0;

        virtual HRESULT __stdcall GetQuery(
                                             BSTR *pbstrQuery) = 0;

        virtual HRESULT __stdcall GetRawUri(
                                             BSTR *pbstrRawUri) = 0;

        virtual HRESULT __stdcall GetSchemeName(
                                             BSTR *pbstrSchemeName) = 0;

        virtual HRESULT __stdcall GetUserInfo(
                                             BSTR *pbstrUserInfo) = 0;

        virtual HRESULT __stdcall GetUserNameW(
                                             BSTR *pbstrUserName) = 0;

        virtual HRESULT __stdcall GetHostType(
                                   DWORD *pdwHostType) = 0;

        virtual HRESULT __stdcall GetPort(
                                   DWORD *pdwPort) = 0;

        virtual HRESULT __stdcall GetScheme(
                                   DWORD *pdwScheme) = 0;

        virtual HRESULT __stdcall GetZone(
                                   DWORD *pdwZone) = 0;

        virtual HRESULT __stdcall GetProperties(
                                   LPDWORD pdwFlags) = 0;

        virtual HRESULT __stdcall IsEqual(
                                     IUri *pUri,
                                   BOOL *pfEqual) = 0;

    };
# 3212 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" HRESULT __stdcall CreateUri( LPCWSTR pwzURI,
                      DWORD dwFlags,
                            DWORD_PTR dwReserved,
                          IUri** ppURI);

extern "C" HRESULT __stdcall CreateUriWithFragment(
                      LPCWSTR pwzURI,
                          LPCWSTR pwzFragment,
                      DWORD dwFlags,
                            DWORD_PTR dwReserved,
                          IUri** ppURI);






extern "C" HRESULT __stdcall CreateUriFromMultiByteString(
               LPCSTR pszANSIInputUri,
               DWORD dwEncodingFlags,
               DWORD dwCodePage,
               DWORD dwCreateFlags,
               DWORD_PTR dwReserved,
               IUri** ppUri);
# 3312 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec;
# 3322 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IUriContainer;



    struct __declspec(uuid("a158a630-ed6f-45fb-b987-f68676f57752")) __declspec(novtable)
    IUriContainer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetIUri(
                        IUri **ppIUri) = 0;

    };
# 3402 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IUriBuilder;



    struct __declspec(uuid("4221B2E1-8955-46c0-BD5B-DE9897565DE7")) __declspec(novtable)
    IUriBuilder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateUriSimple(
                       DWORD dwAllowEncodingPropertyMask,
                       DWORD_PTR dwReserved,

                      IUri **ppIUri) = 0;

        virtual HRESULT __stdcall CreateUri(
                       DWORD dwCreateFlags,
                       DWORD dwAllowEncodingPropertyMask,
                       DWORD_PTR dwReserved,

                      IUri **ppIUri) = 0;

        virtual HRESULT __stdcall CreateUriWithFlags(
                       DWORD dwCreateFlags,
                       DWORD dwUriBuilderFlags,
                       DWORD dwAllowEncodingPropertyMask,
                       DWORD_PTR dwReserved,

                      IUri **ppIUri) = 0;

        virtual HRESULT __stdcall GetIUri(

                                       IUri **ppIUri) = 0;

        virtual HRESULT __stdcall SetIUri(

                      IUri *pIUri) = 0;

        virtual HRESULT __stdcall GetFragment(

                   DWORD *pcchFragment,

                                       LPCWSTR *ppwzFragment) = 0;

        virtual HRESULT __stdcall GetHost(

                   DWORD *pcchHost,

                                       LPCWSTR *ppwzHost) = 0;

        virtual HRESULT __stdcall GetPassword(

                   DWORD *pcchPassword,

                                       LPCWSTR *ppwzPassword) = 0;

        virtual HRESULT __stdcall GetPath(

                   DWORD *pcchPath,

                                       LPCWSTR *ppwzPath) = 0;

        virtual HRESULT __stdcall GetPort(

                   BOOL *pfHasPort,

                   DWORD *pdwPort) = 0;

        virtual HRESULT __stdcall GetQuery(

                   DWORD *pcchQuery,

                                       LPCWSTR *ppwzQuery) = 0;

        virtual HRESULT __stdcall GetSchemeName(

                   DWORD *pcchSchemeName,

                                       LPCWSTR *ppwzSchemeName) = 0;

        virtual HRESULT __stdcall GetUserNameW(

                   DWORD *pcchUserName,

                                       LPCWSTR *ppwzUserName) = 0;

        virtual HRESULT __stdcall SetFragment(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetHost(

                  LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetPassword(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetPath(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetPort(
                       BOOL fHasPort,
                       DWORD dwNewValue) = 0;

        virtual HRESULT __stdcall SetQuery(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetSchemeName(

                  LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetUserName(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall RemoveProperties(
                       DWORD dwPropertyMask) = 0;

        virtual HRESULT __stdcall HasBeenModified(

                   BOOL *pfModified) = 0;

    };
# 3796 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IUriBuilderFactory;



    struct __declspec(uuid("E982CE48-0B96-440c-BC37-0C869B27A29E")) __declspec(novtable)
    IUriBuilderFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateIUriBuilder(

                  DWORD dwFlags,

                  DWORD_PTR dwReserved,

                   IUriBuilder **ppIUriBuilder) = 0;

        virtual HRESULT __stdcall CreateInitializedIUriBuilder(

                  DWORD dwFlags,

                  DWORD_PTR dwReserved,

                   IUriBuilder **ppIUriBuilder) = 0;

    };
# 3902 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" HRESULT __stdcall CreateIUriBuilder(
                 IUri *pIUri,
                 DWORD dwFlags,
                 DWORD_PTR dwReserved,
                 IUriBuilder **ppIUriBuilder
    );
# 3917 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec;







typedef IWinInetInfo *LPWININETINFO;


extern "C" const IID IID_IWinInetInfo;



    struct __declspec(uuid("79eac9d6-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWinInetInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryOption(
                       DWORD dwOption,
                                     LPVOID pBuffer,
                            DWORD *pcbBuf) = 0;

    };
# 4002 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
                HRESULT __stdcall IWinInetInfo_RemoteQueryOption_Proxy(
              IWinInetInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf);


void __stdcall IWinInetInfo_RemoteQueryOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4029 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec;







typedef IHttpSecurity *LPHTTPSECURITY;


extern "C" const IID IID_IHttpSecurity;



    struct __declspec(uuid("79eac9d7-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IHttpSecurity : public IWindowForBindingUI
    {
    public:
        virtual HRESULT __stdcall OnSecurityProblem(
                       DWORD dwProblem) = 0;

    };
# 4131 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec;







typedef IWinInetHttpInfo *LPWININETHTTPINFO;


extern "C" const IID IID_IWinInetHttpInfo;



    struct __declspec(uuid("79eac9d8-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWinInetHttpInfo : public IWinInetInfo
    {
    public:
        virtual HRESULT __stdcall QueryInfo(
                       DWORD dwOption,
                                     LPVOID pBuffer,
                            DWORD *pcbBuf,
                            DWORD *pdwFlags,
                            DWORD *pdwReserved) = 0;

    };
# 4230 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
                HRESULT __stdcall IWinInetHttpInfo_RemoteQueryInfo_Proxy(
              IWinInetHttpInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf,
                                 DWORD *pdwFlags,
                                 DWORD *pdwReserved);


void __stdcall IWinInetHttpInfo_RemoteQueryInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4258 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec;
# 4268 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IWinInetHttpTimeouts;



    struct __declspec(uuid("F286FA56-C1FD-4270-8E67-B3EB790A81E8")) __declspec(novtable)
    IWinInetHttpTimeouts : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetRequestTimeouts(

                   DWORD *pdwConnectTimeout,

                   DWORD *pdwSendTimeout,

                   DWORD *pdwReceiveTimeout) = 0;

    };
# 4360 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec;







typedef IWinInetCacheHints *LPWININETCACHEHINTS;


extern "C" const IID IID_IWinInetCacheHints;



    struct __declspec(uuid("DD1EC3B3-8391-4fdb-A9E6-347C3CAAA7DD")) __declspec(novtable)
    IWinInetCacheHints : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetCacheExtension(
                       LPCWSTR pwzExt,
                                     LPVOID pszCacheFile,
                            DWORD *pcbCacheFile,
                            DWORD *pdwWinInetError,
                            DWORD *pdwReserved) = 0;

    };
# 4463 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec;







typedef IWinInetCacheHints2 *LPWININETCACHEHINTS2;


extern "C" const IID IID_IWinInetCacheHints2;



    struct __declspec(uuid("7857AEAC-D31F-49bf-884E-DD46DF36780A")) __declspec(novtable)
    IWinInetCacheHints2 : public IWinInetCacheHints
    {
    public:
        virtual HRESULT __stdcall SetCacheExtension2(
                       LPCWSTR pwzExt,

                                               WCHAR *pwzCacheFile,
                            DWORD *pcchCacheFile,
                        DWORD *pdwWinInetError,
                        DWORD *pdwReserved) = 0;

    };
# 4579 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const GUID SID_BindHost;


extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec;







typedef IBindHost *LPBINDHOST;


extern "C" const IID IID_IBindHost;



    struct __declspec(uuid("fc4801a1-2ba9-11cf-a229-00aa003d7352")) __declspec(novtable)
    IBindHost : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateMoniker(
                                 LPOLESTR szName,
                                     IBindCtx *pBC,
                                             IMoniker **ppmk,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall MonikerBindToStorage(
                       IMoniker *pMk,
                       IBindCtx *pBC,
                       IBindStatusCallback *pBSC,
                       const IID & riid,
                        void **ppvObj) = 0;

        virtual HRESULT __stdcall MonikerBindToObject(
                       IMoniker *pMk,
                       IBindCtx *pBC,
                       IBindStatusCallback *pBSC,
                       const IID & riid,
                        void **ppvObj) = 0;

    };
# 4705 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
                HRESULT __stdcall IBindHost_RemoteMonikerBindToStorage_Proxy(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID & riid,
                                             IUnknown **ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IBindHost_RemoteMonikerBindToObject_Proxy(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID & riid,
                                             IUnknown **ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4753 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
struct IBindStatusCallback;
extern "C" HRESULT __stdcall HlinkSimpleNavigateToString(
             LPCWSTR szTarget,
             LPCWSTR szLocation,
             LPCWSTR szTargetFrameName,
             IUnknown *pUnk,
             IBindCtx *pbc,
             IBindStatusCallback *,
               DWORD grfHLNF,
               DWORD dwReserved
);

extern "C" HRESULT __stdcall HlinkSimpleNavigateToMoniker(
             IMoniker *pmkTarget,
             LPCWSTR szLocation,
             LPCWSTR szTargetFrameName,
             IUnknown *pUnk,
             IBindCtx *pbc,
             IBindStatusCallback *,
               DWORD grfHLNF,
               DWORD dwReserved
);

extern "C" HRESULT __stdcall URLOpenStreamA( LPUNKNOWN, LPCSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenStreamW( LPUNKNOWN, LPCWSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenPullStreamA( LPUNKNOWN, LPCSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenPullStreamW( LPUNKNOWN, LPCWSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLDownloadToFileA( LPUNKNOWN, LPCSTR, LPCSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLDownloadToFileW( LPUNKNOWN, LPCWSTR, LPCWSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLDownloadToCacheFileA( LPUNKNOWN, LPCSTR, LPSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLDownloadToCacheFileW( LPUNKNOWN, LPCWSTR, LPWSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenBlockingStreamA( LPUNKNOWN, LPCSTR, LPSTREAM*,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenBlockingStreamW( LPUNKNOWN, LPCWSTR, LPSTREAM*,DWORD, LPBINDSTATUSCALLBACK);
# 4802 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" HRESULT __stdcall HlinkGoBack( IUnknown *pUnk);
extern "C" HRESULT __stdcall HlinkGoForward( IUnknown *pUnk);
extern "C" HRESULT __stdcall HlinkNavigateString( IUnknown *pUnk, LPCWSTR szTarget);
extern "C" HRESULT __stdcall HlinkNavigateMoniker( IUnknown *pUnk, IMoniker *pmkTarget);
# 4822 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec;







typedef IInternet *LPIINTERNET;


extern "C" const IID IID_IInternet;



    struct __declspec(uuid("79eac9e0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternet : public IUnknown
    {
    public:
    };
# 4905 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec;







typedef IInternetBindInfo *LPIINTERNETBINDINFO;

typedef
enum tagBINDSTRING
    {
        BINDSTRING_HEADERS = 1,
        BINDSTRING_ACCEPT_MIMES = ( BINDSTRING_HEADERS + 1 ) ,
        BINDSTRING_EXTRA_URL = ( BINDSTRING_ACCEPT_MIMES + 1 ) ,
        BINDSTRING_LANGUAGE = ( BINDSTRING_EXTRA_URL + 1 ) ,
        BINDSTRING_USERNAME = ( BINDSTRING_LANGUAGE + 1 ) ,
        BINDSTRING_PASSWORD = ( BINDSTRING_USERNAME + 1 ) ,
        BINDSTRING_UA_PIXELS = ( BINDSTRING_PASSWORD + 1 ) ,
        BINDSTRING_UA_COLOR = ( BINDSTRING_UA_PIXELS + 1 ) ,
        BINDSTRING_OS = ( BINDSTRING_UA_COLOR + 1 ) ,
        BINDSTRING_USER_AGENT = ( BINDSTRING_OS + 1 ) ,
        BINDSTRING_ACCEPT_ENCODINGS = ( BINDSTRING_USER_AGENT + 1 ) ,
        BINDSTRING_POST_COOKIE = ( BINDSTRING_ACCEPT_ENCODINGS + 1 ) ,
        BINDSTRING_POST_DATA_MIME = ( BINDSTRING_POST_COOKIE + 1 ) ,
        BINDSTRING_URL = ( BINDSTRING_POST_DATA_MIME + 1 ) ,
        BINDSTRING_IID = ( BINDSTRING_URL + 1 ) ,
        BINDSTRING_FLAG_BIND_TO_OBJECT = ( BINDSTRING_IID + 1 ) ,
        BINDSTRING_PTR_BIND_CONTEXT = ( BINDSTRING_FLAG_BIND_TO_OBJECT + 1 ) ,
        BINDSTRING_XDR_ORIGIN = ( BINDSTRING_PTR_BIND_CONTEXT + 1 ) ,
        BINDSTRING_DOWNLOADPATH = ( BINDSTRING_XDR_ORIGIN + 1 ) ,
        BINDSTRING_ROOTDOC_URL = ( BINDSTRING_DOWNLOADPATH + 1 ) ,
        BINDSTRING_INITIAL_FILENAME = ( BINDSTRING_ROOTDOC_URL + 1 ) ,
        BINDSTRING_PROXY_USERNAME = ( BINDSTRING_INITIAL_FILENAME + 1 ) ,
        BINDSTRING_PROXY_PASSWORD = ( BINDSTRING_PROXY_USERNAME + 1 )
    } BINDSTRING;


extern "C" const IID IID_IInternetBindInfo;



    struct __declspec(uuid("79eac9e1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetBindInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBindInfo(
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo) = 0;

        virtual HRESULT __stdcall GetBindString(
                       ULONG ulStringType,

                        LPOLESTR *ppwzStr,
                       ULONG cEl,
                            ULONG *pcElFetched) = 0;

    };
# 5046 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec;







typedef IInternetBindInfoEx *LPIINTERNETBINDINFOEX;


extern "C" const IID IID_IInternetBindInfoEx;



    struct __declspec(uuid("a3e015b7-a82c-4dcd-a150-569aeeed36ab")) __declspec(novtable)
    IInternetBindInfoEx : public IInternetBindInfo
    {
    public:
        virtual HRESULT __stdcall GetBindInfoEx(
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo,
                        DWORD *grfBINDF2,
                        DWORD *pdwReserved) = 0;

    };
# 5165 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec;







typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;

typedef
enum _tagPI_FLAGS
    {
        PI_PARSE_URL = 0x1,
        PI_FILTER_MODE = 0x2,
        PI_FORCE_ASYNC = 0x4,
        PI_USE_WORKERTHREAD = 0x8,
        PI_MIMEVERIFICATION = 0x10,
        PI_CLSIDLOOKUP = 0x20,
        PI_DATAPROGRESS = 0x40,
        PI_SYNCHRONOUS = 0x80,
        PI_APARTMENTTHREADED = 0x100,
        PI_CLASSINSTALL = 0x200,
        PI_PASSONBINDCTX = 0x2000,
        PI_NOMIMEHANDLER = 0x8000,
        PI_LOADAPPDIRECT = 0x4000,
        PD_FORCE_SWITCH = 0x10000,
        PI_PREFERDEFAULTHANDLER = 0x20000
    } PI_FLAGS;

typedef struct _tagPROTOCOLDATA
    {
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
    } PROTOCOLDATA;

typedef struct _tagStartParam
    {
    IID iid;
    IBindCtx *pIBindCtx;
    IUnknown *pItf;
    } StartParam;


extern "C" const IID IID_IInternetProtocolRoot;



    struct __declspec(uuid("79eac9e3-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolRoot : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Start(
                       LPCWSTR szUrl,
                       IInternetProtocolSink *pOIProtSink,
                       IInternetBindInfo *pOIBindInfo,
                       DWORD grfPI,
                       HANDLE_PTR dwReserved) = 0;

        virtual HRESULT __stdcall Continue(
                       PROTOCOLDATA *pProtocolData) = 0;

        virtual HRESULT __stdcall Abort(
                       HRESULT hrReason,
                       DWORD dwOptions) = 0;

        virtual HRESULT __stdcall Terminate(
                       DWORD dwOptions) = 0;

        virtual HRESULT __stdcall Suspend( void) = 0;

        virtual HRESULT __stdcall Resume( void) = 0;

    };
# 5349 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec;







typedef IInternetProtocol *LPIINTERNETPROTOCOL;


extern "C" const IID IID_IInternetProtocol;



    struct __declspec(uuid("79eac9e4-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocol : public IInternetProtocolRoot
    {
    public:
        virtual HRESULT __stdcall Read(
                                                void *pv,
                       ULONG cb,
                        ULONG *pcbRead) = 0;

        virtual HRESULT __stdcall Seek(
                       LARGE_INTEGER dlibMove,
                       DWORD dwOrigin,
                        ULARGE_INTEGER *plibNewPosition) = 0;

        virtual HRESULT __stdcall LockRequest(
                       DWORD dwOptions) = 0;

        virtual HRESULT __stdcall UnlockRequest( void) = 0;

    };
# 5525 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec;
# 5535 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IInternetProtocolEx;



    struct __declspec(uuid("C7A98E66-1010-492c-A1C8-C809E1F75905")) __declspec(novtable)
    IInternetProtocolEx : public IInternetProtocol
    {
    public:
        virtual HRESULT __stdcall StartEx(
                       IUri *pUri,
                       IInternetProtocolSink *pOIProtSink,
                       IInternetBindInfo *pOIBindInfo,
                       DWORD grfPI,
                       HANDLE_PTR dwReserved) = 0;

    };
# 5703 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec;







typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;


extern "C" const IID IID_IInternetProtocolSink;



    struct __declspec(uuid("79eac9e5-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolSink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Switch(
                       PROTOCOLDATA *pProtocolData) = 0;

        virtual HRESULT __stdcall ReportProgress(
                       ULONG ulStatusCode,
                       LPCWSTR szStatusText) = 0;

        virtual HRESULT __stdcall ReportData(
                       DWORD grfBSCF,
                       ULONG ulProgress,
                       ULONG ulProgressMax) = 0;

        virtual HRESULT __stdcall ReportResult(
                       HRESULT hrResult,
                       DWORD dwError,
                       LPCWSTR szResult) = 0;

    };
# 5836 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec;







typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;


extern "C" const IID IID_IInternetProtocolSinkStackable;



    struct __declspec(uuid("79eac9f0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolSinkStackable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SwitchSink(
                       IInternetProtocolSink *pOIProtSink) = 0;

        virtual HRESULT __stdcall CommitSwitch( void) = 0;

        virtual HRESULT __stdcall RollbackSwitch( void) = 0;

    };
# 5945 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec;







typedef IInternetSession *LPIINTERNETSESSION;

typedef
enum _tagOIBDG_FLAGS
    {
        OIBDG_APARTMENTTHREADED = 0x100,
        OIBDG_DATAONLY = 0x1000
    } OIBDG_FLAGS;


extern "C" const IID IID_IInternetSession;



    struct __declspec(uuid("79eac9e7-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSession : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterNameSpace(
                       IClassFactory *pCF,
                       const IID & rclsid,
                       LPCWSTR pwzProtocol,
                       ULONG cPatterns,
                       const LPCWSTR *ppwzPatterns,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall UnregisterNameSpace(
                       IClassFactory *pCF,
                       LPCWSTR pszProtocol) = 0;

        virtual HRESULT __stdcall RegisterMimeFilter(
                       IClassFactory *pCF,
                       const IID & rclsid,
                       LPCWSTR pwzType) = 0;

        virtual HRESULT __stdcall UnregisterMimeFilter(
                       IClassFactory *pCF,
                       LPCWSTR pwzType) = 0;

        virtual HRESULT __stdcall CreateBinding(
                       LPBC pBC,
                       LPCWSTR szUrl,
                       IUnknown *pUnkOuter,
                                IUnknown **ppUnk,
                                IInternetProtocol **ppOInetProt,
                       DWORD dwOption) = 0;

        virtual HRESULT __stdcall SetSessionOption(
                       DWORD dwOption,
                       LPVOID pBuffer,
                       DWORD dwBufferLength,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall GetSessionOption(
                       DWORD dwOption,
                            LPVOID pBuffer,
                            DWORD *pdwBufferLength,
                       DWORD dwReserved) = 0;

    };
# 6145 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec;







typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;


extern "C" const IID IID_IInternetThreadSwitch;



    struct __declspec(uuid("79eac9e8-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetThreadSwitch : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Prepare( void) = 0;

        virtual HRESULT __stdcall Continue( void) = 0;

    };
# 6244 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec;







typedef IInternetPriority *LPIINTERNETPRIORITY;


extern "C" const IID IID_IInternetPriority;



    struct __declspec(uuid("79eac9eb-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetPriority : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetPriority(
                       LONG nPriority) = 0;

        virtual HRESULT __stdcall GetPriority(
                        LONG *pnPriority) = 0;

    };
# 6347 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec;







typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;

typedef
enum _tagPARSEACTION
    {
        PARSE_CANONICALIZE = 1,
        PARSE_FRIENDLY = ( PARSE_CANONICALIZE + 1 ) ,
        PARSE_SECURITY_URL = ( PARSE_FRIENDLY + 1 ) ,
        PARSE_ROOTDOCUMENT = ( PARSE_SECURITY_URL + 1 ) ,
        PARSE_DOCUMENT = ( PARSE_ROOTDOCUMENT + 1 ) ,
        PARSE_ANCHOR = ( PARSE_DOCUMENT + 1 ) ,
        PARSE_ENCODE_IS_UNESCAPE = ( PARSE_ANCHOR + 1 ) ,
        PARSE_DECODE_IS_ESCAPE = ( PARSE_ENCODE_IS_UNESCAPE + 1 ) ,
        PARSE_PATH_FROM_URL = ( PARSE_DECODE_IS_ESCAPE + 1 ) ,
        PARSE_URL_FROM_PATH = ( PARSE_PATH_FROM_URL + 1 ) ,
        PARSE_MIME = ( PARSE_URL_FROM_PATH + 1 ) ,
        PARSE_SERVER = ( PARSE_MIME + 1 ) ,
        PARSE_SCHEMA = ( PARSE_SERVER + 1 ) ,
        PARSE_SITE = ( PARSE_SCHEMA + 1 ) ,
        PARSE_DOMAIN = ( PARSE_SITE + 1 ) ,
        PARSE_LOCATION = ( PARSE_DOMAIN + 1 ) ,
        PARSE_SECURITY_DOMAIN = ( PARSE_LOCATION + 1 ) ,
        PARSE_ESCAPE = ( PARSE_SECURITY_DOMAIN + 1 ) ,
        PARSE_UNESCAPE = ( PARSE_ESCAPE + 1 )
    } PARSEACTION;

typedef
enum _tagPSUACTION
    {
        PSU_DEFAULT = 1,
        PSU_SECURITY_URL_ONLY = ( PSU_DEFAULT + 1 )
    } PSUACTION;

typedef
enum _tagQUERYOPTION
    {
        QUERY_EXPIRATION_DATE = 1,
        QUERY_TIME_OF_LAST_CHANGE = ( QUERY_EXPIRATION_DATE + 1 ) ,
        QUERY_CONTENT_ENCODING = ( QUERY_TIME_OF_LAST_CHANGE + 1 ) ,
        QUERY_CONTENT_TYPE = ( QUERY_CONTENT_ENCODING + 1 ) ,
        QUERY_REFRESH = ( QUERY_CONTENT_TYPE + 1 ) ,
        QUERY_RECOMBINE = ( QUERY_REFRESH + 1 ) ,
        QUERY_CAN_NAVIGATE = ( QUERY_RECOMBINE + 1 ) ,
        QUERY_USES_NETWORK = ( QUERY_CAN_NAVIGATE + 1 ) ,
        QUERY_IS_CACHED = ( QUERY_USES_NETWORK + 1 ) ,
        QUERY_IS_INSTALLEDENTRY = ( QUERY_IS_CACHED + 1 ) ,
        QUERY_IS_CACHED_OR_MAPPED = ( QUERY_IS_INSTALLEDENTRY + 1 ) ,
        QUERY_USES_CACHE = ( QUERY_IS_CACHED_OR_MAPPED + 1 ) ,
        QUERY_IS_SECURE = ( QUERY_USES_CACHE + 1 ) ,
        QUERY_IS_SAFE = ( QUERY_IS_SECURE + 1 ) ,
        QUERY_USES_HISTORYFOLDER = ( QUERY_IS_SAFE + 1 ) ,
        QUERY_IS_CACHED_AND_USABLE_OFFLINE = ( QUERY_USES_HISTORYFOLDER + 1 )
    } QUERYOPTION;


extern "C" const IID IID_IInternetProtocolInfo;



    struct __declspec(uuid("79eac9ec-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseUrl(
                       LPCWSTR pwzUrl,
                       PARSEACTION ParseAction,
                       DWORD dwParseFlags,

                        LPWSTR pwzResult,
                       DWORD cchResult,
                        DWORD *pcchResult,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall CombineUrl(
                       LPCWSTR pwzBaseUrl,
                       LPCWSTR pwzRelativeUrl,
                       DWORD dwCombineFlags,

                       LPWSTR pwzResult,
                       DWORD cchResult,
                        DWORD *pcchResult,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall CompareUrl(
                       LPCWSTR pwzUrl1,
                       LPCWSTR pwzUrl2,
                       DWORD dwCompareFlags) = 0;

        virtual HRESULT __stdcall QueryInfo(
                       LPCWSTR pwzUrl,
                       QUERYOPTION OueryOption,
                       DWORD dwQueryFlags,
                                     LPVOID pBuffer,
                       DWORD cbBuffer,
                            DWORD *pcbBuf,
                       DWORD dwReserved) = 0;

    };
# 6610 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" HRESULT __stdcall CoInternetParseUrl(
                                             LPCWSTR pwzUrl,
                                             PARSEACTION ParseAction,
                                             DWORD dwFlags,
                                             LPWSTR pszResult,
                                             DWORD cchResult,
                                             DWORD *pcchResult,
                                             DWORD dwReserved
    );

extern "C" HRESULT __stdcall CoInternetParseIUri(
                                             IUri *pIUri,
                                             PARSEACTION ParseAction,
                                             DWORD dwFlags,
                                             LPWSTR pwzResult,
                                             DWORD cchResult,
                                             DWORD *pcchResult,
                                             DWORD_PTR dwReserved
    );

extern "C" HRESULT __stdcall CoInternetCombineUrl(
                                             LPCWSTR pwzBaseUrl,
                                             LPCWSTR pwzRelativeUrl,
                                             DWORD dwCombineFlags,
                                             LPWSTR pszResult,
                                             DWORD cchResult,
                                             DWORD *pcchResult,
                                             DWORD dwReserved
    );

extern "C" HRESULT __stdcall CoInternetCombineUrlEx(
                 IUri *pBaseUri,
                 LPCWSTR pwzRelativeUrl,
                 DWORD dwCombineFlags,
                 IUri **ppCombinedUri,
                 DWORD_PTR dwReserved
    );
extern "C" HRESULT __stdcall CoInternetCombineIUri (
                 IUri *pBaseUri,
                 IUri *pRelativeUri,
                 DWORD dwCombineFlags,
                 IUri **ppCombinedUri,
                 DWORD_PTR dwReserved
    );

extern "C" HRESULT __stdcall CoInternetCompareUrl(
    LPCWSTR pwzUrl1,
    LPCWSTR pwzUrl2,
    DWORD dwFlags
    );
extern "C" HRESULT __stdcall CoInternetGetProtocolFlags(
             LPCWSTR pwzUrl,
             DWORD *pdwFlags,
             DWORD dwReserved
    );
extern "C" HRESULT __stdcall CoInternetQueryInfo(
                                                 LPCWSTR pwzUrl,
                                                 QUERYOPTION QueryOptions,
                                                 DWORD dwQueryFlags,
                                                 LPVOID pvBuffer,
                                                 DWORD cbBuffer,
                                                 DWORD *pcbBuffer,
                                                 DWORD dwReserved
    );
extern "C" HRESULT __stdcall CoInternetGetSession(
                 DWORD dwSessionMode,
                 IInternetSession **ppIInternetSession,
                 DWORD dwReserved
    );
extern "C" HRESULT __stdcall CoInternetGetSecurityUrl(
                 LPCWSTR pwszUrl,
                 LPWSTR *ppwszSecUrl,
                 PSUACTION psuAction,
                 DWORD dwReserved
    );
extern "C" HRESULT __stdcall AsyncInstallDistributionUnit(
         LPCWSTR szDistUnit,
             LPCWSTR szTYPE,
             LPCWSTR szExt,
    DWORD dwFileVersionMS,
    DWORD dwFileVersionLS,
             LPCWSTR szURL,
         IBindCtx *pbc,
               LPVOID pvReserved,
    DWORD flags
    );

extern "C" HRESULT __stdcall CoInternetGetSecurityUrlEx(
                 IUri *pUri,
                 IUri **ppSecUri,
                 PSUACTION psuAction,
                 DWORD_PTR dwReserved
    );




typedef
enum _tagINTERNETFEATURELIST
    {
        FEATURE_OBJECT_CACHING = 0,
        FEATURE_ZONE_ELEVATION = ( FEATURE_OBJECT_CACHING + 1 ) ,
        FEATURE_MIME_HANDLING = ( FEATURE_ZONE_ELEVATION + 1 ) ,
        FEATURE_MIME_SNIFFING = ( FEATURE_MIME_HANDLING + 1 ) ,
        FEATURE_WINDOW_RESTRICTIONS = ( FEATURE_MIME_SNIFFING + 1 ) ,
        FEATURE_WEBOC_POPUPMANAGEMENT = ( FEATURE_WINDOW_RESTRICTIONS + 1 ) ,
        FEATURE_BEHAVIORS = ( FEATURE_WEBOC_POPUPMANAGEMENT + 1 ) ,
        FEATURE_DISABLE_MK_PROTOCOL = ( FEATURE_BEHAVIORS + 1 ) ,
        FEATURE_LOCALMACHINE_LOCKDOWN = ( FEATURE_DISABLE_MK_PROTOCOL + 1 ) ,
        FEATURE_SECURITYBAND = ( FEATURE_LOCALMACHINE_LOCKDOWN + 1 ) ,
        FEATURE_RESTRICT_ACTIVEXINSTALL = ( FEATURE_SECURITYBAND + 1 ) ,
        FEATURE_VALIDATE_NAVIGATE_URL = ( FEATURE_RESTRICT_ACTIVEXINSTALL + 1 ) ,
        FEATURE_RESTRICT_FILEDOWNLOAD = ( FEATURE_VALIDATE_NAVIGATE_URL + 1 ) ,
        FEATURE_ADDON_MANAGEMENT = ( FEATURE_RESTRICT_FILEDOWNLOAD + 1 ) ,
        FEATURE_PROTOCOL_LOCKDOWN = ( FEATURE_ADDON_MANAGEMENT + 1 ) ,
        FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = ( FEATURE_PROTOCOL_LOCKDOWN + 1 ) ,
        FEATURE_SAFE_BINDTOOBJECT = ( FEATURE_HTTP_USERNAME_PASSWORD_DISABLE + 1 ) ,
        FEATURE_UNC_SAVEDFILECHECK = ( FEATURE_SAFE_BINDTOOBJECT + 1 ) ,
        FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = ( FEATURE_UNC_SAVEDFILECHECK + 1 ) ,
        FEATURE_TABBED_BROWSING = ( FEATURE_GET_URL_DOM_FILEPATH_UNENCODED + 1 ) ,
        FEATURE_SSLUX = ( FEATURE_TABBED_BROWSING + 1 ) ,
        FEATURE_DISABLE_NAVIGATION_SOUNDS = ( FEATURE_SSLUX + 1 ) ,
        FEATURE_DISABLE_LEGACY_COMPRESSION = ( FEATURE_DISABLE_NAVIGATION_SOUNDS + 1 ) ,
        FEATURE_FORCE_ADDR_AND_STATUS = ( FEATURE_DISABLE_LEGACY_COMPRESSION + 1 ) ,
        FEATURE_XMLHTTP = ( FEATURE_FORCE_ADDR_AND_STATUS + 1 ) ,
        FEATURE_DISABLE_TELNET_PROTOCOL = ( FEATURE_XMLHTTP + 1 ) ,
        FEATURE_FEEDS = ( FEATURE_DISABLE_TELNET_PROTOCOL + 1 ) ,
        FEATURE_BLOCK_INPUT_PROMPTS = ( FEATURE_FEEDS + 1 ) ,
        FEATURE_ENTRY_COUNT = ( FEATURE_BLOCK_INPUT_PROMPTS + 1 )
    } INTERNETFEATURELIST;
# 6767 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" HRESULT __stdcall CoInternetSetFeatureEnabled(
    INTERNETFEATURELIST FeatureEntry,
    DWORD dwFlags,
    BOOL fEnable
    );
extern "C" HRESULT __stdcall CoInternetIsFeatureEnabled(
    INTERNETFEATURELIST FeatureEntry,
    DWORD dwFlags
    );
extern "C" HRESULT __stdcall CoInternetIsFeatureEnabledForUrl(
    INTERNETFEATURELIST FeatureEntry,
    DWORD dwFlags,
             LPCWSTR szURL,
             IInternetSecurityManager *pSecMgr
    );
extern "C" HRESULT __stdcall CoInternetIsFeatureEnabledForIUri(
    INTERNETFEATURELIST FeatureEntry,
    DWORD dwFlags,
             IUri * pIUri,
             IInternetSecurityManagerEx2 *pSecMgr
    );
extern "C" HRESULT __stdcall CoInternetIsFeatureZoneElevationEnabled(
             LPCWSTR szFromURL,
         LPCWSTR szToURL,
             IInternetSecurityManager *pSecMgr,
    DWORD dwFlags
    );


extern "C" HRESULT __stdcall CopyStgMedium( const STGMEDIUM * pcstgmedSrc,
                                STGMEDIUM * pstgmedDest);
extern "C" HRESULT __stdcall CopyBindInfo( const BINDINFO * pcbiSrc,
                               BINDINFO * pbiDest );
extern "C" void __stdcall ReleaseBindInfo( BINDINFO * pbindinfo );
# 6823 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" PWSTR __stdcall IEGetUserPrivateNamespaceName();



extern "C" HRESULT __stdcall CoInternetCreateSecurityManager( IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved);

extern "C" HRESULT __stdcall CoInternetCreateZoneManager( IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved);



extern "C" const IID CLSID_InternetSecurityManager;
extern "C" const IID CLSID_InternetZoneManager;

extern "C" const IID CLSID_PersistentZoneIdentifier;
# 6855 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec;
# 6865 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IInternetSecurityMgrSite;



    struct __declspec(uuid("79eac9ed-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSecurityMgrSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow(
                        HWND *phwnd) = 0;

        virtual HRESULT __stdcall EnableModeless(
                       BOOL fEnable) = 0;

    };
# 6956 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec;
# 6977 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
typedef
enum __MIDL_IInternetSecurityManager_0001
    {
        PUAF_DEFAULT = 0,
        PUAF_NOUI = 0x1,
        PUAF_ISFILE = 0x2,
        PUAF_WARN_IF_DENIED = 0x4,
        PUAF_FORCEUI_FOREGROUND = 0x8,
        PUAF_CHECK_TIFS = 0x10,
        PUAF_DONTCHECKBOXINDIALOG = 0x20,
        PUAF_TRUSTED = 0x40,
        PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,
        PUAF_ENFORCERESTRICTED = 0x100,
        PUAF_NOSAVEDFILECHECK = 0x200,
        PUAF_REQUIRESAVEDFILECHECK = 0x400,
        PUAF_DONT_USE_CACHE = 0x1000,
        PUAF_RESERVED1 = 0x2000,
        PUAF_RESERVED2 = 0x4000,
        PUAF_LMZ_UNLOCKED = 0x10000,
        PUAF_LMZ_LOCKED = 0x20000,
        PUAF_DEFAULTZONEPOL = 0x40000,
        PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x80000,
        PUAF_NOUIIFLOCKED = 0x100000,
        PUAF_DRAGPROTOCOLCHECK = 0x200000
    } PUAF;

typedef
enum __MIDL_IInternetSecurityManager_0002
    {
        PUAFOUT_DEFAULT = 0,
        PUAFOUT_ISLOCKZONEPOLICY = 0x1
    } PUAFOUT;







typedef
enum __MIDL_IInternetSecurityManager_0003
    {
        SZM_CREATE = 0,
        SZM_DELETE = 0x1
    } SZM_FLAGS;
# 7038 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IInternetSecurityManager;



    struct __declspec(uuid("79eac9ee-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSecurityManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetSecuritySite(
                                             IInternetSecurityMgrSite *pSite) = 0;

        virtual HRESULT __stdcall GetSecuritySite(
                                             IInternetSecurityMgrSite **ppSite) = 0;

        virtual HRESULT __stdcall MapUrlToZone(
                                 LPCWSTR pwszUrl,
                                   DWORD *pdwZone,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetSecurityId(
                                 LPCWSTR pwszUrl,
                                                                        BYTE *pbSecurityId,
                                         DWORD *pcbSecurityId,
                       DWORD_PTR dwReserved) = 0;

        virtual HRESULT __stdcall ProcessUrlAction(
                                 LPCWSTR pwszUrl,
                       DWORD dwAction,
                                                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                                             BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwFlags,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall QueryCustomPolicy(
                                 LPCWSTR pwszUrl,
                                 const GUID & guidKey,
                                                                                       BYTE **ppPolicy,
                                   DWORD *pcbPolicy,
                                 BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall SetZoneMapping(
                       DWORD dwZone,
                                 LPCWSTR lpszPattern,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetZoneMappings(
                       DWORD dwZone,
                                             IEnumString **ppenumString,
                       DWORD dwFlags) = 0;

    };
# 7234 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec;
# 7249 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IInternetSecurityManagerEx;



    struct __declspec(uuid("F164EDF1-CC7C-4f0d-9A94-34222625C393")) __declspec(novtable)
    IInternetSecurityManagerEx : public IInternetSecurityManager
    {
    public:
        virtual HRESULT __stdcall ProcessUrlActionEx(
                                 LPCWSTR pwszUrl,
                       DWORD dwAction,
                                                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                                 BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwFlags,
                       DWORD dwReserved,
                                   DWORD *pdwOutFlags) = 0;

    };
# 7427 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec;
# 7439 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IInternetSecurityManagerEx2;



    struct __declspec(uuid("F1E50292-A795-4117-8E09-2B560A72AC60")) __declspec(novtable)
    IInternetSecurityManagerEx2 : public IInternetSecurityManagerEx
    {
    public:
        virtual HRESULT __stdcall MapUrlToZoneEx2(

                  IUri *pUri,
                                   DWORD *pdwZone,
                       DWORD dwFlags,

                          LPWSTR *ppwszMappedUrl,

                       DWORD *pdwOutFlags) = 0;

        virtual HRESULT __stdcall ProcessUrlActionEx2(

                  IUri *pUri,
                       DWORD dwAction,
                                                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                                             BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwFlags,
                       DWORD_PTR dwReserved,
                                   DWORD *pdwOutFlags) = 0;

        virtual HRESULT __stdcall GetSecurityIdEx2(

                  IUri *pUri,
                                                                        BYTE *pbSecurityId,
                                         DWORD *pcbSecurityId,
                       DWORD_PTR dwReserved) = 0;

        virtual HRESULT __stdcall QueryCustomPolicyEx2(

                  IUri *pUri,
                                 const GUID & guidKey,
                                                                                       BYTE **ppPolicy,
                                   DWORD *pcbPolicy,
                                 BYTE *pContext,
                       DWORD cbContext,
                       DWORD_PTR dwReserved) = 0;

    };
# 7699 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec;
# 7709 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IZoneIdentifier;



    struct __declspec(uuid("cd45f185-1b21-48e2-967b-ead743a8914e")) __declspec(novtable)
    IZoneIdentifier : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetId(
                                   DWORD *pdwZone) = 0;

        virtual HRESULT __stdcall SetId(
                       DWORD dwZone) = 0;

        virtual HRESULT __stdcall Remove( void) = 0;

    };
# 7811 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec;
# 7821 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IInternetHostSecurityManager;



    struct __declspec(uuid("3af280b6-cb3f-11d0-891e-00c04fb6bfc4")) __declspec(novtable)
    IInternetHostSecurityManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetSecurityId(

                                          BYTE *pbSecurityId,

                                                                                                                 DWORD *pcbSecurityId,
                       DWORD_PTR dwReserved) = 0;

        virtual HRESULT __stdcall ProcessUrlAction(
                       DWORD dwAction,

                                        BYTE *pPolicy,
                       DWORD cbPolicy,

                                       BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwFlags,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall QueryCustomPolicy(
                       const GUID & guidKey,

                                                              BYTE **ppPolicy,

                   DWORD *pcbPolicy,

                                   BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwReserved) = 0;

    };
# 8219 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED;





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec;







typedef IInternetZoneManager *LPURLZONEMANAGER;

typedef
enum tagURLZONE
    {
        URLZONE_INVALID = -1,
        URLZONE_PREDEFINED_MIN = 0,
        URLZONE_LOCAL_MACHINE = 0,
        URLZONE_INTRANET = ( URLZONE_LOCAL_MACHINE + 1 ) ,
        URLZONE_TRUSTED = ( URLZONE_INTRANET + 1 ) ,
        URLZONE_INTERNET = ( URLZONE_TRUSTED + 1 ) ,
        URLZONE_UNTRUSTED = ( URLZONE_INTERNET + 1 ) ,
        URLZONE_PREDEFINED_MAX = 999,
        URLZONE_USER_MIN = 1000,
        URLZONE_USER_MAX = 10000
    } URLZONE;



typedef
enum tagURLTEMPLATE
    {
        URLTEMPLATE_CUSTOM = 0,
        URLTEMPLATE_PREDEFINED_MIN = 0x10000,
        URLTEMPLATE_LOW = 0x10000,
        URLTEMPLATE_MEDLOW = 0x10500,
        URLTEMPLATE_MEDIUM = 0x11000,
        URLTEMPLATE_MEDHIGH = 0x11500,
        URLTEMPLATE_HIGH = 0x12000,
        URLTEMPLATE_PREDEFINED_MAX = 0x20000
    } URLTEMPLATE;


enum __MIDL_IInternetZoneManager_0001
    {
        MAX_ZONE_PATH = 260,
        MAX_ZONE_DESCRIPTION = 200
    } ;
typedef
enum __MIDL_IInternetZoneManager_0002
    {
        ZAFLAGS_CUSTOM_EDIT = 0x1,
        ZAFLAGS_ADD_SITES = 0x2,
        ZAFLAGS_REQUIRE_VERIFICATION = 0x4,
        ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,
        ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,
        ZAFLAGS_NO_UI = 0x20,
        ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,
        ZAFLAGS_UNC_AS_INTRANET = 0x80,
        ZAFLAGS_DETECT_INTRANET = 0x100,
        ZAFLAGS_USE_LOCKED_ZONES = 0x10000,
        ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x20000,
        ZAFLAGS_NO_CACHE = 0x40000
    } ZAFLAGS;

typedef struct _ZONEATTRIBUTES
    {
    ULONG cbSize;
    WCHAR szDisplayName[ 260 ];
    WCHAR szDescription[ 200 ];
    WCHAR szIconPath[ 260 ];
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
    } ZONEATTRIBUTES;

typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;
# 8319 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
typedef
enum _URLZONEREG
    {
        URLZONEREG_DEFAULT = 0,
        URLZONEREG_HKLM = ( URLZONEREG_DEFAULT + 1 ) ,
        URLZONEREG_HKCU = ( URLZONEREG_HKLM + 1 )
    } URLZONEREG;
# 8358 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IInternetZoneManager;



    struct __declspec(uuid("79eac9ef-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetZoneManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetZoneAttributes(
                       DWORD dwZone,

                     ZONEATTRIBUTES *pZoneAttributes) = 0;

        virtual HRESULT __stdcall SetZoneAttributes(
                       DWORD dwZone,

                  ZONEATTRIBUTES *pZoneAttributes) = 0;

        virtual HRESULT __stdcall GetZoneCustomPolicy(
                       DWORD dwZone,
                       const GUID & guidKey,

                                                BYTE **ppPolicy,

                   DWORD *pcbPolicy,
                       URLZONEREG urlZoneReg) = 0;

        virtual HRESULT __stdcall SetZoneCustomPolicy(
                       DWORD dwZone,
                       const GUID & guidKey,

                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg) = 0;

        virtual HRESULT __stdcall GetZoneActionPolicy(
                       DWORD dwZone,
                       DWORD dwAction,

                                    BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg) = 0;

        virtual HRESULT __stdcall SetZoneActionPolicy(
                       DWORD dwZone,
                       DWORD dwAction,

                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg) = 0;

        virtual HRESULT __stdcall PromptAction(
                       DWORD dwAction,
                       HWND hwndParent,
                       LPCWSTR pwszUrl,
                       LPCWSTR pwszText,
                       DWORD dwPromptFlags) = 0;

        virtual HRESULT __stdcall LogAction(
                       DWORD dwAction,
                       LPCWSTR pwszUrl,
                       LPCWSTR pwszText,
                       DWORD dwLogFlags) = 0;

        virtual HRESULT __stdcall CreateZoneEnumerator(
                        DWORD *pdwEnum,
                        DWORD *pdwCount,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetZoneAt(
                       DWORD dwEnum,
                       DWORD dwIndex,
                        DWORD *pdwZone) = 0;

        virtual HRESULT __stdcall DestroyZoneEnumerator(
                       DWORD dwEnum) = 0;

        virtual HRESULT __stdcall CopyTemplatePoliciesToZone(
                       DWORD dwTemplate,
                       DWORD dwZone,
                       DWORD dwReserved) = 0;

    };
# 8626 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec;
# 8644 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IInternetZoneManagerEx;



    struct __declspec(uuid("A4C23339-8E06-431e-9BF4-7E711C085648")) __declspec(novtable)
    IInternetZoneManagerEx : public IInternetZoneManager
    {
    public:
        virtual HRESULT __stdcall GetZoneActionPolicyEx(
                       DWORD dwZone,
                       DWORD dwAction,

                                    BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall SetZoneActionPolicyEx(
                       DWORD dwZone,
                       DWORD dwAction,

                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg,
                       DWORD dwFlags) = 0;

    };
# 8886 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec;
# 8899 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IInternetZoneManagerEx2;



    struct __declspec(uuid("EDC17559-DD5D-4846-8EEF-8BECBA5A4ABF")) __declspec(novtable)
    IInternetZoneManagerEx2 : public IInternetZoneManagerEx
    {
    public:
        virtual HRESULT __stdcall GetZoneAttributesEx(
                       DWORD dwZone,
                                    ZONEATTRIBUTES *pZoneAttributes,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetZoneSecurityState(
                       DWORD dwZoneIndex,
                       BOOL fRespectPolicy,
                            LPDWORD pdwState,
                            BOOL *pfPolicyEncountered) = 0;

        virtual HRESULT __stdcall GetIESecurityState(
                       BOOL fRespectPolicy,
                            LPDWORD pdwState,
                            BOOL *pfPolicyEncountered,
                       BOOL fNoCache) = 0;

        virtual HRESULT __stdcall FixUnsecureSettings( void) = 0;

    };
# 9171 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID CLSID_SoftDistExt;
# 9186 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
typedef struct _tagCODEBASEHOLD
    {
    ULONG cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
    } CODEBASEHOLD;

typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;

typedef struct _tagSOFTDISTINFO
    {
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
    } SOFTDISTINFO;

typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec;
# 9229 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_ISoftDistExt;



    struct __declspec(uuid("B15B8DC1-C7E1-11d0-8680-00AA00BDCB71")) __declspec(novtable)
    ISoftDistExt : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ProcessSoftDist(
                       LPCWSTR szCDFURL,
                       IXMLElement *pSoftDistElement,
                            LPSOFTDISTINFO lpsdi) = 0;

        virtual HRESULT __stdcall GetFirstCodeBase(

                       LPWSTR *szCodeBase,
                       LPDWORD dwMaxSize) = 0;

        virtual HRESULT __stdcall GetNextCodeBase(

                       LPWSTR *szCodeBase,
                       LPDWORD dwMaxSize) = 0;

        virtual HRESULT __stdcall AsyncInstallDistributionUnit(
                       IBindCtx *pbc,
                       LPVOID pvReserved,
                       DWORD flags,
                       LPCODEBASEHOLD lpcbh) = 0;

    };
# 9353 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" HRESULT __stdcall GetSoftwareUpdateInfo( LPCWSTR szDistUnit, LPSOFTDISTINFO psdi );
extern "C" HRESULT __stdcall SetSoftwareUpdateAdvertisementState( LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS );





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec;







typedef ICatalogFileInfo *LPCATALOGFILEINFO;


extern "C" const IID IID_ICatalogFileInfo;



    struct __declspec(uuid("711C7600-6B48-11d1-B403-00AA00B92AF1")) __declspec(novtable)
    ICatalogFileInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCatalogFile(

                        LPSTR *ppszCatalogFile) = 0;

        virtual HRESULT __stdcall GetJavaTrust(
                        void **ppJavaTrust) = 0;

    };
# 9465 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec;







typedef IDataFilter *LPDATAFILTER;


extern "C" const IID IID_IDataFilter;



    struct __declspec(uuid("69d14c80-c18e-11d0-a9ce-006097942311")) __declspec(novtable)
    IDataFilter : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DoEncode(
                       DWORD dwFlags,
                       LONG lInBufferSize,
                                                                     BYTE *pbInBuffer,
                       LONG lOutBufferSize,
                                                                        BYTE *pbOutBuffer,
                       LONG lInBytesAvailable,
                                   LONG *plInBytesRead,
                                   LONG *plOutBytesWritten,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall DoDecode(
                       DWORD dwFlags,
                       LONG lInBufferSize,
                                                                     BYTE *pbInBuffer,
                       LONG lOutBufferSize,
                                                                        BYTE *pbOutBuffer,
                       LONG lInBytesAvailable,
                                   LONG *plInBytesRead,
                                   LONG *plOutBytesWritten,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall SetEncodingLevel(
                       DWORD dwEncLevel) = 0;

    };
# 9608 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
typedef struct _tagPROTOCOLFILTERDATA
    {
    DWORD cbSize;
    IInternetProtocolSink *pProtocolSink;
    IInternetProtocol *pProtocol;
    IUnknown *pUnk;
    DWORD dwFilterFlags;
    } PROTOCOLFILTERDATA;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec;







typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY;

typedef struct _tagDATAINFO
    {
    ULONG ulTotalSize;
    ULONG ulavrPacketSize;
    ULONG ulConnectSpeed;
    ULONG ulProcessorSpeed;
    } DATAINFO;


extern "C" const IID IID_IEncodingFilterFactory;



    struct __declspec(uuid("70bdde00-c18e-11d0-a9ce-006097942311")) __declspec(novtable)
    IEncodingFilterFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FindBestFilter(
                       LPCWSTR pwzCodeIn,
                       LPCWSTR pwzCodeOut,
                       DATAINFO info,
                        IDataFilter **ppDF) = 0;

        virtual HRESULT __stdcall GetDefaultFilter(
                       LPCWSTR pwzCodeIn,
                       LPCWSTR pwzCodeOut,
                        IDataFilter **ppDF) = 0;

    };
# 9739 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
BOOL __stdcall IsLoggingEnabledA( LPCSTR pszUrl);
BOOL __stdcall IsLoggingEnabledW( LPCWSTR pwszUrl);





typedef struct _tagHIT_LOGGING_INFO
    {
    DWORD dwStructSize;
    LPSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    LPSTR lpszExtendedInfo;
    } HIT_LOGGING_INFO;

typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;

BOOL __stdcall WriteHitLogging( LPHIT_LOGGING_INFO lpLogginginfo);

struct CONFIRMSAFETY
    {
    CLSID clsid;
    IUnknown *pUnk;
    DWORD dwFlags;
    } ;
extern "C" const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY;





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec;







typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL;


extern "C" const IID IID_IWrappedProtocol;



    struct __declspec(uuid("53c84785-8425-4dc5-971b-e58d9c19f9b6")) __declspec(novtable)
    IWrappedProtocol : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWrapperCode(
                        LONG *pnCode,
                       DWORD_PTR dwReserved) = 0;

    };
# 9866 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec;







typedef IGetBindHandle *LPGETBINDHANDLE;

typedef
enum __MIDL_IGetBindHandle_0001
    {
        BINDHANDLETYPES_APPCACHE = 0,
        BINDHANDLETYPES_DEPENDENCY = 0x1,
        BINDHANDLETYPES_COUNT = ( BINDHANDLETYPES_DEPENDENCY + 1 )
    } BINDHANDLETYPES;


extern "C" const IID IID_IGetBindHandle;



    struct __declspec(uuid("AF0FF408-129D-4b20-91F0-02BD23D88352")) __declspec(novtable)
    IGetBindHandle : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBindHandle(
                       BINDHANDLETYPES enumRequestedHandle,
                        HANDLE *pRetHandle) = 0;

    };
# 9967 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
typedef struct _tagPROTOCOL_ARGUMENT
    {
    LPCWSTR szMethod;
    LPCWSTR szTargetUrl;
    } PROTOCOL_ARGUMENT;

typedef struct _tagPROTOCOL_ARGUMENT *LPPROTOCOL_ARGUMENT;






extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec;







typedef IBindCallbackRedirect *LPBINDCALLBACKREDIRECT;


extern "C" const IID IID_IBindCallbackRedirect;



    struct __declspec(uuid("11C81BC2-121E-4ed5-B9C4-B430BD54F2C0")) __declspec(novtable)
    IBindCallbackRedirect : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Redirect(
                       LPCWSTR lpcUrl,
                        VARIANT_BOOL *vbCancel) = 0;

    };
# 10075 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec;
# 10085 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern "C" const IID IID_IBindHttpSecurity;



    struct __declspec(uuid("a9eda967-f50e-4a33-b358-206f6ef3086d")) __declspec(novtable)
    IBindHttpSecurity : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetIgnoreCertMask(
                                        DWORD *pdwIgnoreCertMask) = 0;

    };
# 10166 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall HWND_UserSize( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree( unsigned long *, HWND * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall HWND_UserSize64( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal64( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal64( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree64( unsigned long *, HWND * );

              HRESULT __stdcall IBinding_GetBindResult_Proxy(
    IBinding * This,
                CLSID *pclsidProtocol,
                DWORD *pdwResult,

                LPOLESTR *pszResult,
                    DWORD *pdwReserved);


                HRESULT __stdcall IBinding_GetBindResult_Stub(
              IBinding * This,
                           CLSID *pclsidProtocol,
                           DWORD *pdwResult,
                                     LPOLESTR *pszResult,
               DWORD dwReserved);

              HRESULT __stdcall IBindStatusCallback_GetBindInfo_Proxy(
    IBindStatusCallback * This,
                DWORD *grfBINDF,
                            BINDINFO *pbindinfo);


                HRESULT __stdcall IBindStatusCallback_GetBindInfo_Stub(
              IBindStatusCallback * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed);

              HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Proxy(
    IBindStatusCallback * This,
               DWORD grfBSCF,
               DWORD dwSize,
               FORMATETC *pformatetc,
               STGMEDIUM *pstgmed);


                HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Stub(
              IBindStatusCallback * This,
               DWORD grfBSCF,
               DWORD dwSize,
                         RemFORMATETC *pformatetc,
                         RemSTGMEDIUM *pstgmed);

              HRESULT __stdcall IBindStatusCallbackEx_GetBindInfoEx_Proxy(
    IBindStatusCallbackEx * This,
                DWORD *grfBINDF,
                            BINDINFO *pbindinfo,
                DWORD *grfBINDF2,
                DWORD *pdwReserved);


                HRESULT __stdcall IBindStatusCallbackEx_GetBindInfoEx_Stub(
              IBindStatusCallbackEx * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed,
                           DWORD *grfBINDF2,
                           DWORD *pdwReserved);

              HRESULT __stdcall IWinInetInfo_QueryOption_Proxy(
    IWinInetInfo * This,
               DWORD dwOption,
                             LPVOID pBuffer,
                    DWORD *pcbBuf);


                HRESULT __stdcall IWinInetInfo_QueryOption_Stub(
              IWinInetInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf);

              HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Proxy(
    IWinInetHttpInfo * This,
               DWORD dwOption,
                             LPVOID pBuffer,
                    DWORD *pcbBuf,
                    DWORD *pdwFlags,
                    DWORD *pdwReserved);


                HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Stub(
              IWinInetHttpInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf,
                                 DWORD *pdwFlags,
                                 DWORD *pdwReserved);

              HRESULT __stdcall IBindHost_MonikerBindToStorage_Proxy(
    IBindHost * This,
               IMoniker *pMk,
               IBindCtx *pBC,
               IBindStatusCallback *pBSC,
               const IID & riid,
                void **ppvObj);


                HRESULT __stdcall IBindHost_MonikerBindToStorage_Stub(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID & riid,
                                             IUnknown **ppvObj);

              HRESULT __stdcall IBindHost_MonikerBindToObject_Proxy(
    IBindHost * This,
               IMoniker *pMk,
               IBindCtx *pBC,
               IBindStatusCallback *pBSC,
               const IID & riid,
                void **ppvObj);


                HRESULT __stdcall IBindHost_MonikerBindToObject_Stub(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID & riid,
                                             IUnknown **ppvObj);






}
# 394 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objbase.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h" 1








#pragma warning(disable: 4049)
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
typedef struct IPropertyStorage IPropertyStorage;






typedef struct IPropertySetStorage IPropertySetStorage;






typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;






typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;
# 76 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
extern "C"{
# 92 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
#pragma warning(push)

#pragma warning(disable: 4201)
#pragma warning(disable: 4237)
# 105 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
typedef struct tagVersionedStream
    {
    GUID guidVersion;
    IStream *pStream;
    } VERSIONEDSTREAM;

typedef struct tagVersionedStream *LPVERSIONEDSTREAM;
# 137 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
typedef struct tagPROPVARIANT PROPVARIANT;

typedef struct tagCAC
    {
    ULONG cElems;
                    CHAR *pElems;
    } CAC;

typedef struct tagCAUB
    {
    ULONG cElems;
                    UCHAR *pElems;
    } CAUB;

typedef struct tagCAI
    {
    ULONG cElems;
                    SHORT *pElems;
    } CAI;

typedef struct tagCAUI
    {
    ULONG cElems;
                    USHORT *pElems;
    } CAUI;

typedef struct tagCAL
    {
    ULONG cElems;
                    LONG *pElems;
    } CAL;

typedef struct tagCAUL
    {
    ULONG cElems;
                    ULONG *pElems;
    } CAUL;

typedef struct tagCAFLT
    {
    ULONG cElems;
                    FLOAT *pElems;
    } CAFLT;

typedef struct tagCADBL
    {
    ULONG cElems;
                    DOUBLE *pElems;
    } CADBL;

typedef struct tagCACY
    {
    ULONG cElems;
                    CY *pElems;
    } CACY;

typedef struct tagCADATE
    {
    ULONG cElems;
                    DATE *pElems;
    } CADATE;

typedef struct tagCABSTR
    {
    ULONG cElems;
                    BSTR *pElems;
    } CABSTR;

typedef struct tagCABSTRBLOB
    {
    ULONG cElems;
                    BSTRBLOB *pElems;
    } CABSTRBLOB;

typedef struct tagCABOOL
    {
    ULONG cElems;
                    VARIANT_BOOL *pElems;
    } CABOOL;

typedef struct tagCASCODE
    {
    ULONG cElems;
                    SCODE *pElems;
    } CASCODE;

typedef struct tagCAPROPVARIANT
    {
    ULONG cElems;
                    PROPVARIANT *pElems;
    } CAPROPVARIANT;

typedef struct tagCAH
    {
    ULONG cElems;
                    LARGE_INTEGER *pElems;
    } CAH;

typedef struct tagCAUH
    {
    ULONG cElems;
                    ULARGE_INTEGER *pElems;
    } CAUH;

typedef struct tagCALPSTR
    {
    ULONG cElems;
                    LPSTR *pElems;
    } CALPSTR;

typedef struct tagCALPWSTR
    {
    ULONG cElems;
                    LPWSTR *pElems;
    } CALPWSTR;

typedef struct tagCAFILETIME
    {
    ULONG cElems;
                    FILETIME *pElems;
    } CAFILETIME;

typedef struct tagCACLIPDATA
    {
    ULONG cElems;
                    CLIPDATA *pElems;
    } CACLIPDATA;

typedef struct tagCACLSID
    {
    ULONG cElems;
                    CLSID *pElems;
    } CACLSID;
# 281 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
typedef WORD PROPVAR_PAD1;
typedef WORD PROPVAR_PAD2;
typedef WORD PROPVAR_PAD3;
# 293 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
struct tagPROPVARIANT {
  union {

struct
    {
    VARTYPE vt;
    PROPVAR_PAD1 wReserved1;
    PROPVAR_PAD2 wReserved2;
    PROPVAR_PAD3 wReserved3;
                                          union
        {

                       CHAR cVal;
                       UCHAR bVal;
                       SHORT iVal;
                       USHORT uiVal;
                       LONG lVal;
                       ULONG ulVal;
                       INT intVal;
                       UINT uintVal;
                       LARGE_INTEGER hVal;
                       ULARGE_INTEGER uhVal;
                       FLOAT fltVal;
                       DOUBLE dblVal;
                       VARIANT_BOOL boolVal;

                       SCODE scode;
                       CY cyVal;
                       DATE date;
                       FILETIME filetime;
                       CLSID *puuid;
                       CLIPDATA *pclipdata;
                       BSTR bstrVal;
                       BSTRBLOB bstrblobVal;
                       BLOB blob;
                       LPSTR pszVal;
                       LPWSTR pwszVal;
                       IUnknown *punkVal;
                       IDispatch *pdispVal;
                       IStream *pStream;
                       IStorage *pStorage;
                       LPVERSIONEDSTREAM pVersionedStream;
                       LPSAFEARRAY parray;
                       CAC cac;
                       CAUB caub;
                       CAI cai;
                       CAUI caui;
                       CAL cal;
                       CAUL caul;
                       CAH cah;
                       CAUH cauh;
                       CAFLT caflt;
                       CADBL cadbl;
                       CABOOL cabool;
                       CASCODE cascode;
                       CACY cacy;
                       CADATE cadate;
                       CAFILETIME cafiletime;
                       CACLSID cauuid;
                       CACLIPDATA caclipdata;
                       CABSTR cabstr;
                       CABSTRBLOB cabstrblob;
                       CALPSTR calpstr;
                       CALPWSTR calpwstr;
                       CAPROPVARIANT capropvar;
                       CHAR *pcVal;
                       UCHAR *pbVal;
                       SHORT *piVal;
                       USHORT *puiVal;
                       LONG *plVal;
                       ULONG *pulVal;
                       INT *pintVal;
                       UINT *puintVal;
                       FLOAT *pfltVal;
                       DOUBLE *pdblVal;
                       VARIANT_BOOL *pboolVal;
                       DECIMAL *pdecVal;
                       SCODE *pscode;
                       CY *pcyVal;
                       DATE *pdate;
                       BSTR *pbstrVal;
                       IUnknown **ppunkVal;
                       IDispatch **ppdispVal;
                       LPSAFEARRAY *pparray;
                       PROPVARIANT *pvarVal;
        } ;
    } ;

    DECIMAL decVal;
  };
};
# 397 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
typedef struct tagPROPVARIANT * LPPROPVARIANT;
# 497 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
enum PIDMSI_STATUS_VALUE
    {
        PIDMSI_STATUS_NORMAL = 0,
        PIDMSI_STATUS_NEW = ( PIDMSI_STATUS_NORMAL + 1 ) ,
        PIDMSI_STATUS_PRELIM = ( PIDMSI_STATUS_NEW + 1 ) ,
        PIDMSI_STATUS_DRAFT = ( PIDMSI_STATUS_PRELIM + 1 ) ,
        PIDMSI_STATUS_INPROGRESS = ( PIDMSI_STATUS_DRAFT + 1 ) ,
        PIDMSI_STATUS_EDIT = ( PIDMSI_STATUS_INPROGRESS + 1 ) ,
        PIDMSI_STATUS_REVIEW = ( PIDMSI_STATUS_EDIT + 1 ) ,
        PIDMSI_STATUS_PROOF = ( PIDMSI_STATUS_REVIEW + 1 ) ,
        PIDMSI_STATUS_FINAL = ( PIDMSI_STATUS_PROOF + 1 ) ,
        PIDMSI_STATUS_OTHER = 0x7fff
    } ;
# 520 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
typedef struct tagPROPSPEC
    {
    ULONG ulKind;
                                          union
        {
                       PROPID propid;
                       LPOLESTR lpwstr;

        } ;
    } PROPSPEC;

typedef struct tagSTATPROPSTG
    {
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
    } STATPROPSTG;






typedef struct tagSTATPROPSETSTG
    {
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
    } STATPROPSETSTG;



extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0000_v0_0_s_ifspec;
# 566 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
extern "C" const IID IID_IPropertyStorage;



    struct __declspec(uuid("00000138-0000-0000-C000-000000000046")) __declspec(novtable)
    IPropertyStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReadMultiple(
                       ULONG cpspec,
                                                              const PROPSPEC rgpspec[ ],
                                                                PROPVARIANT rgpropvar[ ]) = 0;

        virtual HRESULT __stdcall WriteMultiple(
                       ULONG cpspec,
                                                              const PROPSPEC rgpspec[ ],
                                                              const PROPVARIANT rgpropvar[ ],
                       PROPID propidNameFirst) = 0;

        virtual HRESULT __stdcall DeleteMultiple(
                       ULONG cpspec,
                                                              const PROPSPEC rgpspec[ ]) = 0;

        virtual HRESULT __stdcall ReadPropertyNames(
                       ULONG cpropid,
                                                               const PROPID rgpropid[ ],
                                                                 LPOLESTR rglpwstrName[ ]) = 0;

        virtual HRESULT __stdcall WritePropertyNames(
                       ULONG cpropid,
                                                               const PROPID rgpropid[ ],
                                                               const LPOLESTR rglpwstrName[ ]) = 0;

        virtual HRESULT __stdcall DeletePropertyNames(
                       ULONG cpropid,
                                                               const PROPID rgpropid[ ]) = 0;

        virtual HRESULT __stdcall Commit(
                       DWORD grfCommitFlags) = 0;

        virtual HRESULT __stdcall Revert( void) = 0;

        virtual HRESULT __stdcall Enum(
                                             IEnumSTATPROPSTG **ppenum) = 0;

        virtual HRESULT __stdcall SetTimes(
                                 const FILETIME *pctime,
                                 const FILETIME *patime,
                                 const FILETIME *pmtime) = 0;

        virtual HRESULT __stdcall SetClass(
                                 const IID & clsid) = 0;

        virtual HRESULT __stdcall Stat(
                                   STATPROPSETSTG *pstatpsstg) = 0;

    };
# 779 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;


extern "C" const IID IID_IPropertySetStorage;



    struct __declspec(uuid("0000013A-0000-0000-C000-000000000046")) __declspec(novtable)
    IPropertySetStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Create(
                                 const IID & rfmtid,
                                             const CLSID *pclsid,
                       DWORD grfFlags,
                       DWORD grfMode,
                                             IPropertyStorage **ppprstg) = 0;

        virtual HRESULT __stdcall Open(
                                 const IID & rfmtid,
                       DWORD grfMode,
                                             IPropertyStorage **ppprstg) = 0;

        virtual HRESULT __stdcall Delete(
                                 const IID & rfmtid) = 0;

        virtual HRESULT __stdcall Enum(
                                             IEnumSTATPROPSETSTG **ppenum) = 0;

    };
# 903 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;


extern "C" const IID IID_IEnumSTATPROPSTG;



    struct __declspec(uuid("00000139-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATPROPSTG : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                  STATPROPSTG *rgelt,

                                                  ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumSTATPROPSTG **ppenum) = 0;

    };
# 1011 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
                HRESULT __stdcall IEnumSTATPROPSTG_RemoteNext_Proxy(
              IEnumSTATPROPSTG * This,
               ULONG celt,
                                                                                STATPROPSTG *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATPROPSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1035 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;


extern "C" const IID IID_IEnumSTATPROPSETSTG;



    struct __declspec(uuid("0000013B-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATPROPSETSTG : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                  STATPROPSETSTG *rgelt,

                                                  ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumSTATPROPSETSTG **ppenum) = 0;

    };
# 1143 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
                HRESULT __stdcall IEnumSTATPROPSETSTG_RemoteNext_Proxy(
              IEnumSTATPROPSETSTG * This,
               ULONG celt,
                                                                                STATPROPSETSTG *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATPROPSETSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1164 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
typedef IPropertyStorage *LPPROPERTYSTORAGE;

               extern "C" __declspec(dllimport) HRESULT __stdcall PropVariantCopy(
                  PROPVARIANT* pvarDest,
                 const PROPVARIANT * pvarSrc);

extern "C" __declspec(dllimport) HRESULT __stdcall PropVariantClear( PROPVARIANT* pvar);

extern "C" __declspec(dllimport) HRESULT __stdcall FreePropVariantArray(
                 ULONG cVariants,
                                       PROPVARIANT* rgvars);
# 1183 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
inline void PropVariantInit ( PROPVARIANT * pvar )
{
    memset ( pvar, 0, sizeof(PROPVARIANT) );
}
# 1200 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall StgCreatePropStg(
                 IUnknown* pUnk,
                 const IID & fmtid,
                 const CLSID* pclsid,
                 DWORD grfFlags,
                       DWORD dwReserved,
                     IPropertyStorage** ppPropStg);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenPropStg(
                 IUnknown* pUnk,
                 const IID & fmtid,
                 DWORD grfFlags,
                       DWORD dwReserved,
                     IPropertyStorage** ppPropStg);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgCreatePropSetStg(
                 IStorage* pStorage,
                       DWORD dwReserved,
                     IPropertySetStorage** ppPropSetStg);



               extern "C" __declspec(dllimport) HRESULT __stdcall FmtIdToPropStgName(
                 const FMTID* pfmtid,
                                                 LPOLESTR oszName);

               extern "C" __declspec(dllimport) HRESULT __stdcall PropStgNameToFmtId(
                 const LPOLESTR oszName,
                  FMTID* pfmtid);





typedef struct tagSERIALIZEDPROPERTYVALUE
{
    DWORD dwType;
    BYTE rgb[1];
} SERIALIZEDPROPERTYVALUE;
# 1247 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\propidl.h"
extern "C"

SERIALIZEDPROPERTYVALUE* __stdcall
StgConvertVariantToProperty(
                 const PROPVARIANT* pvar,
                 USHORT CodePage,
                                         SERIALIZEDPROPERTYVALUE* pprop,
                    ULONG* pcb,
                 PROPID pid,
                       BOOLEAN fReserved,
                        ULONG* pcIndirect);


class PMemoryAllocator;

extern "C"

BOOLEAN __stdcall
StgConvertPropertyToVariant(
                 const SERIALIZEDPROPERTYVALUE* pprop,
                 USHORT CodePage,
                  PROPVARIANT* pvar,
                 PMemoryAllocator* pma);






#pragma warning(pop)






extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall LPSAFEARRAY_UserSize( unsigned long *, unsigned long , LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserMarshal( unsigned long *, unsigned char *, LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserUnmarshal( unsigned long *, unsigned char *, LPSAFEARRAY * );
void __stdcall LPSAFEARRAY_UserFree( unsigned long *, LPSAFEARRAY * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall LPSAFEARRAY_UserSize64( unsigned long *, unsigned long , LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserMarshal64( unsigned long *, unsigned char *, LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserUnmarshal64( unsigned long *, unsigned char *, LPSAFEARRAY * );
void __stdcall LPSAFEARRAY_UserFree64( unsigned long *, LPSAFEARRAY * );

              HRESULT __stdcall IEnumSTATPROPSTG_Next_Proxy(
    IEnumSTATPROPSTG * This,
               ULONG celt,

                                          STATPROPSTG *rgelt,

                                          ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATPROPSTG_Next_Stub(
              IEnumSTATPROPSTG * This,
               ULONG celt,
                                                                                STATPROPSTG *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Proxy(
    IEnumSTATPROPSETSTG * This,
               ULONG celt,

                                          STATPROPSETSTG *rgelt,

                                          ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Stub(
              IEnumSTATPROPSETSTG * This,
               ULONG celt,
                                                                                STATPROPSETSTG *rgelt,
                           ULONG *pceltFetched);






}
# 395 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objbase.h" 2








extern "C" __declspec(dllimport) HRESULT __stdcall CreateStdProgressIndicator( HWND hwndParent,
                                        LPCOLESTR pszTitle,
                                        IBindStatusCallback * pIbscCaller,
                                            IBindStatusCallback ** ppIbsc);







# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 413 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\objbase.h" 2
# 32 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ole2.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h" 1
# 23 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
# 23 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h" 2
# 36 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" const IID IID_StdOle;
# 69 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocString( const OLECHAR * psz);
extern "C" __declspec(dllimport) INT __stdcall SysReAllocString( BSTR* pbstr, const OLECHAR* psz);
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocStringLen( const OLECHAR * strIn, UINT ui);
               extern "C" __declspec(dllimport) INT __stdcall SysReAllocStringLen( BSTR* pbstr, const OLECHAR* psz, unsigned int len);
extern "C" __declspec(dllimport) void __stdcall SysFreeString( BSTR bstrString);
extern "C" __declspec(dllimport) UINT __stdcall SysStringLen( BSTR pbstr);


extern "C" __declspec(dllimport) UINT __stdcall SysStringByteLen( BSTR bstr);
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocStringByteLen( LPCSTR psz, UINT len);
# 92 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) INT __stdcall DosDateTimeToVariantTime( USHORT wDosDate, USHORT wDosTime, DOUBLE * pvtime);

extern "C" __declspec(dllimport) INT __stdcall VariantTimeToDosDateTime( DOUBLE vtime, USHORT * pwDosDate, USHORT * pwDosTime);
# 104 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) INT __stdcall SystemTimeToVariantTime( LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime);
extern "C" __declspec(dllimport) INT __stdcall VariantTimeToSystemTime( DOUBLE vtime, LPSYSTEMTIME lpSystemTime);
# 120 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptor( UINT cDims, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptorEx( VARTYPE vt, UINT cDims, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocData( SAFEARRAY * psa);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreate( VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateEx( VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound, PVOID pvExtra);

extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayCopyData( SAFEARRAY *psaSource, SAFEARRAY *psaTarget);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyDescriptor( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyData( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroy( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayRedim( SAFEARRAY * psa, SAFEARRAYBOUND * psaboundNew);
extern "C" __declspec(dllimport) UINT __stdcall SafeArrayGetDim( SAFEARRAY * psa);
extern "C" __declspec(dllimport) UINT __stdcall SafeArrayGetElemsize( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetUBound( SAFEARRAY * psa, UINT nDim, LONG * plUbound);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetLBound( SAFEARRAY * psa, UINT nDim, LONG * plLbound);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayLock( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayUnlock( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAccessData( SAFEARRAY * psa, void ** ppvData);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayUnaccessData( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetElement( SAFEARRAY * psa, LONG * rgIndices, void * pv);

extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayPutElement( SAFEARRAY * psa, LONG * rgIndices, void * pv);

extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayCopy( SAFEARRAY * psa, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayPtrOfIndex( SAFEARRAY * psa, LONG * rgIndices, void ** ppvData);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArraySetRecordInfo( SAFEARRAY * psa, IRecordInfo * prinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetRecordInfo( SAFEARRAY * psa, IRecordInfo ** prinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArraySetIID( SAFEARRAY * psa, const GUID & guid);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetIID( SAFEARRAY * psa, GUID * pguid);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetVartype( SAFEARRAY * psa, VARTYPE * pvt);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVector( VARTYPE vt, LONG lLbound, ULONG cElements);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVectorEx( VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra);
# 164 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) void __stdcall VariantInit( VARIANTARG * pvarg);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantClear( VARIANTARG * pvarg);

extern "C" __declspec(dllimport) HRESULT __stdcall VariantCopy( VARIANTARG * pvargDest, const VARIANTARG * pvargSrc);

extern "C" __declspec(dllimport) HRESULT __stdcall VariantCopyInd( VARIANT * pvarDest, const VARIANTARG * pvargSrc);

extern "C" __declspec(dllimport) HRESULT __stdcall VariantChangeType( VARIANTARG * pvargDest,
                    const VARIANTARG * pvarSrc, USHORT wFlags, VARTYPE vt);

extern "C" __declspec(dllimport) HRESULT __stdcall VariantChangeTypeEx( VARIANTARG * pvargDest,
                    const VARIANTARG * pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt);
# 203 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall VectorFromBstr ( BSTR bstr, SAFEARRAY ** ppsa);

extern "C" __declspec(dllimport) HRESULT __stdcall BstrFromVector ( SAFEARRAY *psa, BSTR *pbstr);
# 281 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI2(SHORT sIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI4(LONG lIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI8(LONG64 i64In, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromR4(FLOAT fltIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromR8(DOUBLE dblIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromCy(CY cyIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDate(DATE dateIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDisp(IDispatch * pdispIn, LCID lcid, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromBool(VARIANT_BOOL boolIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI1(CHAR cIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI2(USHORT uiIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI4(ULONG ulIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI8(ULONG64 ui64In, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDec( const DECIMAL *pdecIn, BYTE *pbOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI1(BYTE bIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI4(LONG lIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI8(LONG64 i64In, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromR4(FLOAT fltIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromR8(DOUBLE dblIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromCy(CY cyIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDate(DATE dateIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDisp(IDispatch * pdispIn, LCID lcid, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromBool(VARIANT_BOOL boolIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI1(CHAR cIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI2(USHORT uiIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI4(ULONG ulIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI8(ULONG64 ui64In, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDec( const DECIMAL *pdecIn, SHORT *psOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI1(BYTE bIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI2(SHORT sIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI8(LONG64 i64In, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromR4(FLOAT fltIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromR8(DOUBLE dblIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromCy(CY cyIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDate(DATE dateIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDisp(IDispatch * pdispIn, LCID lcid, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromBool(VARIANT_BOOL boolIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI1(CHAR cIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI2(USHORT uiIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI4(ULONG ulIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDec( const DECIMAL *pdecIn, LONG *plOut);



extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI1(BYTE bIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromI2(SHORT sIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromR4(FLOAT fltIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromR8(DOUBLE dblIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromCy( CY cyIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDate(DATE dateIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDisp(IDispatch * pdispIn, LCID lcid, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromBool(VARIANT_BOOL boolIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromI1(CHAR cIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI2(USHORT uiIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI4(ULONG ulIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI8(ULONG64 ui64In, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDec( const DECIMAL *pdecIn, LONG64 * pi64Out);





extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI1(BYTE bIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI2(SHORT sIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI4(LONG lIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI8(LONG64 i64In, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromR8(DOUBLE dblIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromCy(CY cyIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDate(DATE dateIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDisp(IDispatch * pdispIn, LCID lcid, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromBool(VARIANT_BOOL boolIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI1(CHAR cIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI8(ULONG64 ui64In, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDec( const DECIMAL *pdecIn, FLOAT *pfltOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI1(BYTE bIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI2(SHORT sIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI4(LONG lIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI8(LONG64 i64In, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromR4(FLOAT fltIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromCy(CY cyIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDate(DATE dateIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDisp(IDispatch * pdispIn, LCID lcid, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI1(CHAR cIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI8(ULONG64 ui64In, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDec( const DECIMAL *pdecIn, DOUBLE *pdblOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI1(BYTE bIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI2(SHORT sIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI4(LONG lIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI8(LONG64 i64In, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromR4(FLOAT fltIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromR8(DOUBLE dblIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromCy(CY cyIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromDisp(IDispatch * pdispIn, LCID lcid, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromBool(VARIANT_BOOL boolIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI1(CHAR cIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI2(USHORT uiIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI4(ULONG ulIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI8(ULONG64 ui64In, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromDec( const DECIMAL *pdecIn, DATE *pdateOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI1(BYTE bIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI2(SHORT sIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI4(LONG lIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI8(LONG64 i64In, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromR4(FLOAT fltIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromR8(DOUBLE dblIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDate(DATE dateIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDisp( IDispatch * pdispIn, LCID lcid, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromBool(VARIANT_BOOL boolIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI1(CHAR cIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI2(USHORT uiIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI4(ULONG ulIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI8(ULONG64 ui64In, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDec( const DECIMAL *pdecIn, CY *pcyOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDate( DATE dateIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDisp(IDispatch * pdispIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDec( const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI1(BYTE bIn, VARIANT_BOOL * pboolOut);
               extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI2( SHORT sIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI4(LONG lIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI8(LONG64 i64In, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDate(DATE dateIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromCy(CY cyIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDisp(IDispatch * pdispIn, LCID lcid, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDec( const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut);

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromUI1(
         BYTE bIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromI2(
         SHORT uiIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromI4(
         LONG lIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromI8(
         LONG64 i64In,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromR4(
         FLOAT fltIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromR8(
         DOUBLE dblIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromDate(
         DATE dateIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromCy(
         CY cyIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromStr(
         LPCOLESTR strIn,
         LCID lcid,
         ULONG dwFlags,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromDisp(
         IDispatch *pdispIn,
         LCID lcid,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromBool(
         VARIANT_BOOL boolIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromUI2(
         USHORT uiIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromUI4(
         ULONG ulIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromUI8(
         ULONG64 i64In,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromDec(
         const DECIMAL *pdecIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI1(BYTE bIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI2(SHORT uiIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI4(LONG lIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI8(LONG64 i64In, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromR4(FLOAT fltIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDate(DATE dateIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromCy(CY cyIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDisp( IDispatch *pdispIn, LCID lcid, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI1(CHAR cIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI4(ULONG ulIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDec( const DECIMAL *pdecIn, USHORT *puiOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI1(BYTE bIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI2( SHORT uiIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI4(LONG lIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI8(LONG64 i64In, ULONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromR4(FLOAT fltIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDate(DATE dateIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromCy(CY cyIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDisp( IDispatch *pdispIn, LCID lcid, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI1(CHAR cIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI2(USHORT uiIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDec( const DECIMAL *pdecIn, ULONG *pulOut);



extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI1(BYTE bIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI2(SHORT sIn, ULONG64 * pi64Out);







extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI4(LONG lIn, ULONG64 * pi64Out);







extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI8(LONG64 ui64In, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromR4(FLOAT fltIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromR8(DOUBLE dblIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromCy(CY cyIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDate(DATE dateIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDisp( IDispatch * pdispIn, LCID lcid, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI1(CHAR cIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI2(USHORT uiIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI4(ULONG ulIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDec( const DECIMAL *pdecIn, ULONG64 * pi64Out);






extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI1( BYTE bIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI2( SHORT uiIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI4( LONG lIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromR4( FLOAT fltIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromR8( DOUBLE dblIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromDate( DATE dateIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromCy( CY cyIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromDisp( IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromBool( VARIANT_BOOL boolIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI1( CHAR cIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI2( USHORT uiIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI4( ULONG ulIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut);
# 634 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI8(LONG64 i64In, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In, LONG *plOut);
# 725 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
typedef struct {
    INT cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT cchUsed;
    INT nBaseShift;
    INT nPwr10;
} NUMPARSE;
# 776 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall VarParseNumFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags,
                  NUMPARSE * pnumprs, BYTE * rgbDig);


extern "C" __declspec(dllimport) HRESULT __stdcall VarNumFromParseNum( NUMPARSE * pnumprs, BYTE * rgbDig,
                 ULONG dwVtBits, VARIANT * pvar);
# 793 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" HRESULT __stdcall VarAdd( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarAnd( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarCat( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarDiv( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarEqv( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarIdiv( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarImp( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarMod( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarMul( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarOr( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarPow( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarSub( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarXor( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);

extern "C" HRESULT __stdcall VarAbs( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarFix( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarInt( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarNeg( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarNot( LPVARIANT pvarIn, LPVARIANT pvarResult);

extern "C" HRESULT __stdcall VarRound( LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult);


extern "C" HRESULT __stdcall VarCmp( LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags);





extern "C++" {





__inline
HRESULT

__stdcall

VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid) {
    return VarCmp(pvarLeft, pvarRight, lcid, 0);
}




}
# 850 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" HRESULT __stdcall VarDecAdd( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecDiv( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecMul( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecSub( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecAbs( LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecFix( LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecInt( LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecNeg( LPDECIMAL pdecIn, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecRound( LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecCmp( LPDECIMAL pdecLeft, LPDECIMAL pdecRight);
extern "C" HRESULT __stdcall VarDecCmpR8( LPDECIMAL pdecLeft, double dblRight);




extern "C" HRESULT __stdcall VarCyAdd( CY cyLeft, CY cyRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMul( CY cyLeft, CY cyRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMulI4( CY cyLeft, LONG lRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMulI8( CY cyLeft, LONG64 lRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCySub( CY cyLeft, CY cyRight, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyAbs( CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyFix( CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyInt( CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyNeg( CY cyIn, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyRound( CY cyIn, int cDecimals, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyCmp( CY cyLeft, CY cyRight);
extern "C" HRESULT __stdcall VarCyCmpR8( CY cyLeft, double dblRight);




extern "C" HRESULT __stdcall VarBstrCat( BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult);
extern "C" HRESULT __stdcall VarBstrCmp( BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags);
extern "C" HRESULT __stdcall VarR8Pow( double dblLeft, double dblRight, double *pdblResult);
extern "C" HRESULT __stdcall VarR4CmpR8( float fltLeft, double dblRight);
extern "C" HRESULT __stdcall VarR8Round( double dblIn, int cDecimals, double *pdblResult);
# 920 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
typedef struct {
    SYSTEMTIME st;
    USHORT wDayOfYear;
} UDATE;
# 934 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUdate( UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUdateEx( UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarUdateFromDate( DATE dateIn, ULONG dwFlags, UDATE *pudateOut);
# 949 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall GetAltMonthNames(LCID lcid, LPOLESTR * * prgp);
# 961 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormat(
      LPVARIANT pvarIn,
          LPOLESTR pstrFormat,
 int iFirstDay,
 int iFirstWeek,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatDateTime(
      LPVARIANT pvarIn,
 int iNamedFormat,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatNumber(
      LPVARIANT pvarIn,
 int iNumDig,
 int iIncLead,
 int iUseParens,
 int iGroup,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatPercent(
      LPVARIANT pvarIn,
 int iNumDig,
 int iIncLead,
 int iUseParens,
 int iGroup,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatCurrency(
      LPVARIANT pvarIn,
 int iNumDig,
 int iIncLead,
 int iUseParens,
 int iGroup,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarWeekdayName(
 int iWeekday,
 int fAbbrev,
 int iFirstDay,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarMonthName(
 int iMonth,
 int fAbbrev,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatFromTokens(
      LPVARIANT pvarIn,
          LPOLESTR pstrFormat,
                                                             LPBYTE pbTokCur,
 ULONG dwFlags,
       BSTR *pbstrOut,
 LCID lcid
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarTokenizeFormatString(
          LPOLESTR pstrFormat,
         LPBYTE rgbTok,
 int cbTok,
 int iFirstDay,
 int iFirstWeek,
 LCID lcid,
          int *pcbActual
 );
# 1051 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
typedef ITypeLib *LPTYPELIB;







typedef LONG DISPID;
typedef DISPID MEMBERID;
# 1083 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
typedef ITypeInfo *LPTYPEINFO;






typedef ITypeComp *LPTYPECOMP;






typedef ICreateTypeLib * LPCREATETYPELIB;

typedef ICreateTypeInfo * LPCREATETYPEINFO;
# 1109 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) ULONG __stdcall LHashValOfNameSysA(SYSKIND syskind, LCID lcid,
            LPCSTR szName);



extern "C" __declspec(dllimport) ULONG __stdcall
LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR * szName);
# 1128 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall LoadTypeLib( LPCOLESTR szFile, ITypeLib ** pptlib);



typedef enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE
} REGKIND;
# 1147 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind,
            ITypeLib ** pptlib);




extern "C" __declspec(dllimport) HRESULT __stdcall LoadRegTypeLib(const GUID & rguid, WORD wVerMajor, WORD wVerMinor,
            LCID lcid, ITypeLib ** pptlib);



extern "C" __declspec(dllimport) HRESULT __stdcall QueryPathOfRegTypeLib(const GUID & guid, USHORT wMaj, USHORT wMin,
            LCID lcid, LPBSTR lpbstrPathName);




extern "C" __declspec(dllimport) HRESULT __stdcall RegisterTypeLib(ITypeLib * ptlib, LPCOLESTR szFullPath,
                     LPCOLESTR szHelpDir);





extern "C" __declspec(dllimport) HRESULT __stdcall UnRegisterTypeLib(const GUID & libID, WORD wVerMajor,
            WORD wVerMinor, LCID lcid, SYSKIND syskind);



extern "C" __declspec(dllimport) HRESULT __stdcall RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath,
            OLECHAR *szHelpDir);



extern "C" __declspec(dllimport) HRESULT __stdcall UnRegisterTypeLibForUser(
    const GUID & libID,
    WORD wMajorVerNum,
    WORD wMinorVerNum,
    LCID lcid,
    SYSKIND syskind);


extern "C" __declspec(dllimport) HRESULT __stdcall CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile,
            ICreateTypeLib ** ppctlib);


extern "C" __declspec(dllimport) HRESULT __stdcall CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile,
            ICreateTypeLib2 **ppctlib);






typedef IDispatch *LPDISPATCH;

typedef struct tagPARAMDATA {
    OLECHAR * szName;
    VARTYPE vt;
} PARAMDATA, * LPPARAMDATA;

typedef struct tagMETHODDATA {
    OLECHAR * szName;
    PARAMDATA * ppdata;
    DISPID dispid;
    UINT iMeth;
    CALLCONV cc;
    UINT cArgs;
    WORD wFlags;
    VARTYPE vtReturn;
} METHODDATA, * LPMETHODDATA;

typedef struct tagINTERFACEDATA {
    METHODDATA * pmethdata;
    UINT cMembers;
} INTERFACEDATA, * LPINTERFACEDATA;







extern "C" __declspec(dllimport) HRESULT __stdcall DispGetParam(
      DISPPARAMS * pdispparams,
 UINT position,
 VARTYPE vtTarg,
       VARIANT * pvarResult,
           UINT * puArgErr
 );



               extern "C" __declspec(dllimport) HRESULT __stdcall DispGetIDsOfNames(ITypeInfo * ptinfo, OLECHAR ** rgszNames,
            UINT cNames, DISPID * rgdispid);
# 1253 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall DispInvoke(void * _this, ITypeInfo * ptinfo, DISPID dispidMember,
            WORD wFlags, DISPPARAMS * pparams, VARIANT * pvarResult,
            EXCEPINFO * pexcepinfo, UINT * puArgErr);
# 1266 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall CreateDispTypeInfo(INTERFACEDATA * pidata, LCID lcid,
            ITypeInfo ** pptinfo);





extern "C" __declspec(dllimport) HRESULT __stdcall CreateStdDispatch(IUnknown * punkOuter, void * pvThis,
            ITypeInfo * ptinfo, IUnknown ** ppunkStdDisp);




extern "C" __declspec(dllimport) HRESULT __stdcall DispCallFunc(void * pvInstance, ULONG_PTR oVft, CALLCONV cc,
            VARTYPE vtReturn, UINT cActuals, VARTYPE * prgvt,
            VARIANTARG ** prgpvarg, VARIANT * pvargResult);
# 1293 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall RegisterActiveObject(IUnknown * punk, const IID & rclsid,
            DWORD dwFlags, DWORD * pdwRegister);

extern "C" __declspec(dllimport) HRESULT __stdcall RevokeActiveObject(DWORD dwRegister, void * pvReserved);

extern "C" __declspec(dllimport) HRESULT __stdcall GetActiveObject(const IID & rclsid, void * pvReserved,
            IUnknown ** ppunk);





extern "C" __declspec(dllimport) HRESULT __stdcall SetErrorInfo( ULONG dwReserved, IErrorInfo * perrinfo);

extern "C" __declspec(dllimport) HRESULT __stdcall GetErrorInfo( ULONG dwReserved, IErrorInfo ** pperrinfo);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateErrorInfo( ICreateErrorInfo ** pperrinfo);





extern "C" __declspec(dllimport) HRESULT __stdcall GetRecordInfoFromTypeInfo(ITypeInfo * pTypeInfo,
            IRecordInfo ** ppRecInfo);

extern "C" __declspec(dllimport) HRESULT __stdcall GetRecordInfoFromGuids(const GUID & rGuidTypeLib,
            ULONG uVerMajor, ULONG uVerMinor, LCID lcid,
            const GUID & rGuidTypeInfo, IRecordInfo ** ppRecInfo);





extern "C" __declspec(dllimport) ULONG __stdcall OaBuildVersion(void);

extern "C" __declspec(dllimport) void __stdcall ClearCustData(LPCUSTDATA pCustData);


extern "C" __declspec(dllimport) void __stdcall OaEnablePerUserTLibRegistration(void);
# 1418 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 1418 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\oleauto.h" 2
# 33 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ole2.h" 2
# 81 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ole2.h"
extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);




extern "C" __declspec(dllimport) DWORD __stdcall OleBuildVersion( void );







extern "C" __declspec(dllimport) HRESULT __stdcall ReadClassStg( LPSTORAGE pStg, CLSID * pclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall WriteClassStg( LPSTORAGE pStg, const IID & rclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall ReadClassStm( LPSTREAM pStm, CLSID * pclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall WriteClassStm( LPSTREAM pStm, const IID & rclsid);







               extern "C" __declspec(dllimport) HRESULT __stdcall WriteFmtUserTypeStg ( LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
extern "C" __declspec(dllimport) HRESULT __stdcall ReadFmtUserTypeStg ( LPSTORAGE pstg, CLIPFORMAT * pcf, LPOLESTR * lplpszUserType);




               extern "C" __declspec(dllimport) HRESULT __stdcall OleInitialize( LPVOID pvReserved);
extern "C" __declspec(dllimport) void __stdcall OleUninitialize(void);





extern "C" __declspec(dllimport) HRESULT __stdcall OleQueryLinkFromData( LPDATAOBJECT pSrcDataObject);
extern "C" __declspec(dllimport) HRESULT __stdcall OleQueryCreateFromData( LPDATAOBJECT pSrcDataObject);




extern "C" __declspec(dllimport) HRESULT __stdcall OleCreate( const IID & rclsid, const IID & riid, DWORD renderopt,
                   LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite,
                   LPSTORAGE pStg, LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateEx( const IID & rclsid, const IID & riid, DWORD dwFlags,
                   DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                   LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                    DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                   LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateFromData( LPDATAOBJECT pSrcDataObj, const IID & riid,
                   DWORD renderopt, LPFORMATETC pFormatEtc,
                   LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                    LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateFromDataEx( LPDATAOBJECT pSrcDataObj, const IID & riid,
                   DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                   LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                    DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                   LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkFromData( LPDATAOBJECT pSrcDataObj, const IID & riid,
                   DWORD renderopt, LPFORMATETC pFormatEtc,
                   LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                    LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkFromDataEx( LPDATAOBJECT pSrcDataObj, const IID & riid,
                   DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                   LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                       DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                   LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateStaticFromData( LPDATAOBJECT pSrcDataObj, const IID & iid,
                   DWORD renderopt, LPFORMATETC pFormatEtc,
                   LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                    LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLink( LPMONIKER pmkLinkSrc, const IID & riid,
               DWORD renderopt, LPFORMATETC lpFormatEtc,
               LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkEx( LPMONIKER pmkLinkSrc, const IID & riid,
               DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
               LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
               LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkToFile( LPCOLESTR lpszFileName, const IID & riid,
               DWORD renderopt, LPFORMATETC lpFormatEtc,
               LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkToFileEx( LPCOLESTR lpszFileName, const IID & riid,
               DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
               LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
               LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateFromFile( const IID & rclsid, LPCOLESTR lpszFileName, const IID & riid,
               DWORD renderopt, LPFORMATETC lpFormatEtc,
               LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateFromFileEx( const IID & rclsid, LPCOLESTR lpszFileName, const IID & riid,
               DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
               LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
               LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleLoad( LPSTORAGE pStg, const IID & riid, LPOLECLIENTSITE pClientSite,
                LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleSave( LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad);

extern "C" __declspec(dllimport) HRESULT __stdcall OleLoadFromStream( LPSTREAM pStm, const IID & iidInterface, LPVOID * ppvObj);
extern "C" __declspec(dllimport) HRESULT __stdcall OleSaveToStream( LPPERSISTSTREAM pPStm, LPSTREAM pStm );


extern "C" __declspec(dllimport) HRESULT __stdcall OleSetContainedObject( LPUNKNOWN pUnknown, BOOL fContained);
extern "C" __declspec(dllimport) HRESULT __stdcall OleNoteObjectVisible( LPUNKNOWN pUnknown, BOOL fVisible);




extern "C" __declspec(dllimport) HRESULT __stdcall RegisterDragDrop( HWND hwnd, LPDROPTARGET pDropTarget);
extern "C" __declspec(dllimport) HRESULT __stdcall RevokeDragDrop( HWND hwnd);
extern "C" __declspec(dllimport) HRESULT __stdcall DoDragDrop( LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource,
               DWORD dwOKEffects, LPDWORD pdwEffect);



extern "C" __declspec(dllimport) HRESULT __stdcall OleSetClipboard( LPDATAOBJECT pDataObj);
extern "C" __declspec(dllimport) HRESULT __stdcall OleGetClipboard( LPDATAOBJECT * ppDataObj);
extern "C" __declspec(dllimport) HRESULT __stdcall OleFlushClipboard(void);
extern "C" __declspec(dllimport) HRESULT __stdcall OleIsCurrentClipboard( LPDATAOBJECT pDataObj);



extern "C" __declspec(dllimport) HOLEMENU __stdcall OleCreateMenuDescriptor ( HMENU hmenuCombined,
                                   LPOLEMENUGROUPWIDTHS lpMenuWidths);
extern "C" __declspec(dllimport) HRESULT __stdcall OleSetMenuDescriptor ( HOLEMENU holemenu, HWND hwndFrame,
                                   HWND hwndActiveObject,
                                   LPOLEINPLACEFRAME lpFrame,
                                   LPOLEINPLACEACTIVEOBJECT lpActiveObj);
extern "C" __declspec(dllimport) HRESULT __stdcall OleDestroyMenuDescriptor ( HOLEMENU holemenu);

extern "C" __declspec(dllimport) HRESULT __stdcall OleTranslateAccelerator ( LPOLEINPLACEFRAME lpFrame,
                               LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg);




extern "C" __declspec(dllimport) HANDLE __stdcall OleDuplicateData ( HANDLE hSrc, CLIPFORMAT cfFormat,
                           UINT uiFlags);



extern "C" __declspec(dllimport) HRESULT __stdcall OleDraw ( LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw,
                       LPCRECT lprcBounds);

               extern "C" __declspec(dllimport) HRESULT __stdcall OleRun( LPUNKNOWN pUnknown);
extern "C" __declspec(dllimport) BOOL __stdcall OleIsRunning( LPOLEOBJECT pObject);
extern "C" __declspec(dllimport) HRESULT __stdcall OleLockRunning( LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses);

extern "C" __declspec(dllimport) void __stdcall ReleaseStgMedium( LPSTGMEDIUM);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateOleAdviseHolder( LPOLEADVISEHOLDER * ppOAHolder);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateDefaultHandler( const IID & clsid, LPUNKNOWN pUnkOuter,
                       const IID & riid, LPVOID * lplpObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateEmbeddingHelper( const IID & clsid, LPUNKNOWN pUnkOuter,
                       DWORD flags, LPCLASSFACTORY pCF,
                       const IID & riid, LPVOID * lplpObj);

extern "C" __declspec(dllimport) BOOL __stdcall IsAccelerator( HACCEL hAccel, int cAccelEntries, LPMSG lpMsg,
                                            WORD * lpwCmd);


extern "C" __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfFile( LPOLESTR lpszPath, BOOL fUseFileAsLabel);

extern "C" __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfClass( const IID & rclsid, LPOLESTR lpszLabel,
                                           BOOL fUseTypeAsLabel);

extern "C" __declspec(dllimport) HGLOBAL __stdcall OleMetafilePictFromIconAndLabel( HICON hIcon, LPOLESTR lpszLabel,
                                             LPOLESTR lpszSourceFile, UINT iIconIndex);





               extern "C" __declspec(dllimport) HRESULT __stdcall OleRegGetUserType ( const IID & clsid, DWORD dwFormOfType,
                                                 LPOLESTR * pszUserType);

extern "C" __declspec(dllimport) HRESULT __stdcall OleRegGetMiscStatus ( const IID & clsid, DWORD dwAspect,
                                            DWORD * pdwStatus);

extern "C" __declspec(dllimport) HRESULT __stdcall OleRegEnumFormatEtc( const IID & clsid, DWORD dwDirection,
                                       LPENUMFORMATETC * ppenum);

extern "C" __declspec(dllimport) HRESULT __stdcall OleRegEnumVerbs ( const IID & clsid, LPENUMOLEVERB * ppenum);






typedef struct _OLESTREAM * LPOLESTREAM;

typedef struct _OLESTREAMVTBL
{
    DWORD (__stdcall* Get)(LPOLESTREAM, void *, DWORD);
    DWORD (__stdcall* Put)(LPOLESTREAM, const void *, DWORD);
} OLESTREAMVTBL;
typedef OLESTREAMVTBL * LPOLESTREAMVTBL;

typedef struct _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
} OLESTREAM;


extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorage
    ( LPOLESTREAM lpolestream,
        LPSTORAGE pstg,
       const DVTARGETDEVICE * ptd);

extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAM
    ( LPSTORAGE pstg,
        LPOLESTREAM lpolestream);
# 327 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ole2.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall GetHGlobalFromILockBytes ( LPLOCKBYTES plkbyt, HGLOBAL * phglobal);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreateILockBytesOnHGlobal ( HGLOBAL hGlobal, BOOL fDeleteOnRelease,
                                             LPLOCKBYTES * pplkbyt);
# 340 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ole2.h"
extern "C" __declspec(dllimport) HRESULT __stdcall OleDoAutoConvert( LPSTORAGE pStg, LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall OleGetAutoConvert( const IID & clsidOld, LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall OleSetAutoConvert( const IID & clsidOld, const IID & clsidNew);







extern "C" __declspec(dllimport) HRESULT __stdcall GetConvertStg( LPSTORAGE pStg);







extern "C" __declspec(dllimport) HRESULT __stdcall SetConvertStg( LPSTORAGE pStg, BOOL fConvert);


extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAMEx
    ( LPSTORAGE pstg,

        CLIPFORMAT cfFormat,
        LONG lWidth,
        LONG lHeight,
        DWORD dwSize,
        LPSTGMEDIUM pmedium,
         LPOLESTREAM polestm);

extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorageEx
    ( LPOLESTREAM polestm,
         LPSTORAGE pstg,

         CLIPFORMAT * pcfFormat,
         LONG * plwWidth,
         LONG * plHeight,
         DWORD * pdwSize,
         LPSTGMEDIUM pmedium);






# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h" 1
# 27 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
# 385 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ole2.h" 2
# 36 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3d11_2.h" 2
# 50 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3d11_2.h"
typedef struct ID3D11DeviceContext2 ID3D11DeviceContext2;






typedef struct ID3D11Device2 ID3D11Device2;







# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h" 1








#pragma warning(disable: 4049)
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef struct IEnumConnections IEnumConnections;






typedef struct IConnectionPoint IConnectionPoint;






typedef struct IEnumConnectionPoints IEnumConnectionPoints;






typedef struct IConnectionPointContainer IConnectionPointContainer;






typedef struct IClassFactory2 IClassFactory2;






typedef struct IProvideClassInfo IProvideClassInfo;






typedef struct IProvideClassInfo2 IProvideClassInfo2;






typedef struct IProvideMultipleClassInfo IProvideMultipleClassInfo;






typedef struct IOleControl IOleControl;






typedef struct IOleControlSite IOleControlSite;






typedef struct IPropertyPage IPropertyPage;






typedef struct IPropertyPage2 IPropertyPage2;






typedef struct IPropertyPageSite IPropertyPageSite;






typedef struct IPropertyNotifySink IPropertyNotifySink;






typedef struct ISpecifyPropertyPages ISpecifyPropertyPages;






typedef struct IPersistMemory IPersistMemory;






typedef struct IPersistStreamInit IPersistStreamInit;






typedef struct IPersistPropertyBag IPersistPropertyBag;






typedef struct ISimpleFrameSite ISimpleFrameSite;






typedef struct IFont IFont;






typedef struct IPicture IPicture;






typedef struct IPicture2 IPicture2;






typedef struct IFontEventsDisp IFontEventsDisp;






typedef struct IFontDisp IFontDisp;






typedef struct IPictureDisp IPictureDisp;






typedef struct IOleInPlaceObjectWindowless IOleInPlaceObjectWindowless;






typedef struct IOleInPlaceSiteEx IOleInPlaceSiteEx;






typedef struct IOleInPlaceSiteWindowless IOleInPlaceSiteWindowless;






typedef struct IViewObjectEx IViewObjectEx;






typedef struct IOleUndoUnit IOleUndoUnit;






typedef struct IOleParentUndoUnit IOleParentUndoUnit;






typedef struct IEnumOleUndoUnits IEnumOleUndoUnits;






typedef struct IOleUndoManager IOleUndoManager;






typedef struct IPointerInactive IPointerInactive;






typedef struct IObjectWithSite IObjectWithSite;






typedef struct IPerPropertyBrowsing IPerPropertyBrowsing;






typedef struct IPropertyBag2 IPropertyBag2;






typedef struct IPersistPropertyBag2 IPersistPropertyBag2;






typedef struct IAdviseSinkEx IAdviseSinkEx;






typedef struct IQuickActivate IQuickActivate;
# 330 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
extern "C"{
# 400 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0000_v0_0_s_ifspec;







typedef
enum tagUASFLAGS
    {
        UAS_NORMAL = 0,
        UAS_BLOCKED = 0x1,
        UAS_NOPARENTENABLE = 0x2,
        UAS_MASK = 0x3
    } UASFLAGS;


typedef
enum tagREADYSTATE
    {
        READYSTATE_UNINITIALIZED = 0,
        READYSTATE_LOADING = 1,
        READYSTATE_LOADED = 2,
        READYSTATE_INTERACTIVE = 3,
        READYSTATE_COMPLETE = 4
    } READYSTATE;



extern RPC_IF_HANDLE IOleControlTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleControlTypes_v1_0_s_ifspec;
# 444 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0001_v0_0_s_ifspec;







typedef IEnumConnections *PENUMCONNECTIONS;

typedef IEnumConnections *LPENUMCONNECTIONS;

typedef struct tagCONNECTDATA
    {
    IUnknown *pUnk;
    DWORD dwCookie;
    } CONNECTDATA;

typedef struct tagCONNECTDATA *PCONNECTDATA;

typedef struct tagCONNECTDATA *LPCONNECTDATA;


extern "C" const IID IID_IEnumConnections;



    struct __declspec(uuid("B196B287-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IEnumConnections : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG cConnections,
                                            LPCONNECTDATA rgcd,
                        ULONG *pcFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG cConnections) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumConnections **ppEnum) = 0;

    };
# 569 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
                HRESULT __stdcall IEnumConnections_RemoteNext_Proxy(
              IEnumConnections * This,
               ULONG cConnections,
                                                                                     LPCONNECTDATA rgcd,
                           ULONG *pcFetched);


void __stdcall IEnumConnections_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 593 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IConnectionPoint *PCONNECTIONPOINT;

typedef IConnectionPoint *LPCONNECTIONPOINT;


extern "C" const IID IID_IConnectionPoint;



    struct __declspec(uuid("B196B286-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IConnectionPoint : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetConnectionInterface(
                                   IID *pIID) = 0;

        virtual HRESULT __stdcall GetConnectionPointContainer(
                                             IConnectionPointContainer **ppCPC) = 0;

        virtual HRESULT __stdcall Advise(
                                     IUnknown *pUnkSink,
                                   DWORD *pdwCookie) = 0;

        virtual HRESULT __stdcall Unadvise(
                       DWORD dwCookie) = 0;

        virtual HRESULT __stdcall EnumConnections(
                                             IEnumConnections **ppEnum) = 0;

    };
# 719 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IEnumConnectionPoints *PENUMCONNECTIONPOINTS;

typedef IEnumConnectionPoints *LPENUMCONNECTIONPOINTS;


extern "C" const IID IID_IEnumConnectionPoints;



    struct __declspec(uuid("B196B285-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IEnumConnectionPoints : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG cConnections,
                                            LPCONNECTIONPOINT *ppCP,
                        ULONG *pcFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG cConnections) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumConnectionPoints **ppEnum) = 0;

    };
# 825 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
                HRESULT __stdcall IEnumConnectionPoints_RemoteNext_Proxy(
              IEnumConnectionPoints * This,
               ULONG cConnections,
                                                                                     LPCONNECTIONPOINT *ppCP,
                           ULONG *pcFetched);


void __stdcall IEnumConnectionPoints_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 849 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IConnectionPointContainer *PCONNECTIONPOINTCONTAINER;

typedef IConnectionPointContainer *LPCONNECTIONPOINTCONTAINER;


extern "C" const IID IID_IConnectionPointContainer;



    struct __declspec(uuid("B196B284-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IConnectionPointContainer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall EnumConnectionPoints(
                                             IEnumConnectionPoints **ppEnum) = 0;

        virtual HRESULT __stdcall FindConnectionPoint(
                                 const IID & riid,
                                             IConnectionPoint **ppCP) = 0;

    };
# 948 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0005_v0_0_s_ifspec;







typedef IClassFactory2 *LPCLASSFACTORY2;

typedef struct tagLICINFO
    {
    LONG cbLicInfo;
    BOOL fRuntimeKeyAvail;
    BOOL fLicVerified;
    } LICINFO;

typedef struct tagLICINFO *LPLICINFO;


extern "C" const IID IID_IClassFactory2;



    struct __declspec(uuid("B196B28F-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IClassFactory2 : public IClassFactory
    {
    public:
        virtual HRESULT __stdcall GetLicInfo(
                                         LICINFO *pLicInfo) = 0;

        virtual HRESULT __stdcall RequestLicKey(
                       DWORD dwReserved,
                                             BSTR *pBstrKey) = 0;

        virtual HRESULT __stdcall CreateInstanceLic(
                       IUnknown *pUnkOuter,
                       IUnknown *pUnkReserved,
                       const IID & riid,
                       BSTR bstrKey,
                                PVOID *ppvObj) = 0;

    };
# 1088 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
                HRESULT __stdcall IClassFactory2_RemoteCreateInstanceLic_Proxy(
              IClassFactory2 * This,
                         const IID & riid,
                         BSTR bstrKey,
                                             IUnknown **ppvObj);


void __stdcall IClassFactory2_RemoteCreateInstanceLic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1112 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IProvideClassInfo *LPPROVIDECLASSINFO;


extern "C" const IID IID_IProvideClassInfo;



    struct __declspec(uuid("B196B283-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IProvideClassInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassInfoW(
                                             ITypeInfo **ppTI) = 0;

    };
# 1194 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IProvideClassInfo2 *LPPROVIDECLASSINFO2;

typedef
enum tagGUIDKIND
    {
        GUIDKIND_DEFAULT_SOURCE_DISP_IID = 1
    } GUIDKIND;


extern "C" const IID IID_IProvideClassInfo2;



    struct __declspec(uuid("A6BC3AC0-DBAA-11CE-9DE3-00AA004BB851")) __declspec(novtable)
    IProvideClassInfo2 : public IProvideClassInfo
    {
    public:
        virtual HRESULT __stdcall GetGUID(
                       DWORD dwGuidKind,
                                   GUID *pGUID) = 0;

    };
# 1297 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IProvideMultipleClassInfo *LPPROVIDEMULTIPLECLASSINFO;


extern "C" const IID IID_IProvideMultipleClassInfo;



    struct __declspec(uuid("A7ABA9C1-8983-11cf-8F20-00805F2CD064")) __declspec(novtable)
    IProvideMultipleClassInfo : public IProvideClassInfo2
    {
    public:
        virtual HRESULT __stdcall GetMultiTypeInfoCount(
                                   ULONG *pcti) = 0;

        virtual HRESULT __stdcall GetInfoOfIndex(
                       ULONG iti,
                       DWORD dwFlags,
                                             ITypeInfo **pptiCoClass,
                                   DWORD *pdwTIFlags,
                                   ULONG *pcdispidReserved,
                                   IID *piidPrimary,
                                   IID *piidSource) = 0;

    };
# 1418 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IOleControl *LPOLECONTROL;

typedef struct tagCONTROLINFO
    {
    ULONG cb;
    HACCEL hAccel;
    USHORT cAccel;
    DWORD dwFlags;
    } CONTROLINFO;

typedef struct tagCONTROLINFO *LPCONTROLINFO;

typedef
enum tagCTRLINFO
    {
        CTRLINFO_EATS_RETURN = 1,
        CTRLINFO_EATS_ESCAPE = 2
    } CTRLINFO;


extern "C" const IID IID_IOleControl;



    struct __declspec(uuid("B196B288-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IOleControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetControlInfo(
                                         CONTROLINFO *pCI) = 0;

        virtual HRESULT __stdcall OnMnemonic(
                                 MSG *pMsg) = 0;

        virtual HRESULT __stdcall OnAmbientPropertyChange(
                       DISPID dispID) = 0;

        virtual HRESULT __stdcall FreezeEvents(
                       BOOL bFreeze) = 0;

    };
# 1547 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IOleControlSite *LPOLECONTROLSITE;

typedef struct tagPOINTF
    {
    FLOAT x;
    FLOAT y;
    } POINTF;

typedef struct tagPOINTF *LPPOINTF;

typedef
enum tagXFORMCOORDS
    {
        XFORMCOORDS_POSITION = 0x1,
        XFORMCOORDS_SIZE = 0x2,
        XFORMCOORDS_HIMETRICTOCONTAINER = 0x4,
        XFORMCOORDS_CONTAINERTOHIMETRIC = 0x8,
        XFORMCOORDS_EVENTCOMPAT = 0x10
    } XFORMCOORDS;


extern "C" const IID IID_IOleControlSite;



    struct __declspec(uuid("B196B289-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IOleControlSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnControlInfoChanged( void) = 0;

        virtual HRESULT __stdcall LockInPlaceActive(
                       BOOL fLock) = 0;

        virtual HRESULT __stdcall GetExtendedControl(
                                             IDispatch **ppDisp) = 0;

        virtual HRESULT __stdcall TransformCoords(
                                         POINTL *pPtlHimetric,
                                         POINTF *pPtfContainer,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall TranslateAcceleratorW(
                                 MSG *pMsg,
                       DWORD grfModifiers) = 0;

        virtual HRESULT __stdcall OnFocus(
                       BOOL fGotFocus) = 0;

        virtual HRESULT __stdcall ShowPropertyFrame( void) = 0;

    };
# 1709 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IPropertyPage *LPPROPERTYPAGE;

typedef struct tagPROPPAGEINFO
    {
    ULONG cb;
    LPOLESTR pszTitle;
    SIZE size;
    LPOLESTR pszDocString;
    LPOLESTR pszHelpFile;
    DWORD dwHelpContext;
    } PROPPAGEINFO;

typedef struct tagPROPPAGEINFO *LPPROPPAGEINFO;


extern "C" const IID IID_IPropertyPage;



    struct __declspec(uuid("B196B28D-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IPropertyPage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetPageSite(
                                     IPropertyPageSite *pPageSite) = 0;

        virtual HRESULT __stdcall Activate(
                                 HWND hWndParent,
                                 LPCRECT pRect,
                       BOOL bModal) = 0;

        virtual HRESULT __stdcall Deactivate( void) = 0;

        virtual HRESULT __stdcall GetPageInfo(
                                   PROPPAGEINFO *pPageInfo) = 0;

        virtual HRESULT __stdcall SetObjects(
                       ULONG cObjects,
                                                                IUnknown **ppUnk) = 0;

        virtual HRESULT __stdcall Show(
                       UINT nCmdShow) = 0;

        virtual HRESULT __stdcall Move(
                                 LPCRECT pRect) = 0;

        virtual HRESULT __stdcall IsPageDirty( void) = 0;

        virtual HRESULT __stdcall Apply( void) = 0;

        virtual HRESULT __stdcall Help(
                                 LPCOLESTR pszHelpDir) = 0;

        virtual HRESULT __stdcall TranslateAcceleratorW(
                                 MSG *pMsg) = 0;

    };
# 1903 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IPropertyPage2 *LPPROPERTYPAGE2;


extern "C" const IID IID_IPropertyPage2;



    struct __declspec(uuid("01E44665-24AC-101B-84ED-08002B2EC713")) __declspec(novtable)
    IPropertyPage2 : public IPropertyPage
    {
    public:
        virtual HRESULT __stdcall EditProperty(
                       DISPID dispID) = 0;

    };
# 2063 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IPropertyPageSite *LPPROPERTYPAGESITE;

typedef
enum tagPROPPAGESTATUS
    {
        PROPPAGESTATUS_DIRTY = 0x1,
        PROPPAGESTATUS_VALIDATE = 0x2,
        PROPPAGESTATUS_CLEAN = 0x4
    } PROPPAGESTATUS;


extern "C" const IID IID_IPropertyPageSite;



    struct __declspec(uuid("B196B28C-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IPropertyPageSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnStatusChange(
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetLocaleID(
                                   LCID *pLocaleID) = 0;

        virtual HRESULT __stdcall GetPageContainer(
                                             IUnknown **ppUnk) = 0;

        virtual HRESULT __stdcall TranslateAcceleratorW(
                                 MSG *pMsg) = 0;

    };
# 2183 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IPropertyNotifySink *LPPROPERTYNOTIFYSINK;


extern "C" const IID IID_IPropertyNotifySink;



    struct __declspec(uuid("9BFBBC02-EFF1-101A-84ED-00AA00341D07")) __declspec(novtable)
    IPropertyNotifySink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnChanged(
                       DISPID dispID) = 0;

        virtual HRESULT __stdcall OnRequestEdit(
                       DISPID dispID) = 0;

    };
# 2275 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef ISpecifyPropertyPages *LPSPECIFYPROPERTYPAGES;

typedef struct tagCAUUID
    {
    ULONG cElems;
                    GUID *pElems;
    } CAUUID;

typedef struct tagCAUUID *LPCAUUID;


extern "C" const IID IID_ISpecifyPropertyPages;



    struct __declspec(uuid("B196B28B-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    ISpecifyPropertyPages : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetPages(
                                   CAUUID *pPages) = 0;

    };
# 2365 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IPersistMemory *LPPERSISTMEMORY;


extern "C" const IID IID_IPersistMemory;



    struct __declspec(uuid("BD1AE5E0-A6AE-11CE-BD37-504200C10000")) __declspec(novtable)
    IPersistMemory : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall Load(
                                LPVOID pMem,
                       ULONG cbSize) = 0;

        virtual HRESULT __stdcall Save(
                                 LPVOID pMem,
                       BOOL fClearDirty,
                       ULONG cbSize) = 0;

        virtual HRESULT __stdcall GetSizeMax(
                                   ULONG *pCbSize) = 0;

        virtual HRESULT __stdcall InitNew( void) = 0;

    };
# 2487 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
                HRESULT __stdcall IPersistMemory_RemoteLoad_Proxy(
              IPersistMemory * This,
                                                      BYTE *pMem,
               ULONG cbSize);


void __stdcall IPersistMemory_RemoteLoad_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IPersistMemory_RemoteSave_Proxy(
              IPersistMemory * This,
                                                        BYTE *pMem,
               BOOL fClearDirty,
               ULONG cbSize);


void __stdcall IPersistMemory_RemoteSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2524 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IPersistStreamInit *LPPERSISTSTREAMINIT;


extern "C" const IID IID_IPersistStreamInit;



    struct __declspec(uuid("7FD52380-4E07-101B-AE2D-08002B2EC713")) __declspec(novtable)
    IPersistStreamInit : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall Load(
                                     LPSTREAM pStm) = 0;

        virtual HRESULT __stdcall Save(
                                     LPSTREAM pStm,
                       BOOL fClearDirty) = 0;

        virtual HRESULT __stdcall GetSizeMax(
                                   ULARGE_INTEGER *pCbSize) = 0;

        virtual HRESULT __stdcall InitNew( void) = 0;

    };
# 2652 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IPersistPropertyBag *LPPERSISTPROPERTYBAG;


extern "C" const IID IID_IPersistPropertyBag;



    struct __declspec(uuid("37D84F60-42CB-11CE-8135-00AA004BB851")) __declspec(novtable)
    IPersistPropertyBag : public IPersist
    {
    public:
        virtual HRESULT __stdcall InitNew( void) = 0;

        virtual HRESULT __stdcall Load(
                                     IPropertyBag *pPropBag,
                                             IErrorLog *pErrorLog) = 0;

        virtual HRESULT __stdcall Save(
                                     IPropertyBag *pPropBag,
                       BOOL fClearDirty,
                       BOOL fSaveAllProperties) = 0;

    };
# 2766 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef ISimpleFrameSite *LPSIMPLEFRAMESITE;


extern "C" const IID IID_ISimpleFrameSite;



    struct __declspec(uuid("742B0E01-14E6-101B-914E-00AA00300CAB")) __declspec(novtable)
    ISimpleFrameSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PreMessageFilter(
                                 HWND hWnd,
                       UINT msg,
                       WPARAM wp,
                       LPARAM lp,
                                   LRESULT *plResult,
                                   DWORD *pdwCookie) = 0;

        virtual HRESULT __stdcall PostMessageFilter(
                                 HWND hWnd,
                       UINT msg,
                       WPARAM wp,
                       LPARAM lp,
                                   LRESULT *plResult,
                       DWORD dwCookie) = 0;

    };
# 2878 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IFont *LPFONT;


typedef TEXTMETRICW TEXTMETRICOLE;




typedef TEXTMETRICOLE *LPTEXTMETRICOLE;


extern "C" const IID IID_IFont;



    struct __declspec(uuid("BEF6E002-A874-101A-8BBA-00AA00300CAB")) __declspec(novtable)
    IFont : public IUnknown
    {
    public:
        virtual HRESULT __stdcall get_Name(
                                             BSTR *pName) = 0;

        virtual HRESULT __stdcall put_Name(
                                 BSTR name) = 0;

        virtual HRESULT __stdcall get_Size(
                                   CY *pSize) = 0;

        virtual HRESULT __stdcall put_Size(
                       CY size) = 0;

        virtual HRESULT __stdcall get_Bold(
                                   BOOL *pBold) = 0;

        virtual HRESULT __stdcall put_Bold(
                       BOOL bold) = 0;

        virtual HRESULT __stdcall get_Italic(
                                   BOOL *pItalic) = 0;

        virtual HRESULT __stdcall put_Italic(
                       BOOL italic) = 0;

        virtual HRESULT __stdcall get_Underline(
                                   BOOL *pUnderline) = 0;

        virtual HRESULT __stdcall put_Underline(
                       BOOL underline) = 0;

        virtual HRESULT __stdcall get_Strikethrough(
                                   BOOL *pStrikethrough) = 0;

        virtual HRESULT __stdcall put_Strikethrough(
                       BOOL strikethrough) = 0;

        virtual HRESULT __stdcall get_Weight(
                                   SHORT *pWeight) = 0;

        virtual HRESULT __stdcall put_Weight(
                       SHORT weight) = 0;

        virtual HRESULT __stdcall get_Charset(
                                   SHORT *pCharset) = 0;

        virtual HRESULT __stdcall put_Charset(
                       SHORT charset) = 0;

        virtual HRESULT __stdcall get_hFont(
                                             HFONT *phFont) = 0;

        virtual HRESULT __stdcall Clone(
                                             IFont **ppFont) = 0;

        virtual HRESULT __stdcall IsEqual(
                                     IFont *pFontOther) = 0;

        virtual HRESULT __stdcall SetRatio(
                       LONG cyLogical,
                       LONG cyHimetric) = 0;

        virtual HRESULT __stdcall QueryTextMetrics(
                                   TEXTMETRICOLE *pTM) = 0;

        virtual HRESULT __stdcall AddRefHfont(
                                 HFONT hFont) = 0;

        virtual HRESULT __stdcall ReleaseHfont(
                                 HFONT hFont) = 0;

        virtual HRESULT __stdcall SetHdc(
                                 HDC hDC) = 0;

    };
# 3200 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IPicture *LPPICTURE;

typedef
enum tagPictureAttributes
    {
        PICTURE_SCALABLE = 0x1,
        PICTURE_TRANSPARENT = 0x2
    } PICTUREATTRIBUTES;

typedef __declspec(uuid("66504313-BE0F-101A-8BBB-00AA00300CAB")) UINT OLE_HANDLE;

typedef __declspec(uuid("66504306-BE0F-101A-8BBB-00AA00300CAB")) LONG OLE_XPOS_HIMETRIC;

typedef __declspec(uuid("66504307-BE0F-101A-8BBB-00AA00300CAB")) LONG OLE_YPOS_HIMETRIC;

typedef __declspec(uuid("66504308-BE0F-101A-8BBB-00AA00300CAB")) LONG OLE_XSIZE_HIMETRIC;

typedef __declspec(uuid("66504309-BE0F-101A-8BBB-00AA00300CAB")) LONG OLE_YSIZE_HIMETRIC;


extern "C" const IID IID_IPicture;



    struct __declspec(uuid("7BF80980-BF32-101A-8BBB-00AA00300CAB")) __declspec(novtable)
    IPicture : public IUnknown
    {
    public:
        virtual HRESULT __stdcall get_Handle(
                                   OLE_HANDLE *pHandle) = 0;

        virtual HRESULT __stdcall get_hPal(
                                   OLE_HANDLE *phPal) = 0;

        virtual HRESULT __stdcall get_Type(
                                   SHORT *pType) = 0;

        virtual HRESULT __stdcall get_Width(
                                   OLE_XSIZE_HIMETRIC *pWidth) = 0;

        virtual HRESULT __stdcall get_Height(
                                   OLE_YSIZE_HIMETRIC *pHeight) = 0;

        virtual HRESULT __stdcall Render(
                                 HDC hDC,
                       LONG x,
                       LONG y,
                       LONG cx,
                       LONG cy,
                       OLE_XPOS_HIMETRIC xSrc,
                       OLE_YPOS_HIMETRIC ySrc,
                       OLE_XSIZE_HIMETRIC cxSrc,
                       OLE_YSIZE_HIMETRIC cySrc,
                                 LPCRECT pRcWBounds) = 0;

        virtual HRESULT __stdcall set_hPal(
                       OLE_HANDLE hPal) = 0;

        virtual HRESULT __stdcall get_CurDC(
                                             HDC *phDC) = 0;

        virtual HRESULT __stdcall SelectPicture(
                                 HDC hDCIn,
                                             HDC *phDCOut,
                                   OLE_HANDLE *phBmpOut) = 0;

        virtual HRESULT __stdcall get_KeepOriginalFormat(
                                   BOOL *pKeep) = 0;

        virtual HRESULT __stdcall put_KeepOriginalFormat(
                       BOOL keep) = 0;

        virtual HRESULT __stdcall PictureChanged( void) = 0;

        virtual HRESULT __stdcall SaveAsFile(
                                     LPSTREAM pStream,
                       BOOL fSaveMemCopy,
                                   LONG *pCbSize) = 0;

        virtual HRESULT __stdcall get_Attributes(
                                   DWORD *pDwAttr) = 0;

    };
# 3453 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IPicture2 *LPPICTURE2;

typedef UINT_PTR HHANDLE;


extern "C" const IID IID_IPicture2;



    struct __declspec(uuid("F5185DD8-2012-4b0b-AAD9-F052C6BD482B")) __declspec(novtable)
    IPicture2 : public IUnknown
    {
    public:
        virtual HRESULT __stdcall get_Handle(
                                   HHANDLE *pHandle) = 0;

        virtual HRESULT __stdcall get_hPal(
                                   HHANDLE *phPal) = 0;

        virtual HRESULT __stdcall get_Type(
                                   SHORT *pType) = 0;

        virtual HRESULT __stdcall get_Width(
                                   OLE_XSIZE_HIMETRIC *pWidth) = 0;

        virtual HRESULT __stdcall get_Height(
                                   OLE_YSIZE_HIMETRIC *pHeight) = 0;

        virtual HRESULT __stdcall Render(
                                 HDC hDC,
                       LONG x,
                       LONG y,
                       LONG cx,
                       LONG cy,
                       OLE_XPOS_HIMETRIC xSrc,
                       OLE_YPOS_HIMETRIC ySrc,
                       OLE_XSIZE_HIMETRIC cxSrc,
                       OLE_YSIZE_HIMETRIC cySrc,
                                 LPCRECT pRcWBounds) = 0;

        virtual HRESULT __stdcall set_hPal(
                       HHANDLE hPal) = 0;

        virtual HRESULT __stdcall get_CurDC(
                                             HDC *phDC) = 0;

        virtual HRESULT __stdcall SelectPicture(
                                 HDC hDCIn,
                                             HDC *phDCOut,
                                   HHANDLE *phBmpOut) = 0;

        virtual HRESULT __stdcall get_KeepOriginalFormat(
                                   BOOL *pKeep) = 0;

        virtual HRESULT __stdcall put_KeepOriginalFormat(
                       BOOL keep) = 0;

        virtual HRESULT __stdcall PictureChanged( void) = 0;

        virtual HRESULT __stdcall SaveAsFile(
                                     LPSTREAM pStream,
                       BOOL fSaveMemCopy,
                                   LONG *pCbSize) = 0;

        virtual HRESULT __stdcall get_Attributes(
                                   DWORD *pDwAttr) = 0;

    };
# 3691 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IFontEventsDisp *LPFONTEVENTS;


extern "C" const IID IID_IFontEventsDisp;



    struct __declspec(uuid("4EF6100A-AF88-11D0-9846-00C04FC29993")) __declspec(novtable)
    IFontEventsDisp : public IDispatch
    {
    public:
    };
# 3813 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IFontDisp *LPFONTDISP;


extern "C" const IID IID_IFontDisp;



    struct __declspec(uuid("BEF6E003-A874-101A-8BBA-00AA00300CAB")) __declspec(novtable)
    IFontDisp : public IDispatch
    {
    public:
    };
# 3935 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IPictureDisp *LPPICTUREDISP;


extern "C" const IID IID_IPictureDisp;



    struct __declspec(uuid("7BF80981-BF32-101A-8BBB-00AA00300CAB")) __declspec(novtable)
    IPictureDisp : public IDispatch
    {
    public:
    };
# 4057 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IOleInPlaceObjectWindowless *LPOLEINPLACEOBJECTWINDOWLESS;


extern "C" const IID IID_IOleInPlaceObjectWindowless;



    struct __declspec(uuid("1C2056CC-5EF4-101B-8BC8-00AA003E3B29")) __declspec(novtable)
    IOleInPlaceObjectWindowless : public IOleInPlaceObject
    {
    public:
        virtual HRESULT __stdcall OnWindowMessage(
                       UINT msg,
                       WPARAM wParam,
                       LPARAM lParam,
                                   LRESULT *plResult) = 0;

        virtual HRESULT __stdcall GetDropTarget(
                                             IDropTarget **ppDropTarget) = 0;

    };
# 4197 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IOleInPlaceSiteEx *LPOLEINPLACESITEEX;

typedef
enum tagACTIVATEFLAGS
    {
        ACTIVATE_WINDOWLESS = 1
    } ACTIVATEFLAGS;


extern "C" const IID IID_IOleInPlaceSiteEx;



    struct __declspec(uuid("9C2CAD80-3424-11CF-B670-00AA004CD6D8")) __declspec(novtable)
    IOleInPlaceSiteEx : public IOleInPlaceSite
    {
    public:
        virtual HRESULT __stdcall OnInPlaceActivateEx(
                                   BOOL *pfNoRedraw,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall OnInPlaceDeactivateEx(
                       BOOL fNoRedraw) = 0;

        virtual HRESULT __stdcall RequestUIActivate( void) = 0;

    };
# 4389 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IOleInPlaceSiteWindowless *LPOLEINPLACESITEWINDOWLESS;

typedef
enum tagOLEDCFLAGS
    {
        OLEDC_NODRAW = 0x1,
        OLEDC_PAINTBKGND = 0x2,
        OLEDC_OFFSCREEN = 0x4
    } OLEDCFLAGS;




extern "C" const IID IID_IOleInPlaceSiteWindowless;



    struct __declspec(uuid("922EADA0-3424-11CF-B670-00AA004CD6D8")) __declspec(novtable)
    IOleInPlaceSiteWindowless : public IOleInPlaceSiteEx
    {
    public:
        virtual HRESULT __stdcall CanWindowlessActivate( void) = 0;

        virtual HRESULT __stdcall GetCapture( void) = 0;

        virtual HRESULT __stdcall SetCapture(
                       BOOL fCapture) = 0;

        virtual HRESULT __stdcall GetFocus( void) = 0;

        virtual HRESULT __stdcall SetFocus(
                       BOOL fFocus) = 0;

        virtual HRESULT __stdcall GetDC(
                                             LPCRECT pRect,
                       DWORD grfFlags,
                                             HDC *phDC) = 0;

        virtual HRESULT __stdcall ReleaseDC(
                                 HDC hDC) = 0;

        virtual HRESULT __stdcall InvalidateRect(
                                             LPCRECT pRect,
                       BOOL fErase) = 0;

        virtual HRESULT __stdcall InvalidateRgn(
                                 HRGN hRGN,
                       BOOL fErase) = 0;

        virtual HRESULT __stdcall ScrollRect(
                       INT dx,
                       INT dy,
                                 LPCRECT pRectScroll,
                                 LPCRECT pRectClip) = 0;

        virtual HRESULT __stdcall AdjustRect(
                                         LPRECT prc) = 0;

        virtual HRESULT __stdcall OnDefWindowMessage(

                  UINT msg,

                  WPARAM wParam,

                  LPARAM lParam,
                                   LRESULT *plResult) = 0;

    };
# 4717 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IViewObjectEx *LPVIEWOBJECTEX;

typedef
enum tagVIEWSTATUS
    {
        VIEWSTATUS_OPAQUE = 1,
        VIEWSTATUS_SOLIDBKGND = 2,
        VIEWSTATUS_DVASPECTOPAQUE = 4,
        VIEWSTATUS_DVASPECTTRANSPARENT = 8,
        VIEWSTATUS_SURFACE = 16,
        VIEWSTATUS_3DSURFACE = 32
    } VIEWSTATUS;

typedef
enum tagHITRESULT
    {
        HITRESULT_OUTSIDE = 0,
        HITRESULT_TRANSPARENT = 1,
        HITRESULT_CLOSE = 2,
        HITRESULT_HIT = 3
    } HITRESULT;

typedef
enum tagDVASPECT2
    {
        DVASPECT_OPAQUE = 16,
        DVASPECT_TRANSPARENT = 32
    } DVASPECT2;

typedef struct tagExtentInfo
    {
    ULONG cb;
    DWORD dwExtentMode;
    SIZEL sizelProposed;
    } DVEXTENTINFO;

typedef
enum tagExtentMode
    {
        DVEXTENT_CONTENT = 0,
        DVEXTENT_INTEGRAL = ( DVEXTENT_CONTENT + 1 )
    } DVEXTENTMODE;

typedef
enum tagAspectInfoFlag
    {
        DVASPECTINFOFLAG_CANOPTIMIZE = 1
    } DVASPECTINFOFLAG;

typedef struct tagAspectInfo
    {
    ULONG cb;
    DWORD dwFlags;
    } DVASPECTINFO;


extern "C" const IID IID_IViewObjectEx;



    struct __declspec(uuid("3AF24292-0C96-11CE-A0CF-00AA00600AB8")) __declspec(novtable)
    IViewObjectEx : public IViewObject2
    {
    public:
        virtual HRESULT __stdcall GetRect(
                       DWORD dwAspect,
                                   LPRECTL pRect) = 0;

        virtual HRESULT __stdcall GetViewStatus(
                                   DWORD *pdwStatus) = 0;

        virtual HRESULT __stdcall QueryHitPoint(
                       DWORD dwAspect,
                                 LPCRECT pRectBounds,
                       POINT ptlLoc,
                       LONG lCloseHint,
                                   DWORD *pHitResult) = 0;

        virtual HRESULT __stdcall QueryHitRect(
                       DWORD dwAspect,
                                 LPCRECT pRectBounds,
                                 LPCRECT pRectLoc,
                       LONG lCloseHint,
                                   DWORD *pHitResult) = 0;

        virtual HRESULT __stdcall GetNaturalExtent(
                       DWORD dwAspect,
                       LONG lindex,
                                 DVTARGETDEVICE *ptd,
                                 HDC hicTargetDev,
                                 DVEXTENTINFO *pExtentInfo,
                                   LPSIZEL pSizel) = 0;

    };
# 5019 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IOleUndoUnit *LPOLEUNDOUNIT;


extern "C" const IID IID_IOleUndoUnit;



    struct __declspec(uuid("894AD3B0-EF97-11CE-9BC9-00AA00608E01")) __declspec(novtable)
    IOleUndoUnit : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Do(
                                     IOleUndoManager *pUndoManager) = 0;

        virtual HRESULT __stdcall GetDescription(
                                             BSTR *pBstr) = 0;

        virtual HRESULT __stdcall GetUnitType(
                                   CLSID *pClsid,
                                   LONG *plID) = 0;

        virtual HRESULT __stdcall OnNextAdd( void) = 0;

    };
# 5131 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IOleParentUndoUnit *LPOLEPARENTUNDOUNIT;


extern "C" const IID IID_IOleParentUndoUnit;



    struct __declspec(uuid("A1FAF330-EF97-11CE-9BC9-00AA00608E01")) __declspec(novtable)
    IOleParentUndoUnit : public IOleUndoUnit
    {
    public:
        virtual HRESULT __stdcall Open(
                                     IOleParentUndoUnit *pPUU) = 0;

        virtual HRESULT __stdcall Close(
                                     IOleParentUndoUnit *pPUU,
                       BOOL fCommit) = 0;

        virtual HRESULT __stdcall Add(
                                     IOleUndoUnit *pUU) = 0;

        virtual HRESULT __stdcall FindUnit(
                                     IOleUndoUnit *pUU) = 0;

        virtual HRESULT __stdcall GetParentState(
                                   DWORD *pdwState) = 0;

    };
# 5284 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IEnumOleUndoUnits *LPENUMOLEUNDOUNITS;


extern "C" const IID IID_IEnumOleUndoUnits;



    struct __declspec(uuid("B3E7C340-EF97-11CE-9BC9-00AA00608E01")) __declspec(novtable)
    IEnumOleUndoUnits : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG cElt,
                                            IOleUndoUnit **rgElt,
                        ULONG *pcEltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG cElt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumOleUndoUnits **ppEnum) = 0;

    };
# 5388 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
                HRESULT __stdcall IEnumOleUndoUnits_RemoteNext_Proxy(
              IEnumOleUndoUnits * This,
               ULONG cElt,
                                                                                IOleUndoUnit **rgElt,
                           ULONG *pcEltFetched);


void __stdcall IEnumOleUndoUnits_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5413 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IOleUndoManager *LPOLEUNDOMANAGER;


extern "C" const IID IID_IOleUndoManager;



    struct __declspec(uuid("D001F200-EF97-11CE-9BC9-00AA00608E01")) __declspec(novtable)
    IOleUndoManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Open(
                                     IOleParentUndoUnit *pPUU) = 0;

        virtual HRESULT __stdcall Close(
                                     IOleParentUndoUnit *pPUU,
                       BOOL fCommit) = 0;

        virtual HRESULT __stdcall Add(
                                     IOleUndoUnit *pUU) = 0;

        virtual HRESULT __stdcall GetOpenParentState(
                                   DWORD *pdwState) = 0;

        virtual HRESULT __stdcall DiscardFrom(
                                     IOleUndoUnit *pUU) = 0;

        virtual HRESULT __stdcall UndoTo(
                                     IOleUndoUnit *pUU) = 0;

        virtual HRESULT __stdcall RedoTo(
                                     IOleUndoUnit *pUU) = 0;

        virtual HRESULT __stdcall EnumUndoable(
                                             IEnumOleUndoUnits **ppEnum) = 0;

        virtual HRESULT __stdcall EnumRedoable(
                                             IEnumOleUndoUnits **ppEnum) = 0;

        virtual HRESULT __stdcall GetLastUndoDescription(
                                             BSTR *pBstr) = 0;

        virtual HRESULT __stdcall GetLastRedoDescription(
                                             BSTR *pBstr) = 0;

        virtual HRESULT __stdcall Enable(
                       BOOL fEnable) = 0;

    };
# 5607 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IPointerInactive *LPPOINTERINACTIVE;

typedef
enum tagPOINTERINACTIVE
    {
        POINTERINACTIVE_ACTIVATEONENTRY = 1,
        POINTERINACTIVE_DEACTIVATEONLEAVE = 2,
        POINTERINACTIVE_ACTIVATEONDRAG = 4
    } POINTERINACTIVE;


extern "C" const IID IID_IPointerInactive;



    struct __declspec(uuid("55980BA0-35AA-11CF-B671-00AA004CD6D8")) __declspec(novtable)
    IPointerInactive : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetActivationPolicy(
                                   DWORD *pdwPolicy) = 0;

        virtual HRESULT __stdcall OnInactiveMouseMove(
                                 LPCRECT pRectBounds,
                       LONG x,
                       LONG y,
                       DWORD grfKeyState) = 0;

        virtual HRESULT __stdcall OnInactiveSetCursor(
                                 LPCRECT pRectBounds,
                       LONG x,
                       LONG y,
                       DWORD dwMouseMsg,
                       BOOL fSetAlways) = 0;

    };
# 5731 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
typedef IObjectWithSite *LPOBJECTWITHSITE;


extern "C" const IID IID_IObjectWithSite;



    struct __declspec(uuid("FC4801A3-2BA9-11CF-A229-00AA003D7352")) __declspec(novtable)
    IObjectWithSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetSite(
                                     IUnknown *pUnkSite) = 0;

        virtual HRESULT __stdcall GetSite(
                                 const IID & riid,
                                                     void **ppvSite) = 0;

    };
# 5828 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0036_v0_0_s_ifspec;







typedef IPerPropertyBrowsing *LPPERPROPERTYBROWSING;

typedef struct tagCALPOLESTR
    {
    ULONG cElems;
                    LPOLESTR *pElems;
    } CALPOLESTR;

typedef struct tagCALPOLESTR *LPCALPOLESTR;

typedef struct tagCADWORD
    {
    ULONG cElems;
                    DWORD *pElems;
    } CADWORD;

typedef struct tagCADWORD *LPCADWORD;


extern "C" const IID IID_IPerPropertyBrowsing;



    struct __declspec(uuid("376BD3AA-3845-101B-84ED-08002B2EC713")) __declspec(novtable)
    IPerPropertyBrowsing : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetDisplayString(
                       DISPID dispID,
                                             BSTR *pBstr) = 0;

        virtual HRESULT __stdcall MapPropertyToPage(
                       DISPID dispID,
                                   CLSID *pClsid) = 0;

        virtual HRESULT __stdcall GetPredefinedStrings(
                       DISPID dispID,
                                   CALPOLESTR *pCaStringsOut,
                                   CADWORD *pCaCookiesOut) = 0;

        virtual HRESULT __stdcall GetPredefinedValue(
                       DISPID dispID,
                       DWORD dwCookie,
                                   VARIANT *pVarOut) = 0;

    };
# 5980 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0037_v0_0_s_ifspec;







typedef IPropertyBag2 *LPPROPERTYBAG2;

typedef
enum tagPROPBAG2_TYPE
    {
        PROPBAG2_TYPE_UNDEFINED = 0,
        PROPBAG2_TYPE_DATA = 1,
        PROPBAG2_TYPE_URL = 2,
        PROPBAG2_TYPE_OBJECT = 3,
        PROPBAG2_TYPE_STREAM = 4,
        PROPBAG2_TYPE_STORAGE = 5,
        PROPBAG2_TYPE_MONIKER = 6
    } PROPBAG2_TYPE;

typedef struct tagPROPBAG2
    {
    DWORD dwType;
    VARTYPE vt;
    CLIPFORMAT cfType;
    DWORD dwHint;
    LPOLESTR pstrName;
    CLSID clsid;
    } PROPBAG2;


extern "C" const IID IID_IPropertyBag2;



    struct __declspec(uuid("22F55882-280B-11d0-A8A9-00A0C90C2004")) __declspec(novtable)
    IPropertyBag2 : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Read(
                       ULONG cProperties,
                                                                   PROPBAG2 *pPropBag,
                                             IErrorLog *pErrLog,
                                                                     VARIANT *pvarValue,
                                                                                       HRESULT *phrError) = 0;

        virtual HRESULT __stdcall Write(
                       ULONG cProperties,
                                                                   PROPBAG2 *pPropBag,
                                                                   VARIANT *pvarValue) = 0;

        virtual HRESULT __stdcall CountProperties(
                                   ULONG *pcProperties) = 0;

        virtual HRESULT __stdcall GetPropertyInfo(
                       ULONG iProperty,
                       ULONG cProperties,
                                                                     PROPBAG2 *pPropBag,
                                   ULONG *pcProperties) = 0;

        virtual HRESULT __stdcall LoadObject(
                                 LPCOLESTR pstrName,
                       DWORD dwHint,
                                     IUnknown *pUnkObject,
                                             IErrorLog *pErrLog) = 0;

    };
# 6160 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0038_v0_0_s_ifspec;







typedef IPersistPropertyBag2 *LPPERSISTPROPERTYBAG2;


extern "C" const IID IID_IPersistPropertyBag2;



    struct __declspec(uuid("22F55881-280B-11d0-A8A9-00A0C90C2004")) __declspec(novtable)
    IPersistPropertyBag2 : public IPersist
    {
    public:
        virtual HRESULT __stdcall InitNew( void) = 0;

        virtual HRESULT __stdcall Load(
                                     IPropertyBag2 *pPropBag,
                                             IErrorLog *pErrLog) = 0;

        virtual HRESULT __stdcall Save(
                                     IPropertyBag2 *pPropBag,
                       BOOL fClearDirty,
                       BOOL fSaveAllProperties) = 0;

        virtual HRESULT __stdcall IsDirty( void) = 0;

    };
# 6294 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0039_v0_0_s_ifspec;







typedef IAdviseSinkEx *LPADVISESINKEX;


extern "C" const IID IID_IAdviseSinkEx;



    struct __declspec(uuid("3AF24290-0C96-11CE-A0CF-00AA00600AB8")) __declspec(novtable)
    IAdviseSinkEx : public IAdviseSink
    {
    public:
        virtual void __stdcall OnViewStatusChange(
                       DWORD dwViewStatus) = 0;

    };
# 6414 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
                HRESULT __stdcall IAdviseSinkEx_RemoteOnViewStatusChange_Proxy(
              IAdviseSinkEx * This,
               DWORD dwViewStatus);


void __stdcall IAdviseSinkEx_RemoteOnViewStatusChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 6439 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0040_v0_0_s_ifspec;







typedef IQuickActivate *LPQUICKACTIVATE;

typedef
enum tagQACONTAINERFLAGS
    {
        QACONTAINER_SHOWHATCHING = 0x1,
        QACONTAINER_SHOWGRABHANDLES = 0x2,
        QACONTAINER_USERMODE = 0x4,
        QACONTAINER_DISPLAYASDEFAULT = 0x8,
        QACONTAINER_UIDEAD = 0x10,
        QACONTAINER_AUTOCLIP = 0x20,
        QACONTAINER_MESSAGEREFLECT = 0x40,
        QACONTAINER_SUPPORTSMNEMONICS = 0x80
    } QACONTAINERFLAGS;

typedef __declspec(uuid("66504301-BE0F-101A-8BBB-00AA00300CAB")) DWORD OLE_COLOR;

typedef struct tagQACONTAINER
    {
    ULONG cbSize;
    IOleClientSite *pClientSite;
    IAdviseSinkEx *pAdviseSink;
    IPropertyNotifySink *pPropertyNotifySink;
    IUnknown *pUnkEventSink;
    DWORD dwAmbientFlags;
    OLE_COLOR colorFore;
    OLE_COLOR colorBack;
    IFont *pFont;
    IOleUndoManager *pUndoMgr;
    DWORD dwAppearance;
    LONG lcid;
    HPALETTE hpal;
    IBindHost *pBindHost;
    IOleControlSite *pOleControlSite;
    IServiceProvider *pServiceProvider;
    } QACONTAINER;

typedef struct tagQACONTROL
    {
    ULONG cbSize;
    DWORD dwMiscStatus;
    DWORD dwViewStatus;
    DWORD dwEventCookie;
    DWORD dwPropNotifyCookie;
    DWORD dwPointerActivationPolicy;
    } QACONTROL;


extern "C" const IID IID_IQuickActivate;



    struct __declspec(uuid("CF51ED10-62FE-11CF-BF86-00A0C9034836")) __declspec(novtable)
    IQuickActivate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QuickActivate(
                       QACONTAINER *pQaContainer,
                            QACONTROL *pQaControl) = 0;

        virtual HRESULT __stdcall SetContentExtent(
                                 LPSIZEL pSizel) = 0;

        virtual HRESULT __stdcall GetContentExtent(
                                   LPSIZEL pSizel) = 0;

    };
# 6587 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
                HRESULT __stdcall IQuickActivate_RemoteQuickActivate_Proxy(
              IQuickActivate * This,
                         QACONTAINER *pQaContainer,
                           QACONTROL *pQaControl);


void __stdcall IQuickActivate_RemoteQuickActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 6611 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0041_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall CLIPFORMAT_UserSize( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall HACCEL_UserSize( unsigned long *, unsigned long , HACCEL * );
unsigned char * __stdcall HACCEL_UserMarshal( unsigned long *, unsigned char *, HACCEL * );
unsigned char * __stdcall HACCEL_UserUnmarshal( unsigned long *, unsigned char *, HACCEL * );
void __stdcall HACCEL_UserFree( unsigned long *, HACCEL * );

unsigned long __stdcall HDC_UserSize( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree( unsigned long *, HDC * );

unsigned long __stdcall HFONT_UserSize( unsigned long *, unsigned long , HFONT * );
unsigned char * __stdcall HFONT_UserMarshal( unsigned long *, unsigned char *, HFONT * );
unsigned char * __stdcall HFONT_UserUnmarshal( unsigned long *, unsigned char *, HFONT * );
void __stdcall HFONT_UserFree( unsigned long *, HFONT * );

unsigned long __stdcall HPALETTE_UserSize( unsigned long *, unsigned long , HPALETTE * );
unsigned char * __stdcall HPALETTE_UserMarshal( unsigned long *, unsigned char *, HPALETTE * );
unsigned char * __stdcall HPALETTE_UserUnmarshal( unsigned long *, unsigned char *, HPALETTE * );
void __stdcall HPALETTE_UserFree( unsigned long *, HPALETTE * );

unsigned long __stdcall HRGN_UserSize( unsigned long *, unsigned long , HRGN * );
unsigned char * __stdcall HRGN_UserMarshal( unsigned long *, unsigned char *, HRGN * );
unsigned char * __stdcall HRGN_UserUnmarshal( unsigned long *, unsigned char *, HRGN * );
void __stdcall HRGN_UserFree( unsigned long *, HRGN * );

unsigned long __stdcall HWND_UserSize( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree( unsigned long *, HWND * );

unsigned long __stdcall VARIANT_UserSize( unsigned long *, unsigned long , VARIANT * );
unsigned char * __stdcall VARIANT_UserMarshal( unsigned long *, unsigned char *, VARIANT * );
unsigned char * __stdcall VARIANT_UserUnmarshal( unsigned long *, unsigned char *, VARIANT * );
void __stdcall VARIANT_UserFree( unsigned long *, VARIANT * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall CLIPFORMAT_UserSize64( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree64( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall HACCEL_UserSize64( unsigned long *, unsigned long , HACCEL * );
unsigned char * __stdcall HACCEL_UserMarshal64( unsigned long *, unsigned char *, HACCEL * );
unsigned char * __stdcall HACCEL_UserUnmarshal64( unsigned long *, unsigned char *, HACCEL * );
void __stdcall HACCEL_UserFree64( unsigned long *, HACCEL * );

unsigned long __stdcall HDC_UserSize64( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal64( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal64( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree64( unsigned long *, HDC * );

unsigned long __stdcall HFONT_UserSize64( unsigned long *, unsigned long , HFONT * );
unsigned char * __stdcall HFONT_UserMarshal64( unsigned long *, unsigned char *, HFONT * );
unsigned char * __stdcall HFONT_UserUnmarshal64( unsigned long *, unsigned char *, HFONT * );
void __stdcall HFONT_UserFree64( unsigned long *, HFONT * );

unsigned long __stdcall HPALETTE_UserSize64( unsigned long *, unsigned long , HPALETTE * );
unsigned char * __stdcall HPALETTE_UserMarshal64( unsigned long *, unsigned char *, HPALETTE * );
unsigned char * __stdcall HPALETTE_UserUnmarshal64( unsigned long *, unsigned char *, HPALETTE * );
void __stdcall HPALETTE_UserFree64( unsigned long *, HPALETTE * );

unsigned long __stdcall HRGN_UserSize64( unsigned long *, unsigned long , HRGN * );
unsigned char * __stdcall HRGN_UserMarshal64( unsigned long *, unsigned char *, HRGN * );
unsigned char * __stdcall HRGN_UserUnmarshal64( unsigned long *, unsigned char *, HRGN * );
void __stdcall HRGN_UserFree64( unsigned long *, HRGN * );

unsigned long __stdcall HWND_UserSize64( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal64( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal64( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree64( unsigned long *, HWND * );

unsigned long __stdcall VARIANT_UserSize64( unsigned long *, unsigned long , VARIANT * );
unsigned char * __stdcall VARIANT_UserMarshal64( unsigned long *, unsigned char *, VARIANT * );
unsigned char * __stdcall VARIANT_UserUnmarshal64( unsigned long *, unsigned char *, VARIANT * );
void __stdcall VARIANT_UserFree64( unsigned long *, VARIANT * );

              HRESULT __stdcall IEnumConnections_Next_Proxy(
    IEnumConnections * This,
               ULONG cConnections,
                                    LPCONNECTDATA rgcd,
                ULONG *pcFetched);


                HRESULT __stdcall IEnumConnections_Next_Stub(
              IEnumConnections * This,
               ULONG cConnections,
                                                                                     LPCONNECTDATA rgcd,
                           ULONG *pcFetched);

              HRESULT __stdcall IEnumConnectionPoints_Next_Proxy(
    IEnumConnectionPoints * This,
               ULONG cConnections,
                                    LPCONNECTIONPOINT *ppCP,
                ULONG *pcFetched);


                HRESULT __stdcall IEnumConnectionPoints_Next_Stub(
              IEnumConnectionPoints * This,
               ULONG cConnections,
                                                                                     LPCONNECTIONPOINT *ppCP,
                           ULONG *pcFetched);

              HRESULT __stdcall IClassFactory2_CreateInstanceLic_Proxy(
    IClassFactory2 * This,
               IUnknown *pUnkOuter,
               IUnknown *pUnkReserved,
               const IID & riid,
               BSTR bstrKey,
                        PVOID *ppvObj);


                HRESULT __stdcall IClassFactory2_CreateInstanceLic_Stub(
              IClassFactory2 * This,
                         const IID & riid,
                         BSTR bstrKey,
                                             IUnknown **ppvObj);

              HRESULT __stdcall IPersistMemory_Load_Proxy(
    IPersistMemory * This,
                        LPVOID pMem,
               ULONG cbSize);


                HRESULT __stdcall IPersistMemory_Load_Stub(
              IPersistMemory * This,
                                                      BYTE *pMem,
               ULONG cbSize);

              HRESULT __stdcall IPersistMemory_Save_Proxy(
    IPersistMemory * This,
                         LPVOID pMem,
               BOOL fClearDirty,
               ULONG cbSize);


                HRESULT __stdcall IPersistMemory_Save_Stub(
              IPersistMemory * This,
                                                        BYTE *pMem,
               BOOL fClearDirty,
               ULONG cbSize);

              HRESULT __stdcall IEnumOleUndoUnits_Next_Proxy(
    IEnumOleUndoUnits * This,
               ULONG cElt,
                                    IOleUndoUnit **rgElt,
                ULONG *pcEltFetched);


                HRESULT __stdcall IEnumOleUndoUnits_Next_Stub(
              IEnumOleUndoUnits * This,
               ULONG cElt,
                                                                                IOleUndoUnit **rgElt,
                           ULONG *pcEltFetched);

              void __stdcall IAdviseSinkEx_OnViewStatusChange_Proxy(
    IAdviseSinkEx * This,
               DWORD dwViewStatus);


                HRESULT __stdcall IAdviseSinkEx_OnViewStatusChange_Stub(
              IAdviseSinkEx * This,
               DWORD dwViewStatus);

              HRESULT __stdcall IQuickActivate_QuickActivate_Proxy(
    IQuickActivate * This,
               QACONTAINER *pQaContainer,
                    QACONTROL *pQaControl);


                HRESULT __stdcall IQuickActivate_QuickActivate_Stub(
              IQuickActivate * This,
                         QACONTAINER *pQaContainer,
                           QACONTROL *pQaControl);






}
# 64 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3d11_2.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h" 1








#pragma warning(disable: 4049)
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
typedef struct IDXGIDevice3 IDXGIDevice3;






typedef struct IDXGISwapChain2 IDXGISwapChain2;






typedef struct IDXGIOutput2 IDXGIOutput2;






typedef struct IDXGIFactory3 IDXGIFactory3;






typedef struct IDXGIDecodeSwapChain IDXGIDecodeSwapChain;






typedef struct IDXGIFactoryMedia IDXGIFactoryMedia;






typedef struct IDXGISwapChainMedia IDXGISwapChainMedia;






typedef struct IDXGIOutput3 IDXGIOutput3;






# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h" 1








#pragma warning(disable: 4049)
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
typedef struct IDXGIDisplayControl IDXGIDisplayControl;






typedef struct IDXGIOutputDuplication IDXGIOutputDuplication;






typedef struct IDXGISurface2 IDXGISurface2;






typedef struct IDXGIResource1 IDXGIResource1;






typedef struct IDXGIDevice2 IDXGIDevice2;






typedef struct IDXGISwapChain1 IDXGISwapChain1;






typedef struct IDXGIFactory2 IDXGIFactory2;






typedef struct IDXGIAdapter2 IDXGIAdapter2;






typedef struct IDXGIOutput1 IDXGIOutput1;






# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h" 1








#pragma warning(disable: 4049)
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
typedef struct IDXGIObject IDXGIObject;






typedef struct IDXGIDeviceSubObject IDXGIDeviceSubObject;






typedef struct IDXGIResource IDXGIResource;






typedef struct IDXGIKeyedMutex IDXGIKeyedMutex;






typedef struct IDXGISurface IDXGISurface;






typedef struct IDXGISurface1 IDXGISurface1;






typedef struct IDXGIAdapter IDXGIAdapter;






typedef struct IDXGIOutput IDXGIOutput;






typedef struct IDXGISwapChain IDXGISwapChain;






typedef struct IDXGIFactory IDXGIFactory;






typedef struct IDXGIDevice IDXGIDevice;






typedef struct IDXGIFactory1 IDXGIFactory1;






typedef struct IDXGIAdapter1 IDXGIAdapter1;






typedef struct IDXGIDevice1 IDXGIDevice1;








# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgitype.h" 1






# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgiformat.h" 1
# 10 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgiformat.h"
typedef enum DXGI_FORMAT
{
    DXGI_FORMAT_UNKNOWN = 0,
    DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
    DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
    DXGI_FORMAT_R32G32B32A32_UINT = 3,
    DXGI_FORMAT_R32G32B32A32_SINT = 4,
    DXGI_FORMAT_R32G32B32_TYPELESS = 5,
    DXGI_FORMAT_R32G32B32_FLOAT = 6,
    DXGI_FORMAT_R32G32B32_UINT = 7,
    DXGI_FORMAT_R32G32B32_SINT = 8,
    DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
    DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
    DXGI_FORMAT_R16G16B16A16_UNORM = 11,
    DXGI_FORMAT_R16G16B16A16_UINT = 12,
    DXGI_FORMAT_R16G16B16A16_SNORM = 13,
    DXGI_FORMAT_R16G16B16A16_SINT = 14,
    DXGI_FORMAT_R32G32_TYPELESS = 15,
    DXGI_FORMAT_R32G32_FLOAT = 16,
    DXGI_FORMAT_R32G32_UINT = 17,
    DXGI_FORMAT_R32G32_SINT = 18,
    DXGI_FORMAT_R32G8X24_TYPELESS = 19,
    DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
    DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
    DXGI_FORMAT_R10G10B10A2_UNORM = 24,
    DXGI_FORMAT_R10G10B10A2_UINT = 25,
    DXGI_FORMAT_R11G11B10_FLOAT = 26,
    DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
    DXGI_FORMAT_R8G8B8A8_UNORM = 28,
    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
    DXGI_FORMAT_R8G8B8A8_UINT = 30,
    DXGI_FORMAT_R8G8B8A8_SNORM = 31,
    DXGI_FORMAT_R8G8B8A8_SINT = 32,
    DXGI_FORMAT_R16G16_TYPELESS = 33,
    DXGI_FORMAT_R16G16_FLOAT = 34,
    DXGI_FORMAT_R16G16_UNORM = 35,
    DXGI_FORMAT_R16G16_UINT = 36,
    DXGI_FORMAT_R16G16_SNORM = 37,
    DXGI_FORMAT_R16G16_SINT = 38,
    DXGI_FORMAT_R32_TYPELESS = 39,
    DXGI_FORMAT_D32_FLOAT = 40,
    DXGI_FORMAT_R32_FLOAT = 41,
    DXGI_FORMAT_R32_UINT = 42,
    DXGI_FORMAT_R32_SINT = 43,
    DXGI_FORMAT_R24G8_TYPELESS = 44,
    DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
    DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
    DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
    DXGI_FORMAT_R8G8_TYPELESS = 48,
    DXGI_FORMAT_R8G8_UNORM = 49,
    DXGI_FORMAT_R8G8_UINT = 50,
    DXGI_FORMAT_R8G8_SNORM = 51,
    DXGI_FORMAT_R8G8_SINT = 52,
    DXGI_FORMAT_R16_TYPELESS = 53,
    DXGI_FORMAT_R16_FLOAT = 54,
    DXGI_FORMAT_D16_UNORM = 55,
    DXGI_FORMAT_R16_UNORM = 56,
    DXGI_FORMAT_R16_UINT = 57,
    DXGI_FORMAT_R16_SNORM = 58,
    DXGI_FORMAT_R16_SINT = 59,
    DXGI_FORMAT_R8_TYPELESS = 60,
    DXGI_FORMAT_R8_UNORM = 61,
    DXGI_FORMAT_R8_UINT = 62,
    DXGI_FORMAT_R8_SNORM = 63,
    DXGI_FORMAT_R8_SINT = 64,
    DXGI_FORMAT_A8_UNORM = 65,
    DXGI_FORMAT_R1_UNORM = 66,
    DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
    DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
    DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
    DXGI_FORMAT_BC1_TYPELESS = 70,
    DXGI_FORMAT_BC1_UNORM = 71,
    DXGI_FORMAT_BC1_UNORM_SRGB = 72,
    DXGI_FORMAT_BC2_TYPELESS = 73,
    DXGI_FORMAT_BC2_UNORM = 74,
    DXGI_FORMAT_BC2_UNORM_SRGB = 75,
    DXGI_FORMAT_BC3_TYPELESS = 76,
    DXGI_FORMAT_BC3_UNORM = 77,
    DXGI_FORMAT_BC3_UNORM_SRGB = 78,
    DXGI_FORMAT_BC4_TYPELESS = 79,
    DXGI_FORMAT_BC4_UNORM = 80,
    DXGI_FORMAT_BC4_SNORM = 81,
    DXGI_FORMAT_BC5_TYPELESS = 82,
    DXGI_FORMAT_BC5_UNORM = 83,
    DXGI_FORMAT_BC5_SNORM = 84,
    DXGI_FORMAT_B5G6R5_UNORM = 85,
    DXGI_FORMAT_B5G5R5A1_UNORM = 86,
    DXGI_FORMAT_B8G8R8A8_UNORM = 87,
    DXGI_FORMAT_B8G8R8X8_UNORM = 88,
    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
    DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
    DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
    DXGI_FORMAT_BC6H_TYPELESS = 94,
    DXGI_FORMAT_BC6H_UF16 = 95,
    DXGI_FORMAT_BC6H_SF16 = 96,
    DXGI_FORMAT_BC7_TYPELESS = 97,
    DXGI_FORMAT_BC7_UNORM = 98,
    DXGI_FORMAT_BC7_UNORM_SRGB = 99,
    DXGI_FORMAT_AYUV = 100,
    DXGI_FORMAT_Y410 = 101,
    DXGI_FORMAT_Y416 = 102,
    DXGI_FORMAT_NV12 = 103,
    DXGI_FORMAT_P010 = 104,
    DXGI_FORMAT_P016 = 105,
    DXGI_FORMAT_420_OPAQUE = 106,
    DXGI_FORMAT_YUY2 = 107,
    DXGI_FORMAT_Y210 = 108,
    DXGI_FORMAT_Y216 = 109,
    DXGI_FORMAT_NV11 = 110,
    DXGI_FORMAT_AI44 = 111,
    DXGI_FORMAT_IA44 = 112,
    DXGI_FORMAT_P8 = 113,
    DXGI_FORMAT_A8P8 = 114,
    DXGI_FORMAT_B4G4R4A4_UNORM = 115,
    DXGI_FORMAT_FORCE_UINT = 0xffffffff
} DXGI_FORMAT;
# 7 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgitype.h" 2
# 29 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgitype.h"
typedef struct DXGI_RGB
{
    float Red;
    float Green;
    float Blue;
} DXGI_RGB;


typedef struct _D3DCOLORVALUE {
    float r;
    float g;
    float b;
    float a;
} D3DCOLORVALUE;




typedef D3DCOLORVALUE DXGI_RGBA;

typedef struct DXGI_GAMMA_CONTROL
{
    DXGI_RGB Scale;
    DXGI_RGB Offset;
    DXGI_RGB GammaCurve[ 1025 ];
} DXGI_GAMMA_CONTROL;

typedef struct DXGI_GAMMA_CONTROL_CAPABILITIES
{
    BOOL ScaleAndOffsetSupported;
    float MaxConvertedValue;
    float MinConvertedValue;
    UINT NumGammaControlPoints;
    float ControlPointPositions[1025];
} DXGI_GAMMA_CONTROL_CAPABILITIES;

typedef struct DXGI_RATIONAL
{
    UINT Numerator;
    UINT Denominator;
} DXGI_RATIONAL;

typedef enum DXGI_MODE_SCANLINE_ORDER
{
    DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED = 0,
    DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE = 1,
    DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST = 2,
    DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST = 3
} DXGI_MODE_SCANLINE_ORDER;

typedef enum DXGI_MODE_SCALING
{
    DXGI_MODE_SCALING_UNSPECIFIED = 0,
    DXGI_MODE_SCALING_CENTERED = 1,
    DXGI_MODE_SCALING_STRETCHED = 2
} DXGI_MODE_SCALING;

typedef enum DXGI_MODE_ROTATION
{
    DXGI_MODE_ROTATION_UNSPECIFIED = 0,
    DXGI_MODE_ROTATION_IDENTITY = 1,
    DXGI_MODE_ROTATION_ROTATE90 = 2,
    DXGI_MODE_ROTATION_ROTATE180 = 3,
    DXGI_MODE_ROTATION_ROTATE270 = 4
} DXGI_MODE_ROTATION;

typedef struct DXGI_MODE_DESC
{
    UINT Width;
    UINT Height;
    DXGI_RATIONAL RefreshRate;
    DXGI_FORMAT Format;
    DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
    DXGI_MODE_SCALING Scaling;
} DXGI_MODE_DESC;

typedef struct DXGI_SAMPLE_DESC
{
    UINT Count;
    UINT Quality;
} DXGI_SAMPLE_DESC;
# 144 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h" 2



extern "C"{
# 167 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
typedef UINT DXGI_USAGE;

typedef struct DXGI_FRAME_STATISTICS
    {
    UINT PresentCount;
    UINT PresentRefreshCount;
    UINT SyncRefreshCount;
    LARGE_INTEGER SyncQPCTime;
    LARGE_INTEGER SyncGPUTime;
    } DXGI_FRAME_STATISTICS;

typedef struct DXGI_MAPPED_RECT
    {
    INT Pitch;
    BYTE *pBits;
    } DXGI_MAPPED_RECT;
# 194 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
typedef struct DXGI_ADAPTER_DESC
    {
    WCHAR Description[ 128 ];
    UINT VendorId;
    UINT DeviceId;
    UINT SubSysId;
    UINT Revision;
    SIZE_T DedicatedVideoMemory;
    SIZE_T DedicatedSystemMemory;
    SIZE_T SharedSystemMemory;
    LUID AdapterLuid;
    } DXGI_ADAPTER_DESC;
# 215 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
typedef struct DXGI_OUTPUT_DESC
    {
    WCHAR DeviceName[ 32 ];
    RECT DesktopCoordinates;
    BOOL AttachedToDesktop;
    DXGI_MODE_ROTATION Rotation;
    HMONITOR Monitor;
    } DXGI_OUTPUT_DESC;

typedef struct DXGI_SHARED_RESOURCE
    {
    HANDLE Handle;
    } DXGI_SHARED_RESOURCE;
# 239 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
typedef
enum DXGI_RESIDENCY
    {
        DXGI_RESIDENCY_FULLY_RESIDENT = 1,
        DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY = 2,
        DXGI_RESIDENCY_EVICTED_TO_DISK = 3
    } DXGI_RESIDENCY;

typedef struct DXGI_SURFACE_DESC
    {
    UINT Width;
    UINT Height;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    } DXGI_SURFACE_DESC;

typedef
enum DXGI_SWAP_EFFECT
    {
        DXGI_SWAP_EFFECT_DISCARD = 0,
        DXGI_SWAP_EFFECT_SEQUENTIAL = 1,
        DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL = 3
    } DXGI_SWAP_EFFECT;

typedef
enum DXGI_SWAP_CHAIN_FLAG
    {
        DXGI_SWAP_CHAIN_FLAG_NONPREROTATED = 1,
        DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH = 2,
        DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE = 4,
        DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT = 8,
        DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER = 16,
        DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY = 32,
        DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT = 64,
        DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER = 128,
        DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO = 256,
        DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO = 512
    } DXGI_SWAP_CHAIN_FLAG;

typedef struct DXGI_SWAP_CHAIN_DESC
    {
    DXGI_MODE_DESC BufferDesc;
    DXGI_SAMPLE_DESC SampleDesc;
    DXGI_USAGE BufferUsage;
    UINT BufferCount;
    HWND OutputWindow;
    BOOL Windowed;
    DXGI_SWAP_EFFECT SwapEffect;
    UINT Flags;
    } DXGI_SWAP_CHAIN_DESC;



extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0000_v0_0_s_ifspec;
# 302 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const IID IID_IDXGIObject;



    struct __declspec(uuid("aec22fb8-76f3-4639-9be0-28eb43a67a2e")) __declspec(novtable)
    IDXGIObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetPrivateData(

                  const GUID & Name,
                       UINT DataSize,

                                        const void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateDataInterface(

                  const GUID & Name,

                  const IUnknown *pUnknown) = 0;

        virtual HRESULT __stdcall GetPrivateData(

                  const GUID & Name,

                     UINT *pDataSize,

                                            void *pData) = 0;

        virtual HRESULT __stdcall GetParent(

                  const IID & riid,

                   void **ppParent) = 0;

    };
# 442 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const IID IID_IDXGIDeviceSubObject;



    struct __declspec(uuid("3d3e0379-f9de-4d58-bb6c-18d62992f1a6")) __declspec(novtable)
    IDXGIDeviceSubObject : public IDXGIObject
    {
    public:
        virtual HRESULT __stdcall GetDevice(

                  const IID & riid,

                   void **ppDevice) = 0;

    };
# 572 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const IID IID_IDXGIResource;



    struct __declspec(uuid("035f3ab4-482e-4e50-b41f-8a7f8bd8960b")) __declspec(novtable)
    IDXGIResource : public IDXGIDeviceSubObject
    {
    public:
        virtual HRESULT __stdcall GetSharedHandle(

                   HANDLE *pSharedHandle) = 0;

        virtual HRESULT __stdcall GetUsage(

                   DXGI_USAGE *pUsage) = 0;

        virtual HRESULT __stdcall SetEvictionPriority(
                       UINT EvictionPriority) = 0;

        virtual HRESULT __stdcall GetEvictionPriority(

                   UINT *pEvictionPriority) = 0;

    };
# 743 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const IID IID_IDXGIKeyedMutex;



    struct __declspec(uuid("9d8e1289-d7b3-465f-8126-250e349af85d")) __declspec(novtable)
    IDXGIKeyedMutex : public IDXGIDeviceSubObject
    {
    public:
        virtual HRESULT __stdcall AcquireSync(
                       UINT64 Key,
                       DWORD dwMilliseconds) = 0;

        virtual HRESULT __stdcall ReleaseSync(
                       UINT64 Key) = 0;

    };
# 894 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0004_v0_0_s_ifspec;
# 904 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const IID IID_IDXGISurface;



    struct __declspec(uuid("cafcb56c-6ac3-4889-bf47-9e23bbd260ec")) __declspec(novtable)
    IDXGISurface : public IDXGIDeviceSubObject
    {
    public:
        virtual HRESULT __stdcall GetDesc(

                   DXGI_SURFACE_DESC *pDesc) = 0;

        virtual HRESULT __stdcall Map(

                   DXGI_MAPPED_RECT *pLockedRect,
                       UINT MapFlags) = 0;

        virtual HRESULT __stdcall Unmap( void) = 0;

    };
# 1063 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const IID IID_IDXGISurface1;



    struct __declspec(uuid("4AE63092-6327-4c1b-80AE-BFE12EA32B86")) __declspec(novtable)
    IDXGISurface1 : public IDXGISurface
    {
    public:
        virtual HRESULT __stdcall GetDC(
                       BOOL Discard,

                   HDC *phdc) = 0;

        virtual HRESULT __stdcall ReleaseDC(

                      RECT *pDirtyRect) = 0;

    };
# 1237 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0006_v0_0_s_ifspec;
# 1247 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const IID IID_IDXGIAdapter;



    struct __declspec(uuid("2411e7e1-12ac-4ccf-bd14-9798e8534dc0")) __declspec(novtable)
    IDXGIAdapter : public IDXGIObject
    {
    public:
        virtual HRESULT __stdcall EnumOutputs(
                       UINT Output,

                   IDXGIOutput **ppOutput) = 0;

        virtual HRESULT __stdcall GetDesc(

                   DXGI_ADAPTER_DESC *pDesc) = 0;

        virtual HRESULT __stdcall CheckInterfaceSupport(

                  const GUID & InterfaceName,

                   LARGE_INTEGER *pUMDVersion) = 0;

    };
# 1405 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0007_v0_0_s_ifspec;
# 1415 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const IID IID_IDXGIOutput;



    struct __declspec(uuid("ae02eedb-c735-4690-8d52-5a8dc20213aa")) __declspec(novtable)
    IDXGIOutput : public IDXGIObject
    {
    public:
        virtual HRESULT __stdcall GetDesc(

                   DXGI_OUTPUT_DESC *pDesc) = 0;

        virtual HRESULT __stdcall GetDisplayModeList(
                       DXGI_FORMAT EnumFormat,
                       UINT Flags,

                     UINT *pNumModes,

                                                        DXGI_MODE_DESC *pDesc) = 0;

        virtual HRESULT __stdcall FindClosestMatchingMode(

                  const DXGI_MODE_DESC *pModeToMatch,

                   DXGI_MODE_DESC *pClosestMatch,

                      IUnknown *pConcernedDevice) = 0;

        virtual HRESULT __stdcall WaitForVBlank( void) = 0;

        virtual HRESULT __stdcall TakeOwnership(

                  IUnknown *pDevice,
            BOOL Exclusive) = 0;

        virtual void __stdcall ReleaseOwnership( void) = 0;

        virtual HRESULT __stdcall GetGammaControlCapabilities(

                   DXGI_GAMMA_CONTROL_CAPABILITIES *pGammaCaps) = 0;

        virtual HRESULT __stdcall SetGammaControl(

                  const DXGI_GAMMA_CONTROL *pArray) = 0;

        virtual HRESULT __stdcall GetGammaControl(

                   DXGI_GAMMA_CONTROL *pArray) = 0;

        virtual HRESULT __stdcall SetDisplaySurface(

                  IDXGISurface *pScanoutSurface) = 0;

        virtual HRESULT __stdcall GetDisplaySurfaceData(

                  IDXGISurface *pDestination) = 0;

        virtual HRESULT __stdcall GetFrameStatistics(

                   DXGI_FRAME_STATISTICS *pStats) = 0;

    };
# 1690 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0008_v0_0_s_ifspec;
# 1700 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const IID IID_IDXGISwapChain;



    struct __declspec(uuid("310d36a0-d2e7-4c0a-aa04-6a9d23b8886a")) __declspec(novtable)
    IDXGISwapChain : public IDXGIDeviceSubObject
    {
    public:
        virtual HRESULT __stdcall Present(
                       UINT SyncInterval,
                       UINT Flags) = 0;

        virtual HRESULT __stdcall GetBuffer(
                       UINT Buffer,

                  const IID & riid,

                   void **ppSurface) = 0;

        virtual HRESULT __stdcall SetFullscreenState(
                       BOOL Fullscreen,

                      IDXGIOutput *pTarget) = 0;

        virtual HRESULT __stdcall GetFullscreenState(

                       BOOL *pFullscreen,

                       IDXGIOutput **ppTarget) = 0;

        virtual HRESULT __stdcall GetDesc(

                   DXGI_SWAP_CHAIN_DESC *pDesc) = 0;

        virtual HRESULT __stdcall ResizeBuffers(
                       UINT BufferCount,
                       UINT Width,
                       UINT Height,
                       DXGI_FORMAT NewFormat,
                       UINT SwapChainFlags) = 0;

        virtual HRESULT __stdcall ResizeTarget(

                  const DXGI_MODE_DESC *pNewTargetParameters) = 0;

        virtual HRESULT __stdcall GetContainingOutput(

                   IDXGIOutput **ppOutput) = 0;

        virtual HRESULT __stdcall GetFrameStatistics(

                   DXGI_FRAME_STATISTICS *pStats) = 0;

        virtual HRESULT __stdcall GetLastPresentCount(

                   UINT *pLastPresentCount) = 0;

    };
# 1965 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0009_v0_0_s_ifspec;
# 1975 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const IID IID_IDXGIFactory;



    struct __declspec(uuid("7b7166ec-21c7-44ae-b21a-c9ae321ae369")) __declspec(novtable)
    IDXGIFactory : public IDXGIObject
    {
    public:
        virtual HRESULT __stdcall EnumAdapters(
                       UINT Adapter,

                   IDXGIAdapter **ppAdapter) = 0;

        virtual HRESULT __stdcall MakeWindowAssociation(
            HWND WindowHandle,
            UINT Flags) = 0;

        virtual HRESULT __stdcall GetWindowAssociation(

                   HWND *pWindowHandle) = 0;

        virtual HRESULT __stdcall CreateSwapChain(

                  IUnknown *pDevice,

                  DXGI_SWAP_CHAIN_DESC *pDesc,

                   IDXGISwapChain **ppSwapChain) = 0;

        virtual HRESULT __stdcall CreateSoftwareAdapter(
                       HMODULE Module,

                   IDXGIAdapter **ppAdapter) = 0;

    };
# 2159 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
HRESULT __stdcall CreateDXGIFactory(const IID & riid, void **ppFactory);


HRESULT __stdcall CreateDXGIFactory1(const IID & riid, void **ppFactory);


extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0010_v0_0_s_ifspec;
# 2175 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const IID IID_IDXGIDevice;



    struct __declspec(uuid("54ec77fa-1377-44e6-8c32-88fd5f44c84c")) __declspec(novtable)
    IDXGIDevice : public IDXGIObject
    {
    public:
        virtual HRESULT __stdcall GetAdapter(

                   IDXGIAdapter **pAdapter) = 0;

        virtual HRESULT __stdcall CreateSurface(

                  const DXGI_SURFACE_DESC *pDesc,
                       UINT NumSurfaces,
                       DXGI_USAGE Usage,

                      const DXGI_SHARED_RESOURCE *pSharedResource,

                   IDXGISurface **ppSurface) = 0;

        virtual HRESULT __stdcall QueryResourceResidency(

                                      IUnknown *const *ppResources,

                                        DXGI_RESIDENCY *pResidencyStatus,
                       UINT NumResources) = 0;

        virtual HRESULT __stdcall SetGPUThreadPriority(
                       INT Priority) = 0;

        virtual HRESULT __stdcall GetGPUThreadPriority(

                   INT *pPriority) = 0;

    };
# 2361 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
typedef
enum DXGI_ADAPTER_FLAG
    {
        DXGI_ADAPTER_FLAG_NONE = 0,
        DXGI_ADAPTER_FLAG_REMOTE = 1,
        DXGI_ADAPTER_FLAG_SOFTWARE = 2,
        DXGI_ADAPTER_FLAG_FORCE_DWORD = 0xffffffff
    } DXGI_ADAPTER_FLAG;

typedef struct DXGI_ADAPTER_DESC1
    {
    WCHAR Description[ 128 ];
    UINT VendorId;
    UINT DeviceId;
    UINT SubSysId;
    UINT Revision;
    SIZE_T DedicatedVideoMemory;
    SIZE_T DedicatedSystemMemory;
    SIZE_T SharedSystemMemory;
    LUID AdapterLuid;
    UINT Flags;
    } DXGI_ADAPTER_DESC1;

typedef struct DXGI_DISPLAY_COLOR_SPACE
    {
    FLOAT PrimaryCoordinates[ 8 ][ 2 ];
    FLOAT WhitePoints[ 16 ][ 2 ];
    } DXGI_DISPLAY_COLOR_SPACE;




extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0011_v0_0_s_ifspec;
# 2403 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const IID IID_IDXGIFactory1;



    struct __declspec(uuid("770aae78-f26f-4dba-a829-253c83d1b387")) __declspec(novtable)
    IDXGIFactory1 : public IDXGIFactory
    {
    public:
        virtual HRESULT __stdcall EnumAdapters1(
                       UINT Adapter,

                   IDXGIAdapter1 **ppAdapter) = 0;

        virtual BOOL __stdcall IsCurrent( void) = 0;

    };
# 2586 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const IID IID_IDXGIAdapter1;



    struct __declspec(uuid("29038f61-3839-4626-91fd-086879011a05")) __declspec(novtable)
    IDXGIAdapter1 : public IDXGIAdapter
    {
    public:
        virtual HRESULT __stdcall GetDesc1(

                   DXGI_ADAPTER_DESC1 *pDesc) = 0;

    };
# 2740 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const IID IID_IDXGIDevice1;



    struct __declspec(uuid("77db970f-6276-48ba-ba28-070143b4392c")) __declspec(novtable)
    IDXGIDevice1 : public IDXGIDevice
    {
    public:
        virtual HRESULT __stdcall SetMaximumFrameLatency(
                       UINT MaxLatency) = 0;

        virtual HRESULT __stdcall GetMaximumFrameLatency(

                   UINT *pMaxLatency) = 0;

    };
# 2923 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi.h"
extern "C" const GUID IID_IDXGIObject;
extern "C" const GUID IID_IDXGIDeviceSubObject;
extern "C" const GUID IID_IDXGIResource;
extern "C" const GUID IID_IDXGIKeyedMutex;
extern "C" const GUID IID_IDXGISurface;
extern "C" const GUID IID_IDXGISurface1;
extern "C" const GUID IID_IDXGIAdapter;
extern "C" const GUID IID_IDXGIOutput;
extern "C" const GUID IID_IDXGISwapChain;
extern "C" const GUID IID_IDXGIFactory;
extern "C" const GUID IID_IDXGIDevice;
extern "C" const GUID IID_IDXGIFactory1;
extern "C" const GUID IID_IDXGIAdapter1;
extern "C" const GUID IID_IDXGIDevice1;


extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0014_v0_0_s_ifspec;






}
# 107 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h" 2



extern "C"{
# 122 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
extern RPC_IF_HANDLE __MIDL_itf_dxgi1_2_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi1_2_0000_0000_v0_0_s_ifspec;
# 132 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
extern "C" const IID IID_IDXGIDisplayControl;



    struct __declspec(uuid("ea9dbf1a-c88e-4486-854a-98aa0138f30c")) __declspec(novtable)
    IDXGIDisplayControl : public IUnknown
    {
    public:
        virtual BOOL __stdcall IsStereoEnabled( void) = 0;

        virtual void __stdcall SetStereoEnabled(
            BOOL enabled) = 0;

    };
# 216 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
typedef struct DXGI_OUTDUPL_MOVE_RECT
    {
    POINT SourcePoint;
    RECT DestinationRect;
    } DXGI_OUTDUPL_MOVE_RECT;

typedef struct DXGI_OUTDUPL_DESC
    {
    DXGI_MODE_DESC ModeDesc;
    DXGI_MODE_ROTATION Rotation;
    BOOL DesktopImageInSystemMemory;
    } DXGI_OUTDUPL_DESC;

typedef struct DXGI_OUTDUPL_POINTER_POSITION
    {
    POINT Position;
    BOOL Visible;
    } DXGI_OUTDUPL_POINTER_POSITION;

typedef
enum DXGI_OUTDUPL_POINTER_SHAPE_TYPE
    {
        DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME = 0x1,
        DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR = 0x2,
        DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR = 0x4
    } DXGI_OUTDUPL_POINTER_SHAPE_TYPE;

typedef struct DXGI_OUTDUPL_POINTER_SHAPE_INFO
    {
    UINT Type;
    UINT Width;
    UINT Height;
    UINT Pitch;
    POINT HotSpot;
    } DXGI_OUTDUPL_POINTER_SHAPE_INFO;

typedef struct DXGI_OUTDUPL_FRAME_INFO
    {
    LARGE_INTEGER LastPresentTime;
    LARGE_INTEGER LastMouseUpdateTime;
    UINT AccumulatedFrames;
    BOOL RectsCoalesced;
    BOOL ProtectedContentMaskedOut;
    DXGI_OUTDUPL_POINTER_POSITION PointerPosition;
    UINT TotalMetadataBufferSize;
    UINT PointerShapeBufferSize;
    } DXGI_OUTDUPL_FRAME_INFO;



extern RPC_IF_HANDLE __MIDL_itf_dxgi1_2_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi1_2_0000_0001_v0_0_s_ifspec;
# 276 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
extern "C" const IID IID_IDXGIOutputDuplication;



    struct __declspec(uuid("191cfac3-a341-470d-b26e-a864f428319c")) __declspec(novtable)
    IDXGIOutputDuplication : public IDXGIObject
    {
    public:
        virtual void __stdcall GetDesc(

                   DXGI_OUTDUPL_DESC *pDesc) = 0;

        virtual HRESULT __stdcall AcquireNextFrame(

                  UINT TimeoutInMilliseconds,

                   DXGI_OUTDUPL_FRAME_INFO *pFrameInfo,

                   IDXGIResource **ppDesktopResource) = 0;

        virtual HRESULT __stdcall GetFrameDirtyRects(

                  UINT DirtyRectsBufferSize,

                                                                                         RECT *pDirtyRectsBuffer,

                   UINT *pDirtyRectsBufferSizeRequired) = 0;

        virtual HRESULT __stdcall GetFrameMoveRects(

                  UINT MoveRectsBufferSize,

                                                                                       DXGI_OUTDUPL_MOVE_RECT *pMoveRectBuffer,

                   UINT *pMoveRectsBufferSizeRequired) = 0;

        virtual HRESULT __stdcall GetFramePointerShape(

                  UINT PointerShapeBufferSize,

                                                                                             void *pPointerShapeBuffer,

                   UINT *pPointerShapeBufferSizeRequired,

                   DXGI_OUTDUPL_POINTER_SHAPE_INFO *pPointerShapeInfo) = 0;

        virtual HRESULT __stdcall MapDesktopSurface(

                   DXGI_MAPPED_RECT *pLockedRect) = 0;

        virtual HRESULT __stdcall UnMapDesktopSurface( void) = 0;

        virtual HRESULT __stdcall ReleaseFrame( void) = 0;

    };
# 514 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
typedef
enum DXGI_ALPHA_MODE
    {
        DXGI_ALPHA_MODE_UNSPECIFIED = 0,
        DXGI_ALPHA_MODE_PREMULTIPLIED = 1,
        DXGI_ALPHA_MODE_STRAIGHT = 2,
        DXGI_ALPHA_MODE_IGNORE = 3,
        DXGI_ALPHA_MODE_FORCE_DWORD = 0xffffffff
    } DXGI_ALPHA_MODE;



extern RPC_IF_HANDLE __MIDL_itf_dxgi1_2_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi1_2_0000_0002_v0_0_s_ifspec;
# 536 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
extern "C" const IID IID_IDXGISurface2;



    struct __declspec(uuid("aba496dd-b617-4cb8-a866-bc44d7eb1fa2")) __declspec(novtable)
    IDXGISurface2 : public IDXGISurface1
    {
    public:
        virtual HRESULT __stdcall GetResource(

                  const IID & riid,

                   void **ppParentResource,

                   UINT *pSubresourceIndex) = 0;

    };
# 723 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
extern "C" const IID IID_IDXGIResource1;



    struct __declspec(uuid("30961379-4609-4a41-998e-54fe567ee0c1")) __declspec(novtable)
    IDXGIResource1 : public IDXGIResource
    {
    public:
        virtual HRESULT __stdcall CreateSubresourceSurface(
            UINT index,

                   IDXGISurface2 **ppSurface) = 0;

        virtual HRESULT __stdcall CreateSharedHandle(

                      const SECURITY_ATTRIBUTES *pAttributes,

                  DWORD dwAccess,

                      LPCWSTR lpName,

                   HANDLE *pHandle) = 0;

    };
# 914 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
typedef
enum _DXGI_OFFER_RESOURCE_PRIORITY
    {
        DXGI_OFFER_RESOURCE_PRIORITY_LOW = 1,
        DXGI_OFFER_RESOURCE_PRIORITY_NORMAL = ( DXGI_OFFER_RESOURCE_PRIORITY_LOW + 1 ) ,
        DXGI_OFFER_RESOURCE_PRIORITY_HIGH = ( DXGI_OFFER_RESOURCE_PRIORITY_NORMAL + 1 )
    } DXGI_OFFER_RESOURCE_PRIORITY;



extern RPC_IF_HANDLE __MIDL_itf_dxgi1_2_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi1_2_0000_0004_v0_0_s_ifspec;
# 934 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
extern "C" const IID IID_IDXGIDevice2;



    struct __declspec(uuid("05008617-fbfd-4051-a790-144884b4f6a9")) __declspec(novtable)
    IDXGIDevice2 : public IDXGIDevice1
    {
    public:
        virtual HRESULT __stdcall OfferResources(

                  UINT NumResources,

                                      IDXGIResource *const *ppResources,

                  DXGI_OFFER_RESOURCE_PRIORITY Priority) = 0;

        virtual HRESULT __stdcall ReclaimResources(

                  UINT NumResources,

                                      IDXGIResource *const *ppResources,

                                                BOOL *pDiscarded) = 0;

        virtual HRESULT __stdcall EnqueueSetEvent(

                  HANDLE hEvent) = 0;

    };
# 1169 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
typedef struct DXGI_MODE_DESC1
    {
    UINT Width;
    UINT Height;
    DXGI_RATIONAL RefreshRate;
    DXGI_FORMAT Format;
    DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
    DXGI_MODE_SCALING Scaling;
    BOOL Stereo;
    } DXGI_MODE_DESC1;

typedef
enum DXGI_SCALING
    {
        DXGI_SCALING_STRETCH = 0,
        DXGI_SCALING_NONE = 1,
        DXGI_SCALING_ASPECT_RATIO_STRETCH = 2
    } DXGI_SCALING;

typedef struct DXGI_SWAP_CHAIN_DESC1
    {
    UINT Width;
    UINT Height;
    DXGI_FORMAT Format;
    BOOL Stereo;
    DXGI_SAMPLE_DESC SampleDesc;
    DXGI_USAGE BufferUsage;
    UINT BufferCount;
    DXGI_SCALING Scaling;
    DXGI_SWAP_EFFECT SwapEffect;
    DXGI_ALPHA_MODE AlphaMode;
    UINT Flags;
    } DXGI_SWAP_CHAIN_DESC1;

typedef struct DXGI_SWAP_CHAIN_FULLSCREEN_DESC
    {
    DXGI_RATIONAL RefreshRate;
    DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
    DXGI_MODE_SCALING Scaling;
    BOOL Windowed;
    } DXGI_SWAP_CHAIN_FULLSCREEN_DESC;

typedef struct DXGI_PRESENT_PARAMETERS
    {
    UINT DirtyRectsCount;
    RECT *pDirtyRects;
    RECT *pScrollRect;
    POINT *pScrollOffset;
    } DXGI_PRESENT_PARAMETERS;



extern RPC_IF_HANDLE __MIDL_itf_dxgi1_2_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi1_2_0000_0005_v0_0_s_ifspec;
# 1231 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
extern "C" const IID IID_IDXGISwapChain1;



    struct __declspec(uuid("790a45f7-0d42-4876-983a-0a55cfe6f4aa")) __declspec(novtable)
    IDXGISwapChain1 : public IDXGISwapChain
    {
    public:
        virtual HRESULT __stdcall GetDesc1(

                   DXGI_SWAP_CHAIN_DESC1 *pDesc) = 0;

        virtual HRESULT __stdcall GetFullscreenDesc(

                   DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pDesc) = 0;

        virtual HRESULT __stdcall GetHwnd(

                   HWND *pHwnd) = 0;

        virtual HRESULT __stdcall GetCoreWindow(

                  const IID & refiid,

                   void **ppUnk) = 0;

        virtual HRESULT __stdcall Present1(
                       UINT SyncInterval,
                       UINT PresentFlags,

                  const DXGI_PRESENT_PARAMETERS *pPresentParameters) = 0;

        virtual BOOL __stdcall IsTemporaryMonoSupported( void) = 0;

        virtual HRESULT __stdcall GetRestrictToOutput(

                   IDXGIOutput **ppRestrictToOutput) = 0;

        virtual HRESULT __stdcall SetBackgroundColor(

                  const DXGI_RGBA *pColor) = 0;

        virtual HRESULT __stdcall GetBackgroundColor(

                   DXGI_RGBA *pColor) = 0;

        virtual HRESULT __stdcall SetRotation(

                  DXGI_MODE_ROTATION Rotation) = 0;

        virtual HRESULT __stdcall GetRotation(

                   DXGI_MODE_ROTATION *pRotation) = 0;

    };
# 1582 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
extern "C" const IID IID_IDXGIFactory2;



    struct __declspec(uuid("50c83a1c-e072-4c48-87b0-3630fa36a6d0")) __declspec(novtable)
    IDXGIFactory2 : public IDXGIFactory1
    {
    public:
        virtual BOOL __stdcall IsWindowedStereoEnabled( void) = 0;

        virtual HRESULT __stdcall CreateSwapChainForHwnd(

                  IUnknown *pDevice,

                  HWND hWnd,

                  const DXGI_SWAP_CHAIN_DESC1 *pDesc,

                      const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pFullscreenDesc,

                      IDXGIOutput *pRestrictToOutput,

                   IDXGISwapChain1 **ppSwapChain) = 0;

        virtual HRESULT __stdcall CreateSwapChainForCoreWindow(

                  IUnknown *pDevice,

                  IUnknown *pWindow,

                  const DXGI_SWAP_CHAIN_DESC1 *pDesc,

                      IDXGIOutput *pRestrictToOutput,

                   IDXGISwapChain1 **ppSwapChain) = 0;

        virtual HRESULT __stdcall GetSharedResourceAdapterLuid(

                  HANDLE hResource,

                   LUID *pLuid) = 0;

        virtual HRESULT __stdcall RegisterStereoStatusWindow(

                  HWND WindowHandle,

                  UINT wMsg,

                   DWORD *pdwCookie) = 0;

        virtual HRESULT __stdcall RegisterStereoStatusEvent(

                  HANDLE hEvent,

                   DWORD *pdwCookie) = 0;

        virtual void __stdcall UnregisterStereoStatus(

                  DWORD dwCookie) = 0;

        virtual HRESULT __stdcall RegisterOcclusionStatusWindow(

                  HWND WindowHandle,

                  UINT wMsg,

                   DWORD *pdwCookie) = 0;

        virtual HRESULT __stdcall RegisterOcclusionStatusEvent(

                  HANDLE hEvent,

                   DWORD *pdwCookie) = 0;

        virtual void __stdcall UnregisterOcclusionStatus(

                  DWORD dwCookie) = 0;

        virtual HRESULT __stdcall CreateSwapChainForComposition(

                  IUnknown *pDevice,

                  const DXGI_SWAP_CHAIN_DESC1 *pDesc,

                      IDXGIOutput *pRestrictToOutput,

                      IDXGISwapChain1 **ppSwapChain) = 0;

    };
# 1959 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
typedef
enum DXGI_GRAPHICS_PREEMPTION_GRANULARITY
    {
        DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY = 0,
        DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY = 1,
        DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY = 2,
        DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY = 3,
        DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY = 4
    } DXGI_GRAPHICS_PREEMPTION_GRANULARITY;

typedef
enum DXGI_COMPUTE_PREEMPTION_GRANULARITY
    {
        DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY = 0,
        DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY = 1,
        DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY = 2,
        DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY = 3,
        DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY = 4
    } DXGI_COMPUTE_PREEMPTION_GRANULARITY;

typedef struct DXGI_ADAPTER_DESC2
    {
    WCHAR Description[ 128 ];
    UINT VendorId;
    UINT DeviceId;
    UINT SubSysId;
    UINT Revision;
    SIZE_T DedicatedVideoMemory;
    SIZE_T DedicatedSystemMemory;
    SIZE_T SharedSystemMemory;
    LUID AdapterLuid;
    UINT Flags;
    DXGI_GRAPHICS_PREEMPTION_GRANULARITY GraphicsPreemptionGranularity;
    DXGI_COMPUTE_PREEMPTION_GRANULARITY ComputePreemptionGranularity;
    } DXGI_ADAPTER_DESC2;



extern RPC_IF_HANDLE __MIDL_itf_dxgi1_2_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi1_2_0000_0007_v0_0_s_ifspec;
# 2007 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
extern "C" const IID IID_IDXGIAdapter2;



    struct __declspec(uuid("0AA1AE0A-FA0E-4B84-8644-E05FF8E5ACB5")) __declspec(novtable)
    IDXGIAdapter2 : public IDXGIAdapter1
    {
    public:
        virtual HRESULT __stdcall GetDesc2(

                   DXGI_ADAPTER_DESC2 *pDesc) = 0;

    };
# 2170 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
extern "C" const IID IID_IDXGIOutput1;



    struct __declspec(uuid("00cddea8-939b-4b83-a340-a685226666cc")) __declspec(novtable)
    IDXGIOutput1 : public IDXGIOutput
    {
    public:
        virtual HRESULT __stdcall GetDisplayModeList1(
                       DXGI_FORMAT EnumFormat,
                       UINT Flags,

                     UINT *pNumModes,

                                                        DXGI_MODE_DESC1 *pDesc) = 0;

        virtual HRESULT __stdcall FindClosestMatchingMode1(

                  const DXGI_MODE_DESC1 *pModeToMatch,

                   DXGI_MODE_DESC1 *pClosestMatch,

                      IUnknown *pConcernedDevice) = 0;

        virtual HRESULT __stdcall GetDisplaySurfaceData1(

                  IDXGIResource *pDestination) = 0;

        virtual HRESULT __stdcall DuplicateOutput(

                  IUnknown *pDevice,

                   IDXGIOutputDuplication **ppOutputDuplication) = 0;

    };
# 2452 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared/dxgi1_2.h"
extern "C" const GUID IID_IDXGIDisplayControl;
extern "C" const GUID IID_IDXGIOutputDuplication;
extern "C" const GUID IID_IDXGISurface2;
extern "C" const GUID IID_IDXGIResource1;
extern "C" const GUID IID_IDXGIDevice2;
extern "C" const GUID IID_IDXGISwapChain1;
extern "C" const GUID IID_IDXGIFactory2;
extern "C" const GUID IID_IDXGIAdapter2;
extern "C" const GUID IID_IDXGIOutput1;


extern RPC_IF_HANDLE __MIDL_itf_dxgi1_2_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi1_2_0000_0009_v0_0_s_ifspec;






}
# 100 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h" 2



extern "C"{
# 114 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
HRESULT __stdcall CreateDXGIFactory2(UINT Flags, const IID & riid, void **ppFactory);
HRESULT __stdcall DXGIGetDebugInterface1(UINT Flags, const IID & riid, void **pDebug);


extern RPC_IF_HANDLE __MIDL_itf_dxgi1_3_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi1_3_0000_0000_v0_0_s_ifspec;
# 128 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
extern "C" const IID IID_IDXGIDevice3;



    struct __declspec(uuid("6007896c-3244-4afd-bf18-a6d3beda5023")) __declspec(novtable)
    IDXGIDevice3 : public IDXGIDevice2
    {
    public:
        virtual void __stdcall Trim( void) = 0;

    };
# 344 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
typedef struct DXGI_MATRIX_3X2_F
    {
    FLOAT _11;
    FLOAT _12;
    FLOAT _21;
    FLOAT _22;
    FLOAT _31;
    FLOAT _32;
    } DXGI_MATRIX_3X2_F;



extern RPC_IF_HANDLE __MIDL_itf_dxgi1_3_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi1_3_0000_0001_v0_0_s_ifspec;
# 366 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
extern "C" const IID IID_IDXGISwapChain2;



    struct __declspec(uuid("a8be2ac4-199f-4946-b331-79599fb98de7")) __declspec(novtable)
    IDXGISwapChain2 : public IDXGISwapChain1
    {
    public:
        virtual HRESULT __stdcall SetSourceSize(
            UINT Width,
            UINT Height) = 0;

        virtual HRESULT __stdcall GetSourceSize(

                   UINT *pWidth,

                   UINT *pHeight) = 0;

        virtual HRESULT __stdcall SetMaximumFrameLatency(
            UINT MaxLatency) = 0;

        virtual HRESULT __stdcall GetMaximumFrameLatency(

                   UINT *pMaxLatency) = 0;

        virtual HANDLE __stdcall GetFrameLatencyWaitableObject( void) = 0;

        virtual HRESULT __stdcall SetMatrixTransform(
            const DXGI_MATRIX_3X2_F *pMatrix) = 0;

        virtual HRESULT __stdcall GetMatrixTransform(

                   DXGI_MATRIX_3X2_F *pMatrix) = 0;

    };
# 752 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
extern "C" const IID IID_IDXGIOutput2;



    struct __declspec(uuid("595e39d1-2724-4663-99b1-da969de28364")) __declspec(novtable)
    IDXGIOutput2 : public IDXGIOutput1
    {
    public:
        virtual BOOL __stdcall SupportsOverlays( void) = 0;

    };
# 1019 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
extern "C" const IID IID_IDXGIFactory3;



    struct __declspec(uuid("25483823-cd46-4c7d-86ca-47aa95b837bd")) __declspec(novtable)
    IDXGIFactory3 : public IDXGIFactory2
    {
    public:
        virtual UINT __stdcall GetCreationFlags( void) = 0;

    };
# 1329 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
typedef struct DXGI_DECODE_SWAP_CHAIN_DESC
    {
    UINT Flags;
    } DXGI_DECODE_SWAP_CHAIN_DESC;

typedef
enum DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS
    {
        DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE = 0x1,
        DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709 = 0x2,
        DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC = 0x4
    } DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS;



extern RPC_IF_HANDLE __MIDL_itf_dxgi1_3_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi1_3_0000_0004_v0_0_s_ifspec;
# 1354 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
extern "C" const IID IID_IDXGIDecodeSwapChain;



    struct __declspec(uuid("2633066b-4514-4c7a-8fd8-12ea98059d18")) __declspec(novtable)
    IDXGIDecodeSwapChain : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PresentBuffer(
            UINT BufferToPresent,
            UINT SyncInterval,
            UINT Flags) = 0;

        virtual HRESULT __stdcall SetSourceRect(
            const RECT *pRect) = 0;

        virtual HRESULT __stdcall SetTargetRect(
            const RECT *pRect) = 0;

        virtual HRESULT __stdcall SetDestSize(
            UINT Width,
            UINT Height) = 0;

        virtual HRESULT __stdcall GetSourceRect(

                   RECT *pRect) = 0;

        virtual HRESULT __stdcall GetTargetRect(

                   RECT *pRect) = 0;

        virtual HRESULT __stdcall GetDestSize(

                   UINT *pWidth,

                   UINT *pHeight) = 0;

        virtual HRESULT __stdcall SetColorSpace(
            DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS ColorSpace) = 0;

        virtual DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS __stdcall GetColorSpace( void) = 0;

    };
# 1528 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
extern "C" const IID IID_IDXGIFactoryMedia;



    struct __declspec(uuid("41e7d1f2-a591-4f7b-a2e5-fa9c843e1c12")) __declspec(novtable)
    IDXGIFactoryMedia : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateSwapChainForCompositionSurfaceHandle(

                  IUnknown *pDevice,

                      HANDLE hSurface,

                  const DXGI_SWAP_CHAIN_DESC1 *pDesc,

                      IDXGIOutput *pRestrictToOutput,

                   IDXGISwapChain1 **ppSwapChain) = 0;

        virtual HRESULT __stdcall CreateDecodeSwapChainForCompositionSurfaceHandle(
            IUnknown *pDevice,
            HANDLE hSurface,
            DXGI_DECODE_SWAP_CHAIN_DESC *pDesc,
            IDXGIResource *pYuvDecodeBuffers,
            IDXGIOutput *pRestrictToOutput,

                   IDXGIDecodeSwapChain **ppSwapChain) = 0;

    };
# 1644 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
typedef
enum DXGI_FRAME_PRESENTATION_MODE
    {
        DXGI_FRAME_PRESENTATION_MODE_COMPOSED = 0,
        DXGI_FRAME_PRESENTATION_MODE_OVERLAY = 1,
        DXGI_FRAME_PRESENTATION_MODE_NONE = 2
    } DXGI_FRAME_PRESENTATION_MODE;

typedef struct DXGI_FRAME_STATISTICS_MEDIA
    {
    UINT PresentCount;
    UINT PresentRefreshCount;
    UINT SyncRefreshCount;
    LARGE_INTEGER SyncQPCTime;
    LARGE_INTEGER SyncGPUTime;
    DXGI_FRAME_PRESENTATION_MODE CompositionMode;
    UINT ApprovedPresentDuration;
    } DXGI_FRAME_STATISTICS_MEDIA;



extern RPC_IF_HANDLE __MIDL_itf_dxgi1_3_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi1_3_0000_0006_v0_0_s_ifspec;
# 1675 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
extern "C" const IID IID_IDXGISwapChainMedia;



    struct __declspec(uuid("dd95b90b-f05f-4f6a-bd65-25bfb264bd84")) __declspec(novtable)
    IDXGISwapChainMedia : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetFrameStatisticsMedia(

                   DXGI_FRAME_STATISTICS_MEDIA *pStats) = 0;

        virtual HRESULT __stdcall SetPresentDuration(
            UINT Duration) = 0;

        virtual HRESULT __stdcall CheckPresentDurationSupport(
            UINT DesiredPresentDuration,

                   UINT *pClosestSmallerPresentDuration,

                   UINT *pClosestLargerPresentDuration) = 0;

    };
# 1781 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
typedef
enum DXGI_OVERLAY_SUPPORT_FLAG
    {
        DXGI_OVERLAY_SUPPORT_FLAG_DIRECT = 0x1,
        DXGI_OVERLAY_SUPPORT_FLAG_SCALING = 0x2
    } DXGI_OVERLAY_SUPPORT_FLAG;



extern RPC_IF_HANDLE __MIDL_itf_dxgi1_3_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi1_3_0000_0007_v0_0_s_ifspec;
# 1800 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
extern "C" const IID IID_IDXGIOutput3;



    struct __declspec(uuid("8a6bb301-7e7e-41F4-a8e0-5b32f7f99b18")) __declspec(novtable)
    IDXGIOutput3 : public IDXGIOutput2
    {
    public:
        virtual HRESULT __stdcall CheckOverlaySupport(

                  DXGI_FORMAT EnumFormat,

                  IUnknown *pConcernedDevice,

                   UINT *pFlags) = 0;

    };
# 2084 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\dxgi1_3.h"
extern "C" const GUID IID_IDXGIDevice3;
extern "C" const GUID IID_IDXGISwapChain2;
extern "C" const GUID IID_IDXGIOutput2;
extern "C" const GUID IID_IDXGIFactory3;
extern "C" const GUID IID_IDXGIDecodeSwapChain;
extern "C" const GUID IID_IDXGIFactoryMedia;
extern "C" const GUID IID_IDXGISwapChainMedia;
extern "C" const GUID IID_IDXGIOutput3;


extern RPC_IF_HANDLE __MIDL_itf_dxgi1_3_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi1_3_0000_0008_v0_0_s_ifspec;






}
# 65 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3d11_2.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3dcommon.h" 1








#pragma warning(disable: 4049)
# 45 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3dcommon.h"
typedef struct ID3D10Blob ID3D10Blob;
# 55 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3dcommon.h"
extern "C"{






typedef
enum D3D_DRIVER_TYPE
    {
        D3D_DRIVER_TYPE_UNKNOWN = 0,
        D3D_DRIVER_TYPE_HARDWARE = ( D3D_DRIVER_TYPE_UNKNOWN + 1 ) ,
        D3D_DRIVER_TYPE_REFERENCE = ( D3D_DRIVER_TYPE_HARDWARE + 1 ) ,
        D3D_DRIVER_TYPE_NULL = ( D3D_DRIVER_TYPE_REFERENCE + 1 ) ,
        D3D_DRIVER_TYPE_SOFTWARE = ( D3D_DRIVER_TYPE_NULL + 1 ) ,
        D3D_DRIVER_TYPE_WARP = ( D3D_DRIVER_TYPE_SOFTWARE + 1 )
    } D3D_DRIVER_TYPE;

typedef
enum D3D_FEATURE_LEVEL
    {
        D3D_FEATURE_LEVEL_9_1 = 0x9100,
        D3D_FEATURE_LEVEL_9_2 = 0x9200,
        D3D_FEATURE_LEVEL_9_3 = 0x9300,
        D3D_FEATURE_LEVEL_10_0 = 0xa000,
        D3D_FEATURE_LEVEL_10_1 = 0xa100,
        D3D_FEATURE_LEVEL_11_0 = 0xb000,
        D3D_FEATURE_LEVEL_11_1 = 0xb100
    } D3D_FEATURE_LEVEL;
# 100 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3dcommon.h"
typedef
enum D3D_PRIMITIVE_TOPOLOGY
    {
        D3D_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
        D3D_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
        D3D_PRIMITIVE_TOPOLOGY_LINELIST = 2,
        D3D_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
        D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
        D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
        D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
        D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
        D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
        D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
        D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
        D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
        D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
        D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
        D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
        D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
        D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
        D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
        D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
        D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
        D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
        D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
        D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
        D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
        D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
        D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
        D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
        D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
        D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
        D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
        D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
        D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
        D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
        D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
        D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
        D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
        D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
        D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
        D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
        D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
        D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
        D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64,
        D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED = D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
        D3D10_PRIMITIVE_TOPOLOGY_POINTLIST = D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
        D3D10_PRIMITIVE_TOPOLOGY_LINELIST = D3D_PRIMITIVE_TOPOLOGY_LINELIST,
        D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP = D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
        D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST = D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
        D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
        D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
        D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
        D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
        D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
        D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED = D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
        D3D11_PRIMITIVE_TOPOLOGY_POINTLIST = D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
        D3D11_PRIMITIVE_TOPOLOGY_LINELIST = D3D_PRIMITIVE_TOPOLOGY_LINELIST,
        D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP = D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
        D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST = D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
        D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
        D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
        D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
        D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
        D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
        D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
        D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST
    } D3D_PRIMITIVE_TOPOLOGY;

typedef
enum D3D_PRIMITIVE
    {
        D3D_PRIMITIVE_UNDEFINED = 0,
        D3D_PRIMITIVE_POINT = 1,
        D3D_PRIMITIVE_LINE = 2,
        D3D_PRIMITIVE_TRIANGLE = 3,
        D3D_PRIMITIVE_LINE_ADJ = 6,
        D3D_PRIMITIVE_TRIANGLE_ADJ = 7,
        D3D_PRIMITIVE_1_CONTROL_POINT_PATCH = 8,
        D3D_PRIMITIVE_2_CONTROL_POINT_PATCH = 9,
        D3D_PRIMITIVE_3_CONTROL_POINT_PATCH = 10,
        D3D_PRIMITIVE_4_CONTROL_POINT_PATCH = 11,
        D3D_PRIMITIVE_5_CONTROL_POINT_PATCH = 12,
        D3D_PRIMITIVE_6_CONTROL_POINT_PATCH = 13,
        D3D_PRIMITIVE_7_CONTROL_POINT_PATCH = 14,
        D3D_PRIMITIVE_8_CONTROL_POINT_PATCH = 15,
        D3D_PRIMITIVE_9_CONTROL_POINT_PATCH = 16,
        D3D_PRIMITIVE_10_CONTROL_POINT_PATCH = 17,
        D3D_PRIMITIVE_11_CONTROL_POINT_PATCH = 18,
        D3D_PRIMITIVE_12_CONTROL_POINT_PATCH = 19,
        D3D_PRIMITIVE_13_CONTROL_POINT_PATCH = 20,
        D3D_PRIMITIVE_14_CONTROL_POINT_PATCH = 21,
        D3D_PRIMITIVE_15_CONTROL_POINT_PATCH = 22,
        D3D_PRIMITIVE_16_CONTROL_POINT_PATCH = 23,
        D3D_PRIMITIVE_17_CONTROL_POINT_PATCH = 24,
        D3D_PRIMITIVE_18_CONTROL_POINT_PATCH = 25,
        D3D_PRIMITIVE_19_CONTROL_POINT_PATCH = 26,
        D3D_PRIMITIVE_20_CONTROL_POINT_PATCH = 28,
        D3D_PRIMITIVE_21_CONTROL_POINT_PATCH = 29,
        D3D_PRIMITIVE_22_CONTROL_POINT_PATCH = 30,
        D3D_PRIMITIVE_23_CONTROL_POINT_PATCH = 31,
        D3D_PRIMITIVE_24_CONTROL_POINT_PATCH = 32,
        D3D_PRIMITIVE_25_CONTROL_POINT_PATCH = 33,
        D3D_PRIMITIVE_26_CONTROL_POINT_PATCH = 34,
        D3D_PRIMITIVE_27_CONTROL_POINT_PATCH = 35,
        D3D_PRIMITIVE_28_CONTROL_POINT_PATCH = 36,
        D3D_PRIMITIVE_29_CONTROL_POINT_PATCH = 37,
        D3D_PRIMITIVE_30_CONTROL_POINT_PATCH = 38,
        D3D_PRIMITIVE_31_CONTROL_POINT_PATCH = 39,
        D3D_PRIMITIVE_32_CONTROL_POINT_PATCH = 40,
        D3D10_PRIMITIVE_UNDEFINED = D3D_PRIMITIVE_UNDEFINED,
        D3D10_PRIMITIVE_POINT = D3D_PRIMITIVE_POINT,
        D3D10_PRIMITIVE_LINE = D3D_PRIMITIVE_LINE,
        D3D10_PRIMITIVE_TRIANGLE = D3D_PRIMITIVE_TRIANGLE,
        D3D10_PRIMITIVE_LINE_ADJ = D3D_PRIMITIVE_LINE_ADJ,
        D3D10_PRIMITIVE_TRIANGLE_ADJ = D3D_PRIMITIVE_TRIANGLE_ADJ,
        D3D11_PRIMITIVE_UNDEFINED = D3D_PRIMITIVE_UNDEFINED,
        D3D11_PRIMITIVE_POINT = D3D_PRIMITIVE_POINT,
        D3D11_PRIMITIVE_LINE = D3D_PRIMITIVE_LINE,
        D3D11_PRIMITIVE_TRIANGLE = D3D_PRIMITIVE_TRIANGLE,
        D3D11_PRIMITIVE_LINE_ADJ = D3D_PRIMITIVE_LINE_ADJ,
        D3D11_PRIMITIVE_TRIANGLE_ADJ = D3D_PRIMITIVE_TRIANGLE_ADJ,
        D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH = D3D_PRIMITIVE_1_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH = D3D_PRIMITIVE_2_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH = D3D_PRIMITIVE_3_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH = D3D_PRIMITIVE_4_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH = D3D_PRIMITIVE_5_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH = D3D_PRIMITIVE_6_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH = D3D_PRIMITIVE_7_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH = D3D_PRIMITIVE_8_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH = D3D_PRIMITIVE_9_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH = D3D_PRIMITIVE_10_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH = D3D_PRIMITIVE_11_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH = D3D_PRIMITIVE_12_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH = D3D_PRIMITIVE_13_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH = D3D_PRIMITIVE_14_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH = D3D_PRIMITIVE_15_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH = D3D_PRIMITIVE_16_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH = D3D_PRIMITIVE_17_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH = D3D_PRIMITIVE_18_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH = D3D_PRIMITIVE_19_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH = D3D_PRIMITIVE_20_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH = D3D_PRIMITIVE_21_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH = D3D_PRIMITIVE_22_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH = D3D_PRIMITIVE_23_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH = D3D_PRIMITIVE_24_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH = D3D_PRIMITIVE_25_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH = D3D_PRIMITIVE_26_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH = D3D_PRIMITIVE_27_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH = D3D_PRIMITIVE_28_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH = D3D_PRIMITIVE_29_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH = D3D_PRIMITIVE_30_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH = D3D_PRIMITIVE_31_CONTROL_POINT_PATCH,
        D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH = D3D_PRIMITIVE_32_CONTROL_POINT_PATCH
    } D3D_PRIMITIVE;

typedef
enum D3D_SRV_DIMENSION
    {
        D3D_SRV_DIMENSION_UNKNOWN = 0,
        D3D_SRV_DIMENSION_BUFFER = 1,
        D3D_SRV_DIMENSION_TEXTURE1D = 2,
        D3D_SRV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D_SRV_DIMENSION_TEXTURE2D = 4,
        D3D_SRV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D_SRV_DIMENSION_TEXTURE2DMS = 6,
        D3D_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
        D3D_SRV_DIMENSION_TEXTURE3D = 8,
        D3D_SRV_DIMENSION_TEXTURECUBE = 9,
        D3D_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
        D3D_SRV_DIMENSION_BUFFEREX = 11,
        D3D10_SRV_DIMENSION_UNKNOWN = D3D_SRV_DIMENSION_UNKNOWN,
        D3D10_SRV_DIMENSION_BUFFER = D3D_SRV_DIMENSION_BUFFER,
        D3D10_SRV_DIMENSION_TEXTURE1D = D3D_SRV_DIMENSION_TEXTURE1D,
        D3D10_SRV_DIMENSION_TEXTURE1DARRAY = D3D_SRV_DIMENSION_TEXTURE1DARRAY,
        D3D10_SRV_DIMENSION_TEXTURE2D = D3D_SRV_DIMENSION_TEXTURE2D,
        D3D10_SRV_DIMENSION_TEXTURE2DARRAY = D3D_SRV_DIMENSION_TEXTURE2DARRAY,
        D3D10_SRV_DIMENSION_TEXTURE2DMS = D3D_SRV_DIMENSION_TEXTURE2DMS,
        D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY = D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
        D3D10_SRV_DIMENSION_TEXTURE3D = D3D_SRV_DIMENSION_TEXTURE3D,
        D3D10_SRV_DIMENSION_TEXTURECUBE = D3D_SRV_DIMENSION_TEXTURECUBE,
        D3D10_1_SRV_DIMENSION_UNKNOWN = D3D_SRV_DIMENSION_UNKNOWN,
        D3D10_1_SRV_DIMENSION_BUFFER = D3D_SRV_DIMENSION_BUFFER,
        D3D10_1_SRV_DIMENSION_TEXTURE1D = D3D_SRV_DIMENSION_TEXTURE1D,
        D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY = D3D_SRV_DIMENSION_TEXTURE1DARRAY,
        D3D10_1_SRV_DIMENSION_TEXTURE2D = D3D_SRV_DIMENSION_TEXTURE2D,
        D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY = D3D_SRV_DIMENSION_TEXTURE2DARRAY,
        D3D10_1_SRV_DIMENSION_TEXTURE2DMS = D3D_SRV_DIMENSION_TEXTURE2DMS,
        D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY = D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
        D3D10_1_SRV_DIMENSION_TEXTURE3D = D3D_SRV_DIMENSION_TEXTURE3D,
        D3D10_1_SRV_DIMENSION_TEXTURECUBE = D3D_SRV_DIMENSION_TEXTURECUBE,
        D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY = D3D_SRV_DIMENSION_TEXTURECUBEARRAY,
        D3D11_SRV_DIMENSION_UNKNOWN = D3D_SRV_DIMENSION_UNKNOWN,
        D3D11_SRV_DIMENSION_BUFFER = D3D_SRV_DIMENSION_BUFFER,
        D3D11_SRV_DIMENSION_TEXTURE1D = D3D_SRV_DIMENSION_TEXTURE1D,
        D3D11_SRV_DIMENSION_TEXTURE1DARRAY = D3D_SRV_DIMENSION_TEXTURE1DARRAY,
        D3D11_SRV_DIMENSION_TEXTURE2D = D3D_SRV_DIMENSION_TEXTURE2D,
        D3D11_SRV_DIMENSION_TEXTURE2DARRAY = D3D_SRV_DIMENSION_TEXTURE2DARRAY,
        D3D11_SRV_DIMENSION_TEXTURE2DMS = D3D_SRV_DIMENSION_TEXTURE2DMS,
        D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY = D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
        D3D11_SRV_DIMENSION_TEXTURE3D = D3D_SRV_DIMENSION_TEXTURE3D,
        D3D11_SRV_DIMENSION_TEXTURECUBE = D3D_SRV_DIMENSION_TEXTURECUBE,
        D3D11_SRV_DIMENSION_TEXTURECUBEARRAY = D3D_SRV_DIMENSION_TEXTURECUBEARRAY,
        D3D11_SRV_DIMENSION_BUFFEREX = D3D_SRV_DIMENSION_BUFFEREX
    } D3D_SRV_DIMENSION;

typedef struct _D3D_SHADER_MACRO
    {
    LPCSTR Name;
    LPCSTR Definition;
    } D3D_SHADER_MACRO;

typedef struct _D3D_SHADER_MACRO *LPD3D_SHADER_MACRO;

extern "C" const GUID IID_ID3D10Blob;


extern RPC_IF_HANDLE __MIDL_itf_d3dcommon_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3dcommon_0000_0000_v0_0_s_ifspec;
# 357 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3dcommon.h"
extern "C" const IID IID_ID3D10Blob;



    struct __declspec(uuid("8BA5FB08-5195-40e2-AC58-0D989C3A0102")) __declspec(novtable)
    ID3D10Blob : public IUnknown
    {
    public:
        virtual LPVOID __stdcall GetBufferPointer( void) = 0;

        virtual SIZE_T __stdcall GetBufferSize( void) = 0;

    };
# 439 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3dcommon.h"
typedef struct ID3D10Blob* LPD3D10BLOB;
typedef ID3D10Blob ID3DBlob;
typedef ID3DBlob* LPD3DBLOB;

typedef
enum _D3D_INCLUDE_TYPE
    {
        D3D_INCLUDE_LOCAL = 0,
        D3D_INCLUDE_SYSTEM = ( D3D_INCLUDE_LOCAL + 1 ) ,
        D3D10_INCLUDE_LOCAL = D3D_INCLUDE_LOCAL,
        D3D10_INCLUDE_SYSTEM = D3D_INCLUDE_SYSTEM,
        D3D_INCLUDE_FORCE_DWORD = 0x7fffffff
    } D3D_INCLUDE_TYPE;

typedef struct ID3DInclude ID3DInclude;


struct __declspec(novtable) ID3DInclude
{
    virtual __declspec(nothrow) HRESULT __stdcall Open( D3D_INCLUDE_TYPE IncludeType, LPCSTR pFileName, LPCVOID pParentData, LPCVOID *ppData, UINT *pBytes) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall Close( LPCVOID pData) = 0;
};
typedef ID3DInclude* LPD3DINCLUDE;
typedef
enum _D3D_SHADER_VARIABLE_CLASS
    {
        D3D_SVC_SCALAR = 0,
        D3D_SVC_VECTOR = ( D3D_SVC_SCALAR + 1 ) ,
        D3D_SVC_MATRIX_ROWS = ( D3D_SVC_VECTOR + 1 ) ,
        D3D_SVC_MATRIX_COLUMNS = ( D3D_SVC_MATRIX_ROWS + 1 ) ,
        D3D_SVC_OBJECT = ( D3D_SVC_MATRIX_COLUMNS + 1 ) ,
        D3D_SVC_STRUCT = ( D3D_SVC_OBJECT + 1 ) ,
        D3D_SVC_INTERFACE_CLASS = ( D3D_SVC_STRUCT + 1 ) ,
        D3D_SVC_INTERFACE_POINTER = ( D3D_SVC_INTERFACE_CLASS + 1 ) ,
        D3D10_SVC_SCALAR = D3D_SVC_SCALAR,
        D3D10_SVC_VECTOR = D3D_SVC_VECTOR,
        D3D10_SVC_MATRIX_ROWS = D3D_SVC_MATRIX_ROWS,
        D3D10_SVC_MATRIX_COLUMNS = D3D_SVC_MATRIX_COLUMNS,
        D3D10_SVC_OBJECT = D3D_SVC_OBJECT,
        D3D10_SVC_STRUCT = D3D_SVC_STRUCT,
        D3D11_SVC_INTERFACE_CLASS = D3D_SVC_INTERFACE_CLASS,
        D3D11_SVC_INTERFACE_POINTER = D3D_SVC_INTERFACE_POINTER,
        D3D_SVC_FORCE_DWORD = 0x7fffffff
    } D3D_SHADER_VARIABLE_CLASS;

typedef
enum _D3D_SHADER_VARIABLE_FLAGS
    {
        D3D_SVF_USERPACKED = 1,
        D3D_SVF_USED = 2,
        D3D_SVF_INTERFACE_POINTER = 4,
        D3D_SVF_INTERFACE_PARAMETER = 8,
        D3D10_SVF_USERPACKED = D3D_SVF_USERPACKED,
        D3D10_SVF_USED = D3D_SVF_USED,
        D3D11_SVF_INTERFACE_POINTER = D3D_SVF_INTERFACE_POINTER,
        D3D11_SVF_INTERFACE_PARAMETER = D3D_SVF_INTERFACE_PARAMETER,
        D3D_SVF_FORCE_DWORD = 0x7fffffff
    } D3D_SHADER_VARIABLE_FLAGS;

typedef
enum _D3D_SHADER_VARIABLE_TYPE
    {
        D3D_SVT_VOID = 0,
        D3D_SVT_BOOL = 1,
        D3D_SVT_INT = 2,
        D3D_SVT_FLOAT = 3,
        D3D_SVT_STRING = 4,
        D3D_SVT_TEXTURE = 5,
        D3D_SVT_TEXTURE1D = 6,
        D3D_SVT_TEXTURE2D = 7,
        D3D_SVT_TEXTURE3D = 8,
        D3D_SVT_TEXTURECUBE = 9,
        D3D_SVT_SAMPLER = 10,
        D3D_SVT_SAMPLER1D = 11,
        D3D_SVT_SAMPLER2D = 12,
        D3D_SVT_SAMPLER3D = 13,
        D3D_SVT_SAMPLERCUBE = 14,
        D3D_SVT_PIXELSHADER = 15,
        D3D_SVT_VERTEXSHADER = 16,
        D3D_SVT_PIXELFRAGMENT = 17,
        D3D_SVT_VERTEXFRAGMENT = 18,
        D3D_SVT_UINT = 19,
        D3D_SVT_UINT8 = 20,
        D3D_SVT_GEOMETRYSHADER = 21,
        D3D_SVT_RASTERIZER = 22,
        D3D_SVT_DEPTHSTENCIL = 23,
        D3D_SVT_BLEND = 24,
        D3D_SVT_BUFFER = 25,
        D3D_SVT_CBUFFER = 26,
        D3D_SVT_TBUFFER = 27,
        D3D_SVT_TEXTURE1DARRAY = 28,
        D3D_SVT_TEXTURE2DARRAY = 29,
        D3D_SVT_RENDERTARGETVIEW = 30,
        D3D_SVT_DEPTHSTENCILVIEW = 31,
        D3D_SVT_TEXTURE2DMS = 32,
        D3D_SVT_TEXTURE2DMSARRAY = 33,
        D3D_SVT_TEXTURECUBEARRAY = 34,
        D3D_SVT_HULLSHADER = 35,
        D3D_SVT_DOMAINSHADER = 36,
        D3D_SVT_INTERFACE_POINTER = 37,
        D3D_SVT_COMPUTESHADER = 38,
        D3D_SVT_DOUBLE = 39,
        D3D_SVT_RWTEXTURE1D = 40,
        D3D_SVT_RWTEXTURE1DARRAY = 41,
        D3D_SVT_RWTEXTURE2D = 42,
        D3D_SVT_RWTEXTURE2DARRAY = 43,
        D3D_SVT_RWTEXTURE3D = 44,
        D3D_SVT_RWBUFFER = 45,
        D3D_SVT_BYTEADDRESS_BUFFER = 46,
        D3D_SVT_RWBYTEADDRESS_BUFFER = 47,
        D3D_SVT_STRUCTURED_BUFFER = 48,
        D3D_SVT_RWSTRUCTURED_BUFFER = 49,
        D3D_SVT_APPEND_STRUCTURED_BUFFER = 50,
        D3D_SVT_CONSUME_STRUCTURED_BUFFER = 51,
        D3D_SVT_MIN8FLOAT = 52,
        D3D_SVT_MIN10FLOAT = 53,
        D3D_SVT_MIN16FLOAT = 54,
        D3D_SVT_MIN12INT = 55,
        D3D_SVT_MIN16INT = 56,
        D3D_SVT_MIN16UINT = 57,
        D3D10_SVT_VOID = D3D_SVT_VOID,
        D3D10_SVT_BOOL = D3D_SVT_BOOL,
        D3D10_SVT_INT = D3D_SVT_INT,
        D3D10_SVT_FLOAT = D3D_SVT_FLOAT,
        D3D10_SVT_STRING = D3D_SVT_STRING,
        D3D10_SVT_TEXTURE = D3D_SVT_TEXTURE,
        D3D10_SVT_TEXTURE1D = D3D_SVT_TEXTURE1D,
        D3D10_SVT_TEXTURE2D = D3D_SVT_TEXTURE2D,
        D3D10_SVT_TEXTURE3D = D3D_SVT_TEXTURE3D,
        D3D10_SVT_TEXTURECUBE = D3D_SVT_TEXTURECUBE,
        D3D10_SVT_SAMPLER = D3D_SVT_SAMPLER,
        D3D10_SVT_SAMPLER1D = D3D_SVT_SAMPLER1D,
        D3D10_SVT_SAMPLER2D = D3D_SVT_SAMPLER2D,
        D3D10_SVT_SAMPLER3D = D3D_SVT_SAMPLER3D,
        D3D10_SVT_SAMPLERCUBE = D3D_SVT_SAMPLERCUBE,
        D3D10_SVT_PIXELSHADER = D3D_SVT_PIXELSHADER,
        D3D10_SVT_VERTEXSHADER = D3D_SVT_VERTEXSHADER,
        D3D10_SVT_PIXELFRAGMENT = D3D_SVT_PIXELFRAGMENT,
        D3D10_SVT_VERTEXFRAGMENT = D3D_SVT_VERTEXFRAGMENT,
        D3D10_SVT_UINT = D3D_SVT_UINT,
        D3D10_SVT_UINT8 = D3D_SVT_UINT8,
        D3D10_SVT_GEOMETRYSHADER = D3D_SVT_GEOMETRYSHADER,
        D3D10_SVT_RASTERIZER = D3D_SVT_RASTERIZER,
        D3D10_SVT_DEPTHSTENCIL = D3D_SVT_DEPTHSTENCIL,
        D3D10_SVT_BLEND = D3D_SVT_BLEND,
        D3D10_SVT_BUFFER = D3D_SVT_BUFFER,
        D3D10_SVT_CBUFFER = D3D_SVT_CBUFFER,
        D3D10_SVT_TBUFFER = D3D_SVT_TBUFFER,
        D3D10_SVT_TEXTURE1DARRAY = D3D_SVT_TEXTURE1DARRAY,
        D3D10_SVT_TEXTURE2DARRAY = D3D_SVT_TEXTURE2DARRAY,
        D3D10_SVT_RENDERTARGETVIEW = D3D_SVT_RENDERTARGETVIEW,
        D3D10_SVT_DEPTHSTENCILVIEW = D3D_SVT_DEPTHSTENCILVIEW,
        D3D10_SVT_TEXTURE2DMS = D3D_SVT_TEXTURE2DMS,
        D3D10_SVT_TEXTURE2DMSARRAY = D3D_SVT_TEXTURE2DMSARRAY,
        D3D10_SVT_TEXTURECUBEARRAY = D3D_SVT_TEXTURECUBEARRAY,
        D3D11_SVT_HULLSHADER = D3D_SVT_HULLSHADER,
        D3D11_SVT_DOMAINSHADER = D3D_SVT_DOMAINSHADER,
        D3D11_SVT_INTERFACE_POINTER = D3D_SVT_INTERFACE_POINTER,
        D3D11_SVT_COMPUTESHADER = D3D_SVT_COMPUTESHADER,
        D3D11_SVT_DOUBLE = D3D_SVT_DOUBLE,
        D3D11_SVT_RWTEXTURE1D = D3D_SVT_RWTEXTURE1D,
        D3D11_SVT_RWTEXTURE1DARRAY = D3D_SVT_RWTEXTURE1DARRAY,
        D3D11_SVT_RWTEXTURE2D = D3D_SVT_RWTEXTURE2D,
        D3D11_SVT_RWTEXTURE2DARRAY = D3D_SVT_RWTEXTURE2DARRAY,
        D3D11_SVT_RWTEXTURE3D = D3D_SVT_RWTEXTURE3D,
        D3D11_SVT_RWBUFFER = D3D_SVT_RWBUFFER,
        D3D11_SVT_BYTEADDRESS_BUFFER = D3D_SVT_BYTEADDRESS_BUFFER,
        D3D11_SVT_RWBYTEADDRESS_BUFFER = D3D_SVT_RWBYTEADDRESS_BUFFER,
        D3D11_SVT_STRUCTURED_BUFFER = D3D_SVT_STRUCTURED_BUFFER,
        D3D11_SVT_RWSTRUCTURED_BUFFER = D3D_SVT_RWSTRUCTURED_BUFFER,
        D3D11_SVT_APPEND_STRUCTURED_BUFFER = D3D_SVT_APPEND_STRUCTURED_BUFFER,
        D3D11_SVT_CONSUME_STRUCTURED_BUFFER = D3D_SVT_CONSUME_STRUCTURED_BUFFER,
        D3D_SVT_FORCE_DWORD = 0x7fffffff
    } D3D_SHADER_VARIABLE_TYPE;

typedef
enum _D3D_SHADER_INPUT_FLAGS
    {
        D3D_SIF_USERPACKED = 0x1,
        D3D_SIF_COMPARISON_SAMPLER = 0x2,
        D3D_SIF_TEXTURE_COMPONENT_0 = 0x4,
        D3D_SIF_TEXTURE_COMPONENT_1 = 0x8,
        D3D_SIF_TEXTURE_COMPONENTS = 0xc,
        D3D_SIF_UNUSED = 0x10,
        D3D10_SIF_USERPACKED = D3D_SIF_USERPACKED,
        D3D10_SIF_COMPARISON_SAMPLER = D3D_SIF_COMPARISON_SAMPLER,
        D3D10_SIF_TEXTURE_COMPONENT_0 = D3D_SIF_TEXTURE_COMPONENT_0,
        D3D10_SIF_TEXTURE_COMPONENT_1 = D3D_SIF_TEXTURE_COMPONENT_1,
        D3D10_SIF_TEXTURE_COMPONENTS = D3D_SIF_TEXTURE_COMPONENTS,
        D3D_SIF_FORCE_DWORD = 0x7fffffff
    } D3D_SHADER_INPUT_FLAGS;

typedef
enum _D3D_SHADER_INPUT_TYPE
    {
        D3D_SIT_CBUFFER = 0,
        D3D_SIT_TBUFFER = ( D3D_SIT_CBUFFER + 1 ) ,
        D3D_SIT_TEXTURE = ( D3D_SIT_TBUFFER + 1 ) ,
        D3D_SIT_SAMPLER = ( D3D_SIT_TEXTURE + 1 ) ,
        D3D_SIT_UAV_RWTYPED = ( D3D_SIT_SAMPLER + 1 ) ,
        D3D_SIT_STRUCTURED = ( D3D_SIT_UAV_RWTYPED + 1 ) ,
        D3D_SIT_UAV_RWSTRUCTURED = ( D3D_SIT_STRUCTURED + 1 ) ,
        D3D_SIT_BYTEADDRESS = ( D3D_SIT_UAV_RWSTRUCTURED + 1 ) ,
        D3D_SIT_UAV_RWBYTEADDRESS = ( D3D_SIT_BYTEADDRESS + 1 ) ,
        D3D_SIT_UAV_APPEND_STRUCTURED = ( D3D_SIT_UAV_RWBYTEADDRESS + 1 ) ,
        D3D_SIT_UAV_CONSUME_STRUCTURED = ( D3D_SIT_UAV_APPEND_STRUCTURED + 1 ) ,
        D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = ( D3D_SIT_UAV_CONSUME_STRUCTURED + 1 ) ,
        D3D10_SIT_CBUFFER = D3D_SIT_CBUFFER,
        D3D10_SIT_TBUFFER = D3D_SIT_TBUFFER,
        D3D10_SIT_TEXTURE = D3D_SIT_TEXTURE,
        D3D10_SIT_SAMPLER = D3D_SIT_SAMPLER,
        D3D11_SIT_UAV_RWTYPED = D3D_SIT_UAV_RWTYPED,
        D3D11_SIT_STRUCTURED = D3D_SIT_STRUCTURED,
        D3D11_SIT_UAV_RWSTRUCTURED = D3D_SIT_UAV_RWSTRUCTURED,
        D3D11_SIT_BYTEADDRESS = D3D_SIT_BYTEADDRESS,
        D3D11_SIT_UAV_RWBYTEADDRESS = D3D_SIT_UAV_RWBYTEADDRESS,
        D3D11_SIT_UAV_APPEND_STRUCTURED = D3D_SIT_UAV_APPEND_STRUCTURED,
        D3D11_SIT_UAV_CONSUME_STRUCTURED = D3D_SIT_UAV_CONSUME_STRUCTURED,
        D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER
    } D3D_SHADER_INPUT_TYPE;

typedef
enum _D3D_SHADER_CBUFFER_FLAGS
    {
        D3D_CBF_USERPACKED = 1,
        D3D10_CBF_USERPACKED = D3D_CBF_USERPACKED,
        D3D_CBF_FORCE_DWORD = 0x7fffffff
    } D3D_SHADER_CBUFFER_FLAGS;

typedef
enum _D3D_CBUFFER_TYPE
    {
        D3D_CT_CBUFFER = 0,
        D3D_CT_TBUFFER = ( D3D_CT_CBUFFER + 1 ) ,
        D3D_CT_INTERFACE_POINTERS = ( D3D_CT_TBUFFER + 1 ) ,
        D3D_CT_RESOURCE_BIND_INFO = ( D3D_CT_INTERFACE_POINTERS + 1 ) ,
        D3D10_CT_CBUFFER = D3D_CT_CBUFFER,
        D3D10_CT_TBUFFER = D3D_CT_TBUFFER,
        D3D11_CT_CBUFFER = D3D_CT_CBUFFER,
        D3D11_CT_TBUFFER = D3D_CT_TBUFFER,
        D3D11_CT_INTERFACE_POINTERS = D3D_CT_INTERFACE_POINTERS,
        D3D11_CT_RESOURCE_BIND_INFO = D3D_CT_RESOURCE_BIND_INFO
    } D3D_CBUFFER_TYPE;

typedef
enum D3D_NAME
    {
        D3D_NAME_UNDEFINED = 0,
        D3D_NAME_POSITION = 1,
        D3D_NAME_CLIP_DISTANCE = 2,
        D3D_NAME_CULL_DISTANCE = 3,
        D3D_NAME_RENDER_TARGET_ARRAY_INDEX = 4,
        D3D_NAME_VIEWPORT_ARRAY_INDEX = 5,
        D3D_NAME_VERTEX_ID = 6,
        D3D_NAME_PRIMITIVE_ID = 7,
        D3D_NAME_INSTANCE_ID = 8,
        D3D_NAME_IS_FRONT_FACE = 9,
        D3D_NAME_SAMPLE_INDEX = 10,
        D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11,
        D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12,
        D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR = 13,
        D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14,
        D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15,
        D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16,
        D3D_NAME_TARGET = 64,
        D3D_NAME_DEPTH = 65,
        D3D_NAME_COVERAGE = 66,
        D3D_NAME_DEPTH_GREATER_EQUAL = 67,
        D3D_NAME_DEPTH_LESS_EQUAL = 68,
        D3D10_NAME_UNDEFINED = D3D_NAME_UNDEFINED,
        D3D10_NAME_POSITION = D3D_NAME_POSITION,
        D3D10_NAME_CLIP_DISTANCE = D3D_NAME_CLIP_DISTANCE,
        D3D10_NAME_CULL_DISTANCE = D3D_NAME_CULL_DISTANCE,
        D3D10_NAME_RENDER_TARGET_ARRAY_INDEX = D3D_NAME_RENDER_TARGET_ARRAY_INDEX,
        D3D10_NAME_VIEWPORT_ARRAY_INDEX = D3D_NAME_VIEWPORT_ARRAY_INDEX,
        D3D10_NAME_VERTEX_ID = D3D_NAME_VERTEX_ID,
        D3D10_NAME_PRIMITIVE_ID = D3D_NAME_PRIMITIVE_ID,
        D3D10_NAME_INSTANCE_ID = D3D_NAME_INSTANCE_ID,
        D3D10_NAME_IS_FRONT_FACE = D3D_NAME_IS_FRONT_FACE,
        D3D10_NAME_SAMPLE_INDEX = D3D_NAME_SAMPLE_INDEX,
        D3D10_NAME_TARGET = D3D_NAME_TARGET,
        D3D10_NAME_DEPTH = D3D_NAME_DEPTH,
        D3D10_NAME_COVERAGE = D3D_NAME_COVERAGE,
        D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR = D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR,
        D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR,
        D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR = D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR,
        D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR = D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR,
        D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR = D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR,
        D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR = D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR,
        D3D11_NAME_DEPTH_GREATER_EQUAL = D3D_NAME_DEPTH_GREATER_EQUAL,
        D3D11_NAME_DEPTH_LESS_EQUAL = D3D_NAME_DEPTH_LESS_EQUAL
    } D3D_NAME;

typedef
enum D3D_RESOURCE_RETURN_TYPE
    {
        D3D_RETURN_TYPE_UNORM = 1,
        D3D_RETURN_TYPE_SNORM = 2,
        D3D_RETURN_TYPE_SINT = 3,
        D3D_RETURN_TYPE_UINT = 4,
        D3D_RETURN_TYPE_FLOAT = 5,
        D3D_RETURN_TYPE_MIXED = 6,
        D3D_RETURN_TYPE_DOUBLE = 7,
        D3D_RETURN_TYPE_CONTINUED = 8,
        D3D10_RETURN_TYPE_UNORM = D3D_RETURN_TYPE_UNORM,
        D3D10_RETURN_TYPE_SNORM = D3D_RETURN_TYPE_SNORM,
        D3D10_RETURN_TYPE_SINT = D3D_RETURN_TYPE_SINT,
        D3D10_RETURN_TYPE_UINT = D3D_RETURN_TYPE_UINT,
        D3D10_RETURN_TYPE_FLOAT = D3D_RETURN_TYPE_FLOAT,
        D3D10_RETURN_TYPE_MIXED = D3D_RETURN_TYPE_MIXED,
        D3D11_RETURN_TYPE_UNORM = D3D_RETURN_TYPE_UNORM,
        D3D11_RETURN_TYPE_SNORM = D3D_RETURN_TYPE_SNORM,
        D3D11_RETURN_TYPE_SINT = D3D_RETURN_TYPE_SINT,
        D3D11_RETURN_TYPE_UINT = D3D_RETURN_TYPE_UINT,
        D3D11_RETURN_TYPE_FLOAT = D3D_RETURN_TYPE_FLOAT,
        D3D11_RETURN_TYPE_MIXED = D3D_RETURN_TYPE_MIXED,
        D3D11_RETURN_TYPE_DOUBLE = D3D_RETURN_TYPE_DOUBLE,
        D3D11_RETURN_TYPE_CONTINUED = D3D_RETURN_TYPE_CONTINUED
    } D3D_RESOURCE_RETURN_TYPE;

typedef
enum D3D_REGISTER_COMPONENT_TYPE
    {
        D3D_REGISTER_COMPONENT_UNKNOWN = 0,
        D3D_REGISTER_COMPONENT_UINT32 = 1,
        D3D_REGISTER_COMPONENT_SINT32 = 2,
        D3D_REGISTER_COMPONENT_FLOAT32 = 3,
        D3D10_REGISTER_COMPONENT_UNKNOWN = D3D_REGISTER_COMPONENT_UNKNOWN,
        D3D10_REGISTER_COMPONENT_UINT32 = D3D_REGISTER_COMPONENT_UINT32,
        D3D10_REGISTER_COMPONENT_SINT32 = D3D_REGISTER_COMPONENT_SINT32,
        D3D10_REGISTER_COMPONENT_FLOAT32 = D3D_REGISTER_COMPONENT_FLOAT32
    } D3D_REGISTER_COMPONENT_TYPE;

typedef
enum D3D_TESSELLATOR_DOMAIN
    {
        D3D_TESSELLATOR_DOMAIN_UNDEFINED = 0,
        D3D_TESSELLATOR_DOMAIN_ISOLINE = 1,
        D3D_TESSELLATOR_DOMAIN_TRI = 2,
        D3D_TESSELLATOR_DOMAIN_QUAD = 3,
        D3D11_TESSELLATOR_DOMAIN_UNDEFINED = D3D_TESSELLATOR_DOMAIN_UNDEFINED,
        D3D11_TESSELLATOR_DOMAIN_ISOLINE = D3D_TESSELLATOR_DOMAIN_ISOLINE,
        D3D11_TESSELLATOR_DOMAIN_TRI = D3D_TESSELLATOR_DOMAIN_TRI,
        D3D11_TESSELLATOR_DOMAIN_QUAD = D3D_TESSELLATOR_DOMAIN_QUAD
    } D3D_TESSELLATOR_DOMAIN;

typedef
enum D3D_TESSELLATOR_PARTITIONING
    {
        D3D_TESSELLATOR_PARTITIONING_UNDEFINED = 0,
        D3D_TESSELLATOR_PARTITIONING_INTEGER = 1,
        D3D_TESSELLATOR_PARTITIONING_POW2 = 2,
        D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 3,
        D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 4,
        D3D11_TESSELLATOR_PARTITIONING_UNDEFINED = D3D_TESSELLATOR_PARTITIONING_UNDEFINED,
        D3D11_TESSELLATOR_PARTITIONING_INTEGER = D3D_TESSELLATOR_PARTITIONING_INTEGER,
        D3D11_TESSELLATOR_PARTITIONING_POW2 = D3D_TESSELLATOR_PARTITIONING_POW2,
        D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD,
        D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN
    } D3D_TESSELLATOR_PARTITIONING;

typedef
enum D3D_TESSELLATOR_OUTPUT_PRIMITIVE
    {
        D3D_TESSELLATOR_OUTPUT_UNDEFINED = 0,
        D3D_TESSELLATOR_OUTPUT_POINT = 1,
        D3D_TESSELLATOR_OUTPUT_LINE = 2,
        D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW = 3,
        D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4,
        D3D11_TESSELLATOR_OUTPUT_UNDEFINED = D3D_TESSELLATOR_OUTPUT_UNDEFINED,
        D3D11_TESSELLATOR_OUTPUT_POINT = D3D_TESSELLATOR_OUTPUT_POINT,
        D3D11_TESSELLATOR_OUTPUT_LINE = D3D_TESSELLATOR_OUTPUT_LINE,
        D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW = D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW,
        D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW = D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW
    } D3D_TESSELLATOR_OUTPUT_PRIMITIVE;

typedef
enum D3D_MIN_PRECISION
    {
        D3D_MIN_PRECISION_DEFAULT = 0,
        D3D_MIN_PRECISION_FLOAT_16 = 1,
        D3D_MIN_PRECISION_FLOAT_2_8 = 2,
        D3D_MIN_PRECISION_RESERVED = 3,
        D3D_MIN_PRECISION_SINT_16 = 4,
        D3D_MIN_PRECISION_UINT_16 = 5,
        D3D_MIN_PRECISION_ANY_16 = 0xf0,
        D3D_MIN_PRECISION_ANY_10 = 0xf1
    } D3D_MIN_PRECISION;

typedef
enum D3D_INTERPOLATION_MODE
    {
        D3D_INTERPOLATION_UNDEFINED = 0,
        D3D_INTERPOLATION_CONSTANT = 1,
        D3D_INTERPOLATION_LINEAR = 2,
        D3D_INTERPOLATION_LINEAR_CENTROID = 3,
        D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE = 4,
        D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID = 5,
        D3D_INTERPOLATION_LINEAR_SAMPLE = 6,
        D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE = 7
    } D3D_INTERPOLATION_MODE;

extern "C" const GUID WKPDID_D3DDebugObjectName;
# 850 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3dcommon.h"
extern RPC_IF_HANDLE __MIDL_itf_d3dcommon_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3dcommon_0000_0001_v0_0_s_ifspec;






}
# 66 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3d11_2.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11_1.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11_1.h"
#pragma warning(disable: 4049)
# 50 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11_1.h"
typedef struct ID3D11BlendState1 ID3D11BlendState1;






typedef struct ID3D11RasterizerState1 ID3D11RasterizerState1;






typedef struct ID3DDeviceContextState ID3DDeviceContextState;






typedef struct ID3D11DeviceContext1 ID3D11DeviceContext1;






typedef struct ID3D11Device1 ID3D11Device1;






typedef struct ID3DUserDefinedAnnotation ID3DUserDefinedAnnotation;
# 97 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11_1.h"
extern "C"{







}


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
#pragma warning(disable: 4049)
# 50 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef struct ID3D11DeviceChild ID3D11DeviceChild;






typedef struct ID3D11DepthStencilState ID3D11DepthStencilState;






typedef struct ID3D11BlendState ID3D11BlendState;






typedef struct ID3D11RasterizerState ID3D11RasterizerState;






typedef struct ID3D11Resource ID3D11Resource;






typedef struct ID3D11Buffer ID3D11Buffer;






typedef struct ID3D11Texture1D ID3D11Texture1D;






typedef struct ID3D11Texture2D ID3D11Texture2D;






typedef struct ID3D11Texture3D ID3D11Texture3D;






typedef struct ID3D11View ID3D11View;






typedef struct ID3D11ShaderResourceView ID3D11ShaderResourceView;






typedef struct ID3D11RenderTargetView ID3D11RenderTargetView;






typedef struct ID3D11DepthStencilView ID3D11DepthStencilView;






typedef struct ID3D11UnorderedAccessView ID3D11UnorderedAccessView;






typedef struct ID3D11VertexShader ID3D11VertexShader;






typedef struct ID3D11HullShader ID3D11HullShader;






typedef struct ID3D11DomainShader ID3D11DomainShader;






typedef struct ID3D11GeometryShader ID3D11GeometryShader;






typedef struct ID3D11PixelShader ID3D11PixelShader;






typedef struct ID3D11ComputeShader ID3D11ComputeShader;






typedef struct ID3D11InputLayout ID3D11InputLayout;






typedef struct ID3D11SamplerState ID3D11SamplerState;






typedef struct ID3D11Asynchronous ID3D11Asynchronous;






typedef struct ID3D11Query ID3D11Query;






typedef struct ID3D11Predicate ID3D11Predicate;






typedef struct ID3D11Counter ID3D11Counter;






typedef struct ID3D11ClassInstance ID3D11ClassInstance;






typedef struct ID3D11ClassLinkage ID3D11ClassLinkage;






typedef struct ID3D11CommandList ID3D11CommandList;






typedef struct ID3D11DeviceContext ID3D11DeviceContext;






typedef struct ID3D11VideoDecoder ID3D11VideoDecoder;






typedef struct ID3D11VideoProcessorEnumerator ID3D11VideoProcessorEnumerator;






typedef struct ID3D11VideoProcessor ID3D11VideoProcessor;






typedef struct ID3D11AuthenticatedChannel ID3D11AuthenticatedChannel;






typedef struct ID3D11CryptoSession ID3D11CryptoSession;






typedef struct ID3D11VideoDecoderOutputView ID3D11VideoDecoderOutputView;






typedef struct ID3D11VideoProcessorInputView ID3D11VideoProcessorInputView;






typedef struct ID3D11VideoProcessorOutputView ID3D11VideoProcessorOutputView;






typedef struct ID3D11VideoContext ID3D11VideoContext;






typedef struct ID3D11VideoDevice ID3D11VideoDevice;






typedef struct ID3D11Device ID3D11Device;
# 342 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C"{
# 1063 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
}
struct CD3D11_DEFAULT {};
extern const __declspec(selectany) CD3D11_DEFAULT D3D11_DEFAULT;
extern "C"{

typedef
enum D3D11_INPUT_CLASSIFICATION
    {
        D3D11_INPUT_PER_VERTEX_DATA = 0,
        D3D11_INPUT_PER_INSTANCE_DATA = 1
    } D3D11_INPUT_CLASSIFICATION;



typedef struct D3D11_INPUT_ELEMENT_DESC
    {
    LPCSTR SemanticName;
    UINT SemanticIndex;
    DXGI_FORMAT Format;
    UINT InputSlot;
    UINT AlignedByteOffset;
    D3D11_INPUT_CLASSIFICATION InputSlotClass;
    UINT InstanceDataStepRate;
    } D3D11_INPUT_ELEMENT_DESC;

typedef
enum D3D11_FILL_MODE
    {
        D3D11_FILL_WIREFRAME = 2,
        D3D11_FILL_SOLID = 3
    } D3D11_FILL_MODE;

typedef D3D_PRIMITIVE_TOPOLOGY D3D11_PRIMITIVE_TOPOLOGY;

typedef D3D_PRIMITIVE D3D11_PRIMITIVE;

typedef
enum D3D11_CULL_MODE
    {
        D3D11_CULL_NONE = 1,
        D3D11_CULL_FRONT = 2,
        D3D11_CULL_BACK = 3
    } D3D11_CULL_MODE;

typedef struct D3D11_SO_DECLARATION_ENTRY
    {
    UINT Stream;
    LPCSTR SemanticName;
    UINT SemanticIndex;
    BYTE StartComponent;
    BYTE ComponentCount;
    BYTE OutputSlot;
    } D3D11_SO_DECLARATION_ENTRY;

typedef struct D3D11_VIEWPORT
    {
    FLOAT TopLeftX;
    FLOAT TopLeftY;
    FLOAT Width;
    FLOAT Height;
    FLOAT MinDepth;
    FLOAT MaxDepth;
    } D3D11_VIEWPORT;


}
inline bool operator==( const D3D11_VIEWPORT& l, const D3D11_VIEWPORT& r )
{
    return l.TopLeftX == r.TopLeftX && l.TopLeftY == r.TopLeftY && l.Width == r.Width &&
        l.Height == r.Height && l.MinDepth == r.MinDepth && l.MaxDepth == r.MaxDepth;
}
inline bool operator!=( const D3D11_VIEWPORT& l, const D3D11_VIEWPORT& r )
{ return !( l == r ); }
extern "C"{

typedef
enum D3D11_RESOURCE_DIMENSION
    {
        D3D11_RESOURCE_DIMENSION_UNKNOWN = 0,
        D3D11_RESOURCE_DIMENSION_BUFFER = 1,
        D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2,
        D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3,
        D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4
    } D3D11_RESOURCE_DIMENSION;

typedef D3D_SRV_DIMENSION D3D11_SRV_DIMENSION;

typedef
enum D3D11_DSV_DIMENSION
    {
        D3D11_DSV_DIMENSION_UNKNOWN = 0,
        D3D11_DSV_DIMENSION_TEXTURE1D = 1,
        D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2,
        D3D11_DSV_DIMENSION_TEXTURE2D = 3,
        D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4,
        D3D11_DSV_DIMENSION_TEXTURE2DMS = 5,
        D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
    } D3D11_DSV_DIMENSION;

typedef
enum D3D11_RTV_DIMENSION
    {
        D3D11_RTV_DIMENSION_UNKNOWN = 0,
        D3D11_RTV_DIMENSION_BUFFER = 1,
        D3D11_RTV_DIMENSION_TEXTURE1D = 2,
        D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D11_RTV_DIMENSION_TEXTURE2D = 4,
        D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D11_RTV_DIMENSION_TEXTURE2DMS = 6,
        D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
        D3D11_RTV_DIMENSION_TEXTURE3D = 8
    } D3D11_RTV_DIMENSION;

typedef
enum D3D11_UAV_DIMENSION
    {
        D3D11_UAV_DIMENSION_UNKNOWN = 0,
        D3D11_UAV_DIMENSION_BUFFER = 1,
        D3D11_UAV_DIMENSION_TEXTURE1D = 2,
        D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D11_UAV_DIMENSION_TEXTURE2D = 4,
        D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D11_UAV_DIMENSION_TEXTURE3D = 8
    } D3D11_UAV_DIMENSION;

typedef
enum D3D11_USAGE
    {
        D3D11_USAGE_DEFAULT = 0,
        D3D11_USAGE_IMMUTABLE = 1,
        D3D11_USAGE_DYNAMIC = 2,
        D3D11_USAGE_STAGING = 3
    } D3D11_USAGE;

typedef
enum D3D11_BIND_FLAG
    {
        D3D11_BIND_VERTEX_BUFFER = 0x1L,
        D3D11_BIND_INDEX_BUFFER = 0x2L,
        D3D11_BIND_CONSTANT_BUFFER = 0x4L,
        D3D11_BIND_SHADER_RESOURCE = 0x8L,
        D3D11_BIND_STREAM_OUTPUT = 0x10L,
        D3D11_BIND_RENDER_TARGET = 0x20L,
        D3D11_BIND_DEPTH_STENCIL = 0x40L,
        D3D11_BIND_UNORDERED_ACCESS = 0x80L,
        D3D11_BIND_DECODER = 0x200L,
        D3D11_BIND_VIDEO_ENCODER = 0x400L
    } D3D11_BIND_FLAG;

typedef
enum D3D11_CPU_ACCESS_FLAG
    {
        D3D11_CPU_ACCESS_WRITE = 0x10000L,
        D3D11_CPU_ACCESS_READ = 0x20000L
    } D3D11_CPU_ACCESS_FLAG;

typedef
enum D3D11_RESOURCE_MISC_FLAG
    {
        D3D11_RESOURCE_MISC_GENERATE_MIPS = 0x1L,
        D3D11_RESOURCE_MISC_SHARED = 0x2L,
        D3D11_RESOURCE_MISC_TEXTURECUBE = 0x4L,
        D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 0x10L,
        D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 0x20L,
        D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 0x40L,
        D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 0x80L,
        D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x100L,
        D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 0x200L,
        D3D11_RESOURCE_MISC_SHARED_NTHANDLE = 0x800L,
        D3D11_RESOURCE_MISC_RESTRICTED_CONTENT = 0x1000L,
        D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = 0x2000L,
        D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 0x4000L,
        D3D11_RESOURCE_MISC_GUARDED = 0x8000L,
        D3D11_RESOURCE_MISC_TILE_POOL = 0x20000L,
        D3D11_RESOURCE_MISC_TILED = 0x40000L
    } D3D11_RESOURCE_MISC_FLAG;

typedef
enum D3D11_MAP
    {
        D3D11_MAP_READ = 1,
        D3D11_MAP_WRITE = 2,
        D3D11_MAP_READ_WRITE = 3,
        D3D11_MAP_WRITE_DISCARD = 4,
        D3D11_MAP_WRITE_NO_OVERWRITE = 5
    } D3D11_MAP;

typedef
enum D3D11_MAP_FLAG
    {
        D3D11_MAP_FLAG_DO_NOT_WAIT = 0x100000L
    } D3D11_MAP_FLAG;

typedef
enum D3D11_RAISE_FLAG
    {
        D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 0x1L
    } D3D11_RAISE_FLAG;

typedef
enum D3D11_CLEAR_FLAG
    {
        D3D11_CLEAR_DEPTH = 0x1L,
        D3D11_CLEAR_STENCIL = 0x2L
    } D3D11_CLEAR_FLAG;

typedef RECT D3D11_RECT;


}
struct CD3D11_RECT : public D3D11_RECT
{
    CD3D11_RECT()
    {}
    explicit CD3D11_RECT( const D3D11_RECT& o ) :
        D3D11_RECT( o )
    {}
    explicit CD3D11_RECT(
        LONG Left,
        LONG Top,
        LONG Right,
        LONG Bottom )
    {
        left = Left;
        top = Top;
        right = Right;
        bottom = Bottom;
    }
    ~CD3D11_RECT() {}
    operator const D3D11_RECT&() const { return *this; }
};
inline bool operator==( const D3D11_RECT& l, const D3D11_RECT& r )
{
    return l.left == r.left && l.top == r.top &&
        l.right == r.right && l.bottom == r.bottom;
}
inline bool operator!=( const D3D11_RECT& l, const D3D11_RECT& r )
{ return !( l == r ); }
extern "C"{

typedef struct D3D11_BOX
    {
    UINT left;
    UINT top;
    UINT front;
    UINT right;
    UINT bottom;
    UINT back;
    } D3D11_BOX;


}
struct CD3D11_BOX : public D3D11_BOX
{
    CD3D11_BOX()
    {}
    explicit CD3D11_BOX( const D3D11_BOX& o ) :
        D3D11_BOX( o )
    {}
    explicit CD3D11_BOX(
        LONG Left,
        LONG Top,
        LONG Front,
        LONG Right,
        LONG Bottom,
        LONG Back )
    {
        left = Left;
        top = Top;
        front = Front;
        right = Right;
        bottom = Bottom;
        back = Back;
    }
    ~CD3D11_BOX() {}
    operator const D3D11_BOX&() const { return *this; }
};
inline bool operator==( const D3D11_BOX& l, const D3D11_BOX& r )
{
    return l.left == r.left && l.top == r.top && l.front == r.front &&
        l.right == r.right && l.bottom == r.bottom && l.back == r.back;
}
inline bool operator!=( const D3D11_BOX& l, const D3D11_BOX& r )
{ return !( l == r ); }
extern "C"{





extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0000_v0_0_s_ifspec;
# 1363 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11DeviceChild;



    struct __declspec(uuid("1841e5c8-16b0-489b-bcc8-44cfb0d5deae")) __declspec(novtable)
    ID3D11DeviceChild : public IUnknown
    {
    public:
        virtual void __stdcall GetDevice(

                   ID3D11Device **ppDevice) = 0;

        virtual HRESULT __stdcall GetPrivateData(

                  const GUID & guid,

                     UINT *pDataSize,

                                                  void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateData(

                  const GUID & guid,

                  UINT DataSize,

                                              const void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateDataInterface(

                  const GUID & guid,

                      const IUnknown *pData) = 0;

    };
# 1497 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_COMPARISON_FUNC
    {
        D3D11_COMPARISON_NEVER = 1,
        D3D11_COMPARISON_LESS = 2,
        D3D11_COMPARISON_EQUAL = 3,
        D3D11_COMPARISON_LESS_EQUAL = 4,
        D3D11_COMPARISON_GREATER = 5,
        D3D11_COMPARISON_NOT_EQUAL = 6,
        D3D11_COMPARISON_GREATER_EQUAL = 7,
        D3D11_COMPARISON_ALWAYS = 8
    } D3D11_COMPARISON_FUNC;

typedef
enum D3D11_DEPTH_WRITE_MASK
    {
        D3D11_DEPTH_WRITE_MASK_ZERO = 0,
        D3D11_DEPTH_WRITE_MASK_ALL = 1
    } D3D11_DEPTH_WRITE_MASK;

typedef
enum D3D11_STENCIL_OP
    {
        D3D11_STENCIL_OP_KEEP = 1,
        D3D11_STENCIL_OP_ZERO = 2,
        D3D11_STENCIL_OP_REPLACE = 3,
        D3D11_STENCIL_OP_INCR_SAT = 4,
        D3D11_STENCIL_OP_DECR_SAT = 5,
        D3D11_STENCIL_OP_INVERT = 6,
        D3D11_STENCIL_OP_INCR = 7,
        D3D11_STENCIL_OP_DECR = 8
    } D3D11_STENCIL_OP;

typedef struct D3D11_DEPTH_STENCILOP_DESC
    {
    D3D11_STENCIL_OP StencilFailOp;
    D3D11_STENCIL_OP StencilDepthFailOp;
    D3D11_STENCIL_OP StencilPassOp;
    D3D11_COMPARISON_FUNC StencilFunc;
    } D3D11_DEPTH_STENCILOP_DESC;

typedef struct D3D11_DEPTH_STENCIL_DESC
    {
    BOOL DepthEnable;
    D3D11_DEPTH_WRITE_MASK DepthWriteMask;
    D3D11_COMPARISON_FUNC DepthFunc;
    BOOL StencilEnable;
    UINT8 StencilReadMask;
    UINT8 StencilWriteMask;
    D3D11_DEPTH_STENCILOP_DESC FrontFace;
    D3D11_DEPTH_STENCILOP_DESC BackFace;
    } D3D11_DEPTH_STENCIL_DESC;


}
struct CD3D11_DEPTH_STENCIL_DESC : public D3D11_DEPTH_STENCIL_DESC
{
    CD3D11_DEPTH_STENCIL_DESC()
    {}
    explicit CD3D11_DEPTH_STENCIL_DESC( const D3D11_DEPTH_STENCIL_DESC& o ) :
        D3D11_DEPTH_STENCIL_DESC( o )
    {}
    explicit CD3D11_DEPTH_STENCIL_DESC( CD3D11_DEFAULT )
    {
        DepthEnable = 1;
        DepthWriteMask = D3D11_DEPTH_WRITE_MASK_ALL;
        DepthFunc = D3D11_COMPARISON_LESS;
        StencilEnable = 0;
        StencilReadMask = ( 0xff );
        StencilWriteMask = ( 0xff );
        const D3D11_DEPTH_STENCILOP_DESC defaultStencilOp =
        { D3D11_STENCIL_OP_KEEP, D3D11_STENCIL_OP_KEEP, D3D11_STENCIL_OP_KEEP, D3D11_COMPARISON_ALWAYS };
        FrontFace = defaultStencilOp;
        BackFace = defaultStencilOp;
    }
    explicit CD3D11_DEPTH_STENCIL_DESC(
        BOOL depthEnable,
        D3D11_DEPTH_WRITE_MASK depthWriteMask,
        D3D11_COMPARISON_FUNC depthFunc,
        BOOL stencilEnable,
        UINT8 stencilReadMask,
        UINT8 stencilWriteMask,
        D3D11_STENCIL_OP frontStencilFailOp,
        D3D11_STENCIL_OP frontStencilDepthFailOp,
        D3D11_STENCIL_OP frontStencilPassOp,
        D3D11_COMPARISON_FUNC frontStencilFunc,
        D3D11_STENCIL_OP backStencilFailOp,
        D3D11_STENCIL_OP backStencilDepthFailOp,
        D3D11_STENCIL_OP backStencilPassOp,
        D3D11_COMPARISON_FUNC backStencilFunc )
    {
        DepthEnable = depthEnable;
        DepthWriteMask = depthWriteMask;
        DepthFunc = depthFunc;
        StencilEnable = stencilEnable;
        StencilReadMask = stencilReadMask;
        StencilWriteMask = stencilWriteMask;
        FrontFace.StencilFailOp = frontStencilFailOp;
        FrontFace.StencilDepthFailOp = frontStencilDepthFailOp;
        FrontFace.StencilPassOp = frontStencilPassOp;
        FrontFace.StencilFunc = frontStencilFunc;
        BackFace.StencilFailOp = backStencilFailOp;
        BackFace.StencilDepthFailOp = backStencilDepthFailOp;
        BackFace.StencilPassOp = backStencilPassOp;
        BackFace.StencilFunc = backStencilFunc;
    }
    ~CD3D11_DEPTH_STENCIL_DESC() {}
    operator const D3D11_DEPTH_STENCIL_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0001_v0_0_s_ifspec;
# 1620 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11DepthStencilState;



    struct __declspec(uuid("03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1")) __declspec(novtable)
    ID3D11DepthStencilState : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_DEPTH_STENCIL_DESC *pDesc) = 0;

    };
# 1741 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_BLEND
    {
        D3D11_BLEND_ZERO = 1,
        D3D11_BLEND_ONE = 2,
        D3D11_BLEND_SRC_COLOR = 3,
        D3D11_BLEND_INV_SRC_COLOR = 4,
        D3D11_BLEND_SRC_ALPHA = 5,
        D3D11_BLEND_INV_SRC_ALPHA = 6,
        D3D11_BLEND_DEST_ALPHA = 7,
        D3D11_BLEND_INV_DEST_ALPHA = 8,
        D3D11_BLEND_DEST_COLOR = 9,
        D3D11_BLEND_INV_DEST_COLOR = 10,
        D3D11_BLEND_SRC_ALPHA_SAT = 11,
        D3D11_BLEND_BLEND_FACTOR = 14,
        D3D11_BLEND_INV_BLEND_FACTOR = 15,
        D3D11_BLEND_SRC1_COLOR = 16,
        D3D11_BLEND_INV_SRC1_COLOR = 17,
        D3D11_BLEND_SRC1_ALPHA = 18,
        D3D11_BLEND_INV_SRC1_ALPHA = 19
    } D3D11_BLEND;

typedef
enum D3D11_BLEND_OP
    {
        D3D11_BLEND_OP_ADD = 1,
        D3D11_BLEND_OP_SUBTRACT = 2,
        D3D11_BLEND_OP_REV_SUBTRACT = 3,
        D3D11_BLEND_OP_MIN = 4,
        D3D11_BLEND_OP_MAX = 5
    } D3D11_BLEND_OP;

typedef
enum D3D11_COLOR_WRITE_ENABLE
    {
        D3D11_COLOR_WRITE_ENABLE_RED = 1,
        D3D11_COLOR_WRITE_ENABLE_GREEN = 2,
        D3D11_COLOR_WRITE_ENABLE_BLUE = 4,
        D3D11_COLOR_WRITE_ENABLE_ALPHA = 8,
        D3D11_COLOR_WRITE_ENABLE_ALL = ( ( ( D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN ) | D3D11_COLOR_WRITE_ENABLE_BLUE ) | D3D11_COLOR_WRITE_ENABLE_ALPHA )
    } D3D11_COLOR_WRITE_ENABLE;

typedef struct D3D11_RENDER_TARGET_BLEND_DESC
    {
    BOOL BlendEnable;
    D3D11_BLEND SrcBlend;
    D3D11_BLEND DestBlend;
    D3D11_BLEND_OP BlendOp;
    D3D11_BLEND SrcBlendAlpha;
    D3D11_BLEND DestBlendAlpha;
    D3D11_BLEND_OP BlendOpAlpha;
    UINT8 RenderTargetWriteMask;
    } D3D11_RENDER_TARGET_BLEND_DESC;

typedef struct D3D11_BLEND_DESC
    {
    BOOL AlphaToCoverageEnable;
    BOOL IndependentBlendEnable;
    D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[ 8 ];
    } D3D11_BLEND_DESC;




}
struct CD3D11_BLEND_DESC : public D3D11_BLEND_DESC
{
    CD3D11_BLEND_DESC()
    {}
    explicit CD3D11_BLEND_DESC( const D3D11_BLEND_DESC& o ) :
        D3D11_BLEND_DESC( o )
    {}
    explicit CD3D11_BLEND_DESC( CD3D11_DEFAULT )
    {
        AlphaToCoverageEnable = 0;
        IndependentBlendEnable = 0;
        const D3D11_RENDER_TARGET_BLEND_DESC defaultRenderTargetBlendDesc =
        {
            0,
            D3D11_BLEND_ONE, D3D11_BLEND_ZERO, D3D11_BLEND_OP_ADD,
            D3D11_BLEND_ONE, D3D11_BLEND_ZERO, D3D11_BLEND_OP_ADD,
            D3D11_COLOR_WRITE_ENABLE_ALL,
        };
        for (UINT i = 0; i < ( 8 ); ++i)
            RenderTarget[ i ] = defaultRenderTargetBlendDesc;
    }
    ~CD3D11_BLEND_DESC() {}
    operator const D3D11_BLEND_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0002_v0_0_s_ifspec;
# 1844 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11BlendState;



    struct __declspec(uuid("75b68faa-347d-4159-8f45-a0640f01cd9a")) __declspec(novtable)
    ID3D11BlendState : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_BLEND_DESC *pDesc) = 0;

    };
# 1965 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef struct D3D11_RASTERIZER_DESC
    {
    D3D11_FILL_MODE FillMode;
    D3D11_CULL_MODE CullMode;
    BOOL FrontCounterClockwise;
    INT DepthBias;
    FLOAT DepthBiasClamp;
    FLOAT SlopeScaledDepthBias;
    BOOL DepthClipEnable;
    BOOL ScissorEnable;
    BOOL MultisampleEnable;
    BOOL AntialiasedLineEnable;
    } D3D11_RASTERIZER_DESC;


}
struct CD3D11_RASTERIZER_DESC : public D3D11_RASTERIZER_DESC
{
    CD3D11_RASTERIZER_DESC()
    {}
    explicit CD3D11_RASTERIZER_DESC( const D3D11_RASTERIZER_DESC& o ) :
        D3D11_RASTERIZER_DESC( o )
    {}
    explicit CD3D11_RASTERIZER_DESC( CD3D11_DEFAULT )
    {
        FillMode = D3D11_FILL_SOLID;
        CullMode = D3D11_CULL_BACK;
        FrontCounterClockwise = 0;
        DepthBias = ( 0 );
        DepthBiasClamp = ( 0.0f );
        SlopeScaledDepthBias = ( 0.0f );
        DepthClipEnable = 1;
        ScissorEnable = 0;
        MultisampleEnable = 0;
        AntialiasedLineEnable = 0;
    }
    explicit CD3D11_RASTERIZER_DESC(
        D3D11_FILL_MODE fillMode,
        D3D11_CULL_MODE cullMode,
        BOOL frontCounterClockwise,
        INT depthBias,
        FLOAT depthBiasClamp,
        FLOAT slopeScaledDepthBias,
        BOOL depthClipEnable,
        BOOL scissorEnable,
        BOOL multisampleEnable,
        BOOL antialiasedLineEnable )
    {
        FillMode = fillMode;
        CullMode = cullMode;
        FrontCounterClockwise = frontCounterClockwise;
        DepthBias = depthBias;
        DepthBiasClamp = depthBiasClamp;
        SlopeScaledDepthBias = slopeScaledDepthBias;
        DepthClipEnable = depthClipEnable;
        ScissorEnable = scissorEnable;
        MultisampleEnable = multisampleEnable;
        AntialiasedLineEnable = antialiasedLineEnable;
    }
    ~CD3D11_RASTERIZER_DESC() {}
    operator const D3D11_RASTERIZER_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0003_v0_0_s_ifspec;
# 2041 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11RasterizerState;



    struct __declspec(uuid("9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7")) __declspec(novtable)
    ID3D11RasterizerState : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_RASTERIZER_DESC *pDesc) = 0;

    };
# 2163 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
}
inline UINT D3D11CalcSubresource( UINT MipSlice, UINT ArraySlice, UINT MipLevels )
{ return MipSlice + ArraySlice * MipLevels; }
extern "C"{

typedef struct D3D11_SUBRESOURCE_DATA
    {
    const void *pSysMem;
    UINT SysMemPitch;
    UINT SysMemSlicePitch;
    } D3D11_SUBRESOURCE_DATA;

typedef struct D3D11_MAPPED_SUBRESOURCE
    {
    void *pData;
    UINT RowPitch;
    UINT DepthPitch;
    } D3D11_MAPPED_SUBRESOURCE;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0004_v0_0_s_ifspec;
# 2194 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11Resource;



    struct __declspec(uuid("dc8e63f3-d12b-4952-b47b-5e45026a862d")) __declspec(novtable)
    ID3D11Resource : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetType(

                   D3D11_RESOURCE_DIMENSION *pResourceDimension) = 0;

        virtual void __stdcall SetEvictionPriority(

                  UINT EvictionPriority) = 0;

        virtual UINT __stdcall GetEvictionPriority( void) = 0;

    };
# 2335 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef struct D3D11_BUFFER_DESC
    {
    UINT ByteWidth;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    UINT StructureByteStride;
    } D3D11_BUFFER_DESC;


}
struct CD3D11_BUFFER_DESC : public D3D11_BUFFER_DESC
{
    CD3D11_BUFFER_DESC()
    {}
    explicit CD3D11_BUFFER_DESC( const D3D11_BUFFER_DESC& o ) :
        D3D11_BUFFER_DESC( o )
    {}
    explicit CD3D11_BUFFER_DESC(
        UINT byteWidth,
        UINT bindFlags,
        D3D11_USAGE usage = D3D11_USAGE_DEFAULT,
        UINT cpuaccessFlags = 0,
        UINT miscFlags = 0,
        UINT structureByteStride = 0 )
    {
        ByteWidth = byteWidth;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags ;
        MiscFlags = miscFlags;
        StructureByteStride = structureByteStride;
    }
    ~CD3D11_BUFFER_DESC() {}
    operator const D3D11_BUFFER_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0005_v0_0_s_ifspec;
# 2386 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11Buffer;



    struct __declspec(uuid("48570b85-d1ee-4fcd-a250-eb350722b037")) __declspec(novtable)
    ID3D11Buffer : public ID3D11Resource
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_BUFFER_DESC *pDesc) = 0;

    };
# 2530 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef struct D3D11_TEXTURE1D_DESC
    {
    UINT Width;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    } D3D11_TEXTURE1D_DESC;


}
struct CD3D11_TEXTURE1D_DESC : public D3D11_TEXTURE1D_DESC
{
    CD3D11_TEXTURE1D_DESC()
    {}
    explicit CD3D11_TEXTURE1D_DESC( const D3D11_TEXTURE1D_DESC& o ) :
        D3D11_TEXTURE1D_DESC( o )
    {}
    explicit CD3D11_TEXTURE1D_DESC(
        DXGI_FORMAT format,
        UINT width,
        UINT arraySize = 1,
        UINT mipLevels = 0,
        UINT bindFlags = D3D11_BIND_SHADER_RESOURCE,
        D3D11_USAGE usage = D3D11_USAGE_DEFAULT,
        UINT cpuaccessFlags= 0,
        UINT miscFlags = 0 )
    {
        Width = width;
        MipLevels = mipLevels;
        ArraySize = arraySize;
        Format = format;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags;
        MiscFlags = miscFlags;
    }
    ~CD3D11_TEXTURE1D_DESC() {}
    operator const D3D11_TEXTURE1D_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0006_v0_0_s_ifspec;
# 2587 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11Texture1D;



    struct __declspec(uuid("f8fb5c27-c6b3-4f75-a4c8-439af2ef564c")) __declspec(novtable)
    ID3D11Texture1D : public ID3D11Resource
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_TEXTURE1D_DESC *pDesc) = 0;

    };
# 2731 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef struct D3D11_TEXTURE2D_DESC
    {
    UINT Width;
    UINT Height;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    } D3D11_TEXTURE2D_DESC;


}
struct CD3D11_TEXTURE2D_DESC : public D3D11_TEXTURE2D_DESC
{
    CD3D11_TEXTURE2D_DESC()
    {}
    explicit CD3D11_TEXTURE2D_DESC( const D3D11_TEXTURE2D_DESC& o ) :
        D3D11_TEXTURE2D_DESC( o )
    {}
    explicit CD3D11_TEXTURE2D_DESC(
        DXGI_FORMAT format,
        UINT width,
        UINT height,
        UINT arraySize = 1,
        UINT mipLevels = 0,
        UINT bindFlags = D3D11_BIND_SHADER_RESOURCE,
        D3D11_USAGE usage = D3D11_USAGE_DEFAULT,
        UINT cpuaccessFlags = 0,
        UINT sampleCount = 1,
        UINT sampleQuality = 0,
        UINT miscFlags = 0 )
    {
        Width = width;
        Height = height;
        MipLevels = mipLevels;
        ArraySize = arraySize;
        Format = format;
        SampleDesc.Count = sampleCount;
        SampleDesc.Quality = sampleQuality;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags;
        MiscFlags = miscFlags;
    }
    ~CD3D11_TEXTURE2D_DESC() {}
    operator const D3D11_TEXTURE2D_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0007_v0_0_s_ifspec;
# 2796 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11Texture2D;



    struct __declspec(uuid("6f15aaf2-d208-4e89-9ab4-489535d34f9c")) __declspec(novtable)
    ID3D11Texture2D : public ID3D11Resource
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_TEXTURE2D_DESC *pDesc) = 0;

    };
# 2940 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef struct D3D11_TEXTURE3D_DESC
    {
    UINT Width;
    UINT Height;
    UINT Depth;
    UINT MipLevels;
    DXGI_FORMAT Format;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    } D3D11_TEXTURE3D_DESC;


}
struct CD3D11_TEXTURE3D_DESC : public D3D11_TEXTURE3D_DESC
{
    CD3D11_TEXTURE3D_DESC()
    {}
    explicit CD3D11_TEXTURE3D_DESC( const D3D11_TEXTURE3D_DESC& o ) :
        D3D11_TEXTURE3D_DESC( o )
    {}
    explicit CD3D11_TEXTURE3D_DESC(
        DXGI_FORMAT format,
        UINT width,
        UINT height,
        UINT depth,
        UINT mipLevels = 0,
        UINT bindFlags = D3D11_BIND_SHADER_RESOURCE,
        D3D11_USAGE usage = D3D11_USAGE_DEFAULT,
        UINT cpuaccessFlags = 0,
        UINT miscFlags = 0 )
    {
        Width = width;
        Height = height;
        Depth = depth;
        MipLevels = mipLevels;
        Format = format;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags;
        MiscFlags = miscFlags;
    }
    ~CD3D11_TEXTURE3D_DESC() {}
    operator const D3D11_TEXTURE3D_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0008_v0_0_s_ifspec;
# 3000 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11Texture3D;



    struct __declspec(uuid("037e866e-f56d-4357-a8af-9dabbe6e250e")) __declspec(novtable)
    ID3D11Texture3D : public ID3D11Resource
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_TEXTURE3D_DESC *pDesc) = 0;

    };
# 3144 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_TEXTURECUBE_FACE
    {
        D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0,
        D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 1,
        D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 2,
        D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 3,
        D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 4,
        D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 5
    } D3D11_TEXTURECUBE_FACE;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0009_v0_0_s_ifspec;
# 3167 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11View;



    struct __declspec(uuid("839d1216-bb2e-412b-b7f4-a9dbebe08ed1")) __declspec(novtable)
    ID3D11View : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetResource(

                   ID3D11Resource **ppResource) = 0;

    };
# 3288 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef struct D3D11_BUFFER_SRV
    {
    union
        {
        UINT FirstElement;
        UINT ElementOffset;
        } ;
    union
        {
        UINT NumElements;
        UINT ElementWidth;
        } ;
    } D3D11_BUFFER_SRV;

typedef
enum D3D11_BUFFEREX_SRV_FLAG
    {
        D3D11_BUFFEREX_SRV_FLAG_RAW = 0x1
    } D3D11_BUFFEREX_SRV_FLAG;

typedef struct D3D11_BUFFEREX_SRV
    {
    UINT FirstElement;
    UINT NumElements;
    UINT Flags;
    } D3D11_BUFFEREX_SRV;

typedef struct D3D11_TEX1D_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D11_TEX1D_SRV;

typedef struct D3D11_TEX1D_ARRAY_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX1D_ARRAY_SRV;

typedef struct D3D11_TEX2D_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D11_TEX2D_SRV;

typedef struct D3D11_TEX2D_ARRAY_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2D_ARRAY_SRV;

typedef struct D3D11_TEX3D_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D11_TEX3D_SRV;

typedef struct D3D11_TEXCUBE_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D11_TEXCUBE_SRV;

typedef struct D3D11_TEXCUBE_ARRAY_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT First2DArrayFace;
    UINT NumCubes;
    } D3D11_TEXCUBE_ARRAY_SRV;

typedef struct D3D11_TEX2DMS_SRV
    {
    UINT UnusedField_NothingToDefine;
    } D3D11_TEX2DMS_SRV;

typedef struct D3D11_TEX2DMS_ARRAY_SRV
    {
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2DMS_ARRAY_SRV;

typedef struct D3D11_SHADER_RESOURCE_VIEW_DESC
    {
    DXGI_FORMAT Format;
    D3D11_SRV_DIMENSION ViewDimension;
    union
        {
        D3D11_BUFFER_SRV Buffer;
        D3D11_TEX1D_SRV Texture1D;
        D3D11_TEX1D_ARRAY_SRV Texture1DArray;
        D3D11_TEX2D_SRV Texture2D;
        D3D11_TEX2D_ARRAY_SRV Texture2DArray;
        D3D11_TEX2DMS_SRV Texture2DMS;
        D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        D3D11_TEX3D_SRV Texture3D;
        D3D11_TEXCUBE_SRV TextureCube;
        D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
        D3D11_BUFFEREX_SRV BufferEx;
        } ;
    } D3D11_SHADER_RESOURCE_VIEW_DESC;


}
struct CD3D11_SHADER_RESOURCE_VIEW_DESC : public D3D11_SHADER_RESOURCE_VIEW_DESC
{
    CD3D11_SHADER_RESOURCE_VIEW_DESC()
    {}
    explicit CD3D11_SHADER_RESOURCE_VIEW_DESC( const D3D11_SHADER_RESOURCE_VIEW_DESC& o ) :
        D3D11_SHADER_RESOURCE_VIEW_DESC( o )
    {}
    explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
        D3D11_SRV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mostDetailedMip = 0,
        UINT mipLevels = -1,
        UINT firstArraySlice = 0,
        UINT arraySize = -1,
        UINT flags = 0 )
    {
        Format = format;
        ViewDimension = viewDimension;
        switch (viewDimension)
        {
        case D3D11_SRV_DIMENSION_BUFFER:
            Buffer.FirstElement = mostDetailedMip;
            Buffer.NumElements = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE1D:
            Texture1D.MostDetailedMip = mostDetailedMip;
            Texture1D.MipLevels = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MostDetailedMip = mostDetailedMip;
            Texture1DArray.MipLevels = mipLevels;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE2D:
            Texture2D.MostDetailedMip = mostDetailedMip;
            Texture2D.MipLevels = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MostDetailedMip = mostDetailedMip;
            Texture2DArray.MipLevels = mipLevels;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE2DMS:
            break;
        case D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY:
            Texture2DMSArray.FirstArraySlice = firstArraySlice;
            Texture2DMSArray.ArraySize = arraySize;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE3D:
            Texture3D.MostDetailedMip = mostDetailedMip;
            Texture3D.MipLevels = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURECUBE:
            TextureCube.MostDetailedMip = mostDetailedMip;
            TextureCube.MipLevels = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURECUBEARRAY:
            TextureCubeArray.MostDetailedMip = mostDetailedMip;
            TextureCubeArray.MipLevels = mipLevels;
            TextureCubeArray.First2DArrayFace = firstArraySlice;
            TextureCubeArray.NumCubes = arraySize;
            break;
        case D3D11_SRV_DIMENSION_BUFFEREX:
            BufferEx.FirstElement = mostDetailedMip;
            BufferEx.NumElements = mipLevels;
            BufferEx.Flags = flags;
            break;
        default: break;
        }
    }
    explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
             ID3D11Buffer*,
        DXGI_FORMAT format,
        UINT firstElement,
        UINT numElements,
        UINT flags = 0 )
    {
        Format = format;
        ViewDimension = D3D11_SRV_DIMENSION_BUFFEREX;
        BufferEx.FirstElement = firstElement;
        BufferEx.NumElements = numElements;
        BufferEx.Flags = flags;
    }
    explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
             ID3D11Texture1D* pTex1D,
        D3D11_SRV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mostDetailedMip = 0,
        UINT mipLevels = -1,
        UINT firstArraySlice = 0,
        UINT arraySize = -1 )
    {
        ViewDimension = viewDimension;
        if (DXGI_FORMAT_UNKNOWN == format || -1 == mipLevels ||
            (-1 == arraySize && D3D11_SRV_DIMENSION_TEXTURE1DARRAY == viewDimension))
        {
            D3D11_TEXTURE1D_DESC TexDesc;
            pTex1D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == mipLevels) mipLevels = TexDesc.MipLevels - mostDetailedMip;
            if (-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_SRV_DIMENSION_TEXTURE1D:
            Texture1D.MostDetailedMip = mostDetailedMip;
            Texture1D.MipLevels = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MostDetailedMip = mostDetailedMip;
            Texture1DArray.MipLevels = mipLevels;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
             ID3D11Texture2D* pTex2D,
        D3D11_SRV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mostDetailedMip = 0,
        UINT mipLevels = -1,
        UINT firstArraySlice = 0,
        UINT arraySize = -1 )
    {
        ViewDimension = viewDimension;
        if (DXGI_FORMAT_UNKNOWN == format ||
            (-1 == mipLevels &&
                D3D11_SRV_DIMENSION_TEXTURE2DMS != viewDimension &&
                D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY != viewDimension) ||
            (-1 == arraySize &&
                (D3D11_SRV_DIMENSION_TEXTURE2DARRAY == viewDimension ||
                D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY == viewDimension ||
                D3D11_SRV_DIMENSION_TEXTURECUBEARRAY == viewDimension)))
        {
            D3D11_TEXTURE2D_DESC TexDesc;
            pTex2D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == mipLevels) mipLevels = TexDesc.MipLevels - mostDetailedMip;
            if (-1 == arraySize)
            {
                arraySize = TexDesc.ArraySize - firstArraySlice;
                if (D3D11_SRV_DIMENSION_TEXTURECUBEARRAY == viewDimension) arraySize /= 6;
            }
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_SRV_DIMENSION_TEXTURE2D:
            Texture2D.MostDetailedMip = mostDetailedMip;
            Texture2D.MipLevels = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MostDetailedMip = mostDetailedMip;
            Texture2DArray.MipLevels = mipLevels;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE2DMS:
            break;
        case D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY:
            Texture2DMSArray.FirstArraySlice = firstArraySlice;
            Texture2DMSArray.ArraySize = arraySize;
            break;
        case D3D11_SRV_DIMENSION_TEXTURECUBE:
            TextureCube.MostDetailedMip = mostDetailedMip;
            TextureCube.MipLevels = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURECUBEARRAY:
            TextureCubeArray.MostDetailedMip = mostDetailedMip;
            TextureCubeArray.MipLevels = mipLevels;
            TextureCubeArray.First2DArrayFace = firstArraySlice;
            TextureCubeArray.NumCubes = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
             ID3D11Texture3D* pTex3D,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mostDetailedMip = 0,
        UINT mipLevels = -1 )
    {
        ViewDimension = D3D11_SRV_DIMENSION_TEXTURE3D;
        if (DXGI_FORMAT_UNKNOWN == format || -1 == mipLevels)
        {
            D3D11_TEXTURE3D_DESC TexDesc;
            pTex3D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == mipLevels) mipLevels = TexDesc.MipLevels - mostDetailedMip;
        }
        Format = format;
        Texture3D.MostDetailedMip = mostDetailedMip;
        Texture3D.MipLevels = mipLevels;
    }
    ~CD3D11_SHADER_RESOURCE_VIEW_DESC() {}
    operator const D3D11_SHADER_RESOURCE_VIEW_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0010_v0_0_s_ifspec;
# 3612 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11ShaderResourceView;



    struct __declspec(uuid("b0e06fe0-8192-4e1a-b1ca-36d7414710b2")) __declspec(novtable)
    ID3D11ShaderResourceView : public ID3D11View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc) = 0;

    };
# 3742 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef struct D3D11_BUFFER_RTV
    {
    union
        {
        UINT FirstElement;
        UINT ElementOffset;
        } ;
    union
        {
        UINT NumElements;
        UINT ElementWidth;
        } ;
    } D3D11_BUFFER_RTV;

typedef struct D3D11_TEX1D_RTV
    {
    UINT MipSlice;
    } D3D11_TEX1D_RTV;

typedef struct D3D11_TEX1D_ARRAY_RTV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX1D_ARRAY_RTV;

typedef struct D3D11_TEX2D_RTV
    {
    UINT MipSlice;
    } D3D11_TEX2D_RTV;

typedef struct D3D11_TEX2DMS_RTV
    {
    UINT UnusedField_NothingToDefine;
    } D3D11_TEX2DMS_RTV;

typedef struct D3D11_TEX2D_ARRAY_RTV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2D_ARRAY_RTV;

typedef struct D3D11_TEX2DMS_ARRAY_RTV
    {
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2DMS_ARRAY_RTV;

typedef struct D3D11_TEX3D_RTV
    {
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
    } D3D11_TEX3D_RTV;

typedef struct D3D11_RENDER_TARGET_VIEW_DESC
    {
    DXGI_FORMAT Format;
    D3D11_RTV_DIMENSION ViewDimension;
    union
        {
        D3D11_BUFFER_RTV Buffer;
        D3D11_TEX1D_RTV Texture1D;
        D3D11_TEX1D_ARRAY_RTV Texture1DArray;
        D3D11_TEX2D_RTV Texture2D;
        D3D11_TEX2D_ARRAY_RTV Texture2DArray;
        D3D11_TEX2DMS_RTV Texture2DMS;
        D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        D3D11_TEX3D_RTV Texture3D;
        } ;
    } D3D11_RENDER_TARGET_VIEW_DESC;


}
struct CD3D11_RENDER_TARGET_VIEW_DESC : public D3D11_RENDER_TARGET_VIEW_DESC
{
    CD3D11_RENDER_TARGET_VIEW_DESC()
    {}
    explicit CD3D11_RENDER_TARGET_VIEW_DESC( const D3D11_RENDER_TARGET_VIEW_DESC& o ) :
        D3D11_RENDER_TARGET_VIEW_DESC( o )
    {}
    explicit CD3D11_RENDER_TARGET_VIEW_DESC(
        D3D11_RTV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1 )
    {
        Format = format;
        ViewDimension = viewDimension;
        switch (viewDimension)
        {
        case D3D11_RTV_DIMENSION_BUFFER:
            Buffer.FirstElement = mipSlice;
            Buffer.NumElements = firstArraySlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE1D:
            Texture1D.MipSlice = mipSlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MipSlice = mipSlice;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2D:
            Texture2D.MipSlice = mipSlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MipSlice = mipSlice;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DMS:
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY:
            Texture2DMSArray.FirstArraySlice = firstArraySlice;
            Texture2DMSArray.ArraySize = arraySize;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE3D:
            Texture3D.MipSlice = mipSlice;
            Texture3D.FirstWSlice = firstArraySlice;
            Texture3D.WSize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_RENDER_TARGET_VIEW_DESC(
             ID3D11Buffer*,
        DXGI_FORMAT format,
        UINT firstElement,
        UINT numElements )
    {
        Format = format;
        ViewDimension = D3D11_RTV_DIMENSION_BUFFER;
        Buffer.FirstElement = firstElement;
        Buffer.NumElements = numElements;
    }
    explicit CD3D11_RENDER_TARGET_VIEW_DESC(
             ID3D11Texture1D* pTex1D,
        D3D11_RTV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1 )
    {
        ViewDimension = viewDimension;
        if (DXGI_FORMAT_UNKNOWN == format ||
            (-1 == arraySize && D3D11_RTV_DIMENSION_TEXTURE1DARRAY == viewDimension))
        {
            D3D11_TEXTURE1D_DESC TexDesc;
            pTex1D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_RTV_DIMENSION_TEXTURE1D:
            Texture1D.MipSlice = mipSlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MipSlice = mipSlice;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_RENDER_TARGET_VIEW_DESC(
             ID3D11Texture2D* pTex2D,
        D3D11_RTV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1 )
    {
        ViewDimension = viewDimension;
        if (DXGI_FORMAT_UNKNOWN == format ||
            (-1 == arraySize &&
                (D3D11_RTV_DIMENSION_TEXTURE2DARRAY == viewDimension ||
                D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY == viewDimension)))
        {
            D3D11_TEXTURE2D_DESC TexDesc;
            pTex2D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_RTV_DIMENSION_TEXTURE2D:
            Texture2D.MipSlice = mipSlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MipSlice = mipSlice;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DMS:
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY:
            Texture2DMSArray.FirstArraySlice = firstArraySlice;
            Texture2DMSArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_RENDER_TARGET_VIEW_DESC(
             ID3D11Texture3D* pTex3D,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstWSlice = 0,
        UINT wSize = -1 )
    {
        ViewDimension = D3D11_RTV_DIMENSION_TEXTURE3D;
        if (DXGI_FORMAT_UNKNOWN == format || -1 == wSize)
        {
            D3D11_TEXTURE3D_DESC TexDesc;
            pTex3D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == wSize) wSize = TexDesc.Depth - firstWSlice;
        }
        Format = format;
        Texture3D.MipSlice = mipSlice;
        Texture3D.FirstWSlice = firstWSlice;
        Texture3D.WSize = wSize;
    }
    ~CD3D11_RENDER_TARGET_VIEW_DESC() {}
    operator const D3D11_RENDER_TARGET_VIEW_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0011_v0_0_s_ifspec;
# 3987 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11RenderTargetView;



    struct __declspec(uuid("dfdba067-0b8d-4865-875b-d7b4516cc164")) __declspec(novtable)
    ID3D11RenderTargetView : public ID3D11View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_RENDER_TARGET_VIEW_DESC *pDesc) = 0;

    };
# 4118 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
}
struct CD3D11_VIEWPORT : public D3D11_VIEWPORT
{
    CD3D11_VIEWPORT()
    {}
    explicit CD3D11_VIEWPORT( const D3D11_VIEWPORT& o ) :
        D3D11_VIEWPORT( o )
    {}
    explicit CD3D11_VIEWPORT(
        FLOAT topLeftX,
        FLOAT topLeftY,
        FLOAT width,
        FLOAT height,
        FLOAT minDepth = ( 0.0f ),
        FLOAT maxDepth = ( 1.0f ) )
    {
        TopLeftX = topLeftX;
        TopLeftY = topLeftY;
        Width = width;
        Height = height;
        MinDepth = minDepth;
        MaxDepth = maxDepth;
    }
    explicit CD3D11_VIEWPORT(
             ID3D11Buffer*,
             ID3D11RenderTargetView* pRTView,
        FLOAT topLeftX = 0.0f,
        FLOAT minDepth = ( 0.0f ),
        FLOAT maxDepth = ( 1.0f ) )
    {
        D3D11_RENDER_TARGET_VIEW_DESC RTVDesc;
        pRTView->GetDesc( &RTVDesc );
        UINT NumElements = 0;
        switch (RTVDesc.ViewDimension)
        {
        case D3D11_RTV_DIMENSION_BUFFER:
            NumElements = RTVDesc.Buffer.NumElements;
            break;
        default: break;
        }
        TopLeftX = topLeftX;
        TopLeftY = 0.0f;
        Width = NumElements - topLeftX;
        Height = 1.0f;
        MinDepth = minDepth;
        MaxDepth = maxDepth;
    }
    explicit CD3D11_VIEWPORT(
             ID3D11Texture1D* pTex1D,
             ID3D11RenderTargetView* pRTView,
        FLOAT topLeftX = 0.0f,
        FLOAT minDepth = ( 0.0f ),
        FLOAT maxDepth = ( 1.0f ) )
    {
        D3D11_TEXTURE1D_DESC TexDesc;
        pTex1D->GetDesc( &TexDesc );
        D3D11_RENDER_TARGET_VIEW_DESC RTVDesc;
        pRTView->GetDesc( &RTVDesc );
        UINT MipSlice = 0;
        switch (RTVDesc.ViewDimension)
        {
        case D3D11_RTV_DIMENSION_TEXTURE1D:
            MipSlice = RTVDesc.Texture1D.MipSlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE1DARRAY:
            MipSlice = RTVDesc.Texture1DArray.MipSlice;
            break;
        default: break;
        }
        const UINT SubResourceWidth = TexDesc.Width / (UINT( 1 ) << MipSlice);
        TopLeftX = topLeftX;
        TopLeftY = 0.0f;
        Width = (SubResourceWidth ? SubResourceWidth : 1) - topLeftX;
        Height = 1.0f;
        MinDepth = minDepth;
        MaxDepth = maxDepth;
    }
    explicit CD3D11_VIEWPORT(
             ID3D11Texture2D* pTex2D,
             ID3D11RenderTargetView* pRTView,
        FLOAT topLeftX = 0.0f,
        FLOAT topLeftY = 0.0f,
        FLOAT minDepth = ( 0.0f ),
        FLOAT maxDepth = ( 1.0f ) )
    {
        D3D11_TEXTURE2D_DESC TexDesc;
        pTex2D->GetDesc( &TexDesc );
        D3D11_RENDER_TARGET_VIEW_DESC RTVDesc;
        pRTView->GetDesc( &RTVDesc );
        UINT MipSlice = 0;
        switch (RTVDesc.ViewDimension)
        {
        case D3D11_RTV_DIMENSION_TEXTURE2D:
            MipSlice = RTVDesc.Texture2D.MipSlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DARRAY:
            MipSlice = RTVDesc.Texture2DArray.MipSlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DMS:
        case D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY:
            break;
        default: break;
        }
        const UINT SubResourceWidth = TexDesc.Width / (UINT( 1 ) << MipSlice);
        const UINT SubResourceHeight = TexDesc.Height / (UINT( 1 ) << MipSlice);
        TopLeftX = topLeftX;
        TopLeftY = topLeftY;
        Width = (SubResourceWidth ? SubResourceWidth : 1) - topLeftX;
        Height = (SubResourceHeight ? SubResourceHeight : 1) - topLeftY;
        MinDepth = minDepth;
        MaxDepth = maxDepth;
    }
    explicit CD3D11_VIEWPORT(
             ID3D11Texture3D* pTex3D,
             ID3D11RenderTargetView* pRTView,
        FLOAT topLeftX = 0.0f,
        FLOAT topLeftY = 0.0f,
        FLOAT minDepth = ( 0.0f ),
        FLOAT maxDepth = ( 1.0f ) )
    {
        D3D11_TEXTURE3D_DESC TexDesc;
        pTex3D->GetDesc( &TexDesc );
        D3D11_RENDER_TARGET_VIEW_DESC RTVDesc;
        pRTView->GetDesc( &RTVDesc );
        UINT MipSlice = 0;
        switch (RTVDesc.ViewDimension)
        {
        case D3D11_RTV_DIMENSION_TEXTURE3D:
            MipSlice = RTVDesc.Texture3D.MipSlice;
            break;
        default: break;
        }
        const UINT SubResourceWidth = TexDesc.Width / (UINT( 1 ) << MipSlice);
        const UINT SubResourceHeight = TexDesc.Height / (UINT( 1 ) << MipSlice);
        TopLeftX = topLeftX;
        TopLeftY = topLeftY;
        Width = (SubResourceWidth ? SubResourceWidth : 1) - topLeftX;
        Height = (SubResourceHeight ? SubResourceHeight : 1) - topLeftY;
        MinDepth = minDepth;
        MaxDepth = maxDepth;
    }
    ~CD3D11_VIEWPORT() {}
    operator const D3D11_VIEWPORT&() const { return *this; }
};
extern "C"{

typedef struct D3D11_TEX1D_DSV
    {
    UINT MipSlice;
    } D3D11_TEX1D_DSV;

typedef struct D3D11_TEX1D_ARRAY_DSV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX1D_ARRAY_DSV;

typedef struct D3D11_TEX2D_DSV
    {
    UINT MipSlice;
    } D3D11_TEX2D_DSV;

typedef struct D3D11_TEX2D_ARRAY_DSV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2D_ARRAY_DSV;

typedef struct D3D11_TEX2DMS_DSV
    {
    UINT UnusedField_NothingToDefine;
    } D3D11_TEX2DMS_DSV;

typedef struct D3D11_TEX2DMS_ARRAY_DSV
    {
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2DMS_ARRAY_DSV;

typedef
enum D3D11_DSV_FLAG
    {
        D3D11_DSV_READ_ONLY_DEPTH = 0x1L,
        D3D11_DSV_READ_ONLY_STENCIL = 0x2L
    } D3D11_DSV_FLAG;

typedef struct D3D11_DEPTH_STENCIL_VIEW_DESC
    {
    DXGI_FORMAT Format;
    D3D11_DSV_DIMENSION ViewDimension;
    UINT Flags;
    union
        {
        D3D11_TEX1D_DSV Texture1D;
        D3D11_TEX1D_ARRAY_DSV Texture1DArray;
        D3D11_TEX2D_DSV Texture2D;
        D3D11_TEX2D_ARRAY_DSV Texture2DArray;
        D3D11_TEX2DMS_DSV Texture2DMS;
        D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
        } ;
    } D3D11_DEPTH_STENCIL_VIEW_DESC;


}
struct CD3D11_DEPTH_STENCIL_VIEW_DESC : public D3D11_DEPTH_STENCIL_VIEW_DESC
{
    CD3D11_DEPTH_STENCIL_VIEW_DESC()
    {}
    explicit CD3D11_DEPTH_STENCIL_VIEW_DESC( const D3D11_DEPTH_STENCIL_VIEW_DESC& o ) :
        D3D11_DEPTH_STENCIL_VIEW_DESC( o )
    {}
    explicit CD3D11_DEPTH_STENCIL_VIEW_DESC(
        D3D11_DSV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1,
        UINT flags = 0 )
    {
        Format = format;
        ViewDimension = viewDimension;
        Flags = flags;
        switch (viewDimension)
        {
        case D3D11_DSV_DIMENSION_TEXTURE1D:
            Texture1D.MipSlice = mipSlice;
            break;
        case D3D11_DSV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MipSlice = mipSlice;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        case D3D11_DSV_DIMENSION_TEXTURE2D:
            Texture2D.MipSlice = mipSlice;
            break;
        case D3D11_DSV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MipSlice = mipSlice;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        case D3D11_DSV_DIMENSION_TEXTURE2DMS:
            break;
        case D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY:
            Texture2DMSArray.FirstArraySlice = firstArraySlice;
            Texture2DMSArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_DEPTH_STENCIL_VIEW_DESC(
             ID3D11Texture1D* pTex1D,
        D3D11_DSV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1,
        UINT flags = 0 )
    {
        ViewDimension = viewDimension;
        Flags = flags;
        if (DXGI_FORMAT_UNKNOWN == format ||
            (-1 == arraySize && D3D11_DSV_DIMENSION_TEXTURE1DARRAY == viewDimension))
        {
            D3D11_TEXTURE1D_DESC TexDesc;
            pTex1D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_DSV_DIMENSION_TEXTURE1D:
            Texture1D.MipSlice = mipSlice;
            break;
        case D3D11_DSV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MipSlice = mipSlice;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_DEPTH_STENCIL_VIEW_DESC(
             ID3D11Texture2D* pTex2D,
        D3D11_DSV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1,
        UINT flags = 0 )
    {
        ViewDimension = viewDimension;
        Flags = flags;
        if (DXGI_FORMAT_UNKNOWN == format ||
            (-1 == arraySize &&
                (D3D11_DSV_DIMENSION_TEXTURE2DARRAY == viewDimension ||
                D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY == viewDimension)))
        {
            D3D11_TEXTURE2D_DESC TexDesc;
            pTex2D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_DSV_DIMENSION_TEXTURE2D:
            Texture2D.MipSlice = mipSlice;
            break;
        case D3D11_DSV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MipSlice = mipSlice;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        case D3D11_DSV_DIMENSION_TEXTURE2DMS:
            break;
        case D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY:
            Texture2DMSArray.FirstArraySlice = firstArraySlice;
            Texture2DMSArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    ~CD3D11_DEPTH_STENCIL_VIEW_DESC() {}
    operator const D3D11_DEPTH_STENCIL_VIEW_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0012_v0_0_s_ifspec;
# 4460 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11DepthStencilView;



    struct __declspec(uuid("9fdac92a-1876-48c3-afad-25b94f84a9b6")) __declspec(novtable)
    ID3D11DepthStencilView : public ID3D11View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc) = 0;

    };
# 4590 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_BUFFER_UAV_FLAG
    {
        D3D11_BUFFER_UAV_FLAG_RAW = 0x1,
        D3D11_BUFFER_UAV_FLAG_APPEND = 0x2,
        D3D11_BUFFER_UAV_FLAG_COUNTER = 0x4
    } D3D11_BUFFER_UAV_FLAG;

typedef struct D3D11_BUFFER_UAV
    {
    UINT FirstElement;
    UINT NumElements;
    UINT Flags;
    } D3D11_BUFFER_UAV;

typedef struct D3D11_TEX1D_UAV
    {
    UINT MipSlice;
    } D3D11_TEX1D_UAV;

typedef struct D3D11_TEX1D_ARRAY_UAV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX1D_ARRAY_UAV;

typedef struct D3D11_TEX2D_UAV
    {
    UINT MipSlice;
    } D3D11_TEX2D_UAV;

typedef struct D3D11_TEX2D_ARRAY_UAV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2D_ARRAY_UAV;

typedef struct D3D11_TEX3D_UAV
    {
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
    } D3D11_TEX3D_UAV;

typedef struct D3D11_UNORDERED_ACCESS_VIEW_DESC
    {
    DXGI_FORMAT Format;
    D3D11_UAV_DIMENSION ViewDimension;
    union
        {
        D3D11_BUFFER_UAV Buffer;
        D3D11_TEX1D_UAV Texture1D;
        D3D11_TEX1D_ARRAY_UAV Texture1DArray;
        D3D11_TEX2D_UAV Texture2D;
        D3D11_TEX2D_ARRAY_UAV Texture2DArray;
        D3D11_TEX3D_UAV Texture3D;
        } ;
    } D3D11_UNORDERED_ACCESS_VIEW_DESC;


}
struct CD3D11_UNORDERED_ACCESS_VIEW_DESC : public D3D11_UNORDERED_ACCESS_VIEW_DESC
{
    CD3D11_UNORDERED_ACCESS_VIEW_DESC()
    {}
    explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC( const D3D11_UNORDERED_ACCESS_VIEW_DESC& o ) :
        D3D11_UNORDERED_ACCESS_VIEW_DESC( o )
    {}
    explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
        D3D11_UAV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1,
        UINT flags = 0 )
    {
        Format = format;
        ViewDimension = viewDimension;
        switch (viewDimension)
        {
        case D3D11_UAV_DIMENSION_BUFFER:
            Buffer.FirstElement = mipSlice;
            Buffer.NumElements = firstArraySlice;
            Buffer.Flags = flags;
            break;
        case D3D11_UAV_DIMENSION_TEXTURE1D:
            Texture1D.MipSlice = mipSlice;
            break;
        case D3D11_UAV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MipSlice = mipSlice;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        case D3D11_UAV_DIMENSION_TEXTURE2D:
            Texture2D.MipSlice = mipSlice;
            break;
        case D3D11_UAV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MipSlice = mipSlice;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        case D3D11_UAV_DIMENSION_TEXTURE3D:
            Texture3D.MipSlice = mipSlice;
            Texture3D.FirstWSlice = firstArraySlice;
            Texture3D.WSize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
             ID3D11Buffer*,
        DXGI_FORMAT format,
        UINT firstElement,
        UINT numElements,
        UINT flags = 0 )
    {
        Format = format;
        ViewDimension = D3D11_UAV_DIMENSION_BUFFER;
        Buffer.FirstElement = firstElement;
        Buffer.NumElements = numElements;
        Buffer.Flags = flags;
    }
    explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
             ID3D11Texture1D* pTex1D,
        D3D11_UAV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1 )
    {
        ViewDimension = viewDimension;
        if (DXGI_FORMAT_UNKNOWN == format ||
            (-1 == arraySize && D3D11_UAV_DIMENSION_TEXTURE1DARRAY == viewDimension))
        {
            D3D11_TEXTURE1D_DESC TexDesc;
            pTex1D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_UAV_DIMENSION_TEXTURE1D:
            Texture1D.MipSlice = mipSlice;
            break;
        case D3D11_UAV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MipSlice = mipSlice;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
             ID3D11Texture2D* pTex2D,
        D3D11_UAV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1 )
    {
        ViewDimension = viewDimension;
        if (DXGI_FORMAT_UNKNOWN == format ||
            (-1 == arraySize && D3D11_UAV_DIMENSION_TEXTURE2DARRAY == viewDimension))
        {
            D3D11_TEXTURE2D_DESC TexDesc;
            pTex2D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_UAV_DIMENSION_TEXTURE2D:
            Texture2D.MipSlice = mipSlice;
            break;
        case D3D11_UAV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MipSlice = mipSlice;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
             ID3D11Texture3D* pTex3D,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstWSlice = 0,
        UINT wSize = -1 )
    {
        ViewDimension = D3D11_UAV_DIMENSION_TEXTURE3D;
        if (DXGI_FORMAT_UNKNOWN == format || -1 == wSize)
        {
            D3D11_TEXTURE3D_DESC TexDesc;
            pTex3D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == wSize) wSize = TexDesc.Depth - firstWSlice;
        }
        Format = format;
        Texture3D.MipSlice = mipSlice;
        Texture3D.FirstWSlice = firstWSlice;
        Texture3D.WSize = wSize;
    }
    ~CD3D11_UNORDERED_ACCESS_VIEW_DESC() {}
    operator const D3D11_UNORDERED_ACCESS_VIEW_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0013_v0_0_s_ifspec;
# 4813 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11UnorderedAccessView;



    struct __declspec(uuid("28acf509-7f5c-48f6-8611-f316010a6380")) __declspec(novtable)
    ID3D11UnorderedAccessView : public ID3D11View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc) = 0;

    };
# 4947 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11VertexShader;



    struct __declspec(uuid("3b301d64-d678-4289-8897-22f8928b72f3")) __declspec(novtable)
    ID3D11VertexShader : public ID3D11DeviceChild
    {
    public:
    };
# 5060 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11HullShader;



    struct __declspec(uuid("8e5c6061-628a-4c8e-8264-bbe45cb3d5dd")) __declspec(novtable)
    ID3D11HullShader : public ID3D11DeviceChild
    {
    public:
    };
# 5173 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11DomainShader;



    struct __declspec(uuid("f582c508-0f36-490c-9977-31eece268cfa")) __declspec(novtable)
    ID3D11DomainShader : public ID3D11DeviceChild
    {
    public:
    };
# 5286 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11GeometryShader;



    struct __declspec(uuid("38325b96-effb-4022-ba02-2e795b70275c")) __declspec(novtable)
    ID3D11GeometryShader : public ID3D11DeviceChild
    {
    public:
    };
# 5399 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11PixelShader;



    struct __declspec(uuid("ea82e40d-51dc-4f33-93d4-db7c9125ae8c")) __declspec(novtable)
    ID3D11PixelShader : public ID3D11DeviceChild
    {
    public:
    };
# 5512 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11ComputeShader;



    struct __declspec(uuid("4f5b196e-c2bd-495e-bd01-1fded38e4969")) __declspec(novtable)
    ID3D11ComputeShader : public ID3D11DeviceChild
    {
    public:
    };
# 5625 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11InputLayout;



    struct __declspec(uuid("e4819ddc-4cf0-4025-bd26-5de82a3e07b7")) __declspec(novtable)
    ID3D11InputLayout : public ID3D11DeviceChild
    {
    public:
    };
# 5734 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_FILTER
    {
        D3D11_FILTER_MIN_MAG_MIP_POINT = 0,
        D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
        D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
        D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
        D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
        D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
        D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
        D3D11_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
        D3D11_FILTER_ANISOTROPIC = 0x55,
        D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
        D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
        D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
        D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
        D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
        D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
        D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
        D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
        D3D11_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
        D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
        D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
        D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
        D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
        D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
        D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
        D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
        D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
        D3D11_FILTER_MINIMUM_ANISOTROPIC = 0x155,
        D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
        D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
        D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
        D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
        D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
        D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
        D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
        D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
        D3D11_FILTER_MAXIMUM_ANISOTROPIC = 0x1d5
    } D3D11_FILTER;

typedef
enum D3D11_FILTER_TYPE
    {
        D3D11_FILTER_TYPE_POINT = 0,
        D3D11_FILTER_TYPE_LINEAR = 1
    } D3D11_FILTER_TYPE;

typedef
enum D3D11_FILTER_REDUCTION_TYPE
    {
        D3D11_FILTER_REDUCTION_TYPE_STANDARD = 0,
        D3D11_FILTER_REDUCTION_TYPE_COMPARISON = 1,
        D3D11_FILTER_REDUCTION_TYPE_MINIMUM = 2,
        D3D11_FILTER_REDUCTION_TYPE_MAXIMUM = 3
    } D3D11_FILTER_REDUCTION_TYPE;
# 5842 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_TEXTURE_ADDRESS_MODE
    {
        D3D11_TEXTURE_ADDRESS_WRAP = 1,
        D3D11_TEXTURE_ADDRESS_MIRROR = 2,
        D3D11_TEXTURE_ADDRESS_CLAMP = 3,
        D3D11_TEXTURE_ADDRESS_BORDER = 4,
        D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5
    } D3D11_TEXTURE_ADDRESS_MODE;

typedef struct D3D11_SAMPLER_DESC
    {
    D3D11_FILTER Filter;
    D3D11_TEXTURE_ADDRESS_MODE AddressU;
    D3D11_TEXTURE_ADDRESS_MODE AddressV;
    D3D11_TEXTURE_ADDRESS_MODE AddressW;
    FLOAT MipLODBias;
    UINT MaxAnisotropy;
    D3D11_COMPARISON_FUNC ComparisonFunc;
    FLOAT BorderColor[ 4 ];
    FLOAT MinLOD;
    FLOAT MaxLOD;
    } D3D11_SAMPLER_DESC;


}
struct CD3D11_SAMPLER_DESC : public D3D11_SAMPLER_DESC
{
    CD3D11_SAMPLER_DESC()
    {}
    explicit CD3D11_SAMPLER_DESC( const D3D11_SAMPLER_DESC& o ) :
        D3D11_SAMPLER_DESC( o )
    {}
    explicit CD3D11_SAMPLER_DESC( CD3D11_DEFAULT )
    {
        Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;
        AddressU = D3D11_TEXTURE_ADDRESS_CLAMP;
        AddressV = D3D11_TEXTURE_ADDRESS_CLAMP;
        AddressW = D3D11_TEXTURE_ADDRESS_CLAMP;
        MipLODBias = 0;
        MaxAnisotropy = 1;
        ComparisonFunc = D3D11_COMPARISON_NEVER;
        BorderColor[ 0 ] = 1.0f;
        BorderColor[ 1 ] = 1.0f;
        BorderColor[ 2 ] = 1.0f;
        BorderColor[ 3 ] = 1.0f;
        MinLOD = -3.402823466e+38F;
        MaxLOD = 3.402823466e+38F;
    }
    explicit CD3D11_SAMPLER_DESC(
        D3D11_FILTER filter,
        D3D11_TEXTURE_ADDRESS_MODE addressU,
        D3D11_TEXTURE_ADDRESS_MODE addressV,
        D3D11_TEXTURE_ADDRESS_MODE addressW,
        FLOAT mipLODBias,
        UINT maxAnisotropy,
        D3D11_COMPARISON_FUNC comparisonFunc,
                            const FLOAT* borderColor,
        FLOAT minLOD,
        FLOAT maxLOD )
    {
        Filter = filter;
        AddressU = addressU;
        AddressV = addressV;
        AddressW = addressW;
        MipLODBias = mipLODBias;
        MaxAnisotropy = maxAnisotropy;
        ComparisonFunc = comparisonFunc;
        const float defaultColor[ 4 ] = { 1.0f, 1.0f, 1.0f, 1.0f };
        if (!borderColor) borderColor = defaultColor;
        BorderColor[ 0 ] = borderColor[ 0 ];
        BorderColor[ 1 ] = borderColor[ 1 ];
        BorderColor[ 2 ] = borderColor[ 2 ];
        BorderColor[ 3 ] = borderColor[ 3 ];
        MinLOD = minLOD;
        MaxLOD = maxLOD;
    }
    ~CD3D11_SAMPLER_DESC() {}
    operator const D3D11_SAMPLER_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0021_v0_0_s_ifspec;
# 5936 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11SamplerState;



    struct __declspec(uuid("da6fea51-564c-4487-9810-f0d0f9b4e3a5")) __declspec(novtable)
    ID3D11SamplerState : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_SAMPLER_DESC *pDesc) = 0;

    };
# 6057 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_FORMAT_SUPPORT
    {
        D3D11_FORMAT_SUPPORT_BUFFER = 0x1,
        D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 0x2,
        D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER = 0x4,
        D3D11_FORMAT_SUPPORT_SO_BUFFER = 0x8,
        D3D11_FORMAT_SUPPORT_TEXTURE1D = 0x10,
        D3D11_FORMAT_SUPPORT_TEXTURE2D = 0x20,
        D3D11_FORMAT_SUPPORT_TEXTURE3D = 0x40,
        D3D11_FORMAT_SUPPORT_TEXTURECUBE = 0x80,
        D3D11_FORMAT_SUPPORT_SHADER_LOAD = 0x100,
        D3D11_FORMAT_SUPPORT_SHADER_SAMPLE = 0x200,
        D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 0x400,
        D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 0x800,
        D3D11_FORMAT_SUPPORT_MIP = 0x1000,
        D3D11_FORMAT_SUPPORT_MIP_AUTOGEN = 0x2000,
        D3D11_FORMAT_SUPPORT_RENDER_TARGET = 0x4000,
        D3D11_FORMAT_SUPPORT_BLENDABLE = 0x8000,
        D3D11_FORMAT_SUPPORT_DEPTH_STENCIL = 0x10000,
        D3D11_FORMAT_SUPPORT_CPU_LOCKABLE = 0x20000,
        D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 0x40000,
        D3D11_FORMAT_SUPPORT_DISPLAY = 0x80000,
        D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 0x100000,
        D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 0x200000,
        D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 0x400000,
        D3D11_FORMAT_SUPPORT_SHADER_GATHER = 0x800000,
        D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST = 0x1000000,
        D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
        D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON = 0x4000000,
        D3D11_FORMAT_SUPPORT_DECODER_OUTPUT = 0x8000000,
        D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT = 0x10000000,
        D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT = 0x20000000,
        D3D11_FORMAT_SUPPORT_VIDEO_ENCODER = 0x40000000
    } D3D11_FORMAT_SUPPORT;

typedef
enum D3D11_FORMAT_SUPPORT2
    {
        D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 0x1,
        D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 0x2,
        D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
        D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 0x8,
        D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x10,
        D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x20,
        D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 0x40,
        D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE = 0x80,
        D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 0x100,
        D3D11_FORMAT_SUPPORT2_TILED = 0x200,
        D3D11_FORMAT_SUPPORT2_SHAREABLE = 0x400
    } D3D11_FORMAT_SUPPORT2;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0022_v0_0_s_ifspec;
# 6121 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11Asynchronous;



    struct __declspec(uuid("4b35d0cd-1e15-4258-9c98-1b1333f6dd3b")) __declspec(novtable)
    ID3D11Asynchronous : public ID3D11DeviceChild
    {
    public:
        virtual UINT __stdcall GetDataSize( void) = 0;

    };
# 6238 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_ASYNC_GETDATA_FLAG
    {
        D3D11_ASYNC_GETDATA_DONOTFLUSH = 0x1
    } D3D11_ASYNC_GETDATA_FLAG;

typedef
enum D3D11_QUERY
    {
        D3D11_QUERY_EVENT = 0,
        D3D11_QUERY_OCCLUSION = ( D3D11_QUERY_EVENT + 1 ) ,
        D3D11_QUERY_TIMESTAMP = ( D3D11_QUERY_OCCLUSION + 1 ) ,
        D3D11_QUERY_TIMESTAMP_DISJOINT = ( D3D11_QUERY_TIMESTAMP + 1 ) ,
        D3D11_QUERY_PIPELINE_STATISTICS = ( D3D11_QUERY_TIMESTAMP_DISJOINT + 1 ) ,
        D3D11_QUERY_OCCLUSION_PREDICATE = ( D3D11_QUERY_PIPELINE_STATISTICS + 1 ) ,
        D3D11_QUERY_SO_STATISTICS = ( D3D11_QUERY_OCCLUSION_PREDICATE + 1 ) ,
        D3D11_QUERY_SO_OVERFLOW_PREDICATE = ( D3D11_QUERY_SO_STATISTICS + 1 ) ,
        D3D11_QUERY_SO_STATISTICS_STREAM0 = ( D3D11_QUERY_SO_OVERFLOW_PREDICATE + 1 ) ,
        D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = ( D3D11_QUERY_SO_STATISTICS_STREAM0 + 1 ) ,
        D3D11_QUERY_SO_STATISTICS_STREAM1 = ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 + 1 ) ,
        D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = ( D3D11_QUERY_SO_STATISTICS_STREAM1 + 1 ) ,
        D3D11_QUERY_SO_STATISTICS_STREAM2 = ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 + 1 ) ,
        D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = ( D3D11_QUERY_SO_STATISTICS_STREAM2 + 1 ) ,
        D3D11_QUERY_SO_STATISTICS_STREAM3 = ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 + 1 ) ,
        D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = ( D3D11_QUERY_SO_STATISTICS_STREAM3 + 1 )
    } D3D11_QUERY;

typedef
enum D3D11_QUERY_MISC_FLAG
    {
        D3D11_QUERY_MISC_PREDICATEHINT = 0x1
    } D3D11_QUERY_MISC_FLAG;

typedef struct D3D11_QUERY_DESC
    {
    D3D11_QUERY Query;
    UINT MiscFlags;
    } D3D11_QUERY_DESC;


}
struct CD3D11_QUERY_DESC : public D3D11_QUERY_DESC
{
    CD3D11_QUERY_DESC()
    {}
    explicit CD3D11_QUERY_DESC( const D3D11_QUERY_DESC& o ) :
        D3D11_QUERY_DESC( o )
    {}
    explicit CD3D11_QUERY_DESC(
        D3D11_QUERY query,
        UINT miscFlags = 0 )
    {
        Query = query;
        MiscFlags = miscFlags;
    }
    ~CD3D11_QUERY_DESC() {}
    operator const D3D11_QUERY_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0023_v0_0_s_ifspec;
# 6310 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11Query;



    struct __declspec(uuid("d6c00747-87b7-425e-b84d-44d108560afd")) __declspec(novtable)
    ID3D11Query : public ID3D11Asynchronous
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_QUERY_DESC *pDesc) = 0;

    };
# 6442 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11Predicate;



    struct __declspec(uuid("9eb576dd-9f77-4d86-81aa-8bab5fe490e2")) __declspec(novtable)
    ID3D11Predicate : public ID3D11Query
    {
    public:
    };
# 6567 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
    {
    UINT64 Frequency;
    BOOL Disjoint;
    } D3D11_QUERY_DATA_TIMESTAMP_DISJOINT;

typedef struct D3D11_QUERY_DATA_PIPELINE_STATISTICS
    {
    UINT64 IAVertices;
    UINT64 IAPrimitives;
    UINT64 VSInvocations;
    UINT64 GSInvocations;
    UINT64 GSPrimitives;
    UINT64 CInvocations;
    UINT64 CPrimitives;
    UINT64 PSInvocations;
    UINT64 HSInvocations;
    UINT64 DSInvocations;
    UINT64 CSInvocations;
    } D3D11_QUERY_DATA_PIPELINE_STATISTICS;

typedef struct D3D11_QUERY_DATA_SO_STATISTICS
    {
    UINT64 NumPrimitivesWritten;
    UINT64 PrimitivesStorageNeeded;
    } D3D11_QUERY_DATA_SO_STATISTICS;

typedef
enum D3D11_COUNTER
    {
        D3D11_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000
    } D3D11_COUNTER;

typedef
enum D3D11_COUNTER_TYPE
    {
        D3D11_COUNTER_TYPE_FLOAT32 = 0,
        D3D11_COUNTER_TYPE_UINT16 = ( D3D11_COUNTER_TYPE_FLOAT32 + 1 ) ,
        D3D11_COUNTER_TYPE_UINT32 = ( D3D11_COUNTER_TYPE_UINT16 + 1 ) ,
        D3D11_COUNTER_TYPE_UINT64 = ( D3D11_COUNTER_TYPE_UINT32 + 1 )
    } D3D11_COUNTER_TYPE;

typedef struct D3D11_COUNTER_DESC
    {
    D3D11_COUNTER Counter;
    UINT MiscFlags;
    } D3D11_COUNTER_DESC;


}
struct CD3D11_COUNTER_DESC : public D3D11_COUNTER_DESC
{
    CD3D11_COUNTER_DESC()
    {}
    explicit CD3D11_COUNTER_DESC( const D3D11_COUNTER_DESC& o ) :
        D3D11_COUNTER_DESC( o )
    {}
    explicit CD3D11_COUNTER_DESC(
        D3D11_COUNTER counter,
        UINT miscFlags = 0 )
    {
        Counter = counter;
        MiscFlags = miscFlags;
    }
    ~CD3D11_COUNTER_DESC() {}
    operator const D3D11_COUNTER_DESC&() const { return *this; }
};
extern "C"{

typedef struct D3D11_COUNTER_INFO
    {
    D3D11_COUNTER LastDeviceDependentCounter;
    UINT NumSimultaneousCounters;
    UINT8 NumDetectableParallelUnits;
    } D3D11_COUNTER_INFO;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0025_v0_0_s_ifspec;
# 6655 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11Counter;



    struct __declspec(uuid("6e8c49fb-a371-4770-b440-29086022b741")) __declspec(novtable)
    ID3D11Counter : public ID3D11Asynchronous
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_COUNTER_DESC *pDesc) = 0;

    };
# 6783 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS
    {
        D3D11_STANDARD_MULTISAMPLE_PATTERN = 0xffffffff,
        D3D11_CENTER_MULTISAMPLE_PATTERN = 0xfffffffe
    } D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS;

typedef
enum D3D11_DEVICE_CONTEXT_TYPE
    {
        D3D11_DEVICE_CONTEXT_IMMEDIATE = 0,
        D3D11_DEVICE_CONTEXT_DEFERRED = ( D3D11_DEVICE_CONTEXT_IMMEDIATE + 1 )
    } D3D11_DEVICE_CONTEXT_TYPE;

typedef struct D3D11_CLASS_INSTANCE_DESC
    {
    UINT InstanceId;
    UINT InstanceIndex;
    UINT TypeId;
    UINT ConstantBuffer;
    UINT BaseConstantBufferOffset;
    UINT BaseTexture;
    UINT BaseSampler;
    BOOL Created;
    } D3D11_CLASS_INSTANCE_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0026_v0_0_s_ifspec;
# 6821 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11ClassInstance;



    struct __declspec(uuid("a6cd7faa-b0b7-4a2f-9436-8662a65797cb")) __declspec(novtable)
    ID3D11ClassInstance : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetClassLinkage(

                   ID3D11ClassLinkage **ppLinkage) = 0;

        virtual void __stdcall GetDesc(

                   D3D11_CLASS_INSTANCE_DESC *pDesc) = 0;

        virtual void __stdcall GetInstanceName(

                                              LPSTR pInstanceName,

                     SIZE_T *pBufferLength) = 0;

        virtual void __stdcall GetTypeName(

                                              LPSTR pTypeName,

                     SIZE_T *pBufferLength) = 0;

    };
# 6990 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11ClassLinkage;



    struct __declspec(uuid("ddf57cba-9543-46e4-a12b-f207a0fe7fed")) __declspec(novtable)
    ID3D11ClassLinkage : public ID3D11DeviceChild
    {
    public:
        virtual HRESULT __stdcall GetClassInstance(

                  LPCSTR pClassInstanceName,

                  UINT InstanceIndex,

                   ID3D11ClassInstance **ppInstance) = 0;

        virtual HRESULT __stdcall CreateClassInstance(

                  LPCSTR pClassTypeName,

                  UINT ConstantBufferOffset,

                  UINT ConstantVectorOffset,

                  UINT TextureOffset,

                  UINT SamplerOffset,

                   ID3D11ClassInstance **ppInstance) = 0;

    };
# 7155 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11CommandList;



    struct __declspec(uuid("a24bc4d1-769e-43f7-8013-98ff566c18e2")) __declspec(novtable)
    ID3D11CommandList : public ID3D11DeviceChild
    {
    public:
        virtual UINT __stdcall GetContextFlags( void) = 0;

    };
# 7272 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_FEATURE
    {
        D3D11_FEATURE_THREADING = 0,
        D3D11_FEATURE_DOUBLES = ( D3D11_FEATURE_THREADING + 1 ) ,
        D3D11_FEATURE_FORMAT_SUPPORT = ( D3D11_FEATURE_DOUBLES + 1 ) ,
        D3D11_FEATURE_FORMAT_SUPPORT2 = ( D3D11_FEATURE_FORMAT_SUPPORT + 1 ) ,
        D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = ( D3D11_FEATURE_FORMAT_SUPPORT2 + 1 ) ,
        D3D11_FEATURE_D3D11_OPTIONS = ( D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS + 1 ) ,
        D3D11_FEATURE_ARCHITECTURE_INFO = ( D3D11_FEATURE_D3D11_OPTIONS + 1 ) ,
        D3D11_FEATURE_D3D9_OPTIONS = ( D3D11_FEATURE_ARCHITECTURE_INFO + 1 ) ,
        D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT = ( D3D11_FEATURE_D3D9_OPTIONS + 1 ) ,
        D3D11_FEATURE_D3D9_SHADOW_SUPPORT = ( D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT + 1 ) ,
        D3D11_FEATURE_D3D11_OPTIONS1 = ( D3D11_FEATURE_D3D9_SHADOW_SUPPORT + 1 ) ,
        D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT = ( D3D11_FEATURE_D3D11_OPTIONS1 + 1 ) ,
        D3D11_FEATURE_MARKER_SUPPORT = ( D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT + 1 ) ,
        D3D11_FEATURE_D3D9_OPTIONS1 = ( D3D11_FEATURE_MARKER_SUPPORT + 1 )
    } D3D11_FEATURE;

typedef struct D3D11_FEATURE_DATA_THREADING
    {
    BOOL DriverConcurrentCreates;
    BOOL DriverCommandLists;
    } D3D11_FEATURE_DATA_THREADING;

typedef struct D3D11_FEATURE_DATA_DOUBLES
    {
    BOOL DoublePrecisionFloatShaderOps;
    } D3D11_FEATURE_DATA_DOUBLES;

typedef struct D3D11_FEATURE_DATA_FORMAT_SUPPORT
    {
    DXGI_FORMAT InFormat;
    UINT OutFormatSupport;
    } D3D11_FEATURE_DATA_FORMAT_SUPPORT;

typedef struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2
    {
    DXGI_FORMAT InFormat;
    UINT OutFormatSupport2;
    } D3D11_FEATURE_DATA_FORMAT_SUPPORT2;

typedef struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
    {
    BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
    } D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS;
# 7332 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS
    {
    BOOL OutputMergerLogicOp;
    BOOL UAVOnlyRenderingForcedSampleCount;
    BOOL DiscardAPIsSeenByDriver;
    BOOL FlagsForUpdateAndCopySeenByDriver;
    BOOL ClearView;
    BOOL CopyWithOverlap;
    BOOL ConstantBufferPartialUpdate;
    BOOL ConstantBufferOffsetting;
    BOOL MapNoOverwriteOnDynamicConstantBuffer;
    BOOL MapNoOverwriteOnDynamicBufferSRV;
    BOOL MultisampleRTVWithForcedSampleCountOne;
    BOOL SAD4ShaderInstructions;
    BOOL ExtendedDoublesShaderInstructions;
    BOOL ExtendedResourceSharing;
    } D3D11_FEATURE_DATA_D3D11_OPTIONS;

typedef struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO
    {
    BOOL TileBasedDeferredRenderer;
    } D3D11_FEATURE_DATA_ARCHITECTURE_INFO;

typedef struct D3D11_FEATURE_DATA_D3D9_OPTIONS
    {
    BOOL FullNonPow2TextureSupport;
    } D3D11_FEATURE_DATA_D3D9_OPTIONS;

typedef struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT
    {
    BOOL SupportsDepthAsTextureWithLessEqualComparisonFilter;
    } D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT;

typedef
enum D3D11_SHADER_MIN_PRECISION_SUPPORT
    {
        D3D11_SHADER_MIN_PRECISION_10_BIT = 0x1,
        D3D11_SHADER_MIN_PRECISION_16_BIT = 0x2
    } D3D11_SHADER_MIN_PRECISION_SUPPORT;

typedef struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT
    {
    UINT PixelShaderMinPrecision;
    UINT AllOtherShaderStagesMinPrecision;
    } D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT;

typedef
enum D3D11_TILED_RESOURCES_TIER
    {
        D3D11_TILED_RESOURCES_NOT_SUPPORTED = 0,
        D3D11_TILED_RESOURCES_TIER_1 = 1,
        D3D11_TILED_RESOURCES_TIER_2 = 2
    } D3D11_TILED_RESOURCES_TIER;

typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS1
    {
    D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
    BOOL MinMaxFiltering;
    BOOL ClearViewAlsoSupportsDepthOnlyFormats;
    BOOL MapOnDefaultBuffers;
    } D3D11_FEATURE_DATA_D3D11_OPTIONS1;

typedef struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT
    {
    BOOL SimpleInstancingSupported;
    } D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT;

typedef struct D3D11_FEATURE_DATA_MARKER_SUPPORT
    {
    BOOL Profile;
    } D3D11_FEATURE_DATA_MARKER_SUPPORT;

typedef struct D3D11_FEATURE_DATA_D3D9_OPTIONS1
    {
    BOOL FullNonPow2TextureSupported;
    BOOL DepthAsTextureWithLessEqualComparisonFilterSupported;
    BOOL SimpleInstancingSupported;
    BOOL TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
    } D3D11_FEATURE_DATA_D3D9_OPTIONS1;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0029_v0_0_s_ifspec;
# 7424 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11DeviceContext;



    struct __declspec(uuid("c0bfa96c-e089-44fb-8eaf-26f8796190da")) __declspec(novtable)
    ID3D11DeviceContext : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall VSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D11Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall PSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                      ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall PSSetShader(

                      ID3D11PixelShader *pPixelShader,

                                               ID3D11ClassInstance *const *ppClassInstances,
            UINT NumClassInstances) = 0;

        virtual void __stdcall PSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                         ID3D11SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall VSSetShader(

                      ID3D11VertexShader *pVertexShader,

                                               ID3D11ClassInstance *const *ppClassInstances,
            UINT NumClassInstances) = 0;

        virtual void __stdcall DrawIndexed(

                  UINT IndexCount,

                  UINT StartIndexLocation,

                  INT BaseVertexLocation) = 0;

        virtual void __stdcall Draw(

                  UINT VertexCount,

                  UINT StartVertexLocation) = 0;

        virtual HRESULT __stdcall Map(

                  ID3D11Resource *pResource,

                  UINT Subresource,

                  D3D11_MAP MapType,

                  UINT MapFlags,

                   D3D11_MAPPED_SUBRESOURCE *pMappedResource) = 0;

        virtual void __stdcall Unmap(

                  ID3D11Resource *pResource,

                  UINT Subresource) = 0;

        virtual void __stdcall PSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D11Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall IASetInputLayout(

                      ID3D11InputLayout *pInputLayout) = 0;

        virtual void __stdcall IASetVertexBuffers(

                                                                            UINT StartSlot,

                                                                                    UINT NumBuffers,

                                        ID3D11Buffer *const *ppVertexBuffers,

                                        const UINT *pStrides,

                                        const UINT *pOffsets) = 0;

        virtual void __stdcall IASetIndexBuffer(

                      ID3D11Buffer *pIndexBuffer,

                  DXGI_FORMAT Format,

                  UINT Offset) = 0;

        virtual void __stdcall DrawIndexedInstanced(

                  UINT IndexCountPerInstance,

                  UINT InstanceCount,

                  UINT StartIndexLocation,

                  INT BaseVertexLocation,

                  UINT StartInstanceLocation) = 0;

        virtual void __stdcall DrawInstanced(

                  UINT VertexCountPerInstance,

                  UINT InstanceCount,

                  UINT StartVertexLocation,

                  UINT StartInstanceLocation) = 0;

        virtual void __stdcall GSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D11Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall GSSetShader(

                      ID3D11GeometryShader *pShader,

                                               ID3D11ClassInstance *const *ppClassInstances,
            UINT NumClassInstances) = 0;

        virtual void __stdcall IASetPrimitiveTopology(

                  D3D11_PRIMITIVE_TOPOLOGY Topology) = 0;

        virtual void __stdcall VSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                      ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall VSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                         ID3D11SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall Begin(

                  ID3D11Asynchronous *pAsync) = 0;

        virtual void __stdcall End(

                  ID3D11Asynchronous *pAsync) = 0;

        virtual HRESULT __stdcall GetData(

                  ID3D11Asynchronous *pAsync,

                                                void *pData,

                  UINT DataSize,

                  UINT GetDataFlags) = 0;

        virtual void __stdcall SetPredication(

                      ID3D11Predicate *pPredicate,

                  BOOL PredicateValue) = 0;

        virtual void __stdcall GSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                      ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall GSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                         ID3D11SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall OMSetRenderTargets(

                                                                     UINT NumViews,

                                      ID3D11RenderTargetView *const *ppRenderTargetViews,

                      ID3D11DepthStencilView *pDepthStencilView) = 0;

        virtual void __stdcall OMSetRenderTargetsAndUnorderedAccessViews(

                  UINT NumRTVs,

                                     ID3D11RenderTargetView *const *ppRenderTargetViews,

                      ID3D11DepthStencilView *pDepthStencilView,

                                                         UINT UAVStartSlot,

                  UINT NumUAVs,

                                     ID3D11UnorderedAccessView *const *ppUnorderedAccessViews,

                                     const UINT *pUAVInitialCounts) = 0;

        virtual void __stdcall OMSetBlendState(

                      ID3D11BlendState *pBlendState,

                      const FLOAT BlendFactor[ 4 ],

                  UINT SampleMask) = 0;

        virtual void __stdcall OMSetDepthStencilState(

                      ID3D11DepthStencilState *pDepthStencilState,

                  UINT StencilRef) = 0;

        virtual void __stdcall SOSetTargets(

                                                        UINT NumBuffers,

                                        ID3D11Buffer *const *ppSOTargets,

                                        const UINT *pOffsets) = 0;

        virtual void __stdcall DrawAuto( void) = 0;

        virtual void __stdcall DrawIndexedInstancedIndirect(

                  ID3D11Buffer *pBufferForArgs,

                  UINT AlignedByteOffsetForArgs) = 0;

        virtual void __stdcall DrawInstancedIndirect(

                  ID3D11Buffer *pBufferForArgs,

                  UINT AlignedByteOffsetForArgs) = 0;

        virtual void __stdcall Dispatch(

                  UINT ThreadGroupCountX,

                  UINT ThreadGroupCountY,

                  UINT ThreadGroupCountZ) = 0;

        virtual void __stdcall DispatchIndirect(

                  ID3D11Buffer *pBufferForArgs,

                  UINT AlignedByteOffsetForArgs) = 0;

        virtual void __stdcall RSSetState(

                      ID3D11RasterizerState *pRasterizerState) = 0;

        virtual void __stdcall RSSetViewports(

                                                                                     UINT NumViewports,

                                          const D3D11_VIEWPORT *pViewports) = 0;

        virtual void __stdcall RSSetScissorRects(

                                                                                     UINT NumRects,

                                      const D3D11_RECT *pRects) = 0;

        virtual void __stdcall CopySubresourceRegion(

                  ID3D11Resource *pDstResource,

                  UINT DstSubresource,

                  UINT DstX,

                  UINT DstY,

                  UINT DstZ,

                  ID3D11Resource *pSrcResource,

                  UINT SrcSubresource,

                      const D3D11_BOX *pSrcBox) = 0;

        virtual void __stdcall CopyResource(

                  ID3D11Resource *pDstResource,

                  ID3D11Resource *pSrcResource) = 0;

        virtual void __stdcall UpdateSubresource(

                  ID3D11Resource *pDstResource,

                  UINT DstSubresource,

                      const D3D11_BOX *pDstBox,

                  const void *pSrcData,

                  UINT SrcRowPitch,

                  UINT SrcDepthPitch) = 0;

        virtual void __stdcall CopyStructureCount(

                  ID3D11Buffer *pDstBuffer,

                  UINT DstAlignedByteOffset,

                  ID3D11UnorderedAccessView *pSrcView) = 0;

        virtual void __stdcall ClearRenderTargetView(

                  ID3D11RenderTargetView *pRenderTargetView,

                  const FLOAT ColorRGBA[ 4 ]) = 0;

        virtual void __stdcall ClearUnorderedAccessViewUint(

                  ID3D11UnorderedAccessView *pUnorderedAccessView,

                  const UINT Values[ 4 ]) = 0;

        virtual void __stdcall ClearUnorderedAccessViewFloat(

                  ID3D11UnorderedAccessView *pUnorderedAccessView,

                  const FLOAT Values[ 4 ]) = 0;

        virtual void __stdcall ClearDepthStencilView(

                  ID3D11DepthStencilView *pDepthStencilView,

                  UINT ClearFlags,

                  FLOAT Depth,

                  UINT8 Stencil) = 0;

        virtual void __stdcall GenerateMips(

                  ID3D11ShaderResourceView *pShaderResourceView) = 0;

        virtual void __stdcall SetResourceMinLOD(

                  ID3D11Resource *pResource,
            FLOAT MinLOD) = 0;

        virtual FLOAT __stdcall GetResourceMinLOD(

                  ID3D11Resource *pResource) = 0;

        virtual void __stdcall ResolveSubresource(

                  ID3D11Resource *pDstResource,

                  UINT DstSubresource,

                  ID3D11Resource *pSrcResource,

                  UINT SrcSubresource,

                  DXGI_FORMAT Format) = 0;

        virtual void __stdcall ExecuteCommandList(

                  ID3D11CommandList *pCommandList,
            BOOL RestoreContextState) = 0;

        virtual void __stdcall HSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                      ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall HSSetShader(

                      ID3D11HullShader *pHullShader,

                                               ID3D11ClassInstance *const *ppClassInstances,
            UINT NumClassInstances) = 0;

        virtual void __stdcall HSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                         ID3D11SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall HSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D11Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall DSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                      ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall DSSetShader(

                      ID3D11DomainShader *pDomainShader,

                                               ID3D11ClassInstance *const *ppClassInstances,
            UINT NumClassInstances) = 0;

        virtual void __stdcall DSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                         ID3D11SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall DSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D11Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall CSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                      ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall CSSetUnorderedAccessViews(

                                                         UINT StartSlot,

                                                                 UINT NumUAVs,

                                     ID3D11UnorderedAccessView *const *ppUnorderedAccessViews,

                                     const UINT *pUAVInitialCounts) = 0;

        virtual void __stdcall CSSetShader(

                      ID3D11ComputeShader *pComputeShader,

                                               ID3D11ClassInstance *const *ppClassInstances,
            UINT NumClassInstances) = 0;

        virtual void __stdcall CSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                         ID3D11SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall CSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D11Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall VSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D11Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall PSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                        ID3D11ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall PSGetShader(

                   ID3D11PixelShader **ppPixelShader,

                                                   ID3D11ClassInstance **ppClassInstances,

                         UINT *pNumClassInstances) = 0;

        virtual void __stdcall PSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                           ID3D11SamplerState **ppSamplers) = 0;

        virtual void __stdcall VSGetShader(

                   ID3D11VertexShader **ppVertexShader,

                                                   ID3D11ClassInstance **ppClassInstances,

                         UINT *pNumClassInstances) = 0;

        virtual void __stdcall PSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D11Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall IAGetInputLayout(

                   ID3D11InputLayout **ppInputLayout) = 0;

        virtual void __stdcall IAGetVertexBuffers(

                                                                            UINT StartSlot,

                                                                                    UINT NumBuffers,

                                          ID3D11Buffer **ppVertexBuffers,

                                          UINT *pStrides,

                                          UINT *pOffsets) = 0;

        virtual void __stdcall IAGetIndexBuffer(

                       ID3D11Buffer **pIndexBuffer,

                       DXGI_FORMAT *Format,

                       UINT *Offset) = 0;

        virtual void __stdcall GSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D11Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall GSGetShader(

                   ID3D11GeometryShader **ppGeometryShader,

                                                   ID3D11ClassInstance **ppClassInstances,

                         UINT *pNumClassInstances) = 0;

        virtual void __stdcall IAGetPrimitiveTopology(

                   D3D11_PRIMITIVE_TOPOLOGY *pTopology) = 0;

        virtual void __stdcall VSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                        ID3D11ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall VSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                           ID3D11SamplerState **ppSamplers) = 0;

        virtual void __stdcall GetPredication(

                       ID3D11Predicate **ppPredicate,

                       BOOL *pPredicateValue) = 0;

        virtual void __stdcall GSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                        ID3D11ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall GSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                           ID3D11SamplerState **ppSamplers) = 0;

        virtual void __stdcall OMGetRenderTargets(

                                                                     UINT NumViews,

                                        ID3D11RenderTargetView **ppRenderTargetViews,

                       ID3D11DepthStencilView **ppDepthStencilView) = 0;

        virtual void __stdcall OMGetRenderTargetsAndUnorderedAccessViews(

                                                                     UINT NumRTVs,

                                       ID3D11RenderTargetView **ppRenderTargetViews,

                       ID3D11DepthStencilView **ppDepthStencilView,

                                                                 UINT UAVStartSlot,

                                                                            UINT NumUAVs,

                                       ID3D11UnorderedAccessView **ppUnorderedAccessViews) = 0;

        virtual void __stdcall OMGetBlendState(

                       ID3D11BlendState **ppBlendState,

                       FLOAT BlendFactor[ 4 ],

                       UINT *pSampleMask) = 0;

        virtual void __stdcall OMGetDepthStencilState(

                       ID3D11DepthStencilState **ppDepthStencilState,

                       UINT *pStencilRef) = 0;

        virtual void __stdcall SOGetTargets(

                                                         UINT NumBuffers,

                                          ID3D11Buffer **ppSOTargets) = 0;

        virtual void __stdcall RSGetState(

                   ID3D11RasterizerState **ppRasterizerState) = 0;

        virtual void __stdcall RSGetViewports(

                                                                                               UINT *pNumViewports,

                                              D3D11_VIEWPORT *pViewports) = 0;

        virtual void __stdcall RSGetScissorRects(

                                                                                               UINT *pNumRects,

                                          D3D11_RECT *pRects) = 0;

        virtual void __stdcall HSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                        ID3D11ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall HSGetShader(

                   ID3D11HullShader **ppHullShader,

                                                   ID3D11ClassInstance **ppClassInstances,

                         UINT *pNumClassInstances) = 0;

        virtual void __stdcall HSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                           ID3D11SamplerState **ppSamplers) = 0;

        virtual void __stdcall HSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D11Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall DSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                        ID3D11ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall DSGetShader(

                   ID3D11DomainShader **ppDomainShader,

                                                   ID3D11ClassInstance **ppClassInstances,

                         UINT *pNumClassInstances) = 0;

        virtual void __stdcall DSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                           ID3D11SamplerState **ppSamplers) = 0;

        virtual void __stdcall DSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D11Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall CSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                        ID3D11ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall CSGetUnorderedAccessViews(

                                                                 UINT StartSlot,

                                                                         UINT NumUAVs,

                                       ID3D11UnorderedAccessView **ppUnorderedAccessViews) = 0;

        virtual void __stdcall CSGetShader(

                   ID3D11ComputeShader **ppComputeShader,

                                                   ID3D11ClassInstance **ppClassInstances,

                         UINT *pNumClassInstances) = 0;

        virtual void __stdcall CSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                           ID3D11SamplerState **ppSamplers) = 0;

        virtual void __stdcall CSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D11Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall ClearState( void) = 0;

        virtual void __stdcall Flush( void) = 0;

        virtual D3D11_DEVICE_CONTEXT_TYPE __stdcall GetType( void) = 0;

        virtual UINT __stdcall GetContextFlags( void) = 0;

        virtual HRESULT __stdcall FinishCommandList(
            BOOL RestoreDeferredContextState,

                       ID3D11CommandList **ppCommandList) = 0;

    };
# 9568 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
}
struct CD3D11_VIDEO_DEFAULT {};
extern const __declspec(selectany) CD3D11_VIDEO_DEFAULT D3D11_VIDEO_DEFAULT;
extern "C"{





typedef HRESULT APP_DEPRECATED_HRESULT;


extern "C" const GUID D3D11_DECODER_PROFILE_MPEG2_MOCOMP;
extern "C" const GUID D3D11_DECODER_PROFILE_MPEG2_IDCT;
extern "C" const GUID D3D11_DECODER_PROFILE_MPEG2_VLD;
extern "C" const GUID D3D11_DECODER_PROFILE_MPEG1_VLD;
extern "C" const GUID D3D11_DECODER_PROFILE_MPEG2and1_VLD;
extern "C" const GUID D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT;
extern "C" const GUID D3D11_DECODER_PROFILE_H264_MOCOMP_FGT;
extern "C" const GUID D3D11_DECODER_PROFILE_H264_IDCT_NOFGT;
extern "C" const GUID D3D11_DECODER_PROFILE_H264_IDCT_FGT;
extern "C" const GUID D3D11_DECODER_PROFILE_H264_VLD_NOFGT;
extern "C" const GUID D3D11_DECODER_PROFILE_H264_VLD_FGT;
extern "C" const GUID D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT;
extern "C" const GUID D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT;
extern "C" const GUID D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT;
extern "C" const GUID D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT;
extern "C" const GUID D3D11_DECODER_PROFILE_WMV8_POSTPROC;
extern "C" const GUID D3D11_DECODER_PROFILE_WMV8_MOCOMP;
extern "C" const GUID D3D11_DECODER_PROFILE_WMV9_POSTPROC;
extern "C" const GUID D3D11_DECODER_PROFILE_WMV9_MOCOMP;
extern "C" const GUID D3D11_DECODER_PROFILE_WMV9_IDCT;
extern "C" const GUID D3D11_DECODER_PROFILE_VC1_POSTPROC;
extern "C" const GUID D3D11_DECODER_PROFILE_VC1_MOCOMP;
extern "C" const GUID D3D11_DECODER_PROFILE_VC1_IDCT;
extern "C" const GUID D3D11_DECODER_PROFILE_VC1_VLD;
extern "C" const GUID D3D11_DECODER_PROFILE_VC1_D2010;
extern "C" const GUID D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE;
extern "C" const GUID D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC;
extern "C" const GUID D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC;
extern "C" const GUID D3D11_DECODER_PROFILE_HEVC_VLD_MAIN;
extern "C" const GUID D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10;
typedef struct D3D11_VIDEO_DECODER_DESC
    {
    GUID Guid;
    UINT SampleWidth;
    UINT SampleHeight;
    DXGI_FORMAT OutputFormat;
    } D3D11_VIDEO_DECODER_DESC;

typedef struct D3D11_VIDEO_DECODER_CONFIG
    {
    GUID guidConfigBitstreamEncryption;
    GUID guidConfigMBcontrolEncryption;
    GUID guidConfigResidDiffEncryption;
    UINT ConfigBitstreamRaw;
    UINT ConfigMBcontrolRasterOrder;
    UINT ConfigResidDiffHost;
    UINT ConfigSpatialResid8;
    UINT ConfigResid8Subtraction;
    UINT ConfigSpatialHost8or9Clipping;
    UINT ConfigSpatialResidInterleaved;
    UINT ConfigIntraResidUnsigned;
    UINT ConfigResidDiffAccelerator;
    UINT ConfigHostInverseScan;
    UINT ConfigSpecificIDCT;
    UINT Config4GroupedCoefs;
    USHORT ConfigMinRenderTargetBuffCount;
    USHORT ConfigDecoderSpecific;
    } D3D11_VIDEO_DECODER_CONFIG;

typedef
enum D3D11_VIDEO_DECODER_BUFFER_TYPE
    {
        D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS = 0,
        D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL = 1,
        D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE = 2,
        D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL = 3,
        D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX = 4,
        D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL = 5,
        D3D11_VIDEO_DECODER_BUFFER_BITSTREAM = 6,
        D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR = 7,
        D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN = 8
    } D3D11_VIDEO_DECODER_BUFFER_TYPE;

typedef struct _D3D11_AES_CTR_IV
    {
    UINT64 IV;
    UINT64 Count;
    } D3D11_AES_CTR_IV;

typedef struct D3D11_ENCRYPTED_BLOCK_INFO
    {
    UINT NumEncryptedBytesAtBeginning;
    UINT NumBytesInSkipPattern;
    UINT NumBytesInEncryptPattern;
    } D3D11_ENCRYPTED_BLOCK_INFO;

typedef struct D3D11_VIDEO_DECODER_BUFFER_DESC
    {
    D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType;
    UINT BufferIndex;
    UINT DataOffset;
    UINT DataSize;
    UINT FirstMBaddress;
    UINT NumMBsInBuffer;
    UINT Width;
    UINT Height;
    UINT Stride;
    UINT ReservedBits;

                              void *pIV;
    UINT IVSize;
    BOOL PartialEncryption;
    D3D11_ENCRYPTED_BLOCK_INFO EncryptedBlockInfo;
    } D3D11_VIDEO_DECODER_BUFFER_DESC;

typedef struct D3D11_VIDEO_DECODER_EXTENSION
    {
    UINT Function;

                                        void *pPrivateInputData;
    UINT PrivateInputDataSize;

                                         void *pPrivateOutputData;
    UINT PrivateOutputDataSize;
    UINT ResourceCount;

                                     ID3D11Resource **ppResourceList;
    } D3D11_VIDEO_DECODER_EXTENSION;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0030_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0030_v0_0_s_ifspec;
# 9711 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11VideoDecoder;



    struct __declspec(uuid("3C9C5B51-995D-48d1-9B8D-FA5CAEDED65C")) __declspec(novtable)
    ID3D11VideoDecoder : public ID3D11DeviceChild
    {
    public:
        virtual HRESULT __stdcall GetCreationParameters(

                   D3D11_VIDEO_DECODER_DESC *pVideoDesc,

                   D3D11_VIDEO_DECODER_CONFIG *pConfig) = 0;

        virtual HRESULT __stdcall GetDriverHandle(

                   HANDLE *pDriverHandle) = 0;

    };
# 9848 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT
    {
        D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT = 0x1,
        D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT = 0x2
    } D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT;

typedef
enum D3D11_VIDEO_PROCESSOR_DEVICE_CAPS
    {
        D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE = 0x1,
        D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC = 0x2,
        D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION = 0x4,
        D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 0x8,
        D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE = 0x10
    } D3D11_VIDEO_PROCESSOR_DEVICE_CAPS;

typedef
enum D3D11_VIDEO_PROCESSOR_FEATURE_CAPS
    {
        D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL = 0x1,
        D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION = 0x2,
        D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY = 0x4,
        D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE = 0x8,
        D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY = 0x10,
        D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO = 0x20,
        D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION = 0x40,
        D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM = 0x80,
        D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO = 0x100
    } D3D11_VIDEO_PROCESSOR_FEATURE_CAPS;

typedef
enum D3D11_VIDEO_PROCESSOR_FILTER_CAPS
    {
        D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS = 0x1,
        D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST = 0x2,
        D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE = 0x4,
        D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION = 0x8,
        D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION = 0x10,
        D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT = 0x20,
        D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING = 0x40,
        D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT = 0x80
    } D3D11_VIDEO_PROCESSOR_FILTER_CAPS;

typedef
enum D3D11_VIDEO_PROCESSOR_FORMAT_CAPS
    {
        D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED = 0x1,
        D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP = 0x2,
        D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY = 0x4,
        D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED = 0x8
    } D3D11_VIDEO_PROCESSOR_FORMAT_CAPS;

typedef
enum D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS
    {
        D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE = 0x1,
        D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING = 0x2,
        D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT = 0x4,
        D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION = 0x8,
        D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING = 0x10,
        D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION = 0x20,
        D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION = 0x40,
        D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING = 0x80
    } D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS;

typedef
enum D3D11_VIDEO_PROCESSOR_STEREO_CAPS
    {
        D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET = 0x1,
        D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED = 0x2,
        D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED = 0x4,
        D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD = 0x8,
        D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE = 0x10
    } D3D11_VIDEO_PROCESSOR_STEREO_CAPS;

typedef struct D3D11_VIDEO_PROCESSOR_CAPS
    {
    UINT DeviceCaps;
    UINT FeatureCaps;
    UINT FilterCaps;
    UINT InputFormatCaps;
    UINT AutoStreamCaps;
    UINT StereoCaps;
    UINT RateConversionCapsCount;
    UINT MaxInputStreams;
    UINT MaxStreamStates;
    } D3D11_VIDEO_PROCESSOR_CAPS;

typedef
enum D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS
    {
        D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND = 0x1,
        D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB = 0x2,
        D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 0x4,
        D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 0x8,
        D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE = 0x10,
        D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 0x20
    } D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS;

typedef
enum D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS
    {
        D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32 = 0x1,
        D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22 = 0x2,
        D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224 = 0x4,
        D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332 = 0x8,
        D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322 = 0x10,
        D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55 = 0x20,
        D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64 = 0x40,
        D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87 = 0x80,
        D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223 = 0x100,
        D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER = 0x80000000
    } D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS;

typedef struct D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS
    {
    UINT PastFrames;
    UINT FutureFrames;
    UINT ProcessorCaps;
    UINT ITelecineCaps;
    UINT CustomRateCount;
    } D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS;

typedef
enum D3D11_CONTENT_PROTECTION_CAPS
    {
        D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE = 0x1,
        D3D11_CONTENT_PROTECTION_CAPS_HARDWARE = 0x2,
        D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON = 0x4,
        D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION = 0x8,
        D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY = 0x10,
        D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY = 0x20,
        D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK = 0x40,
        D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY = 0x80,
        D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV = 0x100,
        D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY = 0x200,
        D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT = 0x400
    } D3D11_CONTENT_PROTECTION_CAPS;

extern "C" const GUID D3D11_CRYPTO_TYPE_AES128_CTR;
typedef struct D3D11_VIDEO_CONTENT_PROTECTION_CAPS
    {
    UINT Caps;
    UINT KeyExchangeTypeCount;
    UINT BlockAlignmentSize;
    ULONGLONG ProtectedMemorySize;
    } D3D11_VIDEO_CONTENT_PROTECTION_CAPS;

typedef struct D3D11_VIDEO_PROCESSOR_CUSTOM_RATE
    {
    DXGI_RATIONAL CustomRate;
    UINT OutputFrames;
    BOOL InputInterlaced;
    UINT InputFramesOrFields;
    } D3D11_VIDEO_PROCESSOR_CUSTOM_RATE;

typedef
enum D3D11_VIDEO_PROCESSOR_FILTER
    {
        D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS = 0,
        D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST = 1,
        D3D11_VIDEO_PROCESSOR_FILTER_HUE = 2,
        D3D11_VIDEO_PROCESSOR_FILTER_SATURATION = 3,
        D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION = 4,
        D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT = 5,
        D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING = 6,
        D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT = 7
    } D3D11_VIDEO_PROCESSOR_FILTER;

typedef struct D3D11_VIDEO_PROCESSOR_FILTER_RANGE
    {
    int Minimum;
    int Maximum;
    int Default;
    float Multiplier;
    } D3D11_VIDEO_PROCESSOR_FILTER_RANGE;

typedef
enum D3D11_VIDEO_FRAME_FORMAT
    {
        D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE = 0,
        D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1,
        D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2
    } D3D11_VIDEO_FRAME_FORMAT;

typedef
enum D3D11_VIDEO_USAGE
    {
        D3D11_VIDEO_USAGE_PLAYBACK_NORMAL = 0,
        D3D11_VIDEO_USAGE_OPTIMAL_SPEED = 1,
        D3D11_VIDEO_USAGE_OPTIMAL_QUALITY = 2
    } D3D11_VIDEO_USAGE;

typedef struct D3D11_VIDEO_PROCESSOR_CONTENT_DESC
    {
    D3D11_VIDEO_FRAME_FORMAT InputFrameFormat;
    DXGI_RATIONAL InputFrameRate;
    UINT InputWidth;
    UINT InputHeight;
    DXGI_RATIONAL OutputFrameRate;
    UINT OutputWidth;
    UINT OutputHeight;
    D3D11_VIDEO_USAGE Usage;
    } D3D11_VIDEO_PROCESSOR_CONTENT_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0031_v0_0_s_ifspec;
# 10066 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11VideoProcessorEnumerator;



    struct __declspec(uuid("31627037-53AB-4200-9061-05FAA9AB45F9")) __declspec(novtable)
    ID3D11VideoProcessorEnumerator : public ID3D11DeviceChild
    {
    public:
        virtual HRESULT __stdcall GetVideoProcessorContentDesc(

                   D3D11_VIDEO_PROCESSOR_CONTENT_DESC *pContentDesc) = 0;

        virtual HRESULT __stdcall CheckVideoProcessorFormat(

                  DXGI_FORMAT Format,

                   UINT *pFlags) = 0;

        virtual HRESULT __stdcall GetVideoProcessorCaps(

                   D3D11_VIDEO_PROCESSOR_CAPS *pCaps) = 0;

        virtual HRESULT __stdcall GetVideoProcessorRateConversionCaps(

                  UINT TypeIndex,

                   D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS *pCaps) = 0;

        virtual HRESULT __stdcall GetVideoProcessorCustomRate(

                  UINT TypeIndex,

                  UINT CustomRateIndex,

                   D3D11_VIDEO_PROCESSOR_CUSTOM_RATE *pRate) = 0;

        virtual HRESULT __stdcall GetVideoProcessorFilterRange(

                  D3D11_VIDEO_PROCESSOR_FILTER Filter,

                   D3D11_VIDEO_PROCESSOR_FILTER_RANGE *pRange) = 0;

    };
# 10267 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef struct D3D11_VIDEO_COLOR_RGBA
    {
    float R;
    float G;
    float B;
    float A;
    } D3D11_VIDEO_COLOR_RGBA;

typedef struct D3D11_VIDEO_COLOR_YCbCrA
    {
    float Y;
    float Cb;
    float Cr;
    float A;
    } D3D11_VIDEO_COLOR_YCbCrA;

typedef struct D3D11_VIDEO_COLOR
    {
    union
        {
        D3D11_VIDEO_COLOR_YCbCrA YCbCr;
        D3D11_VIDEO_COLOR_RGBA RGBA;
        } ;
    } D3D11_VIDEO_COLOR;

typedef
enum D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE
    {
        D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED = 0,
        D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235 = 1,
        D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255 = 2
    } D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE;

typedef struct D3D11_VIDEO_PROCESSOR_COLOR_SPACE
    {
    UINT Usage : 1;
    UINT RGB_Range : 1;
    UINT YCbCr_Matrix : 1;
    UINT YCbCr_xvYCC : 1;
    UINT Nominal_Range : 2;
    UINT Reserved : 26;
    } D3D11_VIDEO_PROCESSOR_COLOR_SPACE;

typedef
enum D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE
    {
        D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE = 0,
        D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND = 1,
        D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION = 2,
        D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM = 3
    } D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE;

typedef
enum D3D11_VIDEO_PROCESSOR_OUTPUT_RATE
    {
        D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL = 0,
        D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF = 1,
        D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM = 2
    } D3D11_VIDEO_PROCESSOR_OUTPUT_RATE;

typedef
enum D3D11_VIDEO_PROCESSOR_STEREO_FORMAT
    {
        D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO = 0,
        D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL = 1,
        D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL = 2,
        D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE = 3,
        D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET = 4,
        D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED = 5,
        D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED = 6,
        D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD = 7
    } D3D11_VIDEO_PROCESSOR_STEREO_FORMAT;

typedef
enum D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE
    {
        D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE = 0,
        D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 = 1,
        D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 = 2
    } D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE;

typedef
enum D3D11_VIDEO_PROCESSOR_ROTATION
    {
        D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY = 0,
        D3D11_VIDEO_PROCESSOR_ROTATION_90 = 1,
        D3D11_VIDEO_PROCESSOR_ROTATION_180 = 2,
        D3D11_VIDEO_PROCESSOR_ROTATION_270 = 3
    } D3D11_VIDEO_PROCESSOR_ROTATION;

typedef struct D3D11_VIDEO_PROCESSOR_STREAM
    {
    BOOL Enable;
    UINT OutputIndex;
    UINT InputFrameOrField;
    UINT PastFrames;
    UINT FutureFrames;

                              ID3D11VideoProcessorInputView **ppPastSurfaces;
    ID3D11VideoProcessorInputView *pInputSurface;

                                ID3D11VideoProcessorInputView **ppFutureSurfaces;

                                  ID3D11VideoProcessorInputView **ppPastSurfacesRight;
    ID3D11VideoProcessorInputView *pInputSurfaceRight;

                                ID3D11VideoProcessorInputView **ppFutureSurfacesRight;
    } D3D11_VIDEO_PROCESSOR_STREAM;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0032_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0032_v0_0_s_ifspec;
# 10388 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11VideoProcessor;



    struct __declspec(uuid("1D7B0652-185F-41c6-85CE-0C5BE3D4AE6C")) __declspec(novtable)
    ID3D11VideoProcessor : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetContentDesc(

                   D3D11_VIDEO_PROCESSOR_CONTENT_DESC *pDesc) = 0;

        virtual void __stdcall GetRateConversionCaps(

                   D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS *pCaps) = 0;

    };
# 10521 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef struct D3D11_OMAC
    {
    BYTE Omac[ 16 ];
    } D3D11_OMAC;

typedef
enum D3D11_AUTHENTICATED_CHANNEL_TYPE
    {
        D3D11_AUTHENTICATED_CHANNEL_D3D11 = 1,
        D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE = 2,
        D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE = 3
    } D3D11_AUTHENTICATED_CHANNEL_TYPE;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0033_v0_0_s_ifspec;
# 10546 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11AuthenticatedChannel;



    struct __declspec(uuid("3015A308-DCBD-47aa-A747-192486D14D4A")) __declspec(novtable)
    ID3D11AuthenticatedChannel : public ID3D11DeviceChild
    {
    public:
        virtual HRESULT __stdcall GetCertificateSize(

                   UINT *pCertificateSize) = 0;

        virtual HRESULT __stdcall GetCertificate(

                  UINT CertificateSize,

                                                 BYTE *pCertificate) = 0;

        virtual void __stdcall GetChannelHandle(

                   HANDLE *pChannelHandle) = 0;

    };
# 10695 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const GUID D3D11_AUTHENTICATED_QUERY_PROTECTION;
extern "C" const GUID D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE;
extern "C" const GUID D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE;
extern "C" const GUID D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION;
extern "C" const GUID D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT;
extern "C" const GUID D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS;
extern "C" const GUID D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT;
extern "C" const GUID D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT;
extern "C" const GUID D3D11_AUTHENTICATED_QUERY_OUTPUT_ID;
extern "C" const GUID D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES;
extern "C" const GUID D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT;
extern "C" const GUID D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID;
extern "C" const GUID D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE;
extern "C" const GUID D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE;
extern "C" const GUID D3D11_AUTHENTICATED_CONFIGURE_PROTECTION;
extern "C" const GUID D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION;
extern "C" const GUID D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE;
extern "C" const GUID D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE;
typedef struct D3D11_AUTHENTICATED_QUERY_INPUT
    {
    GUID QueryType;
    HANDLE hChannel;
    UINT SequenceNumber;
    } D3D11_AUTHENTICATED_QUERY_INPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_OUTPUT
    {
    D3D11_OMAC omac;
    GUID QueryType;
    HANDLE hChannel;
    UINT SequenceNumber;
    HRESULT ReturnCode;
    } D3D11_AUTHENTICATED_QUERY_OUTPUT;

typedef union D3D11_AUTHENTICATED_PROTECTION_FLAGS
    {
    struct __MIDL___MIDL_itf_d3d11_0000_0034_0001
        {
        UINT ProtectionEnabled : 1;
        UINT OverlayOrFullscreenRequired : 1;
        UINT Reserved : 30;
        } Flags;
    UINT Value;
    } D3D11_AUTHENTICATED_PROTECTION_FLAGS;

typedef struct D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT
    {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    D3D11_AUTHENTICATED_PROTECTION_FLAGS ProtectionFlags;
    } D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT
    {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType;
    } D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT
    {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
    } D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT
    {
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    HANDLE DecoderHandle;
    } D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT
    {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DecoderHandle;
    HANDLE CryptoSessionHandle;
    HANDLE DeviceHandle;
    } D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT
    {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT RestrictedSharedResourceProcessCount;
    } D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT
    {
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    UINT ProcessIndex;
    } D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT;

typedef
enum D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
    {
        D3D11_PROCESSIDTYPE_UNKNOWN = 0,
        D3D11_PROCESSIDTYPE_DWM = 1,
        D3D11_PROCESSIDTYPE_HANDLE = 2
    } D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE;

typedef struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT
    {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT ProcessIndex;
    D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier;
    HANDLE ProcessHandle;
    } D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT
    {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT UnrestrictedProtectedSharedResourceCount;
    } D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT
    {
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    } D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT
    {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    UINT OutputIDCount;
    } D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT
    {
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    UINT OutputIDIndex;
    } D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT
    {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    UINT OutputIDIndex;
    UINT64 OutputID;
    } D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT;

typedef
enum D3D11_BUS_TYPE
    {
        D3D11_BUS_TYPE_OTHER = 0,
        D3D11_BUS_TYPE_PCI = 0x1,
        D3D11_BUS_TYPE_PCIX = 0x2,
        D3D11_BUS_TYPE_PCIEXPRESS = 0x3,
        D3D11_BUS_TYPE_AGP = 0x4,
        D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET = 0x10000,
        D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 0x20000,
        D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 0x30000,
        D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 0x40000,
        D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 0x50000,
        D3D11_BUS_IMPL_MODIFIER_NON_STANDARD = 0x80000000
    } D3D11_BUS_TYPE;

typedef struct D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT
    {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    D3D11_BUS_TYPE BusType;
    BOOL AccessibleInContiguousBlocks;
    BOOL AccessibleInNonContiguousBlocks;
    } D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT
    {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT EncryptionGuidCount;
    } D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT
    {
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    UINT EncryptionGuidIndex;
    } D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT
    {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT EncryptionGuidIndex;
    GUID EncryptionGuid;
    } D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT;

typedef struct D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT
    {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    GUID EncryptionGuid;
    } D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT;

typedef struct D3D11_AUTHENTICATED_CONFIGURE_INPUT
    {
    D3D11_OMAC omac;
    GUID ConfigureType;
    HANDLE hChannel;
    UINT SequenceNumber;
    } D3D11_AUTHENTICATED_CONFIGURE_INPUT;

typedef struct D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
    {
    D3D11_OMAC omac;
    GUID ConfigureType;
    HANDLE hChannel;
    UINT SequenceNumber;
    HRESULT ReturnCode;
    } D3D11_AUTHENTICATED_CONFIGURE_OUTPUT;

typedef struct D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT
    {
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    UINT StartSequenceQuery;
    UINT StartSequenceConfigure;
    } D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT;

typedef struct D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT
    {
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    D3D11_AUTHENTICATED_PROTECTION_FLAGS Protections;
    } D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT;

typedef struct D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT
    {
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    HANDLE DecoderHandle;
    HANDLE CryptoSessionHandle;
    HANDLE DeviceHandle;
    } D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT;

typedef struct D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT
    {
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType;
    HANDLE ProcessHandle;
    BOOL AllowAccess;
    } D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT;

typedef struct D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT
    {
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    GUID EncryptionGuid;
    } D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT;

extern "C" const GUID D3D11_KEY_EXCHANGE_RSAES_OAEP;


extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0034_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0034_v0_0_s_ifspec;
# 10952 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11CryptoSession;



    struct __declspec(uuid("9B32F9AD-BDCC-40a6-A39D-D5C865845720")) __declspec(novtable)
    ID3D11CryptoSession : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetCryptoType(

                   GUID *pCryptoType) = 0;

        virtual void __stdcall GetDecoderProfile(

                   GUID *pDecoderProfile) = 0;

        virtual HRESULT __stdcall GetCertificateSize(

                   UINT *pCertificateSize) = 0;

        virtual HRESULT __stdcall GetCertificate(

                  UINT CertificateSize,

                                                 BYTE *pCertificate) = 0;

        virtual void __stdcall GetCryptoSessionHandle(

                   HANDLE *pCryptoSessionHandle) = 0;

    };
# 11125 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_VDOV_DIMENSION
    {
        D3D11_VDOV_DIMENSION_UNKNOWN = 0,
        D3D11_VDOV_DIMENSION_TEXTURE2D = 1
    } D3D11_VDOV_DIMENSION;

typedef struct D3D11_TEX2D_VDOV
    {
    UINT ArraySlice;
    } D3D11_TEX2D_VDOV;

typedef struct D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC
    {
    GUID DecodeProfile;
    D3D11_VDOV_DIMENSION ViewDimension;
    union
        {
        D3D11_TEX2D_VDOV Texture2D;
        } ;
    } D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0035_v0_0_s_ifspec;
# 11159 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11VideoDecoderOutputView;



    struct __declspec(uuid("C2931AEA-2A85-4f20-860F-FBA1FD256E18")) __declspec(novtable)
    ID3D11VideoDecoderOutputView : public ID3D11View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC *pDesc) = 0;

    };
# 11289 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_VPIV_DIMENSION
    {
        D3D11_VPIV_DIMENSION_UNKNOWN = 0,
        D3D11_VPIV_DIMENSION_TEXTURE2D = 1
    } D3D11_VPIV_DIMENSION;

typedef struct D3D11_TEX2D_VPIV
    {
    UINT MipSlice;
    UINT ArraySlice;
    } D3D11_TEX2D_VPIV;

typedef struct D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
    {
    UINT FourCC;
    D3D11_VPIV_DIMENSION ViewDimension;
    union
        {
        D3D11_TEX2D_VPIV Texture2D;
        } ;
    } D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0036_v0_0_s_ifspec;
# 11324 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11VideoProcessorInputView;



    struct __declspec(uuid("11EC5A5F-51DC-4945-AB34-6E8C21300EA5")) __declspec(novtable)
    ID3D11VideoProcessorInputView : public ID3D11View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC *pDesc) = 0;

    };
# 11454 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_VPOV_DIMENSION
    {
        D3D11_VPOV_DIMENSION_UNKNOWN = 0,
        D3D11_VPOV_DIMENSION_TEXTURE2D = 1,
        D3D11_VPOV_DIMENSION_TEXTURE2DARRAY = 2
    } D3D11_VPOV_DIMENSION;

typedef struct D3D11_TEX2D_VPOV
    {
    UINT MipSlice;
    } D3D11_TEX2D_VPOV;

typedef struct D3D11_TEX2D_ARRAY_VPOV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2D_ARRAY_VPOV;

typedef struct D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
    {
    D3D11_VPOV_DIMENSION ViewDimension;
    union
        {
        D3D11_TEX2D_VPOV Texture2D;
        D3D11_TEX2D_ARRAY_VPOV Texture2DArray;
        } ;
    } D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0037_v0_0_s_ifspec;
# 11496 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11VideoProcessorOutputView;



    struct __declspec(uuid("A048285E-25A9-4527-BD93-D68B68C44254")) __declspec(novtable)
    ID3D11VideoProcessorOutputView : public ID3D11View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC *pDesc) = 0;

    };
# 11630 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11VideoContext;



    struct __declspec(uuid("61F21C45-3C0E-4a74-9CEA-67100D9AD5E4")) __declspec(novtable)
    ID3D11VideoContext : public ID3D11DeviceChild
    {
    public:
        virtual HRESULT __stdcall GetDecoderBuffer(

                  ID3D11VideoDecoder *pDecoder,
            D3D11_VIDEO_DECODER_BUFFER_TYPE Type,

                   UINT *pBufferSize,

                                                      void **ppBuffer) = 0;

        virtual HRESULT __stdcall ReleaseDecoderBuffer(

                  ID3D11VideoDecoder *pDecoder,

                  D3D11_VIDEO_DECODER_BUFFER_TYPE Type) = 0;

        virtual HRESULT __stdcall DecoderBeginFrame(

                  ID3D11VideoDecoder *pDecoder,

                  ID3D11VideoDecoderOutputView *pView,
            UINT ContentKeySize,

                                                  const void *pContentKey) = 0;

        virtual HRESULT __stdcall DecoderEndFrame(

                  ID3D11VideoDecoder *pDecoder) = 0;

        virtual HRESULT __stdcall SubmitDecoderBuffers(

                  ID3D11VideoDecoder *pDecoder,

                  UINT NumBuffers,

                                    const D3D11_VIDEO_DECODER_BUFFER_DESC *pBufferDesc) = 0;

        virtual APP_DEPRECATED_HRESULT __stdcall DecoderExtension(

                  ID3D11VideoDecoder *pDecoder,

                  const D3D11_VIDEO_DECODER_EXTENSION *pExtensionData) = 0;

        virtual void __stdcall VideoProcessorSetOutputTargetRect(

                  ID3D11VideoProcessor *pVideoProcessor,

                  BOOL Enable,

                      const RECT *pRect) = 0;

        virtual void __stdcall VideoProcessorSetOutputBackgroundColor(

                  ID3D11VideoProcessor *pVideoProcessor,

                  BOOL YCbCr,

                  const D3D11_VIDEO_COLOR *pColor) = 0;

        virtual void __stdcall VideoProcessorSetOutputColorSpace(

                  ID3D11VideoProcessor *pVideoProcessor,

                  const D3D11_VIDEO_PROCESSOR_COLOR_SPACE *pColorSpace) = 0;

        virtual void __stdcall VideoProcessorSetOutputAlphaFillMode(

                  ID3D11VideoProcessor *pVideoProcessor,

                  D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE AlphaFillMode,

                  UINT StreamIndex) = 0;

        virtual void __stdcall VideoProcessorSetOutputConstriction(

                  ID3D11VideoProcessor *pVideoProcessor,

                  BOOL Enable,

                  SIZE Size) = 0;

        virtual void __stdcall VideoProcessorSetOutputStereoMode(

                  ID3D11VideoProcessor *pVideoProcessor,

                  BOOL Enable) = 0;

        virtual APP_DEPRECATED_HRESULT __stdcall VideoProcessorSetOutputExtension(

                  ID3D11VideoProcessor *pVideoProcessor,

                  const GUID *pExtensionGuid,

                  UINT DataSize,

                  void *pData) = 0;

        virtual void __stdcall VideoProcessorGetOutputTargetRect(

                  ID3D11VideoProcessor *pVideoProcessor,

                   BOOL *Enabled,

                   RECT *pRect) = 0;

        virtual void __stdcall VideoProcessorGetOutputBackgroundColor(

                  ID3D11VideoProcessor *pVideoProcessor,

                   BOOL *pYCbCr,

                   D3D11_VIDEO_COLOR *pColor) = 0;

        virtual void __stdcall VideoProcessorGetOutputColorSpace(

                  ID3D11VideoProcessor *pVideoProcessor,

                   D3D11_VIDEO_PROCESSOR_COLOR_SPACE *pColorSpace) = 0;

        virtual void __stdcall VideoProcessorGetOutputAlphaFillMode(

                  ID3D11VideoProcessor *pVideoProcessor,

                   D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE *pAlphaFillMode,

                   UINT *pStreamIndex) = 0;

        virtual void __stdcall VideoProcessorGetOutputConstriction(

                  ID3D11VideoProcessor *pVideoProcessor,

                   BOOL *pEnabled,

                   SIZE *pSize) = 0;

        virtual void __stdcall VideoProcessorGetOutputStereoMode(

                  ID3D11VideoProcessor *pVideoProcessor,

                   BOOL *pEnabled) = 0;

        virtual APP_DEPRECATED_HRESULT __stdcall VideoProcessorGetOutputExtension(

                  ID3D11VideoProcessor *pVideoProcessor,

                  const GUID *pExtensionGuid,

                  UINT DataSize,

                                          void *pData) = 0;

        virtual void __stdcall VideoProcessorSetStreamFrameFormat(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  D3D11_VIDEO_FRAME_FORMAT FrameFormat) = 0;

        virtual void __stdcall VideoProcessorSetStreamColorSpace(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  const D3D11_VIDEO_PROCESSOR_COLOR_SPACE *pColorSpace) = 0;

        virtual void __stdcall VideoProcessorSetStreamOutputRate(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  D3D11_VIDEO_PROCESSOR_OUTPUT_RATE OutputRate,

                  BOOL RepeatFrame,

                      const DXGI_RATIONAL *pCustomRate) = 0;

        virtual void __stdcall VideoProcessorSetStreamSourceRect(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  BOOL Enable,

                      const RECT *pRect) = 0;

        virtual void __stdcall VideoProcessorSetStreamDestRect(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  BOOL Enable,

                      const RECT *pRect) = 0;

        virtual void __stdcall VideoProcessorSetStreamAlpha(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  BOOL Enable,

                  FLOAT Alpha) = 0;

        virtual void __stdcall VideoProcessorSetStreamPalette(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  UINT Count,

                                   const UINT *pEntries) = 0;

        virtual void __stdcall VideoProcessorSetStreamPixelAspectRatio(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  BOOL Enable,

                      const DXGI_RATIONAL *pSourceAspectRatio,

                      const DXGI_RATIONAL *pDestinationAspectRatio) = 0;

        virtual void __stdcall VideoProcessorSetStreamLumaKey(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  BOOL Enable,

                  FLOAT Lower,

                  FLOAT Upper) = 0;

        virtual void __stdcall VideoProcessorSetStreamStereoFormat(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  BOOL Enable,

                  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT Format,

                  BOOL LeftViewFrame0,

                  BOOL BaseViewFrame0,

                  D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE FlipMode,

                  int MonoOffset) = 0;

        virtual void __stdcall VideoProcessorSetStreamAutoProcessingMode(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  BOOL Enable) = 0;

        virtual void __stdcall VideoProcessorSetStreamFilter(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  D3D11_VIDEO_PROCESSOR_FILTER Filter,

                  BOOL Enable,

                  int Level) = 0;

        virtual APP_DEPRECATED_HRESULT __stdcall VideoProcessorSetStreamExtension(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  const GUID *pExtensionGuid,

                  UINT DataSize,

                  void *pData) = 0;

        virtual void __stdcall VideoProcessorGetStreamFrameFormat(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                   D3D11_VIDEO_FRAME_FORMAT *pFrameFormat) = 0;

        virtual void __stdcall VideoProcessorGetStreamColorSpace(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                   D3D11_VIDEO_PROCESSOR_COLOR_SPACE *pColorSpace) = 0;

        virtual void __stdcall VideoProcessorGetStreamOutputRate(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                   D3D11_VIDEO_PROCESSOR_OUTPUT_RATE *pOutputRate,

                   BOOL *pRepeatFrame,

                   DXGI_RATIONAL *pCustomRate) = 0;

        virtual void __stdcall VideoProcessorGetStreamSourceRect(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                   BOOL *pEnabled,

                   RECT *pRect) = 0;

        virtual void __stdcall VideoProcessorGetStreamDestRect(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                   BOOL *pEnabled,

                   RECT *pRect) = 0;

        virtual void __stdcall VideoProcessorGetStreamAlpha(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                   BOOL *pEnabled,

                   FLOAT *pAlpha) = 0;

        virtual void __stdcall VideoProcessorGetStreamPalette(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  UINT Count,

                                 UINT *pEntries) = 0;

        virtual void __stdcall VideoProcessorGetStreamPixelAspectRatio(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                   BOOL *pEnabled,

                   DXGI_RATIONAL *pSourceAspectRatio,

                   DXGI_RATIONAL *pDestinationAspectRatio) = 0;

        virtual void __stdcall VideoProcessorGetStreamLumaKey(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                   BOOL *pEnabled,

                   FLOAT *pLower,

                   FLOAT *pUpper) = 0;

        virtual void __stdcall VideoProcessorGetStreamStereoFormat(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                   BOOL *pEnable,

                   D3D11_VIDEO_PROCESSOR_STEREO_FORMAT *pFormat,

                   BOOL *pLeftViewFrame0,

                   BOOL *pBaseViewFrame0,

                   D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE *pFlipMode,

                   int *MonoOffset) = 0;

        virtual void __stdcall VideoProcessorGetStreamAutoProcessingMode(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                   BOOL *pEnabled) = 0;

        virtual void __stdcall VideoProcessorGetStreamFilter(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  D3D11_VIDEO_PROCESSOR_FILTER Filter,

                   BOOL *pEnabled,

                   int *pLevel) = 0;

        virtual APP_DEPRECATED_HRESULT __stdcall VideoProcessorGetStreamExtension(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  const GUID *pExtensionGuid,

                  UINT DataSize,

                                          void *pData) = 0;

        virtual HRESULT __stdcall VideoProcessorBlt(

                  ID3D11VideoProcessor *pVideoProcessor,

                  ID3D11VideoProcessorOutputView *pView,

                  UINT OutputFrame,

                  UINT StreamCount,

                                     const D3D11_VIDEO_PROCESSOR_STREAM *pStreams) = 0;

        virtual HRESULT __stdcall NegotiateCryptoSessionKeyExchange(

                  ID3D11CryptoSession *pCryptoSession,

                  UINT DataSize,

                                             void *pData) = 0;

        virtual void __stdcall EncryptionBlt(

                  ID3D11CryptoSession *pCryptoSession,

                  ID3D11Texture2D *pSrcSurface,

                  ID3D11Texture2D *pDstSurface,

                  UINT IVSize,

                                           void *pIV) = 0;

        virtual void __stdcall DecryptionBlt(

                  ID3D11CryptoSession *pCryptoSession,

                  ID3D11Texture2D *pSrcSurface,

                  ID3D11Texture2D *pDstSurface,

                      D3D11_ENCRYPTED_BLOCK_INFO *pEncryptedBlockInfo,

                  UINT ContentKeySize,

                                                  const void *pContentKey,

                  UINT IVSize,

                                           void *pIV) = 0;

        virtual void __stdcall StartSessionKeyRefresh(

                  ID3D11CryptoSession *pCryptoSession,

                  UINT RandomNumberSize,

                                                  void *pRandomNumber) = 0;

        virtual void __stdcall FinishSessionKeyRefresh(

                  ID3D11CryptoSession *pCryptoSession) = 0;

        virtual HRESULT __stdcall GetEncryptionBltKey(

                  ID3D11CryptoSession *pCryptoSession,

                  UINT KeySize,

                                         void *pReadbackKey) = 0;

        virtual HRESULT __stdcall NegotiateAuthenticatedChannelKeyExchange(

                  ID3D11AuthenticatedChannel *pChannel,

                  UINT DataSize,

                                             void *pData) = 0;

        virtual HRESULT __stdcall QueryAuthenticatedChannel(

                  ID3D11AuthenticatedChannel *pChannel,

                  UINT InputSize,

                                         const void *pInput,

                  UINT OutputSize,

                                            void *pOutput) = 0;

        virtual HRESULT __stdcall ConfigureAuthenticatedChannel(

                  ID3D11AuthenticatedChannel *pChannel,

                  UINT InputSize,

                                         const void *pInput,

                   D3D11_AUTHENTICATED_CONFIGURE_OUTPUT *pOutput) = 0;

        virtual void __stdcall VideoProcessorSetStreamRotation(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                  BOOL Enable,

                  D3D11_VIDEO_PROCESSOR_ROTATION Rotation) = 0;

        virtual void __stdcall VideoProcessorGetStreamRotation(

                  ID3D11VideoProcessor *pVideoProcessor,

                  UINT StreamIndex,

                   BOOL *pEnable,

                   D3D11_VIDEO_PROCESSOR_ROTATION *pRotation) = 0;

    };
# 13083 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11VideoDevice;



    struct __declspec(uuid("10EC4D5B-975A-4689-B9E4-D0AAC30FE333")) __declspec(novtable)
    ID3D11VideoDevice : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateVideoDecoder(

                  const D3D11_VIDEO_DECODER_DESC *pVideoDesc,

                  const D3D11_VIDEO_DECODER_CONFIG *pConfig,

                   ID3D11VideoDecoder **ppDecoder) = 0;

        virtual HRESULT __stdcall CreateVideoProcessor(

                  ID3D11VideoProcessorEnumerator *pEnum,

                  UINT RateConversionIndex,

                   ID3D11VideoProcessor **ppVideoProcessor) = 0;

        virtual HRESULT __stdcall CreateAuthenticatedChannel(

                  D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType,

                   ID3D11AuthenticatedChannel **ppAuthenticatedChannel) = 0;

        virtual HRESULT __stdcall CreateCryptoSession(

                  const GUID *pCryptoType,

                      const GUID *pDecoderProfile,

                  const GUID *pKeyExchangeType,

                      ID3D11CryptoSession **ppCryptoSession) = 0;

        virtual HRESULT __stdcall CreateVideoDecoderOutputView(

                  ID3D11Resource *pResource,

                  const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC *pDesc,

                       ID3D11VideoDecoderOutputView **ppVDOVView) = 0;

        virtual HRESULT __stdcall CreateVideoProcessorInputView(

                  ID3D11Resource *pResource,

                  ID3D11VideoProcessorEnumerator *pEnum,

                  const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC *pDesc,

                       ID3D11VideoProcessorInputView **ppVPIView) = 0;

        virtual HRESULT __stdcall CreateVideoProcessorOutputView(

                  ID3D11Resource *pResource,

                  ID3D11VideoProcessorEnumerator *pEnum,

                  const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC *pDesc,

                       ID3D11VideoProcessorOutputView **ppVPOView) = 0;

        virtual HRESULT __stdcall CreateVideoProcessorEnumerator(

                  const D3D11_VIDEO_PROCESSOR_CONTENT_DESC *pDesc,

                   ID3D11VideoProcessorEnumerator **ppEnum) = 0;

        virtual UINT __stdcall GetVideoDecoderProfileCount( void) = 0;

        virtual HRESULT __stdcall GetVideoDecoderProfile(

                  UINT Index,

                   GUID *pDecoderProfile) = 0;

        virtual HRESULT __stdcall CheckVideoDecoderFormat(

                  const GUID *pDecoderProfile,

                  DXGI_FORMAT Format,

                   BOOL *pSupported) = 0;

        virtual HRESULT __stdcall GetVideoDecoderConfigCount(

                  const D3D11_VIDEO_DECODER_DESC *pDesc,

                   UINT *pCount) = 0;

        virtual HRESULT __stdcall GetVideoDecoderConfig(

                  const D3D11_VIDEO_DECODER_DESC *pDesc,

                  UINT Index,

                   D3D11_VIDEO_DECODER_CONFIG *pConfig) = 0;

        virtual HRESULT __stdcall GetContentProtectionCaps(

                      const GUID *pCryptoType,

                      const GUID *pDecoderProfile,

                   D3D11_VIDEO_CONTENT_PROTECTION_CAPS *pCaps) = 0;

        virtual HRESULT __stdcall CheckCryptoKeyExchange(

                  const GUID *pCryptoType,

                      const GUID *pDecoderProfile,

                  UINT Index,

                   GUID *pKeyExchangeType) = 0;

        virtual HRESULT __stdcall SetPrivateData(

                  const GUID & guid,

                  UINT DataSize,

                                            const void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateDataInterface(

                  const GUID & guid,

                      const IUnknown *pData) = 0;

    };
# 13476 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0040_v0_0_s_ifspec;
# 13486 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
extern "C" const IID IID_ID3D11Device;



    struct __declspec(uuid("db6f6ddb-ac77-4e88-8253-819df9bbf140")) __declspec(novtable)
    ID3D11Device : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateBuffer(

                  const D3D11_BUFFER_DESC *pDesc,

                      const D3D11_SUBRESOURCE_DATA *pInitialData,

                       ID3D11Buffer **ppBuffer) = 0;

        virtual HRESULT __stdcall CreateTexture1D(

                  const D3D11_TEXTURE1D_DESC *pDesc,

                                                                                  const D3D11_SUBRESOURCE_DATA *pInitialData,

                       ID3D11Texture1D **ppTexture1D) = 0;

        virtual HRESULT __stdcall CreateTexture2D(

                  const D3D11_TEXTURE2D_DESC *pDesc,

                                                                                  const D3D11_SUBRESOURCE_DATA *pInitialData,

                       ID3D11Texture2D **ppTexture2D) = 0;

        virtual HRESULT __stdcall CreateTexture3D(

                  const D3D11_TEXTURE3D_DESC *pDesc,

                                                               const D3D11_SUBRESOURCE_DATA *pInitialData,

                       ID3D11Texture3D **ppTexture3D) = 0;

        virtual HRESULT __stdcall CreateShaderResourceView(

                  ID3D11Resource *pResource,

                      const D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc,

                       ID3D11ShaderResourceView **ppSRView) = 0;

        virtual HRESULT __stdcall CreateUnorderedAccessView(

                  ID3D11Resource *pResource,

                      const D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc,

                       ID3D11UnorderedAccessView **ppUAView) = 0;

        virtual HRESULT __stdcall CreateRenderTargetView(

                  ID3D11Resource *pResource,

                      const D3D11_RENDER_TARGET_VIEW_DESC *pDesc,

                       ID3D11RenderTargetView **ppRTView) = 0;

        virtual HRESULT __stdcall CreateDepthStencilView(

                  ID3D11Resource *pResource,

                      const D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc,

                       ID3D11DepthStencilView **ppDepthStencilView) = 0;

        virtual HRESULT __stdcall CreateInputLayout(

                                     const D3D11_INPUT_ELEMENT_DESC *pInputElementDescs,

                                                                            UINT NumElements,

                                        const void *pShaderBytecodeWithInputSignature,

                  SIZE_T BytecodeLength,

                       ID3D11InputLayout **ppInputLayout) = 0;

        virtual HRESULT __stdcall CreateVertexShader(

                                        const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                      ID3D11ClassLinkage *pClassLinkage,

                       ID3D11VertexShader **ppVertexShader) = 0;

        virtual HRESULT __stdcall CreateGeometryShader(

                                        const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                      ID3D11ClassLinkage *pClassLinkage,

                       ID3D11GeometryShader **ppGeometryShader) = 0;

        virtual HRESULT __stdcall CreateGeometryShaderWithStreamOutput(

                                        const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                                        const D3D11_SO_DECLARATION_ENTRY *pSODeclaration,

                                                                                      UINT NumEntries,

                                        const UINT *pBufferStrides,

                                                         UINT NumStrides,

                  UINT RasterizedStream,

                      ID3D11ClassLinkage *pClassLinkage,

                       ID3D11GeometryShader **ppGeometryShader) = 0;

        virtual HRESULT __stdcall CreatePixelShader(

                                        const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                      ID3D11ClassLinkage *pClassLinkage,

                       ID3D11PixelShader **ppPixelShader) = 0;

        virtual HRESULT __stdcall CreateHullShader(

                                        const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                      ID3D11ClassLinkage *pClassLinkage,

                       ID3D11HullShader **ppHullShader) = 0;

        virtual HRESULT __stdcall CreateDomainShader(

                                        const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                      ID3D11ClassLinkage *pClassLinkage,

                       ID3D11DomainShader **ppDomainShader) = 0;

        virtual HRESULT __stdcall CreateComputeShader(

                                        const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                      ID3D11ClassLinkage *pClassLinkage,

                       ID3D11ComputeShader **ppComputeShader) = 0;

        virtual HRESULT __stdcall CreateClassLinkage(

                   ID3D11ClassLinkage **ppLinkage) = 0;

        virtual HRESULT __stdcall CreateBlendState(

                  const D3D11_BLEND_DESC *pBlendStateDesc,

                       ID3D11BlendState **ppBlendState) = 0;

        virtual HRESULT __stdcall CreateDepthStencilState(

                  const D3D11_DEPTH_STENCIL_DESC *pDepthStencilDesc,

                       ID3D11DepthStencilState **ppDepthStencilState) = 0;

        virtual HRESULT __stdcall CreateRasterizerState(

                  const D3D11_RASTERIZER_DESC *pRasterizerDesc,

                       ID3D11RasterizerState **ppRasterizerState) = 0;

        virtual HRESULT __stdcall CreateSamplerState(

                  const D3D11_SAMPLER_DESC *pSamplerDesc,

                       ID3D11SamplerState **ppSamplerState) = 0;

        virtual HRESULT __stdcall CreateQuery(

                  const D3D11_QUERY_DESC *pQueryDesc,

                       ID3D11Query **ppQuery) = 0;

        virtual HRESULT __stdcall CreatePredicate(

                  const D3D11_QUERY_DESC *pPredicateDesc,

                       ID3D11Predicate **ppPredicate) = 0;

        virtual HRESULT __stdcall CreateCounter(

                  const D3D11_COUNTER_DESC *pCounterDesc,

                       ID3D11Counter **ppCounter) = 0;

        virtual HRESULT __stdcall CreateDeferredContext(
            UINT ContextFlags,

                       ID3D11DeviceContext **ppDeferredContext) = 0;

        virtual HRESULT __stdcall OpenSharedResource(

                  HANDLE hResource,

                  const IID & ReturnedInterface,

                       void **ppResource) = 0;

        virtual HRESULT __stdcall CheckFormatSupport(

                  DXGI_FORMAT Format,

                   UINT *pFormatSupport) = 0;

        virtual HRESULT __stdcall CheckMultisampleQualityLevels(

                  DXGI_FORMAT Format,

                  UINT SampleCount,

                   UINT *pNumQualityLevels) = 0;

        virtual void __stdcall CheckCounterInfo(

                   D3D11_COUNTER_INFO *pCounterInfo) = 0;

        virtual HRESULT __stdcall CheckCounter(

                  const D3D11_COUNTER_DESC *pDesc,

                   D3D11_COUNTER_TYPE *pType,

                   UINT *pActiveCounters,

                                            LPSTR szName,

                         UINT *pNameLength,

                                             LPSTR szUnits,

                         UINT *pUnitsLength,

                                                   LPSTR szDescription,

                         UINT *pDescriptionLength) = 0;

        virtual HRESULT __stdcall CheckFeatureSupport(
            D3D11_FEATURE Feature,

                                                        void *pFeatureSupportData,
            UINT FeatureSupportDataSize) = 0;

        virtual HRESULT __stdcall GetPrivateData(

                  const GUID & guid,

                     UINT *pDataSize,

                                                void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateData(

                  const GUID & guid,

                  UINT DataSize,

                                            const void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateDataInterface(

                  const GUID & guid,

                      const IUnknown *pData) = 0;

        virtual D3D_FEATURE_LEVEL __stdcall GetFeatureLevel( void) = 0;

        virtual UINT __stdcall GetCreationFlags( void) = 0;

        virtual HRESULT __stdcall GetDeviceRemovedReason( void) = 0;

        virtual void __stdcall GetImmediateContext(

                   ID3D11DeviceContext **ppImmediateContext) = 0;

        virtual HRESULT __stdcall SetExceptionMode(
            UINT RaiseFlags) = 0;

        virtual UINT __stdcall GetExceptionMode( void) = 0;

    };
# 14304 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef
enum D3D11_CREATE_DEVICE_FLAG
    {
        D3D11_CREATE_DEVICE_SINGLETHREADED = 0x1,
        D3D11_CREATE_DEVICE_DEBUG = 0x2,
        D3D11_CREATE_DEVICE_SWITCH_TO_REF = 0x4,
        D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x8,
        D3D11_CREATE_DEVICE_BGRA_SUPPORT = 0x20,
        D3D11_CREATE_DEVICE_DEBUGGABLE = 0x40,
        D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 0x80,
        D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT = 0x100,
        D3D11_CREATE_DEVICE_VIDEO_SUPPORT = 0x800
    } D3D11_CREATE_DEVICE_FLAG;





# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
#pragma warning(disable: 4049)
# 50 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
typedef struct ID3D11Debug ID3D11Debug;






typedef struct ID3D11SwitchToRef ID3D11SwitchToRef;






typedef struct ID3D11TracingDevice ID3D11TracingDevice;






typedef struct ID3D11RefTrackingOptions ID3D11RefTrackingOptions;






typedef struct ID3D11RefDefaultTrackingOptions ID3D11RefDefaultTrackingOptions;






typedef struct ID3D11InfoQueue ID3D11InfoQueue;
# 96 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
extern "C"{
# 123 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
typedef
enum D3D11_RLDO_FLAGS
    {
        D3D11_RLDO_SUMMARY = 0x1,
        D3D11_RLDO_DETAIL = 0x2
    } D3D11_RLDO_FLAGS;


}
inline D3D11_RLDO_FLAGS operator~( D3D11_RLDO_FLAGS a )
{ return D3D11_RLDO_FLAGS( ~UINT( a ) ); }
inline D3D11_RLDO_FLAGS operator&( D3D11_RLDO_FLAGS a, D3D11_RLDO_FLAGS b )
{ return D3D11_RLDO_FLAGS( UINT( a ) & UINT( b ) ); }
inline D3D11_RLDO_FLAGS operator|( D3D11_RLDO_FLAGS a, D3D11_RLDO_FLAGS b )
{ return D3D11_RLDO_FLAGS( UINT( a ) | UINT( b ) ); }
inline D3D11_RLDO_FLAGS operator^( D3D11_RLDO_FLAGS a, D3D11_RLDO_FLAGS b )
{ return D3D11_RLDO_FLAGS( UINT( a ) ^ UINT( b ) ); }
inline D3D11_RLDO_FLAGS& operator&=( D3D11_RLDO_FLAGS& a, D3D11_RLDO_FLAGS b )
{ a = a & b; return a; }
inline D3D11_RLDO_FLAGS& operator|=( D3D11_RLDO_FLAGS& a, D3D11_RLDO_FLAGS b )
{ a = a | b; return a; }
inline D3D11_RLDO_FLAGS& operator^=( D3D11_RLDO_FLAGS& a, D3D11_RLDO_FLAGS b )
{ a = a ^ b; return a; }
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0000_v0_0_s_ifspec;
# 160 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
extern "C" const IID IID_ID3D11Debug;



    struct __declspec(uuid("79cf2233-7536-4948-9d36-1e4692dc5760")) __declspec(novtable)
    ID3D11Debug : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetFeatureMask(
            UINT Mask) = 0;

        virtual UINT __stdcall GetFeatureMask( void) = 0;

        virtual HRESULT __stdcall SetPresentPerRenderOpDelay(
            UINT Milliseconds) = 0;

        virtual UINT __stdcall GetPresentPerRenderOpDelay( void) = 0;

        virtual HRESULT __stdcall SetSwapChain(

                      IDXGISwapChain *pSwapChain) = 0;

        virtual HRESULT __stdcall GetSwapChain(

                   IDXGISwapChain **ppSwapChain) = 0;

        virtual HRESULT __stdcall ValidateContext(

                  ID3D11DeviceContext *pContext) = 0;

        virtual HRESULT __stdcall ReportLiveDeviceObjects(
            D3D11_RLDO_FLAGS Flags) = 0;

        virtual HRESULT __stdcall ValidateContextForDispatch(

                  ID3D11DeviceContext *pContext) = 0;

    };
# 327 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0001_v0_0_s_ifspec;
# 337 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
extern "C" const IID IID_ID3D11SwitchToRef;



    struct __declspec(uuid("1ef337e3-58e7-4f83-a692-db221f5ed47e")) __declspec(novtable)
    ID3D11SwitchToRef : public IUnknown
    {
    public:
        virtual BOOL __stdcall SetUseRef(
            BOOL UseRef) = 0;

        virtual BOOL __stdcall GetUseRef( void) = 0;

    };
# 426 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
typedef
enum D3D11_SHADER_TRACKING_RESOURCE_TYPE
    {
        D3D11_SHADER_TRACKING_RESOURCE_TYPE_NONE = 0,
        D3D11_SHADER_TRACKING_RESOURCE_TYPE_UAV_DEVICEMEMORY = 1,
        D3D11_SHADER_TRACKING_RESOURCE_TYPE_NON_UAV_DEVICEMEMORY = 2,
        D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_DEVICEMEMORY = 3,
        D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_MEMORY = 4,
        D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_SHARED_MEMORY = 5,
        D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_NON_UAV = 6,
        D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL = 7
    } D3D11_SHADER_TRACKING_RESOURCE_TYPE;

typedef
enum D3D11_SHADER_TRACKING_OPTION
    {
        D3D11_SHADER_TRACKING_OPTION_IGNORE = 0,
        D3D11_SHADER_TRACKING_OPTION_TRACK_UNINITIALIZED = 0x1,
        D3D11_SHADER_TRACKING_OPTION_TRACK_RAW = 0x2,
        D3D11_SHADER_TRACKING_OPTION_TRACK_WAR = 0x4,
        D3D11_SHADER_TRACKING_OPTION_TRACK_WAW = 0x8,
        D3D11_SHADER_TRACKING_OPTION_ALLOW_SAME = 0x10,
        D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY = 0x20,
        D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS = 0x40,
        D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS = 0x80,
        D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS = 0x100,
        D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS = 0x200,
        D3D11_SHADER_TRACKING_OPTION_UAV_SPECIFIC_FLAGS = ( ( ( D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS | D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS ) | D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS ) | D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS ) ,
        D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS = ( ( ( ( ( ( ( D3D11_SHADER_TRACKING_OPTION_TRACK_RAW | D3D11_SHADER_TRACKING_OPTION_TRACK_WAR ) | D3D11_SHADER_TRACKING_OPTION_TRACK_WAW ) | D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY ) | D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS ) | D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS ) | D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS ) | D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS ) ,
        D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS_ALLOWING_SAME = ( D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS | D3D11_SHADER_TRACKING_OPTION_ALLOW_SAME ) ,
        D3D11_SHADER_TRACKING_OPTION_ALL_OPTIONS = ( D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS_ALLOWING_SAME | D3D11_SHADER_TRACKING_OPTION_TRACK_UNINITIALIZED )
    } D3D11_SHADER_TRACKING_OPTIONS;



extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0002_v0_0_s_ifspec;
# 471 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
extern "C" const IID IID_ID3D11TracingDevice;



    struct __declspec(uuid("1911c771-1587-413e-a7e0-fb26c3de0268")) __declspec(novtable)
    ID3D11TracingDevice : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetShaderTrackingOptionsByType(

                  UINT ResourceTypeFlags,

                  UINT Options) = 0;

        virtual HRESULT __stdcall SetShaderTrackingOptions(

                  IUnknown *pShader,

                  UINT Options) = 0;

    };
# 573 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
extern "C" const IID IID_ID3D11RefTrackingOptions;



    struct __declspec(uuid("193dacdf-0db2-4c05-a55c-ef06cac56fd9")) __declspec(novtable)
    ID3D11RefTrackingOptions : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetTrackingOptions(
            UINT uOptions) = 0;

    };
# 653 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
extern "C" const IID IID_ID3D11RefDefaultTrackingOptions;



    struct __declspec(uuid("03916615-c644-418c-9bf4-75db5be63ca0")) __declspec(novtable)
    ID3D11RefDefaultTrackingOptions : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetTrackingOptions(
            UINT ResourceTypeFlags,
            UINT Options) = 0;

    };
# 737 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
extern "C" const GUID DXGI_DEBUG_D3D11;
# 755 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
typedef
enum D3D11_MESSAGE_CATEGORY
    {
        D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0,
        D3D11_MESSAGE_CATEGORY_MISCELLANEOUS = ( D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED + 1 ) ,
        D3D11_MESSAGE_CATEGORY_INITIALIZATION = ( D3D11_MESSAGE_CATEGORY_MISCELLANEOUS + 1 ) ,
        D3D11_MESSAGE_CATEGORY_CLEANUP = ( D3D11_MESSAGE_CATEGORY_INITIALIZATION + 1 ) ,
        D3D11_MESSAGE_CATEGORY_COMPILATION = ( D3D11_MESSAGE_CATEGORY_CLEANUP + 1 ) ,
        D3D11_MESSAGE_CATEGORY_STATE_CREATION = ( D3D11_MESSAGE_CATEGORY_COMPILATION + 1 ) ,
        D3D11_MESSAGE_CATEGORY_STATE_SETTING = ( D3D11_MESSAGE_CATEGORY_STATE_CREATION + 1 ) ,
        D3D11_MESSAGE_CATEGORY_STATE_GETTING = ( D3D11_MESSAGE_CATEGORY_STATE_SETTING + 1 ) ,
        D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = ( D3D11_MESSAGE_CATEGORY_STATE_GETTING + 1 ) ,
        D3D11_MESSAGE_CATEGORY_EXECUTION = ( D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION + 1 ) ,
        D3D11_MESSAGE_CATEGORY_SHADER = ( D3D11_MESSAGE_CATEGORY_EXECUTION + 1 )
    } D3D11_MESSAGE_CATEGORY;

typedef
enum D3D11_MESSAGE_SEVERITY
    {
        D3D11_MESSAGE_SEVERITY_CORRUPTION = 0,
        D3D11_MESSAGE_SEVERITY_ERROR = ( D3D11_MESSAGE_SEVERITY_CORRUPTION + 1 ) ,
        D3D11_MESSAGE_SEVERITY_WARNING = ( D3D11_MESSAGE_SEVERITY_ERROR + 1 ) ,
        D3D11_MESSAGE_SEVERITY_INFO = ( D3D11_MESSAGE_SEVERITY_WARNING + 1 ) ,
        D3D11_MESSAGE_SEVERITY_MESSAGE = ( D3D11_MESSAGE_SEVERITY_INFO + 1 )
    } D3D11_MESSAGE_SEVERITY;

typedef
enum D3D11_MESSAGE_ID
    {
        D3D11_MESSAGE_ID_UNKNOWN = 0,
        D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = ( D3D11_MESSAGE_ID_UNKNOWN + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_STRING_FROM_APPLICATION = ( D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_THIS = ( D3D11_MESSAGE_ID_STRING_FROM_APPLICATION + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 = ( D3D11_MESSAGE_ID_CORRUPTED_THIS + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 + 1 ) ,
        D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 + 1 ) ,
        D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING + 1 ) ,
        D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY + 1 ) ,
        D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = ( D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = ( D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA + 1 ) ,
        D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = ( D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA + 1 ) ,
        D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = ( D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN + 1 ) ,
        D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = ( D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = ( D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC = ( D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC + 1 ) ,
        D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION + 1 ) ,
        D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC + 1 ) ,
        D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS + 1 ) ,
        D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS + 1 ) ,
        D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC + 1 ) ,
        D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS + 1 ) ,
        D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS + 1 ) ,
        D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX + 1 ) ,
        D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE + 1 ) ,
        D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE + 1 ) ,
        D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE + 1 ) ,
        D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE + 1 ) ,
        D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP + 1 ) ,
        D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS + 1 ) ,
        D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED + 1 ) ,
        D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = ( D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE + 1 ) ,
        D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = ( D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED + 1 ) ,
        D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = ( D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED + 1 ) ,
        D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = ( D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = ( D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT + 1 ) ,
        D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = ( D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR + 1 ) ,
        D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = ( D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH + 1 ) ,
        D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = ( D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = ( D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID + 1 ) ,
        D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX + 1 ) ,
        D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE + 1 ) ,
        D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE + 1 ) ,
        D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE + 1 ) ,
        D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = ( D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE + 1 ) ,
        D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = ( D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
        D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = ( D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE + 1 ) ,
        D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID + 1 ) ,
        D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID + 1 ) ,
        D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = ( D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE + 1 ) ,
        D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = ( D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = ( D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED + 1 ) ,
        D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = ( D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = ( D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = ( D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = ( D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = ( D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = ( D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = ( D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = ( D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED + 1 ) ,
        D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = ( D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED + 1 ) ,
        D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = ( D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED + 1 ) ,
        D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = ( D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = ( D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_REF_THREADING_MODE = ( D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE + 1 ) ,
        D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = ( D3D11_MESSAGE_ID_REF_THREADING_MODE + 1 ) ,
        D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = ( D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION + 1 ) ,
        D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION = ( D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION + 1 ) ,
        D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = ( D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION + 1 ) ,
        D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = ( D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE + 1 ) ,
        D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY = ( D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER + 1 ) ,
        D3D11_MESSAGE_ID_REF_INFO = ( D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = ( D3D11_MESSAGE_ID_REF_INFO + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = ( D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = ( D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = ( D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = ( D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = ( D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = ( D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = ( D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = ( D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
        D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = ( D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = ( D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = ( D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = ( D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
        D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = ( D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED + 1 ) ,
        D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
        D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = ( D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC = ( D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = ( D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC + 1 ) ,
        D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = ( D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
        D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = ( D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
        D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = ( D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE + 1 ) ,
        D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = ( D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = ( D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION + 1 ) ,
        D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = ( D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE + 1 ) ,
        D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = ( D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
        D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = ( D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION + 1 ) ,
        D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = ( D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
        D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = ( D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN + 1 ) ,
        D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = ( D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE + 1 ) ,
        D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = ( D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = ( D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_BUFFER = ( D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_TEXTURE1D = ( D3D11_MESSAGE_ID_LIVE_BUFFER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_TEXTURE2D = ( D3D11_MESSAGE_ID_LIVE_TEXTURE1D + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_TEXTURE3D = ( D3D11_MESSAGE_ID_LIVE_TEXTURE2D + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = ( D3D11_MESSAGE_ID_LIVE_TEXTURE3D + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW = ( D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = ( D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_VERTEXSHADER = ( D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER = ( D3D11_MESSAGE_ID_LIVE_VERTEXSHADER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_PIXELSHADER = ( D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT = ( D3D11_MESSAGE_ID_LIVE_PIXELSHADER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_SAMPLER = ( D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_BLENDSTATE = ( D3D11_MESSAGE_ID_LIVE_SAMPLER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = ( D3D11_MESSAGE_ID_LIVE_BLENDSTATE + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE = ( D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_QUERY = ( D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_PREDICATE = ( D3D11_MESSAGE_ID_LIVE_QUERY + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_COUNTER = ( D3D11_MESSAGE_ID_LIVE_PREDICATE + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_DEVICE = ( D3D11_MESSAGE_ID_LIVE_COUNTER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_SWAPCHAIN = ( D3D11_MESSAGE_ID_LIVE_DEVICE + 1 ) ,
        D3D11_MESSAGE_ID_D3D10_MESSAGES_END = ( D3D11_MESSAGE_ID_LIVE_SWAPCHAIN + 1 ) ,
        D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = ( D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START + 1 ) ,
        D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY + 1 ) ,
        D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE + 1 ) ,
        D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = ( D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = ( D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = ( D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = ( D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE + 1 ) ,
        D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = ( D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS + 1 ) ,
        D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = ( D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = ( D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS + 1 ) ,
        D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = ( D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY + 1 ) ,
        D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = ( D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = ( D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE + 1 ) ,
        D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE + 1 ) ,
        D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = ( D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL + 1 ) ,
        D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX + 1 ) ,
        D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = ( D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = ( D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = ( D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = ( D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES + 1 ) ,
        D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED + 1 ) ,
        D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = ( D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE + 1 ) ,
        D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = ( D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = ( D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 + 1 ) ,
        D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = ( D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = ( D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = ( D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = ( D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = ( D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR + 1 ) ,
        D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = ( D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA + 1 ) ,
        D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP + 1 ) ,
        D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT + 1 ) ,
        D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END = ( D3D11_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES + 1 ) ,
        D3D11_MESSAGE_ID_D3D11_MESSAGES_START = 0x200000,
        D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = ( D3D11_MESSAGE_ID_D3D11_MESSAGES_START + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS = ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED = ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN = ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT = ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT + 1 ) ,
        D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN = ( D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = ( D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES + 1 ) ,
        D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL = ( D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL + 1 ) ,
        D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = ( D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE + 1 ) ,
        D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL = ( D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE + 1 ) ,
        D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT = ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER = ( D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED = ( D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED + 1 ) ,
        D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE = ( D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW + 1 ) ,
        D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE + 1 ) ,
        D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS = ( D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED = ( D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN = ( D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED + 1 ) ,
        D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD = ( D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD + 1 ) ,
        D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = ( D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS = ( D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_CONTEXT = ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_CONTEXT = ( D3D11_MESSAGE_ID_CREATE_CONTEXT + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_CONTEXT = ( D3D11_MESSAGE_ID_LIVE_CONTEXT + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_BUFFER = ( D3D11_MESSAGE_ID_DESTROY_CONTEXT + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_BUFFER_WIN7 = ( D3D11_MESSAGE_ID_CREATE_BUFFER + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_BUFFER = ( D3D11_MESSAGE_ID_LIVE_BUFFER_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_TEXTURE1D = ( D3D11_MESSAGE_ID_DESTROY_BUFFER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_TEXTURE1D_WIN7 = ( D3D11_MESSAGE_ID_CREATE_TEXTURE1D + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_TEXTURE1D = ( D3D11_MESSAGE_ID_LIVE_TEXTURE1D_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_TEXTURE2D = ( D3D11_MESSAGE_ID_DESTROY_TEXTURE1D + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_TEXTURE2D_WIN7 = ( D3D11_MESSAGE_ID_CREATE_TEXTURE2D + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_TEXTURE2D = ( D3D11_MESSAGE_ID_LIVE_TEXTURE2D_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_TEXTURE3D = ( D3D11_MESSAGE_ID_DESTROY_TEXTURE2D + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_TEXTURE3D_WIN7 = ( D3D11_MESSAGE_ID_CREATE_TEXTURE3D + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_TEXTURE3D = ( D3D11_MESSAGE_ID_LIVE_TEXTURE3D_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW = ( D3D11_MESSAGE_ID_DESTROY_TEXTURE3D + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW_WIN7 = ( D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW = ( D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW = ( D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW_WIN7 = ( D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW = ( D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW = ( D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW_WIN7 = ( D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW = ( D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_VERTEXSHADER = ( D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_VERTEXSHADER_WIN7 = ( D3D11_MESSAGE_ID_CREATE_VERTEXSHADER + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER = ( D3D11_MESSAGE_ID_LIVE_VERTEXSHADER_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_HULLSHADER = ( D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_HULLSHADER = ( D3D11_MESSAGE_ID_CREATE_HULLSHADER + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_HULLSHADER = ( D3D11_MESSAGE_ID_LIVE_HULLSHADER + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_DOMAINSHADER = ( D3D11_MESSAGE_ID_DESTROY_HULLSHADER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_DOMAINSHADER = ( D3D11_MESSAGE_ID_CREATE_DOMAINSHADER + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER = ( D3D11_MESSAGE_ID_LIVE_DOMAINSHADER + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER = ( D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER_WIN7 = ( D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER = ( D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_PIXELSHADER = ( D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_PIXELSHADER_WIN7 = ( D3D11_MESSAGE_ID_CREATE_PIXELSHADER + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_PIXELSHADER = ( D3D11_MESSAGE_ID_LIVE_PIXELSHADER_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT = ( D3D11_MESSAGE_ID_DESTROY_PIXELSHADER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT_WIN7 = ( D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT = ( D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_SAMPLER = ( D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_SAMPLER_WIN7 = ( D3D11_MESSAGE_ID_CREATE_SAMPLER + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_SAMPLER = ( D3D11_MESSAGE_ID_LIVE_SAMPLER_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_BLENDSTATE = ( D3D11_MESSAGE_ID_DESTROY_SAMPLER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_BLENDSTATE_WIN7 = ( D3D11_MESSAGE_ID_CREATE_BLENDSTATE + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_BLENDSTATE = ( D3D11_MESSAGE_ID_LIVE_BLENDSTATE_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE = ( D3D11_MESSAGE_ID_DESTROY_BLENDSTATE + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE_WIN7 = ( D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE = ( D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE = ( D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE_WIN7 = ( D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE = ( D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_QUERY = ( D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_QUERY_WIN7 = ( D3D11_MESSAGE_ID_CREATE_QUERY + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_QUERY = ( D3D11_MESSAGE_ID_LIVE_QUERY_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_PREDICATE = ( D3D11_MESSAGE_ID_DESTROY_QUERY + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_PREDICATE_WIN7 = ( D3D11_MESSAGE_ID_CREATE_PREDICATE + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_PREDICATE = ( D3D11_MESSAGE_ID_LIVE_PREDICATE_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_COUNTER = ( D3D11_MESSAGE_ID_DESTROY_PREDICATE + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_COUNTER = ( D3D11_MESSAGE_ID_CREATE_COUNTER + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_COMMANDLIST = ( D3D11_MESSAGE_ID_DESTROY_COUNTER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_COMMANDLIST = ( D3D11_MESSAGE_ID_CREATE_COMMANDLIST + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_COMMANDLIST = ( D3D11_MESSAGE_ID_LIVE_COMMANDLIST + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE = ( D3D11_MESSAGE_ID_DESTROY_COMMANDLIST + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE = ( D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE = ( D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE = ( D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE = ( D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_DEVICE_WIN7 = ( D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY_WIN7 = ( D3D11_MESSAGE_ID_LIVE_DEVICE_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_COMPUTESHADER = ( D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY_WIN7 + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_COMPUTESHADER = ( D3D11_MESSAGE_ID_CREATE_COMPUTESHADER + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER = ( D3D11_MESSAGE_ID_LIVE_COMPUTESHADER + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW = ( D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW = ( D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW = ( D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL = ( D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE = ( D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = ( D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL = ( D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL + 1 ) ,
        D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY + 1 ) ,
        D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE = ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE + 1 ) ,
        D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE + 1 ) ,
        D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE = ( D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS = ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP = ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS + 1 ) ,
        D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP + 1 ) ,
        D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS + 1 ) ,
        D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH = ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = ( D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY + 1 ) ,
        D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER = ( D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED = ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT = ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE = ( D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD = ( D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT = ( D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE = ( D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT + 1 ) ,
        D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY = ( D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY = ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY + 1 ) ,
        D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED = ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH = ( D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO = ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET = ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET = ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET + 1 ) ,
        D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE = ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET + 1 ) ,
        D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE = ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE + 1 ) ,
        D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW = ( D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET = ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS = ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET + 1 ) ,
        D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT = ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED = ( D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_REF_WARNING = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV = ( D3D11_MESSAGE_ID_REF_WARNING + 1 ) ,
        D3D11_MESSAGE_ID_SHADER_ABORT = ( D3D11_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV + 1 ) ,
        D3D11_MESSAGE_ID_SHADER_MESSAGE = ( D3D11_MESSAGE_ID_SHADER_ABORT + 1 ) ,
        D3D11_MESSAGE_ID_SHADER_ERROR = ( D3D11_MESSAGE_ID_SHADER_MESSAGE + 1 ) ,
        D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE = ( D3D11_MESSAGE_ID_SHADER_ERROR + 1 ) ,
        D3D11_MESSAGE_ID_HSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_DSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_HSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_CSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_DSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_HSSETSHADER_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_CSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_DSSETSHADER_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_HSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_CSSETSHADER_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_DSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
        D3D11_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN = ( D3D11_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE = ( D3D11_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_D3D11_MESSAGES_END = ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE + 1 ) ,
        D3D11_MESSAGE_ID_D3D11_1_MESSAGES_START = 0x300000,
        D3D11_MESSAGE_ID_CREATE_VIDEODECODER = ( D3D11_MESSAGE_ID_D3D11_1_MESSAGES_START + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSORENUM = ( D3D11_MESSAGE_ID_CREATE_VIDEODECODER + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSOR = ( D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSORENUM + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_DECODEROUTPUTVIEW = ( D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSOR + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_PROCESSORINPUTVIEW = ( D3D11_MESSAGE_ID_CREATE_DECODEROUTPUTVIEW + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_PROCESSOROUTPUTVIEW = ( D3D11_MESSAGE_ID_CREATE_PROCESSORINPUTVIEW + 1 ) ,
        D3D11_MESSAGE_ID_CREATE_DEVICECONTEXTSTATE = ( D3D11_MESSAGE_ID_CREATE_PROCESSOROUTPUTVIEW + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_VIDEODECODER = ( D3D11_MESSAGE_ID_CREATE_DEVICECONTEXTSTATE + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSORENUM = ( D3D11_MESSAGE_ID_LIVE_VIDEODECODER + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSOR = ( D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSORENUM + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_DECODEROUTPUTVIEW = ( D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSOR + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_PROCESSORINPUTVIEW = ( D3D11_MESSAGE_ID_LIVE_DECODEROUTPUTVIEW + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_PROCESSOROUTPUTVIEW = ( D3D11_MESSAGE_ID_LIVE_PROCESSORINPUTVIEW + 1 ) ,
        D3D11_MESSAGE_ID_LIVE_DEVICECONTEXTSTATE = ( D3D11_MESSAGE_ID_LIVE_PROCESSOROUTPUTVIEW + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_VIDEODECODER = ( D3D11_MESSAGE_ID_LIVE_DEVICECONTEXTSTATE + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSORENUM = ( D3D11_MESSAGE_ID_DESTROY_VIDEODECODER + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSOR = ( D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSORENUM + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_DECODEROUTPUTVIEW = ( D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSOR + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_PROCESSORINPUTVIEW = ( D3D11_MESSAGE_ID_DESTROY_DECODEROUTPUTVIEW + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_PROCESSOROUTPUTVIEW = ( D3D11_MESSAGE_ID_DESTROY_PROCESSORINPUTVIEW + 1 ) ,
        D3D11_MESSAGE_ID_DESTROY_DEVICECONTEXTSTATE = ( D3D11_MESSAGE_ID_DESTROY_PROCESSOROUTPUTVIEW + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFLAGS = ( D3D11_MESSAGE_ID_DESTROY_DEVICECONTEXTSTATE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL = ( D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDREFIID = ( D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DISCARDVIEW_INVALIDVIEW = ( D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDREFIID + 1 ) ,
        D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS = ( D3D11_MESSAGE_ID_DEVICE_DISCARDVIEW_INVALIDVIEW + 1 ) ,
        D3D11_MESSAGE_ID_UPDATESUBRESOURCE1_INVALIDCOPYFLAGS = ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE1_INVALIDCOPYFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODER_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODER_NULLPARAM = ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODER_INVALIDFORMAT = ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODER_ZEROWIDTHHEIGHT = ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_INVALIDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE = ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_ZEROWIDTHHEIGHT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE = ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_NULLPARAM = ( D3D11_MESSAGE_ID_GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_INVALIDINDEX = ( D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_INVALIDINDEX + 1 ) ,
        D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_NULLPARAM = ( D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_NULLPARAM = ( D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_NULLPARAM = ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_INVALIDINDEX = ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_INVALIDINDEX + 1 ) ,
        D3D11_MESSAGE_ID_GETDECODERCREATIONPARAMS_NULLPARAM = ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_GETDECODERDRIVERHANDLE_NULLPARAM = ( D3D11_MESSAGE_ID_GETDECODERCREATIONPARAMS_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETDECODERBUFFER_NULLPARAM = ( D3D11_MESSAGE_ID_GETDECODERDRIVERHANDLE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDBUFFER = ( D3D11_MESSAGE_ID_GETDECODERBUFFER_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDTYPE = ( D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDBUFFER + 1 ) ,
        D3D11_MESSAGE_ID_GETDECODERBUFFER_LOCKED = ( D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDTYPE + 1 ) ,
        D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NULLPARAM = ( D3D11_MESSAGE_ID_GETDECODERBUFFER_LOCKED + 1 ) ,
        D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_INVALIDTYPE = ( D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NOTLOCKED = ( D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_INVALIDTYPE + 1 ) ,
        D3D11_MESSAGE_ID_DECODERBEGINFRAME_NULLPARAM = ( D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NOTLOCKED + 1 ) ,
        D3D11_MESSAGE_ID_DECODERBEGINFRAME_HAZARD = ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_DECODERENDFRAME_NULLPARAM = ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_NULLPARAM = ( D3D11_MESSAGE_ID_DECODERENDFRAME_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_INVALIDTYPE = ( D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_DECODEREXTENSION_NULLPARAM = ( D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_INVALIDTYPE + 1 ) ,
        D3D11_MESSAGE_ID_DECODEREXTENSION_INVALIDRESOURCE = ( D3D11_MESSAGE_ID_DECODEREXTENSION_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_DECODEREXTENSION_INVALIDRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEOPROCESSORCONTENTDESC_NULLPARAM = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT + 1 ) ,
        D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMAT_NULLPARAM = ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORCONTENTDESC_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEOPROCESSORCAPS_NULLPARAM = ( D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMAT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM = ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORCAPS_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX = ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM = ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX = ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_NULLPARAM = ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX + 1 ) ,
        D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED = ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_NULLPARAM = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_TARGETRECT = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDOUTPUT = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_TARGETRECT + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDPASTFRAMES = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDOUTPUT + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDPASTFRAMES + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSOURCERECT = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDDESTRECT = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSOURCERECT + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDDESTRECT + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAYSIZE = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAY = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAYSIZE + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTEXPECTED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAY + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTNOTEXPECTED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTEXPECTED + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_STEREONOTENABLED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTNOTEXPECTED + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_STEREONOTENABLED + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NOSTEREOSTREAMS = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INPUTHAZARD = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NOSTEREOSTREAMS + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_OUTPUTHAZARD = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INPUTHAZARD + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_OUTPUTHAZARD + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM = ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE = ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND = ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT = ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP = ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP = ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE = ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY = ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION = ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT + 1 ) ,
        D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS + 1 ) ,
        D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER + 1 ) ,
        D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER + 1 ) ,
        D3D11_MESSAGE_ID_REF_WARNING_ATOMIC_INCONSISTENT = ( D3D11_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE + 1 ) ,
        D3D11_MESSAGE_ID_REF_WARNING_READING_UNINITIALIZED_RESOURCE = ( D3D11_MESSAGE_ID_REF_WARNING_ATOMIC_INCONSISTENT + 1 ) ,
        D3D11_MESSAGE_ID_REF_WARNING_RAW_HAZARD = ( D3D11_MESSAGE_ID_REF_WARNING_READING_UNINITIALIZED_RESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_REF_WARNING_WAR_HAZARD = ( D3D11_MESSAGE_ID_REF_WARNING_RAW_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_REF_WARNING_WAW_HAZARD = ( D3D11_MESSAGE_ID_REF_WARNING_WAR_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_CREATECRYPTOSESSION_NULLPARAM = ( D3D11_MESSAGE_ID_REF_WARNING_WAW_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_CREATECRYPTOSESSION_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATECRYPTOSESSION_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETCRYPTOTYPE_NULLPARAM = ( D3D11_MESSAGE_ID_CREATECRYPTOSESSION_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_GETDECODERPROFILE_NULLPARAM = ( D3D11_MESSAGE_ID_GETCRYPTOTYPE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM = ( D3D11_MESSAGE_ID_GETDECODERPROFILE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_NULLPARAM = ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE = ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_WRONGSIZE = ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE + 1 ) ,
        D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM = ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_WRONGSIZE + 1 ) ,
        D3D11_MESSAGE_ID_ENCRYPTIONBLT_UNSUPPORTED = ( D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_ENCRYPTIONBLT_NULLPARAM = ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_WRONGDEVICE = ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_WRONGDEVICE = ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_WRONGDEVICE + 1 ) ,
        D3D11_MESSAGE_ID_ENCRYPTIONBLT_FORMAT_MISMATCH = ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_WRONGDEVICE + 1 ) ,
        D3D11_MESSAGE_ID_ENCRYPTIONBLT_SIZE_MISMATCH = ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_FORMAT_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MULTISAMPLED = ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SIZE_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_NOT_STAGING = ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MULTISAMPLED + 1 ) ,
        D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MAPPED = ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_NOT_STAGING + 1 ) ,
        D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_MAPPED = ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MAPPED + 1 ) ,
        D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_OFFERED = ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_MAPPED + 1 ) ,
        D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_OFFERED = ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_OFFERED + 1 ) ,
        D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED = ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_OFFERED + 1 ) ,
        D3D11_MESSAGE_ID_DECRYPTIONBLT_UNSUPPORTED = ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED + 1 ) ,
        D3D11_MESSAGE_ID_DECRYPTIONBLT_NULLPARAM = ( D3D11_MESSAGE_ID_DECRYPTIONBLT_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_WRONGDEVICE = ( D3D11_MESSAGE_ID_DECRYPTIONBLT_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_WRONGDEVICE = ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_WRONGDEVICE + 1 ) ,
        D3D11_MESSAGE_ID_DECRYPTIONBLT_FORMAT_MISMATCH = ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_WRONGDEVICE + 1 ) ,
        D3D11_MESSAGE_ID_DECRYPTIONBLT_SIZE_MISMATCH = ( D3D11_MESSAGE_ID_DECRYPTIONBLT_FORMAT_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MULTISAMPLED = ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SIZE_MISMATCH + 1 ) ,
        D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_NOT_STAGING = ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MULTISAMPLED + 1 ) ,
        D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_NOT_RENDER_TARGET = ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_NOT_STAGING + 1 ) ,
        D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_MAPPED = ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_NOT_RENDER_TARGET + 1 ) ,
        D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MAPPED = ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_MAPPED + 1 ) ,
        D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_OFFERED = ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MAPPED + 1 ) ,
        D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_OFFERED = ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_OFFERED + 1 ) ,
        D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_CONTENT_UNDEFINED = ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_OFFERED + 1 ) ,
        D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_NULLPARAM = ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_CONTENT_UNDEFINED + 1 ) ,
        D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_INVALIDSIZE = ( D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_FINISHSESSIONKEYREFRESH_NULLPARAM = ( D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_INVALIDSIZE + 1 ) ,
        D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_NULLPARAM = ( D3D11_MESSAGE_ID_FINISHSESSIONKEYREFRESH_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_INVALIDSIZE = ( D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETCONTENTPROTECTIONCAPS_NULLPARAM = ( D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_INVALIDSIZE + 1 ) ,
        D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_NULLPARAM = ( D3D11_MESSAGE_ID_GETCONTENTPROTECTIONCAPS_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX = ( D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_NULLPARAM = ( D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX + 1 ) ,
        D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED = ( D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE = ( D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE + 1 ) ,
        D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL = ( D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN + 1 ) ,
        D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM = ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL + 1 ) ,
        D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL = ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM = ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL + 1 ) ,
        D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE = ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL = ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE + 1 ) ,
        D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM = ( D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL + 1 ) ,
        D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_NULLPARAM = ( D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL = ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY = ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL + 1 ) ,
        D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGSIZE = ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY + 1 ) ,
        D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX = ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGSIZE + 1 ) ,
        D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM = ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX + 1 ) ,
        D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL = ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE = ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL + 1 ) ,
        D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE = ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE + 1 ) ,
        D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE = ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE + 1 ) ,
        D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE + 1 ) ,
        D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = ( D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
        D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = ( D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
        D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = ( D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
        D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = ( D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
        D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = ( D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
        D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE = ( D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
        D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE = ( D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE + 1 ) ,
        D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY = ( D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE + 1 ) ,
        D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_OUTOFMEMORY = ( D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY + 1 ) ,
        D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_NULLPARAM = ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_OUTOFMEMORY + 1 ) ,
        D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDTYPE = ( D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDBIND = ( D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDTYPE + 1 ) ,
        D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDARRAY = ( D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDBIND + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM = ( D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDARRAY + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALID = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALID + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW = ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION = ( D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION + 1 ) ,
        D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET = ( D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS = ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS + 1 ) ,
        D3D11_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 = ( D3D11_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_GETDC_INACCESSIBLE = ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT = ( D3D11_MESSAGE_ID_GETDC_INACCESSIBLE + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 = ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE = ( D3D11_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA = ( D3D11_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT + 1 ) ,
        D3D11_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX = ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT + 1 ) ,
        D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX = ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET + 1 ) ,
        D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT + 1 ) ,
        D3D11_MESSAGE_ID_D3D11_1_MESSAGES_END = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT + 1 ) ,
        D3D11_MESSAGE_ID_D3D11_2_MESSAGES_START = ( D3D11_MESSAGE_ID_D3D11_1_MESSAGES_END + 1 ) ,
        D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE = ( D3D11_MESSAGE_ID_D3D11_2_MESSAGES_START + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1 = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE + 1 ) ,
        D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1 + 1 ) ,
        D3D11_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED + 1 ) ,
        D3D11_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER = ( D3D11_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER + 1 ) ,
        D3D11_MESSAGE_ID_COPYTILES_INVALID_PARAMETER = ( D3D11_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER + 1 ) ,
        D3D11_MESSAGE_ID_UPDATETILES_INVALID_PARAMETER = ( D3D11_MESSAGE_ID_COPYTILES_INVALID_PARAMETER + 1 ) ,
        D3D11_MESSAGE_ID_RESIZETILEPOOL_INVALID_PARAMETER = ( D3D11_MESSAGE_ID_UPDATETILES_INVALID_PARAMETER + 1 ) ,
        D3D11_MESSAGE_ID_TILEDRESOURCEBARRIER_INVALID_PARAMETER = ( D3D11_MESSAGE_ID_RESIZETILEPOOL_INVALID_PARAMETER + 1 ) ,
        D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING = ( D3D11_MESSAGE_ID_TILEDRESOURCEBARRIER_INVALID_PARAMETER + 1 ) ,
        D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR = ( D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING + 1 ) ,
        D3D11_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS = ( D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR + 1 ) ,
        D3D11_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA = ( D3D11_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS + 1 ) ,
        D3D11_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE = ( D3D11_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA + 1 ) ,
        D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES = ( D3D11_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE + 1 ) ,
        D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT = ( D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES + 1 ) ,
        D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS = ( D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT + 1 ) ,
        D3D11_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE = ( D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS + 1 ) ,
        D3D11_MESSAGE_ID_RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END = ( D3D11_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE + 1 ) ,
        D3D11_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER = ( D3D11_MESSAGE_ID_RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEVICE_INVALIDARGS = ( D3D11_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER + 1 ) ,
        D3D11_MESSAGE_ID_CREATEDEVICE_WARNING = ( D3D11_MESSAGE_ID_CREATEDEVICE_INVALIDARGS + 1 ) ,
        D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWUINT_HAZARD = ( D3D11_MESSAGE_ID_CREATEDEVICE_WARNING + 1 ) ,
        D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD = ( D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWUINT_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH = ( D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD + 1 ) ,
        D3D11_MESSAGE_ID_D3D11_2_MESSAGES_END = ( D3D11_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH + 1 )
    } D3D11_MESSAGE_ID;

typedef struct D3D11_MESSAGE
    {
    D3D11_MESSAGE_CATEGORY Category;
    D3D11_MESSAGE_SEVERITY Severity;
    D3D11_MESSAGE_ID ID;

                                         const char *pDescription;
    SIZE_T DescriptionByteLength;
    } D3D11_MESSAGE;

typedef struct D3D11_INFO_QUEUE_FILTER_DESC
    {
    UINT NumCategories;

                                 D3D11_MESSAGE_CATEGORY *pCategoryList;
    UINT NumSeverities;

                                 D3D11_MESSAGE_SEVERITY *pSeverityList;
    UINT NumIDs;

                          D3D11_MESSAGE_ID *pIDList;
    } D3D11_INFO_QUEUE_FILTER_DESC;

typedef struct D3D11_INFO_QUEUE_FILTER
    {
    D3D11_INFO_QUEUE_FILTER_DESC AllowList;
    D3D11_INFO_QUEUE_FILTER_DESC DenyList;
    } D3D11_INFO_QUEUE_FILTER;




extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0005_v0_0_s_ifspec;
# 1993 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
extern "C" const IID IID_ID3D11InfoQueue;



    struct __declspec(uuid("6543dbb6-1b48-42f5-ab82-e97ec74326f6")) __declspec(novtable)
    ID3D11InfoQueue : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetMessageCountLimit(

                  UINT64 MessageCountLimit) = 0;

        virtual void __stdcall ClearStoredMessages( void) = 0;

        virtual HRESULT __stdcall GetMessageW(

                  UINT64 MessageIndex,

                                                         D3D11_MESSAGE *pMessage,

                     SIZE_T *pMessageByteLength) = 0;

        virtual UINT64 __stdcall GetNumMessagesAllowedByStorageFilter( void) = 0;

        virtual UINT64 __stdcall GetNumMessagesDeniedByStorageFilter( void) = 0;

        virtual UINT64 __stdcall GetNumStoredMessages( void) = 0;

        virtual UINT64 __stdcall GetNumStoredMessagesAllowedByRetrievalFilter( void) = 0;

        virtual UINT64 __stdcall GetNumMessagesDiscardedByMessageCountLimit( void) = 0;

        virtual UINT64 __stdcall GetMessageCountLimit( void) = 0;

        virtual HRESULT __stdcall AddStorageFilterEntries(

                  D3D11_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual HRESULT __stdcall GetStorageFilter(

                                                        D3D11_INFO_QUEUE_FILTER *pFilter,

                     SIZE_T *pFilterByteLength) = 0;

        virtual void __stdcall ClearStorageFilter( void) = 0;

        virtual HRESULT __stdcall PushEmptyStorageFilter( void) = 0;

        virtual HRESULT __stdcall PushCopyOfStorageFilter( void) = 0;

        virtual HRESULT __stdcall PushStorageFilter(

                  D3D11_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual void __stdcall PopStorageFilter( void) = 0;

        virtual UINT __stdcall GetStorageFilterStackSize( void) = 0;

        virtual HRESULT __stdcall AddRetrievalFilterEntries(

                  D3D11_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual HRESULT __stdcall GetRetrievalFilter(

                                                        D3D11_INFO_QUEUE_FILTER *pFilter,

                     SIZE_T *pFilterByteLength) = 0;

        virtual void __stdcall ClearRetrievalFilter( void) = 0;

        virtual HRESULT __stdcall PushEmptyRetrievalFilter( void) = 0;

        virtual HRESULT __stdcall PushCopyOfRetrievalFilter( void) = 0;

        virtual HRESULT __stdcall PushRetrievalFilter(

                  D3D11_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual void __stdcall PopRetrievalFilter( void) = 0;

        virtual UINT __stdcall GetRetrievalFilterStackSize( void) = 0;

        virtual HRESULT __stdcall AddMessage(

                  D3D11_MESSAGE_CATEGORY Category,

                  D3D11_MESSAGE_SEVERITY Severity,

                  D3D11_MESSAGE_ID ID,

                  LPCSTR pDescription) = 0;

        virtual HRESULT __stdcall AddApplicationMessage(

                  D3D11_MESSAGE_SEVERITY Severity,

                  LPCSTR pDescription) = 0;

        virtual HRESULT __stdcall SetBreakOnCategory(

                  D3D11_MESSAGE_CATEGORY Category,

                  BOOL bEnable) = 0;

        virtual HRESULT __stdcall SetBreakOnSeverity(

                  D3D11_MESSAGE_SEVERITY Severity,

                  BOOL bEnable) = 0;

        virtual HRESULT __stdcall SetBreakOnID(

                  D3D11_MESSAGE_ID ID,

                  BOOL bEnable) = 0;

        virtual BOOL __stdcall GetBreakOnCategory(

                  D3D11_MESSAGE_CATEGORY Category) = 0;

        virtual BOOL __stdcall GetBreakOnSeverity(

                  D3D11_MESSAGE_SEVERITY Severity) = 0;

        virtual BOOL __stdcall GetBreakOnID(

                  D3D11_MESSAGE_ID ID) = 0;

        virtual void __stdcall SetMuteDebugOutput(

                  BOOL bMute) = 0;

        virtual BOOL __stdcall GetMuteDebugOutput( void) = 0;

    };
# 2454 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11sdklayers.h"
extern "C" const GUID IID_ID3D11Debug;
extern "C" const GUID IID_ID3D11SwitchToRef;
extern "C" const GUID IID_ID3D11TracingDevice;
extern "C" const GUID IID_ID3D11RefTrackingOptions;
extern "C" const GUID IID_ID3D11RefDefaultTrackingOptions;
extern "C" const GUID IID_ID3D11InfoQueue;


extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0006_v0_0_s_ifspec;






}
# 14321 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h" 2


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h"
#pragma warning(disable: 4049)
# 50 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h"
typedef struct ID3D10BlendState1 ID3D10BlendState1;






typedef struct ID3D10ShaderResourceView1 ID3D10ShaderResourceView1;






typedef struct ID3D10Device1 ID3D10Device1;
# 74 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h"
extern "C"{
# 129 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
#pragma warning(disable: 4049)
# 50 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef struct ID3D10DeviceChild ID3D10DeviceChild;






typedef struct ID3D10DepthStencilState ID3D10DepthStencilState;






typedef struct ID3D10BlendState ID3D10BlendState;






typedef struct ID3D10RasterizerState ID3D10RasterizerState;






typedef struct ID3D10Resource ID3D10Resource;






typedef struct ID3D10Buffer ID3D10Buffer;






typedef struct ID3D10Texture1D ID3D10Texture1D;






typedef struct ID3D10Texture2D ID3D10Texture2D;






typedef struct ID3D10Texture3D ID3D10Texture3D;






typedef struct ID3D10View ID3D10View;






typedef struct ID3D10ShaderResourceView ID3D10ShaderResourceView;






typedef struct ID3D10RenderTargetView ID3D10RenderTargetView;






typedef struct ID3D10DepthStencilView ID3D10DepthStencilView;






typedef struct ID3D10VertexShader ID3D10VertexShader;






typedef struct ID3D10GeometryShader ID3D10GeometryShader;






typedef struct ID3D10PixelShader ID3D10PixelShader;






typedef struct ID3D10InputLayout ID3D10InputLayout;






typedef struct ID3D10SamplerState ID3D10SamplerState;






typedef struct ID3D10Asynchronous ID3D10Asynchronous;






typedef struct ID3D10Query ID3D10Query;






typedef struct ID3D10Predicate ID3D10Predicate;






typedef struct ID3D10Counter ID3D10Counter;






typedef struct ID3D10Device ID3D10Device;






typedef struct ID3D10Multithread ID3D10Multithread;
# 223 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C"{
# 636 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef
enum D3D10_INPUT_CLASSIFICATION
    {
        D3D10_INPUT_PER_VERTEX_DATA = 0,
        D3D10_INPUT_PER_INSTANCE_DATA = 1
    } D3D10_INPUT_CLASSIFICATION;



typedef struct D3D10_INPUT_ELEMENT_DESC
    {
    LPCSTR SemanticName;
    UINT SemanticIndex;
    DXGI_FORMAT Format;
    UINT InputSlot;
    UINT AlignedByteOffset;
    D3D10_INPUT_CLASSIFICATION InputSlotClass;
    UINT InstanceDataStepRate;
    } D3D10_INPUT_ELEMENT_DESC;

typedef
enum D3D10_FILL_MODE
    {
        D3D10_FILL_WIREFRAME = 2,
        D3D10_FILL_SOLID = 3
    } D3D10_FILL_MODE;

typedef D3D_PRIMITIVE_TOPOLOGY D3D10_PRIMITIVE_TOPOLOGY;

typedef D3D_PRIMITIVE D3D10_PRIMITIVE;

typedef
enum D3D10_CULL_MODE
    {
        D3D10_CULL_NONE = 1,
        D3D10_CULL_FRONT = 2,
        D3D10_CULL_BACK = 3
    } D3D10_CULL_MODE;

typedef struct D3D10_SO_DECLARATION_ENTRY
    {
    LPCSTR SemanticName;
    UINT SemanticIndex;
    BYTE StartComponent;
    BYTE ComponentCount;
    BYTE OutputSlot;
    } D3D10_SO_DECLARATION_ENTRY;

typedef struct D3D10_VIEWPORT
    {
    INT TopLeftX;
    INT TopLeftY;
    UINT Width;
    UINT Height;
    FLOAT MinDepth;
    FLOAT MaxDepth;
    } D3D10_VIEWPORT;

typedef
enum D3D10_RESOURCE_DIMENSION
    {
        D3D10_RESOURCE_DIMENSION_UNKNOWN = 0,
        D3D10_RESOURCE_DIMENSION_BUFFER = 1,
        D3D10_RESOURCE_DIMENSION_TEXTURE1D = 2,
        D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3,
        D3D10_RESOURCE_DIMENSION_TEXTURE3D = 4
    } D3D10_RESOURCE_DIMENSION;

typedef D3D_SRV_DIMENSION D3D10_SRV_DIMENSION;

typedef
enum D3D10_DSV_DIMENSION
    {
        D3D10_DSV_DIMENSION_UNKNOWN = 0,
        D3D10_DSV_DIMENSION_TEXTURE1D = 1,
        D3D10_DSV_DIMENSION_TEXTURE1DARRAY = 2,
        D3D10_DSV_DIMENSION_TEXTURE2D = 3,
        D3D10_DSV_DIMENSION_TEXTURE2DARRAY = 4,
        D3D10_DSV_DIMENSION_TEXTURE2DMS = 5,
        D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
    } D3D10_DSV_DIMENSION;

typedef
enum D3D10_RTV_DIMENSION
    {
        D3D10_RTV_DIMENSION_UNKNOWN = 0,
        D3D10_RTV_DIMENSION_BUFFER = 1,
        D3D10_RTV_DIMENSION_TEXTURE1D = 2,
        D3D10_RTV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D10_RTV_DIMENSION_TEXTURE2D = 4,
        D3D10_RTV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D10_RTV_DIMENSION_TEXTURE2DMS = 6,
        D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
        D3D10_RTV_DIMENSION_TEXTURE3D = 8
    } D3D10_RTV_DIMENSION;

typedef
enum D3D10_USAGE
    {
        D3D10_USAGE_DEFAULT = 0,
        D3D10_USAGE_IMMUTABLE = 1,
        D3D10_USAGE_DYNAMIC = 2,
        D3D10_USAGE_STAGING = 3
    } D3D10_USAGE;

typedef
enum D3D10_BIND_FLAG
    {
        D3D10_BIND_VERTEX_BUFFER = 0x1L,
        D3D10_BIND_INDEX_BUFFER = 0x2L,
        D3D10_BIND_CONSTANT_BUFFER = 0x4L,
        D3D10_BIND_SHADER_RESOURCE = 0x8L,
        D3D10_BIND_STREAM_OUTPUT = 0x10L,
        D3D10_BIND_RENDER_TARGET = 0x20L,
        D3D10_BIND_DEPTH_STENCIL = 0x40L
    } D3D10_BIND_FLAG;

typedef
enum D3D10_CPU_ACCESS_FLAG
    {
        D3D10_CPU_ACCESS_WRITE = 0x10000L,
        D3D10_CPU_ACCESS_READ = 0x20000L
    } D3D10_CPU_ACCESS_FLAG;

typedef
enum D3D10_RESOURCE_MISC_FLAG
    {
        D3D10_RESOURCE_MISC_GENERATE_MIPS = 0x1L,
        D3D10_RESOURCE_MISC_SHARED = 0x2L,
        D3D10_RESOURCE_MISC_TEXTURECUBE = 0x4L,
        D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x10L,
        D3D10_RESOURCE_MISC_GDI_COMPATIBLE = 0x20L
    } D3D10_RESOURCE_MISC_FLAG;

typedef
enum D3D10_MAP
    {
        D3D10_MAP_READ = 1,
        D3D10_MAP_WRITE = 2,
        D3D10_MAP_READ_WRITE = 3,
        D3D10_MAP_WRITE_DISCARD = 4,
        D3D10_MAP_WRITE_NO_OVERWRITE = 5
    } D3D10_MAP;

typedef
enum D3D10_MAP_FLAG
    {
        D3D10_MAP_FLAG_DO_NOT_WAIT = 0x100000L
    } D3D10_MAP_FLAG;

typedef
enum D3D10_RAISE_FLAG
    {
        D3D10_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 0x1L
    } D3D10_RAISE_FLAG;

typedef
enum D3D10_CLEAR_FLAG
    {
        D3D10_CLEAR_DEPTH = 0x1L,
        D3D10_CLEAR_STENCIL = 0x2L
    } D3D10_CLEAR_FLAG;

typedef RECT D3D10_RECT;

typedef struct D3D10_BOX
    {
    UINT left;
    UINT top;
    UINT front;
    UINT right;
    UINT bottom;
    UINT back;
    } D3D10_BOX;




extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0000_v0_0_s_ifspec;
# 824 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10DeviceChild;



    struct __declspec(uuid("9B7E4C00-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10DeviceChild : public IUnknown
    {
    public:
        virtual void __stdcall GetDevice(

                   ID3D10Device **ppDevice) = 0;

        virtual HRESULT __stdcall GetPrivateData(

                  const GUID & guid,

                     UINT *pDataSize,

                                                void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateData(

                  const GUID & guid,

                  UINT DataSize,

                                            const void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateDataInterface(

                  const GUID & guid,

                      const IUnknown *pData) = 0;

    };
# 958 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef
enum D3D10_COMPARISON_FUNC
    {
        D3D10_COMPARISON_NEVER = 1,
        D3D10_COMPARISON_LESS = 2,
        D3D10_COMPARISON_EQUAL = 3,
        D3D10_COMPARISON_LESS_EQUAL = 4,
        D3D10_COMPARISON_GREATER = 5,
        D3D10_COMPARISON_NOT_EQUAL = 6,
        D3D10_COMPARISON_GREATER_EQUAL = 7,
        D3D10_COMPARISON_ALWAYS = 8
    } D3D10_COMPARISON_FUNC;

typedef
enum D3D10_DEPTH_WRITE_MASK
    {
        D3D10_DEPTH_WRITE_MASK_ZERO = 0,
        D3D10_DEPTH_WRITE_MASK_ALL = 1
    } D3D10_DEPTH_WRITE_MASK;

typedef
enum D3D10_STENCIL_OP
    {
        D3D10_STENCIL_OP_KEEP = 1,
        D3D10_STENCIL_OP_ZERO = 2,
        D3D10_STENCIL_OP_REPLACE = 3,
        D3D10_STENCIL_OP_INCR_SAT = 4,
        D3D10_STENCIL_OP_DECR_SAT = 5,
        D3D10_STENCIL_OP_INVERT = 6,
        D3D10_STENCIL_OP_INCR = 7,
        D3D10_STENCIL_OP_DECR = 8
    } D3D10_STENCIL_OP;

typedef struct D3D10_DEPTH_STENCILOP_DESC
    {
    D3D10_STENCIL_OP StencilFailOp;
    D3D10_STENCIL_OP StencilDepthFailOp;
    D3D10_STENCIL_OP StencilPassOp;
    D3D10_COMPARISON_FUNC StencilFunc;
    } D3D10_DEPTH_STENCILOP_DESC;

typedef struct D3D10_DEPTH_STENCIL_DESC
    {
    BOOL DepthEnable;
    D3D10_DEPTH_WRITE_MASK DepthWriteMask;
    D3D10_COMPARISON_FUNC DepthFunc;
    BOOL StencilEnable;
    UINT8 StencilReadMask;
    UINT8 StencilWriteMask;
    D3D10_DEPTH_STENCILOP_DESC FrontFace;
    D3D10_DEPTH_STENCILOP_DESC BackFace;
    } D3D10_DEPTH_STENCIL_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0001_v0_0_s_ifspec;
# 1023 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10DepthStencilState;



    struct __declspec(uuid("2B4B1CC8-A4AD-41f8-8322-CA86FC3EC675")) __declspec(novtable)
    ID3D10DepthStencilState : public ID3D10DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_DEPTH_STENCIL_DESC *pDesc) = 0;

    };
# 1144 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef
enum D3D10_BLEND
    {
        D3D10_BLEND_ZERO = 1,
        D3D10_BLEND_ONE = 2,
        D3D10_BLEND_SRC_COLOR = 3,
        D3D10_BLEND_INV_SRC_COLOR = 4,
        D3D10_BLEND_SRC_ALPHA = 5,
        D3D10_BLEND_INV_SRC_ALPHA = 6,
        D3D10_BLEND_DEST_ALPHA = 7,
        D3D10_BLEND_INV_DEST_ALPHA = 8,
        D3D10_BLEND_DEST_COLOR = 9,
        D3D10_BLEND_INV_DEST_COLOR = 10,
        D3D10_BLEND_SRC_ALPHA_SAT = 11,
        D3D10_BLEND_BLEND_FACTOR = 14,
        D3D10_BLEND_INV_BLEND_FACTOR = 15,
        D3D10_BLEND_SRC1_COLOR = 16,
        D3D10_BLEND_INV_SRC1_COLOR = 17,
        D3D10_BLEND_SRC1_ALPHA = 18,
        D3D10_BLEND_INV_SRC1_ALPHA = 19
    } D3D10_BLEND;

typedef
enum D3D10_BLEND_OP
    {
        D3D10_BLEND_OP_ADD = 1,
        D3D10_BLEND_OP_SUBTRACT = 2,
        D3D10_BLEND_OP_REV_SUBTRACT = 3,
        D3D10_BLEND_OP_MIN = 4,
        D3D10_BLEND_OP_MAX = 5
    } D3D10_BLEND_OP;

typedef
enum D3D10_COLOR_WRITE_ENABLE
    {
        D3D10_COLOR_WRITE_ENABLE_RED = 1,
        D3D10_COLOR_WRITE_ENABLE_GREEN = 2,
        D3D10_COLOR_WRITE_ENABLE_BLUE = 4,
        D3D10_COLOR_WRITE_ENABLE_ALPHA = 8,
        D3D10_COLOR_WRITE_ENABLE_ALL = ( ( ( D3D10_COLOR_WRITE_ENABLE_RED | D3D10_COLOR_WRITE_ENABLE_GREEN ) | D3D10_COLOR_WRITE_ENABLE_BLUE ) | D3D10_COLOR_WRITE_ENABLE_ALPHA )
    } D3D10_COLOR_WRITE_ENABLE;

typedef struct D3D10_BLEND_DESC
    {
    BOOL AlphaToCoverageEnable;
    BOOL BlendEnable[ 8 ];
    D3D10_BLEND SrcBlend;
    D3D10_BLEND DestBlend;
    D3D10_BLEND_OP BlendOp;
    D3D10_BLEND SrcBlendAlpha;
    D3D10_BLEND DestBlendAlpha;
    D3D10_BLEND_OP BlendOpAlpha;
    UINT8 RenderTargetWriteMask[ 8 ];
    } D3D10_BLEND_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0002_v0_0_s_ifspec;
# 1211 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10BlendState;



    struct __declspec(uuid("EDAD8D19-8A35-4d6d-8566-2EA276CDE161")) __declspec(novtable)
    ID3D10BlendState : public ID3D10DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_BLEND_DESC *pDesc) = 0;

    };
# 1332 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef struct D3D10_RASTERIZER_DESC
    {
    D3D10_FILL_MODE FillMode;
    D3D10_CULL_MODE CullMode;
    BOOL FrontCounterClockwise;
    INT DepthBias;
    FLOAT DepthBiasClamp;
    FLOAT SlopeScaledDepthBias;
    BOOL DepthClipEnable;
    BOOL ScissorEnable;
    BOOL MultisampleEnable;
    BOOL AntialiasedLineEnable;
    } D3D10_RASTERIZER_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0003_v0_0_s_ifspec;
# 1358 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10RasterizerState;



    struct __declspec(uuid("A2A07292-89AF-4345-BE2E-C53D9FBB6E9F")) __declspec(novtable)
    ID3D10RasterizerState : public ID3D10DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_RASTERIZER_DESC *pDesc) = 0;

    };
# 1480 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
inline UINT D3D10CalcSubresource( UINT MipSlice, UINT ArraySlice, UINT MipLevels )
{ return MipSlice + ArraySlice * MipLevels; }

typedef struct D3D10_SUBRESOURCE_DATA
    {
    const void *pSysMem;
    UINT SysMemPitch;
    UINT SysMemSlicePitch;
    } D3D10_SUBRESOURCE_DATA;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0004_v0_0_s_ifspec;
# 1502 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10Resource;



    struct __declspec(uuid("9B7E4C01-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Resource : public ID3D10DeviceChild
    {
    public:
        virtual void __stdcall GetType(

                   D3D10_RESOURCE_DIMENSION *rType) = 0;

        virtual void __stdcall SetEvictionPriority(

                  UINT EvictionPriority) = 0;

        virtual UINT __stdcall GetEvictionPriority( void) = 0;

    };
# 1643 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef struct D3D10_BUFFER_DESC
    {
    UINT ByteWidth;
    D3D10_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    } D3D10_BUFFER_DESC;


struct CD3D10_BUFFER_DESC : public D3D10_BUFFER_DESC
{
    CD3D10_BUFFER_DESC()
    {}
    explicit CD3D10_BUFFER_DESC( const D3D10_BUFFER_DESC& o ) :
        D3D10_BUFFER_DESC( o )
    {}
    explicit CD3D10_BUFFER_DESC(
        UINT byteWidth,
        UINT bindFlags,
        D3D10_USAGE usage = D3D10_USAGE_DEFAULT,
        UINT cpuaccessFlags = 0,
        UINT miscFlags = 0 )
    {
        ByteWidth = byteWidth;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags ;
        MiscFlags = miscFlags;
    }
    ~CD3D10_BUFFER_DESC() {}
    operator const D3D10_BUFFER_DESC&() const { return *this; }
};



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0005_v0_0_s_ifspec;
# 1689 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10Buffer;



    struct __declspec(uuid("9B7E4C02-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Buffer : public ID3D10Resource
    {
    public:
        virtual HRESULT __stdcall Map(

                  D3D10_MAP MapType,

                  UINT MapFlags,

                   void **ppData) = 0;

        virtual void __stdcall Unmap( void) = 0;

        virtual void __stdcall GetDesc(

                   D3D10_BUFFER_DESC *pDesc) = 0;

    };
# 1861 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef struct D3D10_TEXTURE1D_DESC
    {
    UINT Width;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    D3D10_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    } D3D10_TEXTURE1D_DESC;


struct CD3D10_TEXTURE1D_DESC : public D3D10_TEXTURE1D_DESC
{
    CD3D10_TEXTURE1D_DESC()
    {}
    explicit CD3D10_TEXTURE1D_DESC( const D3D10_TEXTURE1D_DESC& o ) :
        D3D10_TEXTURE1D_DESC( o )
    {}
    explicit CD3D10_TEXTURE1D_DESC(
        DXGI_FORMAT format,
        UINT width,
        UINT arraySize = 1,
        UINT mipLevels = 0,
        UINT bindFlags = D3D10_BIND_SHADER_RESOURCE,
        D3D10_USAGE usage = D3D10_USAGE_DEFAULT,
        UINT cpuaccessFlags= 0,
        UINT miscFlags = 0 )
    {
        Width = width;
        MipLevels = mipLevels;
        ArraySize = arraySize;
        Format = format;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags;
        MiscFlags = miscFlags;
    }
    ~CD3D10_TEXTURE1D_DESC() {}
    operator const D3D10_TEXTURE1D_DESC&() const { return *this; }
};



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0006_v0_0_s_ifspec;
# 1916 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10Texture1D;



    struct __declspec(uuid("9B7E4C03-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Texture1D : public ID3D10Resource
    {
    public:
        virtual HRESULT __stdcall Map(

                  UINT Subresource,

                  D3D10_MAP MapType,

                  UINT MapFlags,

                   void **ppData) = 0;

        virtual void __stdcall Unmap(

                  UINT Subresource) = 0;

        virtual void __stdcall GetDesc(

                   D3D10_TEXTURE1D_DESC *pDesc) = 0;

    };
# 2096 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef struct D3D10_TEXTURE2D_DESC
    {
    UINT Width;
    UINT Height;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D10_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    } D3D10_TEXTURE2D_DESC;


struct CD3D10_TEXTURE2D_DESC : public D3D10_TEXTURE2D_DESC
{
    CD3D10_TEXTURE2D_DESC()
    {}
    explicit CD3D10_TEXTURE2D_DESC( const D3D10_TEXTURE2D_DESC& o ) :
        D3D10_TEXTURE2D_DESC( o )
    {}
    explicit CD3D10_TEXTURE2D_DESC(
        DXGI_FORMAT format,
        UINT width,
        UINT height,
        UINT arraySize = 1,
        UINT mipLevels = 0,
        UINT bindFlags = D3D10_BIND_SHADER_RESOURCE,
        D3D10_USAGE usage = D3D10_USAGE_DEFAULT,
        UINT cpuaccessFlags = 0,
        UINT sampleCount = 1,
        UINT sampleQuality = 0,
        UINT miscFlags = 0 )
    {
        Width = width;
        Height = height;
        MipLevels = mipLevels;
        ArraySize = arraySize;
        Format = format;
        SampleDesc.Count = sampleCount;
        SampleDesc.Quality = sampleQuality;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags;
        MiscFlags = miscFlags;
    }
    ~CD3D10_TEXTURE2D_DESC() {}
    operator const D3D10_TEXTURE2D_DESC&() const { return *this; }
};

typedef struct D3D10_MAPPED_TEXTURE2D
    {
    void *pData;
    UINT RowPitch;
    } D3D10_MAPPED_TEXTURE2D;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0007_v0_0_s_ifspec;
# 2165 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10Texture2D;



    struct __declspec(uuid("9B7E4C04-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Texture2D : public ID3D10Resource
    {
    public:
        virtual HRESULT __stdcall Map(

                  UINT Subresource,

                  D3D10_MAP MapType,

                  UINT MapFlags,

                   D3D10_MAPPED_TEXTURE2D *pMappedTex2D) = 0;

        virtual void __stdcall Unmap(

                  UINT Subresource) = 0;

        virtual void __stdcall GetDesc(

                   D3D10_TEXTURE2D_DESC *pDesc) = 0;

    };
# 2345 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef struct D3D10_TEXTURE3D_DESC
    {
    UINT Width;
    UINT Height;
    UINT Depth;
    UINT MipLevels;
    DXGI_FORMAT Format;
    D3D10_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    } D3D10_TEXTURE3D_DESC;


struct CD3D10_TEXTURE3D_DESC : public D3D10_TEXTURE3D_DESC
{
    CD3D10_TEXTURE3D_DESC()
    {}
    explicit CD3D10_TEXTURE3D_DESC( const D3D10_TEXTURE3D_DESC& o ) :
        D3D10_TEXTURE3D_DESC( o )
    {}
    explicit CD3D10_TEXTURE3D_DESC(
        DXGI_FORMAT format,
        UINT width,
        UINT height,
        UINT depth,
        UINT mipLevels = 0,
        UINT bindFlags = D3D10_BIND_SHADER_RESOURCE,
        D3D10_USAGE usage = D3D10_USAGE_DEFAULT,
        UINT cpuaccessFlags = 0,
        UINT miscFlags = 0 )
    {
        Width = width;
        Height = height;
        Depth = depth;
        MipLevels = mipLevels;
        Format = format;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags;
        MiscFlags = miscFlags;
    }
    ~CD3D10_TEXTURE3D_DESC() {}
    operator const D3D10_TEXTURE3D_DESC&() const { return *this; }
};

typedef struct D3D10_MAPPED_TEXTURE3D
    {
    void *pData;
    UINT RowPitch;
    UINT DepthPitch;
    } D3D10_MAPPED_TEXTURE3D;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0008_v0_0_s_ifspec;
# 2410 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10Texture3D;



    struct __declspec(uuid("9B7E4C05-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Texture3D : public ID3D10Resource
    {
    public:
        virtual HRESULT __stdcall Map(

                  UINT Subresource,

                  D3D10_MAP MapType,

                  UINT MapFlags,

                   D3D10_MAPPED_TEXTURE3D *pMappedTex3D) = 0;

        virtual void __stdcall Unmap(

                  UINT Subresource) = 0;

        virtual void __stdcall GetDesc(

                   D3D10_TEXTURE3D_DESC *pDesc) = 0;

    };
# 2590 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef
enum D3D10_TEXTURECUBE_FACE
    {
        D3D10_TEXTURECUBE_FACE_POSITIVE_X = 0,
        D3D10_TEXTURECUBE_FACE_NEGATIVE_X = 1,
        D3D10_TEXTURECUBE_FACE_POSITIVE_Y = 2,
        D3D10_TEXTURECUBE_FACE_NEGATIVE_Y = 3,
        D3D10_TEXTURECUBE_FACE_POSITIVE_Z = 4,
        D3D10_TEXTURECUBE_FACE_NEGATIVE_Z = 5
    } D3D10_TEXTURECUBE_FACE;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0009_v0_0_s_ifspec;
# 2613 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10View;



    struct __declspec(uuid("C902B03F-60A7-49BA-9936-2A3AB37A7E33")) __declspec(novtable)
    ID3D10View : public ID3D10DeviceChild
    {
    public:
        virtual void __stdcall GetResource(

                   ID3D10Resource **ppResource) = 0;

    };
# 2734 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef struct D3D10_BUFFER_SRV
    {
    union
        {
        UINT FirstElement;
        UINT ElementOffset;
        } ;
    union
        {
        UINT NumElements;
        UINT ElementWidth;
        } ;
    } D3D10_BUFFER_SRV;

typedef struct D3D10_TEX1D_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D10_TEX1D_SRV;

typedef struct D3D10_TEX1D_ARRAY_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX1D_ARRAY_SRV;

typedef struct D3D10_TEX2D_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D10_TEX2D_SRV;

typedef struct D3D10_TEX2D_ARRAY_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX2D_ARRAY_SRV;

typedef struct D3D10_TEX3D_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D10_TEX3D_SRV;

typedef struct D3D10_TEXCUBE_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D10_TEXCUBE_SRV;

typedef struct D3D10_TEX2DMS_SRV
    {
    UINT UnusedField_NothingToDefine;
    } D3D10_TEX2DMS_SRV;

typedef struct D3D10_TEX2DMS_ARRAY_SRV
    {
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX2DMS_ARRAY_SRV;

typedef struct D3D10_SHADER_RESOURCE_VIEW_DESC
    {
    DXGI_FORMAT Format;
    D3D10_SRV_DIMENSION ViewDimension;
    union
        {
        D3D10_BUFFER_SRV Buffer;
        D3D10_TEX1D_SRV Texture1D;
        D3D10_TEX1D_ARRAY_SRV Texture1DArray;
        D3D10_TEX2D_SRV Texture2D;
        D3D10_TEX2D_ARRAY_SRV Texture2DArray;
        D3D10_TEX2DMS_SRV Texture2DMS;
        D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        D3D10_TEX3D_SRV Texture3D;
        D3D10_TEXCUBE_SRV TextureCube;
        } ;
    } D3D10_SHADER_RESOURCE_VIEW_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0010_v0_0_s_ifspec;
# 2829 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10ShaderResourceView;



    struct __declspec(uuid("9B7E4C07-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10ShaderResourceView : public ID3D10View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_SHADER_RESOURCE_VIEW_DESC *pDesc) = 0;

    };
# 2959 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef struct D3D10_BUFFER_RTV
    {
    union
        {
        UINT FirstElement;
        UINT ElementOffset;
        } ;
    union
        {
        UINT NumElements;
        UINT ElementWidth;
        } ;
    } D3D10_BUFFER_RTV;

typedef struct D3D10_TEX1D_RTV
    {
    UINT MipSlice;
    } D3D10_TEX1D_RTV;

typedef struct D3D10_TEX1D_ARRAY_RTV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX1D_ARRAY_RTV;

typedef struct D3D10_TEX2D_RTV
    {
    UINT MipSlice;
    } D3D10_TEX2D_RTV;

typedef struct D3D10_TEX2DMS_RTV
    {
    UINT UnusedField_NothingToDefine;
    } D3D10_TEX2DMS_RTV;

typedef struct D3D10_TEX2D_ARRAY_RTV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX2D_ARRAY_RTV;

typedef struct D3D10_TEX2DMS_ARRAY_RTV
    {
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX2DMS_ARRAY_RTV;

typedef struct D3D10_TEX3D_RTV
    {
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
    } D3D10_TEX3D_RTV;

typedef struct D3D10_RENDER_TARGET_VIEW_DESC
    {
    DXGI_FORMAT Format;
    D3D10_RTV_DIMENSION ViewDimension;
    union
        {
        D3D10_BUFFER_RTV Buffer;
        D3D10_TEX1D_RTV Texture1D;
        D3D10_TEX1D_ARRAY_RTV Texture1DArray;
        D3D10_TEX2D_RTV Texture2D;
        D3D10_TEX2D_ARRAY_RTV Texture2DArray;
        D3D10_TEX2DMS_RTV Texture2DMS;
        D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        D3D10_TEX3D_RTV Texture3D;
        } ;
    } D3D10_RENDER_TARGET_VIEW_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0011_v0_0_s_ifspec;
# 3044 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10RenderTargetView;



    struct __declspec(uuid("9B7E4C08-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10RenderTargetView : public ID3D10View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_RENDER_TARGET_VIEW_DESC *pDesc) = 0;

    };
# 3174 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef struct D3D10_TEX1D_DSV
    {
    UINT MipSlice;
    } D3D10_TEX1D_DSV;

typedef struct D3D10_TEX1D_ARRAY_DSV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX1D_ARRAY_DSV;

typedef struct D3D10_TEX2D_DSV
    {
    UINT MipSlice;
    } D3D10_TEX2D_DSV;

typedef struct D3D10_TEX2D_ARRAY_DSV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX2D_ARRAY_DSV;

typedef struct D3D10_TEX2DMS_DSV
    {
    UINT UnusedField_NothingToDefine;
    } D3D10_TEX2DMS_DSV;

typedef struct D3D10_TEX2DMS_ARRAY_DSV
    {
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX2DMS_ARRAY_DSV;

typedef struct D3D10_DEPTH_STENCIL_VIEW_DESC
    {
    DXGI_FORMAT Format;
    D3D10_DSV_DIMENSION ViewDimension;
    union
        {
        D3D10_TEX1D_DSV Texture1D;
        D3D10_TEX1D_ARRAY_DSV Texture1DArray;
        D3D10_TEX2D_DSV Texture2D;
        D3D10_TEX2D_ARRAY_DSV Texture2DArray;
        D3D10_TEX2DMS_DSV Texture2DMS;
        D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray;
        } ;
    } D3D10_DEPTH_STENCIL_VIEW_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0012_v0_0_s_ifspec;
# 3236 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10DepthStencilView;



    struct __declspec(uuid("9B7E4C09-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10DepthStencilView : public ID3D10View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_DEPTH_STENCIL_VIEW_DESC *pDesc) = 0;

    };
# 3370 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10VertexShader;



    struct __declspec(uuid("9B7E4C0A-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10VertexShader : public ID3D10DeviceChild
    {
    public:
    };
# 3483 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10GeometryShader;



    struct __declspec(uuid("6316BE88-54CD-4040-AB44-20461BC81F68")) __declspec(novtable)
    ID3D10GeometryShader : public ID3D10DeviceChild
    {
    public:
    };
# 3596 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10PixelShader;



    struct __declspec(uuid("4968B601-9D00-4cde-8346-8E7F675819B6")) __declspec(novtable)
    ID3D10PixelShader : public ID3D10DeviceChild
    {
    public:
    };
# 3709 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10InputLayout;



    struct __declspec(uuid("9B7E4C0B-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10InputLayout : public ID3D10DeviceChild
    {
    public:
    };
# 3818 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef
enum D3D10_FILTER
    {
        D3D10_FILTER_MIN_MAG_MIP_POINT = 0,
        D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
        D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
        D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
        D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
        D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
        D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
        D3D10_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
        D3D10_FILTER_ANISOTROPIC = 0x55,
        D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
        D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
        D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
        D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
        D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
        D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
        D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
        D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
        D3D10_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
        D3D10_FILTER_TEXT_1BIT = 0x80000000
    } D3D10_FILTER;

typedef
enum D3D10_FILTER_TYPE
    {
        D3D10_FILTER_TYPE_POINT = 0,
        D3D10_FILTER_TYPE_LINEAR = 1
    } D3D10_FILTER_TYPE;
# 3894 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef
enum D3D10_TEXTURE_ADDRESS_MODE
    {
        D3D10_TEXTURE_ADDRESS_WRAP = 1,
        D3D10_TEXTURE_ADDRESS_MIRROR = 2,
        D3D10_TEXTURE_ADDRESS_CLAMP = 3,
        D3D10_TEXTURE_ADDRESS_BORDER = 4,
        D3D10_TEXTURE_ADDRESS_MIRROR_ONCE = 5
    } D3D10_TEXTURE_ADDRESS_MODE;

typedef struct D3D10_SAMPLER_DESC
    {
    D3D10_FILTER Filter;
    D3D10_TEXTURE_ADDRESS_MODE AddressU;
    D3D10_TEXTURE_ADDRESS_MODE AddressV;
    D3D10_TEXTURE_ADDRESS_MODE AddressW;
    FLOAT MipLODBias;
    UINT MaxAnisotropy;
    D3D10_COMPARISON_FUNC ComparisonFunc;
    FLOAT BorderColor[ 4 ];
    FLOAT MinLOD;
    FLOAT MaxLOD;
    } D3D10_SAMPLER_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0017_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0017_v0_0_s_ifspec;
# 3930 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10SamplerState;



    struct __declspec(uuid("9B7E4C0C-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10SamplerState : public ID3D10DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_SAMPLER_DESC *pDesc) = 0;

    };
# 4051 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef
enum D3D10_FORMAT_SUPPORT
    {
        D3D10_FORMAT_SUPPORT_BUFFER = 0x1,
        D3D10_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 0x2,
        D3D10_FORMAT_SUPPORT_IA_INDEX_BUFFER = 0x4,
        D3D10_FORMAT_SUPPORT_SO_BUFFER = 0x8,
        D3D10_FORMAT_SUPPORT_TEXTURE1D = 0x10,
        D3D10_FORMAT_SUPPORT_TEXTURE2D = 0x20,
        D3D10_FORMAT_SUPPORT_TEXTURE3D = 0x40,
        D3D10_FORMAT_SUPPORT_TEXTURECUBE = 0x80,
        D3D10_FORMAT_SUPPORT_SHADER_LOAD = 0x100,
        D3D10_FORMAT_SUPPORT_SHADER_SAMPLE = 0x200,
        D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 0x400,
        D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 0x800,
        D3D10_FORMAT_SUPPORT_MIP = 0x1000,
        D3D10_FORMAT_SUPPORT_MIP_AUTOGEN = 0x2000,
        D3D10_FORMAT_SUPPORT_RENDER_TARGET = 0x4000,
        D3D10_FORMAT_SUPPORT_BLENDABLE = 0x8000,
        D3D10_FORMAT_SUPPORT_DEPTH_STENCIL = 0x10000,
        D3D10_FORMAT_SUPPORT_CPU_LOCKABLE = 0x20000,
        D3D10_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 0x40000,
        D3D10_FORMAT_SUPPORT_DISPLAY = 0x80000,
        D3D10_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 0x100000,
        D3D10_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 0x200000,
        D3D10_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 0x400000,
        D3D10_FORMAT_SUPPORT_SHADER_GATHER = 0x800000,
        D3D10_FORMAT_SUPPORT_BACK_BUFFER_CAST = 0x1000000
    } D3D10_FORMAT_SUPPORT;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0018_v0_0_s_ifspec;
# 4093 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10Asynchronous;



    struct __declspec(uuid("9B7E4C0D-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Asynchronous : public ID3D10DeviceChild
    {
    public:
        virtual void __stdcall Begin( void) = 0;

        virtual void __stdcall End( void) = 0;

        virtual HRESULT __stdcall GetData(

                                              void *pData,

                  UINT DataSize,

                  UINT GetDataFlags) = 0;

        virtual UINT __stdcall GetDataSize( void) = 0;

    };
# 4246 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef
enum D3D10_ASYNC_GETDATA_FLAG
    {
        D3D10_ASYNC_GETDATA_DONOTFLUSH = 0x1
    } D3D10_ASYNC_GETDATA_FLAG;

typedef
enum D3D10_QUERY
    {
        D3D10_QUERY_EVENT = 0,
        D3D10_QUERY_OCCLUSION = ( D3D10_QUERY_EVENT + 1 ) ,
        D3D10_QUERY_TIMESTAMP = ( D3D10_QUERY_OCCLUSION + 1 ) ,
        D3D10_QUERY_TIMESTAMP_DISJOINT = ( D3D10_QUERY_TIMESTAMP + 1 ) ,
        D3D10_QUERY_PIPELINE_STATISTICS = ( D3D10_QUERY_TIMESTAMP_DISJOINT + 1 ) ,
        D3D10_QUERY_OCCLUSION_PREDICATE = ( D3D10_QUERY_PIPELINE_STATISTICS + 1 ) ,
        D3D10_QUERY_SO_STATISTICS = ( D3D10_QUERY_OCCLUSION_PREDICATE + 1 ) ,
        D3D10_QUERY_SO_OVERFLOW_PREDICATE = ( D3D10_QUERY_SO_STATISTICS + 1 )
    } D3D10_QUERY;

typedef
enum D3D10_QUERY_MISC_FLAG
    {
        D3D10_QUERY_MISC_PREDICATEHINT = 0x1
    } D3D10_QUERY_MISC_FLAG;

typedef struct D3D10_QUERY_DESC
    {
    D3D10_QUERY Query;
    UINT MiscFlags;
    } D3D10_QUERY_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0019_v0_0_s_ifspec;
# 4289 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10Query;



    struct __declspec(uuid("9B7E4C0E-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Query : public ID3D10Asynchronous
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_QUERY_DESC *pDesc) = 0;

    };
# 4445 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10Predicate;



    struct __declspec(uuid("9B7E4C10-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Predicate : public ID3D10Query
    {
    public:
    };
# 4594 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef struct D3D10_QUERY_DATA_TIMESTAMP_DISJOINT
    {
    UINT64 Frequency;
    BOOL Disjoint;
    } D3D10_QUERY_DATA_TIMESTAMP_DISJOINT;

typedef struct D3D10_QUERY_DATA_PIPELINE_STATISTICS
    {
    UINT64 IAVertices;
    UINT64 IAPrimitives;
    UINT64 VSInvocations;
    UINT64 GSInvocations;
    UINT64 GSPrimitives;
    UINT64 CInvocations;
    UINT64 CPrimitives;
    UINT64 PSInvocations;
    } D3D10_QUERY_DATA_PIPELINE_STATISTICS;

typedef struct D3D10_QUERY_DATA_SO_STATISTICS
    {
    UINT64 NumPrimitivesWritten;
    UINT64 PrimitivesStorageNeeded;
    } D3D10_QUERY_DATA_SO_STATISTICS;

typedef
enum D3D10_COUNTER
    {
        D3D10_COUNTER_GPU_IDLE = 0,
        D3D10_COUNTER_VERTEX_PROCESSING = ( D3D10_COUNTER_GPU_IDLE + 1 ) ,
        D3D10_COUNTER_GEOMETRY_PROCESSING = ( D3D10_COUNTER_VERTEX_PROCESSING + 1 ) ,
        D3D10_COUNTER_PIXEL_PROCESSING = ( D3D10_COUNTER_GEOMETRY_PROCESSING + 1 ) ,
        D3D10_COUNTER_OTHER_GPU_PROCESSING = ( D3D10_COUNTER_PIXEL_PROCESSING + 1 ) ,
        D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION = ( D3D10_COUNTER_OTHER_GPU_PROCESSING + 1 ) ,
        D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION = ( D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION + 1 ) ,
        D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION = ( D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION + 1 ) ,
        D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION = ( D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION + 1 ) ,
        D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION = ( D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION + 1 ) ,
        D3D10_COUNTER_VS_MEMORY_LIMITED = ( D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION + 1 ) ,
        D3D10_COUNTER_VS_COMPUTATION_LIMITED = ( D3D10_COUNTER_VS_MEMORY_LIMITED + 1 ) ,
        D3D10_COUNTER_GS_MEMORY_LIMITED = ( D3D10_COUNTER_VS_COMPUTATION_LIMITED + 1 ) ,
        D3D10_COUNTER_GS_COMPUTATION_LIMITED = ( D3D10_COUNTER_GS_MEMORY_LIMITED + 1 ) ,
        D3D10_COUNTER_PS_MEMORY_LIMITED = ( D3D10_COUNTER_GS_COMPUTATION_LIMITED + 1 ) ,
        D3D10_COUNTER_PS_COMPUTATION_LIMITED = ( D3D10_COUNTER_PS_MEMORY_LIMITED + 1 ) ,
        D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE = ( D3D10_COUNTER_PS_COMPUTATION_LIMITED + 1 ) ,
        D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE = ( D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE + 1 ) ,
        D3D10_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000
    } D3D10_COUNTER;

typedef
enum D3D10_COUNTER_TYPE
    {
        D3D10_COUNTER_TYPE_FLOAT32 = 0,
        D3D10_COUNTER_TYPE_UINT16 = ( D3D10_COUNTER_TYPE_FLOAT32 + 1 ) ,
        D3D10_COUNTER_TYPE_UINT32 = ( D3D10_COUNTER_TYPE_UINT16 + 1 ) ,
        D3D10_COUNTER_TYPE_UINT64 = ( D3D10_COUNTER_TYPE_UINT32 + 1 )
    } D3D10_COUNTER_TYPE;

typedef struct D3D10_COUNTER_DESC
    {
    D3D10_COUNTER Counter;
    UINT MiscFlags;
    } D3D10_COUNTER_DESC;

typedef struct D3D10_COUNTER_INFO
    {
    D3D10_COUNTER LastDeviceDependentCounter;
    UINT NumSimultaneousCounters;
    UINT8 NumDetectableParallelUnits;
    } D3D10_COUNTER_INFO;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0021_v0_0_s_ifspec;
# 4676 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10Counter;



    struct __declspec(uuid("9B7E4C11-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Counter : public ID3D10Asynchronous
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_COUNTER_DESC *pDesc) = 0;

    };
# 4832 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10Device;



    struct __declspec(uuid("9B7E4C0F-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Device : public IUnknown
    {
    public:
        virtual void __stdcall VSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D10Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall PSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                      ID3D10ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall PSSetShader(

                      ID3D10PixelShader *pPixelShader) = 0;

        virtual void __stdcall PSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                         ID3D10SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall VSSetShader(

                      ID3D10VertexShader *pVertexShader) = 0;

        virtual void __stdcall DrawIndexed(

                  UINT IndexCount,

                  UINT StartIndexLocation,

                  INT BaseVertexLocation) = 0;

        virtual void __stdcall Draw(

                  UINT VertexCount,

                  UINT StartVertexLocation) = 0;

        virtual void __stdcall PSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D10Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall IASetInputLayout(

                      ID3D10InputLayout *pInputLayout) = 0;

        virtual void __stdcall IASetVertexBuffers(

                                                                              UINT StartSlot,

                                                                                      UINT NumBuffers,

                                        ID3D10Buffer *const *ppVertexBuffers,

                                        const UINT *pStrides,

                                        const UINT *pOffsets) = 0;

        virtual void __stdcall IASetIndexBuffer(

                      ID3D10Buffer *pIndexBuffer,

                  DXGI_FORMAT Format,

                  UINT Offset) = 0;

        virtual void __stdcall DrawIndexedInstanced(

                  UINT IndexCountPerInstance,

                  UINT InstanceCount,

                  UINT StartIndexLocation,

                  INT BaseVertexLocation,

                  UINT StartInstanceLocation) = 0;

        virtual void __stdcall DrawInstanced(

                  UINT VertexCountPerInstance,

                  UINT InstanceCount,

                  UINT StartVertexLocation,

                  UINT StartInstanceLocation) = 0;

        virtual void __stdcall GSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D10Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall GSSetShader(

                      ID3D10GeometryShader *pShader) = 0;

        virtual void __stdcall IASetPrimitiveTopology(

                  D3D10_PRIMITIVE_TOPOLOGY Topology) = 0;

        virtual void __stdcall VSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                      ID3D10ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall VSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                         ID3D10SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall SetPredication(

                      ID3D10Predicate *pPredicate,

                  BOOL PredicateValue) = 0;

        virtual void __stdcall GSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                      ID3D10ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall GSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                         ID3D10SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall OMSetRenderTargets(

                                                                     UINT NumViews,

                                      ID3D10RenderTargetView *const *ppRenderTargetViews,

                      ID3D10DepthStencilView *pDepthStencilView) = 0;

        virtual void __stdcall OMSetBlendState(

                      ID3D10BlendState *pBlendState,

                  const FLOAT BlendFactor[ 4 ],

                  UINT SampleMask) = 0;

        virtual void __stdcall OMSetDepthStencilState(

                      ID3D10DepthStencilState *pDepthStencilState,

                  UINT StencilRef) = 0;

        virtual void __stdcall SOSetTargets(

                                                        UINT NumBuffers,

                                        ID3D10Buffer *const *ppSOTargets,

                                        const UINT *pOffsets) = 0;

        virtual void __stdcall DrawAuto( void) = 0;

        virtual void __stdcall RSSetState(

                      ID3D10RasterizerState *pRasterizerState) = 0;

        virtual void __stdcall RSSetViewports(

                                                                                     UINT NumViewports,

                                          const D3D10_VIEWPORT *pViewports) = 0;

        virtual void __stdcall RSSetScissorRects(

                                                                                     UINT NumRects,

                                      const D3D10_RECT *pRects) = 0;

        virtual void __stdcall CopySubresourceRegion(

                  ID3D10Resource *pDstResource,

                  UINT DstSubresource,

                  UINT DstX,

                  UINT DstY,

                  UINT DstZ,

                  ID3D10Resource *pSrcResource,

                  UINT SrcSubresource,

                      const D3D10_BOX *pSrcBox) = 0;

        virtual void __stdcall CopyResource(

                  ID3D10Resource *pDstResource,

                  ID3D10Resource *pSrcResource) = 0;

        virtual void __stdcall UpdateSubresource(

                  ID3D10Resource *pDstResource,

                  UINT DstSubresource,

                      const D3D10_BOX *pDstBox,

                  const void *pSrcData,

                  UINT SrcRowPitch,

                  UINT SrcDepthPitch) = 0;

        virtual void __stdcall ClearRenderTargetView(

                  ID3D10RenderTargetView *pRenderTargetView,

                  const FLOAT ColorRGBA[ 4 ]) = 0;

        virtual void __stdcall ClearDepthStencilView(

                  ID3D10DepthStencilView *pDepthStencilView,

                  UINT ClearFlags,

                  FLOAT Depth,

                  UINT8 Stencil) = 0;

        virtual void __stdcall GenerateMips(

                  ID3D10ShaderResourceView *pShaderResourceView) = 0;

        virtual void __stdcall ResolveSubresource(

                  ID3D10Resource *pDstResource,

                  UINT DstSubresource,

                  ID3D10Resource *pSrcResource,

                  UINT SrcSubresource,

                  DXGI_FORMAT Format) = 0;

        virtual void __stdcall VSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D10Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall PSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                        ID3D10ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall PSGetShader(

                   ID3D10PixelShader **ppPixelShader) = 0;

        virtual void __stdcall PSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                           ID3D10SamplerState **ppSamplers) = 0;

        virtual void __stdcall VSGetShader(

                   ID3D10VertexShader **ppVertexShader) = 0;

        virtual void __stdcall PSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D10Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall IAGetInputLayout(

                   ID3D10InputLayout **ppInputLayout) = 0;

        virtual void __stdcall IAGetVertexBuffers(

                                                                              UINT StartSlot,

                                                                                      UINT NumBuffers,

                                          ID3D10Buffer **ppVertexBuffers,

                                          UINT *pStrides,

                                          UINT *pOffsets) = 0;

        virtual void __stdcall IAGetIndexBuffer(

                       ID3D10Buffer **pIndexBuffer,

                       DXGI_FORMAT *Format,

                       UINT *Offset) = 0;

        virtual void __stdcall GSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D10Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall GSGetShader(

                   ID3D10GeometryShader **ppGeometryShader) = 0;

        virtual void __stdcall IAGetPrimitiveTopology(

                   D3D10_PRIMITIVE_TOPOLOGY *pTopology) = 0;

        virtual void __stdcall VSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                        ID3D10ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall VSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                           ID3D10SamplerState **ppSamplers) = 0;

        virtual void __stdcall GetPredication(

                       ID3D10Predicate **ppPredicate,

                       BOOL *pPredicateValue) = 0;

        virtual void __stdcall GSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                        ID3D10ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall GSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                           ID3D10SamplerState **ppSamplers) = 0;

        virtual void __stdcall OMGetRenderTargets(

                                                                     UINT NumViews,

                                        ID3D10RenderTargetView **ppRenderTargetViews,

                       ID3D10DepthStencilView **ppDepthStencilView) = 0;

        virtual void __stdcall OMGetBlendState(

                       ID3D10BlendState **ppBlendState,

                       FLOAT BlendFactor[ 4 ],

                       UINT *pSampleMask) = 0;

        virtual void __stdcall OMGetDepthStencilState(

                       ID3D10DepthStencilState **ppDepthStencilState,

                       UINT *pStencilRef) = 0;

        virtual void __stdcall SOGetTargets(

                                                         UINT NumBuffers,

                                          ID3D10Buffer **ppSOTargets,

                                          UINT *pOffsets) = 0;

        virtual void __stdcall RSGetState(

                   ID3D10RasterizerState **ppRasterizerState) = 0;

        virtual void __stdcall RSGetViewports(

                                                                                               UINT *NumViewports,

                                             D3D10_VIEWPORT *pViewports) = 0;

        virtual void __stdcall RSGetScissorRects(

                                                                                               UINT *NumRects,

                                         D3D10_RECT *pRects) = 0;

        virtual HRESULT __stdcall GetDeviceRemovedReason( void) = 0;

        virtual HRESULT __stdcall SetExceptionMode(
            UINT RaiseFlags) = 0;

        virtual UINT __stdcall GetExceptionMode( void) = 0;

        virtual HRESULT __stdcall GetPrivateData(

                  const GUID & guid,

                     UINT *pDataSize,

                                                void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateData(

                  const GUID & guid,

                  UINT DataSize,

                                            const void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateDataInterface(

                  const GUID & guid,

                      const IUnknown *pData) = 0;

        virtual void __stdcall ClearState( void) = 0;

        virtual void __stdcall Flush( void) = 0;

        virtual HRESULT __stdcall CreateBuffer(

                  const D3D10_BUFFER_DESC *pDesc,

                      const D3D10_SUBRESOURCE_DATA *pInitialData,

                       ID3D10Buffer **ppBuffer) = 0;

        virtual HRESULT __stdcall CreateTexture1D(

                  const D3D10_TEXTURE1D_DESC *pDesc,

                                                                                  const D3D10_SUBRESOURCE_DATA *pInitialData,

                   ID3D10Texture1D **ppTexture1D) = 0;

        virtual HRESULT __stdcall CreateTexture2D(

                  const D3D10_TEXTURE2D_DESC *pDesc,

                                                                                  const D3D10_SUBRESOURCE_DATA *pInitialData,

                   ID3D10Texture2D **ppTexture2D) = 0;

        virtual HRESULT __stdcall CreateTexture3D(

                  const D3D10_TEXTURE3D_DESC *pDesc,

                                                               const D3D10_SUBRESOURCE_DATA *pInitialData,

                   ID3D10Texture3D **ppTexture3D) = 0;

        virtual HRESULT __stdcall CreateShaderResourceView(

                  ID3D10Resource *pResource,

                      const D3D10_SHADER_RESOURCE_VIEW_DESC *pDesc,

                       ID3D10ShaderResourceView **ppSRView) = 0;

        virtual HRESULT __stdcall CreateRenderTargetView(

                  ID3D10Resource *pResource,

                      const D3D10_RENDER_TARGET_VIEW_DESC *pDesc,

                       ID3D10RenderTargetView **ppRTView) = 0;

        virtual HRESULT __stdcall CreateDepthStencilView(

                  ID3D10Resource *pResource,

                      const D3D10_DEPTH_STENCIL_VIEW_DESC *pDesc,

                       ID3D10DepthStencilView **ppDepthStencilView) = 0;

        virtual HRESULT __stdcall CreateInputLayout(

                                     const D3D10_INPUT_ELEMENT_DESC *pInputElementDescs,

                                                                              UINT NumElements,

                                        const void *pShaderBytecodeWithInputSignature,

                  SIZE_T BytecodeLength,

                       ID3D10InputLayout **ppInputLayout) = 0;

        virtual HRESULT __stdcall CreateVertexShader(

                                        const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                       ID3D10VertexShader **ppVertexShader) = 0;

        virtual HRESULT __stdcall CreateGeometryShader(

                                        const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                       ID3D10GeometryShader **ppGeometryShader) = 0;

        virtual HRESULT __stdcall CreateGeometryShaderWithStreamOutput(

                                        const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                                        const D3D10_SO_DECLARATION_ENTRY *pSODeclaration,

                                                                     UINT NumEntries,

                  UINT OutputStreamStride,

                       ID3D10GeometryShader **ppGeometryShader) = 0;

        virtual HRESULT __stdcall CreatePixelShader(

                                        const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                       ID3D10PixelShader **ppPixelShader) = 0;

        virtual HRESULT __stdcall CreateBlendState(

                  const D3D10_BLEND_DESC *pBlendStateDesc,

                       ID3D10BlendState **ppBlendState) = 0;

        virtual HRESULT __stdcall CreateDepthStencilState(

                  const D3D10_DEPTH_STENCIL_DESC *pDepthStencilDesc,

                       ID3D10DepthStencilState **ppDepthStencilState) = 0;

        virtual HRESULT __stdcall CreateRasterizerState(

                  const D3D10_RASTERIZER_DESC *pRasterizerDesc,

                       ID3D10RasterizerState **ppRasterizerState) = 0;

        virtual HRESULT __stdcall CreateSamplerState(

                  const D3D10_SAMPLER_DESC *pSamplerDesc,

                       ID3D10SamplerState **ppSamplerState) = 0;

        virtual HRESULT __stdcall CreateQuery(

                  const D3D10_QUERY_DESC *pQueryDesc,

                       ID3D10Query **ppQuery) = 0;

        virtual HRESULT __stdcall CreatePredicate(

                  const D3D10_QUERY_DESC *pPredicateDesc,

                       ID3D10Predicate **ppPredicate) = 0;

        virtual HRESULT __stdcall CreateCounter(

                  const D3D10_COUNTER_DESC *pCounterDesc,

                       ID3D10Counter **ppCounter) = 0;

        virtual HRESULT __stdcall CheckFormatSupport(

                  DXGI_FORMAT Format,

                   UINT *pFormatSupport) = 0;

        virtual HRESULT __stdcall CheckMultisampleQualityLevels(

                  DXGI_FORMAT Format,

                  UINT SampleCount,

                   UINT *pNumQualityLevels) = 0;

        virtual void __stdcall CheckCounterInfo(

                   D3D10_COUNTER_INFO *pCounterInfo) = 0;

        virtual HRESULT __stdcall CheckCounter(

                  const D3D10_COUNTER_DESC *pDesc,

                   D3D10_COUNTER_TYPE *pType,

                   UINT *pActiveCounters,

                                            LPSTR szName,

                         UINT *pNameLength,

                                             LPSTR szUnits,

                         UINT *pUnitsLength,

                                                   LPSTR szDescription,

                         UINT *pDescriptionLength) = 0;

        virtual UINT __stdcall GetCreationFlags( void) = 0;

        virtual HRESULT __stdcall OpenSharedResource(

                  HANDLE hResource,

                  const IID & ReturnedInterface,

                       void **ppResource) = 0;

        virtual void __stdcall SetTextFilterSize(

                  UINT Width,

                  UINT Height) = 0;

        virtual void __stdcall GetTextFilterSize(

                       UINT *pWidth,

                       UINT *pHeight) = 0;

    };
# 6639 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0023_v0_0_s_ifspec;
# 6649 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
extern "C" const IID IID_ID3D10Multithread;



    struct __declspec(uuid("9B7E4E00-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Multithread : public IUnknown
    {
    public:
        virtual void __stdcall Enter( void) = 0;

        virtual void __stdcall Leave( void) = 0;

        virtual BOOL __stdcall SetMultithreadProtected(

                  BOOL bMTProtect) = 0;

        virtual BOOL __stdcall GetMultithreadProtected( void) = 0;

    };
# 6756 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h"
typedef
enum D3D10_CREATE_DEVICE_FLAG
    {
        D3D10_CREATE_DEVICE_SINGLETHREADED = 0x1,
        D3D10_CREATE_DEVICE_DEBUG = 0x2,
        D3D10_CREATE_DEVICE_SWITCH_TO_REF = 0x4,
        D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x8,
        D3D10_CREATE_DEVICE_ALLOW_NULL_FROM_MAP = 0x10,
        D3D10_CREATE_DEVICE_BGRA_SUPPORT = 0x20,
        D3D10_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 0x80,
        D3D10_CREATE_DEVICE_STRICT_VALIDATION = 0x200,
        D3D10_CREATE_DEVICE_DEBUGGABLE = 0x400
    } D3D10_CREATE_DEVICE_FLAG;






# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10sdklayers.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10sdklayers.h"
#pragma warning(disable: 4049)
# 50 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10sdklayers.h"
typedef struct ID3D10Debug ID3D10Debug;






typedef struct ID3D10SwitchToRef ID3D10SwitchToRef;






typedef struct ID3D10InfoQueue ID3D10InfoQueue;
# 75 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10sdklayers.h"
extern "C"{
# 95 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10sdklayers.h"
extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0000_v0_0_s_ifspec;
# 105 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10sdklayers.h"
extern "C" const IID IID_ID3D10Debug;



    struct __declspec(uuid("9B7E4E01-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Debug : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetFeatureMask(
            UINT Mask) = 0;

        virtual UINT __stdcall GetFeatureMask( void) = 0;

        virtual HRESULT __stdcall SetPresentPerRenderOpDelay(
            UINT Milliseconds) = 0;

        virtual UINT __stdcall GetPresentPerRenderOpDelay( void) = 0;

        virtual HRESULT __stdcall SetSwapChain(

                      IDXGISwapChain *pSwapChain) = 0;

        virtual HRESULT __stdcall GetSwapChain(

                   IDXGISwapChain **ppSwapChain) = 0;

        virtual HRESULT __stdcall Validate( void) = 0;

    };
# 243 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10sdklayers.h"
extern "C" const IID IID_ID3D10SwitchToRef;



    struct __declspec(uuid("9B7E4E02-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10SwitchToRef : public IUnknown
    {
    public:
        virtual BOOL __stdcall SetUseRef(
            BOOL UseRef) = 0;

        virtual BOOL __stdcall GetUseRef( void) = 0;

    };
# 327 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10sdklayers.h"
extern "C" const GUID DXGI_DEBUG_D3D10;
# 343 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10sdklayers.h"
typedef
enum D3D10_MESSAGE_CATEGORY
    {
        D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0,
        D3D10_MESSAGE_CATEGORY_MISCELLANEOUS = ( D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED + 1 ) ,
        D3D10_MESSAGE_CATEGORY_INITIALIZATION = ( D3D10_MESSAGE_CATEGORY_MISCELLANEOUS + 1 ) ,
        D3D10_MESSAGE_CATEGORY_CLEANUP = ( D3D10_MESSAGE_CATEGORY_INITIALIZATION + 1 ) ,
        D3D10_MESSAGE_CATEGORY_COMPILATION = ( D3D10_MESSAGE_CATEGORY_CLEANUP + 1 ) ,
        D3D10_MESSAGE_CATEGORY_STATE_CREATION = ( D3D10_MESSAGE_CATEGORY_COMPILATION + 1 ) ,
        D3D10_MESSAGE_CATEGORY_STATE_SETTING = ( D3D10_MESSAGE_CATEGORY_STATE_CREATION + 1 ) ,
        D3D10_MESSAGE_CATEGORY_STATE_GETTING = ( D3D10_MESSAGE_CATEGORY_STATE_SETTING + 1 ) ,
        D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = ( D3D10_MESSAGE_CATEGORY_STATE_GETTING + 1 ) ,
        D3D10_MESSAGE_CATEGORY_EXECUTION = ( D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION + 1 ) ,
        D3D10_MESSAGE_CATEGORY_SHADER = ( D3D10_MESSAGE_CATEGORY_EXECUTION + 1 )
    } D3D10_MESSAGE_CATEGORY;

typedef
enum D3D10_MESSAGE_SEVERITY
    {
        D3D10_MESSAGE_SEVERITY_CORRUPTION = 0,
        D3D10_MESSAGE_SEVERITY_ERROR = ( D3D10_MESSAGE_SEVERITY_CORRUPTION + 1 ) ,
        D3D10_MESSAGE_SEVERITY_WARNING = ( D3D10_MESSAGE_SEVERITY_ERROR + 1 ) ,
        D3D10_MESSAGE_SEVERITY_INFO = ( D3D10_MESSAGE_SEVERITY_WARNING + 1 ) ,
        D3D10_MESSAGE_SEVERITY_MESSAGE = ( D3D10_MESSAGE_SEVERITY_INFO + 1 )
    } D3D10_MESSAGE_SEVERITY;

typedef
enum D3D10_MESSAGE_ID
    {
        D3D10_MESSAGE_ID_UNKNOWN = 0,
        D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = ( D3D10_MESSAGE_ID_UNKNOWN + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD + 1 ) ,
        D3D10_MESSAGE_ID_STRING_FROM_APPLICATION = ( D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_THIS = ( D3D10_MESSAGE_ID_STRING_FROM_APPLICATION + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 = ( D3D10_MESSAGE_ID_CORRUPTED_THIS + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 + 1 ) ,
        D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 + 1 ) ,
        D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = ( D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING + 1 ) ,
        D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY + 1 ) ,
        D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = ( D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT + 1 ) ,
        D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = ( D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA + 1 ) ,
        D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = ( D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA + 1 ) ,
        D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = ( D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN + 1 ) ,
        D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = ( D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = ( D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = ( D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC = ( D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = ( D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = ( D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC + 1 ) ,
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION + 1 ) ,
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC + 1 ) ,
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS + 1 ) ,
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS + 1 ) ,
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC + 1 ) ,
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS + 1 ) ,
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS + 1 ) ,
        D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT + 1 ) ,
        D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC + 1 ) ,
        D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = ( D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY + 1 ) ,
        D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = ( D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = ( D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX + 1 ) ,
        D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = ( D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY + 1 ) ,
        D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = ( D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE + 1 ) ,
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = ( D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE + 1 ) ,
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE + 1 ) ,
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE + 1 ) ,
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP + 1 ) ,
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS + 1 ) ,
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC + 1 ) ,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC + 1 ) ,
        D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY + 1 ) ,
        D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = ( D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED + 1 ) ,
        D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = ( D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = ( D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE + 1 ) ,
        D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = ( D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED + 1 ) ,
        D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = ( D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = ( D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED + 1 ) ,
        D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = ( D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = ( D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT + 1 ) ,
        D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = ( D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR + 1 ) ,
        D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = ( D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH + 1 ) ,
        D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = ( D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = ( D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY + 1 ) ,
        D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = ( D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID + 1 ) ,
        D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX + 1 ) ,
        D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE + 1 ) ,
        D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE + 1 ) ,
        D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE + 1 ) ,
        D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = ( D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE + 1 ) ,
        D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = ( D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
        D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = ( D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE + 1 ) ,
        D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = ( D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = ( D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = ( D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID + 1 ) ,
        D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID + 1 ) ,
        D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = ( D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE + 1 ) ,
        D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = ( D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = ( D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED + 1 ) ,
        D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = ( D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = ( D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = ( D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = ( D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = ( D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = ( D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = ( D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = ( D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED + 1 ) ,
        D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = ( D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED + 1 ) ,
        D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = ( D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED + 1 ) ,
        D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS + 1 ) ,
        D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = ( D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = ( D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_REF_THREADING_MODE = ( D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE + 1 ) ,
        D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = ( D3D10_MESSAGE_ID_REF_THREADING_MODE + 1 ) ,
        D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = ( D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION + 1 ) ,
        D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION = ( D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION + 1 ) ,
        D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = ( D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION + 1 ) ,
        D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = ( D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE + 1 ) ,
        D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY = ( D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER + 1 ) ,
        D3D10_MESSAGE_ID_REF_INFO = ( D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = ( D3D10_MESSAGE_ID_REF_INFO + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = ( D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = ( D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = ( D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = ( D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = ( D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = ( D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = ( D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = ( D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = ( D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = ( D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = ( D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = ( D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = ( D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = ( D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = ( D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET + 1 ) ,
        D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
        D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = ( D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = ( D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = ( D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH + 1 ) ,
        D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH + 1 ) ,
        D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = ( D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY + 1 ) ,
        D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY + 1 ) ,
        D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = ( D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = ( D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
        D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = ( D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED + 1 ) ,
        D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
        D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = ( D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC = ( D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN + 1 ) ,
        D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = ( D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC + 1 ) ,
        D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = ( D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
        D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = ( D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
        D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = ( D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE + 1 ) ,
        D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = ( D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = ( D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION + 1 ) ,
        D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = ( D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE + 1 ) ,
        D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = ( D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
        D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = ( D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION + 1 ) ,
        D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = ( D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
        D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = ( D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN + 1 ) ,
        D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = ( D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE + 1 ) ,
        D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = ( D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = ( D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = ( D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_OBJECT_SUMMARY = ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_BUFFER = ( D3D10_MESSAGE_ID_LIVE_OBJECT_SUMMARY + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_TEXTURE1D = ( D3D10_MESSAGE_ID_LIVE_BUFFER + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_TEXTURE2D = ( D3D10_MESSAGE_ID_LIVE_TEXTURE1D + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_TEXTURE3D = ( D3D10_MESSAGE_ID_LIVE_TEXTURE2D + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = ( D3D10_MESSAGE_ID_LIVE_TEXTURE3D + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_RENDERTARGETVIEW = ( D3D10_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = ( D3D10_MESSAGE_ID_LIVE_RENDERTARGETVIEW + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_VERTEXSHADER = ( D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_GEOMETRYSHADER = ( D3D10_MESSAGE_ID_LIVE_VERTEXSHADER + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_PIXELSHADER = ( D3D10_MESSAGE_ID_LIVE_GEOMETRYSHADER + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_INPUTLAYOUT = ( D3D10_MESSAGE_ID_LIVE_PIXELSHADER + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_SAMPLER = ( D3D10_MESSAGE_ID_LIVE_INPUTLAYOUT + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_BLENDSTATE = ( D3D10_MESSAGE_ID_LIVE_SAMPLER + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = ( D3D10_MESSAGE_ID_LIVE_BLENDSTATE + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_RASTERIZERSTATE = ( D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_QUERY = ( D3D10_MESSAGE_ID_LIVE_RASTERIZERSTATE + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_PREDICATE = ( D3D10_MESSAGE_ID_LIVE_QUERY + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_COUNTER = ( D3D10_MESSAGE_ID_LIVE_PREDICATE + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_DEVICE = ( D3D10_MESSAGE_ID_LIVE_COUNTER + 1 ) ,
        D3D10_MESSAGE_ID_LIVE_SWAPCHAIN = ( D3D10_MESSAGE_ID_LIVE_DEVICE + 1 ) ,
        D3D10_MESSAGE_ID_D3D10_MESSAGES_END = ( D3D10_MESSAGE_ID_LIVE_SWAPCHAIN + 1 ) ,
        D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
        D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = ( D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START + 1 ) ,
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY + 1 ) ,
        D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE + 1 ) ,
        D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = ( D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = ( D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = ( D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = ( D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE + 1 ) ,
        D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = ( D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS + 1 ) ,
        D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = ( D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = ( D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = ( D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = ( D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS + 1 ) ,
        D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = ( D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY + 1 ) ,
        D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = ( D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK + 1 ) ,
        D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = ( D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT + 1 ) ,
        D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE + 1 ) ,
        D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE + 1 ) ,
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = ( D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL + 1 ) ,
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX + 1 ) ,
        D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = ( D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = ( D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = ( D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = ( D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES + 1 ) ,
        D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED + 1 ) ,
        D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = ( D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND + 1 ) ,
        D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE + 1 ) ,
        D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = ( D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = ( D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 + 1 ) ,
        D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = ( D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = ( D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = ( D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION + 1 ) ,
        D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = ( D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = ( D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR + 1 ) ,
        D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = ( D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA + 1 ) ,
        D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP + 1 ) ,
        D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED + 1 ) ,
        D3D10_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT + 1 ) ,
        D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END = ( D3D10_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES + 1 )
    } D3D10_MESSAGE_ID;

typedef struct D3D10_MESSAGE
    {
    D3D10_MESSAGE_CATEGORY Category;
    D3D10_MESSAGE_SEVERITY Severity;
    D3D10_MESSAGE_ID ID;

                                         const char *pDescription;
    SIZE_T DescriptionByteLength;
    } D3D10_MESSAGE;

typedef struct D3D10_INFO_QUEUE_FILTER_DESC
    {
    UINT NumCategories;

                                 D3D10_MESSAGE_CATEGORY *pCategoryList;
    UINT NumSeverities;

                                 D3D10_MESSAGE_SEVERITY *pSeverityList;
    UINT NumIDs;

                          D3D10_MESSAGE_ID *pIDList;
    } D3D10_INFO_QUEUE_FILTER_DESC;

typedef struct D3D10_INFO_QUEUE_FILTER
    {
    D3D10_INFO_QUEUE_FILTER_DESC AllowList;
    D3D10_INFO_QUEUE_FILTER_DESC DenyList;
    } D3D10_INFO_QUEUE_FILTER;




extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0002_v0_0_s_ifspec;
# 923 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10sdklayers.h"
extern "C" const IID IID_ID3D10InfoQueue;



    struct __declspec(uuid("1b940b17-2642-4d1f-ab1f-b99bad0c395f")) __declspec(novtable)
    ID3D10InfoQueue : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetMessageCountLimit(

                  UINT64 MessageCountLimit) = 0;

        virtual void __stdcall ClearStoredMessages( void) = 0;

        virtual HRESULT __stdcall GetMessageW(

                  UINT64 MessageIndex,

                                                         D3D10_MESSAGE *pMessage,

                     SIZE_T *pMessageByteLength) = 0;

        virtual UINT64 __stdcall GetNumMessagesAllowedByStorageFilter( void) = 0;

        virtual UINT64 __stdcall GetNumMessagesDeniedByStorageFilter( void) = 0;

        virtual UINT64 __stdcall GetNumStoredMessages( void) = 0;

        virtual UINT64 __stdcall GetNumStoredMessagesAllowedByRetrievalFilter( void) = 0;

        virtual UINT64 __stdcall GetNumMessagesDiscardedByMessageCountLimit( void) = 0;

        virtual UINT64 __stdcall GetMessageCountLimit( void) = 0;

        virtual HRESULT __stdcall AddStorageFilterEntries(

                  D3D10_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual HRESULT __stdcall GetStorageFilter(

                                                        D3D10_INFO_QUEUE_FILTER *pFilter,

                     SIZE_T *pFilterByteLength) = 0;

        virtual void __stdcall ClearStorageFilter( void) = 0;

        virtual HRESULT __stdcall PushEmptyStorageFilter( void) = 0;

        virtual HRESULT __stdcall PushCopyOfStorageFilter( void) = 0;

        virtual HRESULT __stdcall PushStorageFilter(

                  D3D10_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual void __stdcall PopStorageFilter( void) = 0;

        virtual UINT __stdcall GetStorageFilterStackSize( void) = 0;

        virtual HRESULT __stdcall AddRetrievalFilterEntries(

                  D3D10_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual HRESULT __stdcall GetRetrievalFilter(

                                                        D3D10_INFO_QUEUE_FILTER *pFilter,

                     SIZE_T *pFilterByteLength) = 0;

        virtual void __stdcall ClearRetrievalFilter( void) = 0;

        virtual HRESULT __stdcall PushEmptyRetrievalFilter( void) = 0;

        virtual HRESULT __stdcall PushCopyOfRetrievalFilter( void) = 0;

        virtual HRESULT __stdcall PushRetrievalFilter(

                  D3D10_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual void __stdcall PopRetrievalFilter( void) = 0;

        virtual UINT __stdcall GetRetrievalFilterStackSize( void) = 0;

        virtual HRESULT __stdcall AddMessage(

                  D3D10_MESSAGE_CATEGORY Category,

                  D3D10_MESSAGE_SEVERITY Severity,

                  D3D10_MESSAGE_ID ID,

                  LPCSTR pDescription) = 0;

        virtual HRESULT __stdcall AddApplicationMessage(

                  D3D10_MESSAGE_SEVERITY Severity,

                  LPCSTR pDescription) = 0;

        virtual HRESULT __stdcall SetBreakOnCategory(

                  D3D10_MESSAGE_CATEGORY Category,

                  BOOL bEnable) = 0;

        virtual HRESULT __stdcall SetBreakOnSeverity(

                  D3D10_MESSAGE_SEVERITY Severity,

                  BOOL bEnable) = 0;

        virtual HRESULT __stdcall SetBreakOnID(

                  D3D10_MESSAGE_ID ID,

                  BOOL bEnable) = 0;

        virtual BOOL __stdcall GetBreakOnCategory(

                  D3D10_MESSAGE_CATEGORY Category) = 0;

        virtual BOOL __stdcall GetBreakOnSeverity(

                  D3D10_MESSAGE_SEVERITY Severity) = 0;

        virtual BOOL __stdcall GetBreakOnID(

                  D3D10_MESSAGE_ID ID) = 0;

        virtual void __stdcall SetMuteDebugOutput(

                  BOOL bMute) = 0;

        virtual BOOL __stdcall GetMuteDebugOutput( void) = 0;

    };
# 1383 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10sdklayers.h"
extern "C" const GUID IID_ID3D10Debug;
extern "C" const GUID IID_ID3D10SwitchToRef;
extern "C" const GUID IID_ID3D10InfoQueue;


extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0003_v0_0_s_ifspec;






}
# 6774 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h" 2


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10misc.h" 1
# 18 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10misc.h"
extern "C" {
# 36 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10misc.h"
typedef enum D3D10_DRIVER_TYPE
{
    D3D10_DRIVER_TYPE_HARDWARE = 0,
    D3D10_DRIVER_TYPE_REFERENCE = 1,
    D3D10_DRIVER_TYPE_NULL = 2,
    D3D10_DRIVER_TYPE_SOFTWARE = 3,
    D3D10_DRIVER_TYPE_WARP = 5,
} D3D10_DRIVER_TYPE;

extern "C" const GUID GUID_DeviceType;
# 79 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10misc.h"
HRESULT __stdcall D3D10CreateDevice(
             IDXGIAdapter *pAdapter,
    D3D10_DRIVER_TYPE DriverType,
    HMODULE Software,
    UINT Flags,
    UINT SDKVersion,
              ID3D10Device **ppDevice);
# 123 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10misc.h"
HRESULT __stdcall D3D10CreateDeviceAndSwapChain(
             IDXGIAdapter *pAdapter,
    D3D10_DRIVER_TYPE DriverType,
    HMODULE Software,
    UINT Flags,
    UINT SDKVersion,
             DXGI_SWAP_CHAIN_DESC *pSwapChainDesc,
              IDXGISwapChain **ppSwapChain,
              ID3D10Device **ppDevice);
# 140 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10misc.h"
HRESULT __stdcall D3D10CreateBlob(SIZE_T NumBytes, LPD3D10BLOB *ppBuffer);





}
# 6776 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10shader.h" 1
# 120 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10shader.h"
typedef D3D_SHADER_MACRO D3D10_SHADER_MACRO;
typedef D3D10_SHADER_MACRO* LPD3D10_SHADER_MACRO;


typedef D3D_SHADER_VARIABLE_CLASS D3D10_SHADER_VARIABLE_CLASS;
typedef D3D10_SHADER_VARIABLE_CLASS* LPD3D10_SHADER_VARIABLE_CLASS;

typedef D3D_SHADER_VARIABLE_FLAGS D3D10_SHADER_VARIABLE_FLAGS;
typedef D3D10_SHADER_VARIABLE_FLAGS* LPD3D10_SHADER_VARIABLE_FLAGS;

typedef D3D_SHADER_VARIABLE_TYPE D3D10_SHADER_VARIABLE_TYPE;
typedef D3D10_SHADER_VARIABLE_TYPE* LPD3D10_SHADER_VARIABLE_TYPE;

typedef D3D_SHADER_INPUT_FLAGS D3D10_SHADER_INPUT_FLAGS;
typedef D3D10_SHADER_INPUT_FLAGS* LPD3D10_SHADER_INPUT_FLAGS;

typedef D3D_SHADER_INPUT_TYPE D3D10_SHADER_INPUT_TYPE;
typedef D3D10_SHADER_INPUT_TYPE* LPD3D10_SHADER_INPUT_TYPE;

typedef D3D_SHADER_CBUFFER_FLAGS D3D10_SHADER_CBUFFER_FLAGS;
typedef D3D10_SHADER_CBUFFER_FLAGS* LPD3D10_SHADER_CBUFFER_FLAGS;

typedef D3D_CBUFFER_TYPE D3D10_CBUFFER_TYPE;
typedef D3D10_CBUFFER_TYPE* LPD3D10_CBUFFER_TYPE;

typedef D3D_NAME D3D10_NAME;

typedef D3D_RESOURCE_RETURN_TYPE D3D10_RESOURCE_RETURN_TYPE;

typedef D3D_REGISTER_COMPONENT_TYPE D3D10_REGISTER_COMPONENT_TYPE;

typedef D3D_INCLUDE_TYPE D3D10_INCLUDE_TYPE;


typedef struct ID3DInclude ID3D10Include;
typedef struct ID3DInclude* LPD3D10INCLUDE;
# 167 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10shader.h"
typedef struct _D3D10_SHADER_DESC
{
    UINT Version;
    LPCSTR Creator;
    UINT Flags;

    UINT ConstantBuffers;
    UINT BoundResources;
    UINT InputParameters;
    UINT OutputParameters;

    UINT InstructionCount;
    UINT TempRegisterCount;
    UINT TempArrayCount;
    UINT DefCount;
    UINT DclCount;
    UINT TextureNormalInstructions;
    UINT TextureLoadInstructions;
    UINT TextureCompInstructions;
    UINT TextureBiasInstructions;
    UINT TextureGradientInstructions;
    UINT FloatInstructionCount;
    UINT IntInstructionCount;
    UINT UintInstructionCount;
    UINT StaticFlowControlCount;
    UINT DynamicFlowControlCount;
    UINT MacroInstructionCount;
    UINT ArrayInstructionCount;
    UINT CutInstructionCount;
    UINT EmitInstructionCount;
    D3D10_PRIMITIVE_TOPOLOGY GSOutputTopology;
    UINT GSMaxOutputVertexCount;
} D3D10_SHADER_DESC;

typedef struct _D3D10_SHADER_BUFFER_DESC
{
    LPCSTR Name;
    D3D10_CBUFFER_TYPE Type;
    UINT Variables;
    UINT Size;
    UINT uFlags;
} D3D10_SHADER_BUFFER_DESC;

typedef struct _D3D10_SHADER_VARIABLE_DESC
{
    LPCSTR Name;
    UINT StartOffset;
    UINT Size;
    UINT uFlags;
    LPVOID DefaultValue;
} D3D10_SHADER_VARIABLE_DESC;

typedef struct _D3D10_SHADER_TYPE_DESC
{
    D3D10_SHADER_VARIABLE_CLASS Class;
    D3D10_SHADER_VARIABLE_TYPE Type;
    UINT Rows;
    UINT Columns;
    UINT Elements;
    UINT Members;
    UINT Offset;
} D3D10_SHADER_TYPE_DESC;

typedef struct _D3D10_SHADER_INPUT_BIND_DESC
{
    LPCSTR Name;
    D3D10_SHADER_INPUT_TYPE Type;
    UINT BindPoint;
    UINT BindCount;

    UINT uFlags;
    D3D10_RESOURCE_RETURN_TYPE ReturnType;
    D3D10_SRV_DIMENSION Dimension;
    UINT NumSamples;
} D3D10_SHADER_INPUT_BIND_DESC;

typedef struct _D3D10_SIGNATURE_PARAMETER_DESC
{
    LPCSTR SemanticName;
    UINT SemanticIndex;
    UINT Register;
    D3D10_NAME SystemValueType;
    D3D10_REGISTER_COMPONENT_TYPE ComponentType;
    BYTE Mask;

    BYTE ReadWriteMask;




} D3D10_SIGNATURE_PARAMETER_DESC;
# 267 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10shader.h"
typedef struct ID3D10ShaderReflectionType ID3D10ShaderReflectionType;
typedef struct ID3D10ShaderReflectionType *LPD3D10SHADERREFLECTIONTYPE;


struct __declspec(uuid("C530AD7D-9B16-4395-A979-BA2ECFF83ADD")) ID3D10ShaderReflectionType;
extern "C" const GUID IID_ID3D10ShaderReflectionType;





struct __declspec(novtable) ID3D10ShaderReflectionType
{
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_SHADER_TYPE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10ShaderReflectionType* __stdcall GetMemberTypeByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10ShaderReflectionType* __stdcall GetMemberTypeByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) LPCSTR __stdcall GetMemberTypeName( UINT Index) = 0;
};

typedef struct ID3D10ShaderReflectionVariable ID3D10ShaderReflectionVariable;
typedef struct ID3D10ShaderReflectionVariable *LPD3D10SHADERREFLECTIONVARIABLE;


struct __declspec(uuid("1BF63C95-2650-405d-99C1-3636BD1DA0A1")) ID3D10ShaderReflectionVariable;
extern "C" const GUID IID_ID3D10ShaderReflectionVariable;





struct __declspec(novtable) ID3D10ShaderReflectionVariable
{
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_SHADER_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10ShaderReflectionType* __stdcall GetType(void) = 0;
};

typedef struct ID3D10ShaderReflectionConstantBuffer ID3D10ShaderReflectionConstantBuffer;
typedef struct ID3D10ShaderReflectionConstantBuffer *LPD3D10SHADERREFLECTIONCONSTANTBUFFER;


struct __declspec(uuid("66C66A94-DDDD-4b62-A66A-F0DA33C2B4D0")) ID3D10ShaderReflectionConstantBuffer;
extern "C" const GUID IID_ID3D10ShaderReflectionConstantBuffer;





struct __declspec(novtable) ID3D10ShaderReflectionConstantBuffer
{
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_SHADER_BUFFER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10ShaderReflectionVariable* __stdcall GetVariableByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10ShaderReflectionVariable* __stdcall GetVariableByName( LPCSTR Name) = 0;
};

typedef struct ID3D10ShaderReflection ID3D10ShaderReflection;
typedef struct ID3D10ShaderReflection *LPD3D10SHADERREFLECTION;


struct __declspec(uuid("D40E20B6-F8F7-42ad-AB20-4BAF8F15DFAA")) ID3D10ShaderReflection;
extern "C" const GUID IID_ID3D10ShaderReflection;





struct __declspec(novtable) ID3D10ShaderReflection : public IUnknown
{
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID *ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_SHADER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10ShaderReflectionConstantBuffer* __stdcall GetConstantBufferByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10ShaderReflectionConstantBuffer* __stdcall GetConstantBufferByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetResourceBindingDesc( UINT ResourceIndex, D3D10_SHADER_INPUT_BIND_DESC *pDesc) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetInputParameterDesc( UINT ParameterIndex, D3D10_SIGNATURE_PARAMETER_DESC *pDesc) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetOutputParameterDesc( UINT ParameterIndex, D3D10_SIGNATURE_PARAMETER_DESC *pDesc) = 0;

};






extern "C" {
# 400 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10shader.h"
HRESULT __stdcall D3D10CompileShader( LPCSTR pSrcData, SIZE_T SrcDataSize, LPCSTR pFileName, const D3D10_SHADER_MACRO* pDefines, LPD3D10INCLUDE pInclude,
    LPCSTR pFunctionName, LPCSTR pProfile, UINT Flags, ID3D10Blob** ppShader, ID3D10Blob** ppErrorMsgs);
# 421 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10shader.h"
HRESULT __stdcall D3D10DisassembleShader( const void *pShader, SIZE_T BytecodeLength, BOOL EnableColorCode, LPCSTR pComments, ID3D10Blob** ppDisassembly);
# 434 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10shader.h"
LPCSTR __stdcall D3D10GetPixelShaderProfile( ID3D10Device *pDevice);

LPCSTR __stdcall D3D10GetVertexShaderProfile( ID3D10Device *pDevice);

LPCSTR __stdcall D3D10GetGeometryShaderProfile( ID3D10Device *pDevice);
# 458 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10shader.h"
HRESULT __stdcall D3D10ReflectShader( const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D10ShaderReflection **ppReflector);
# 488 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10shader.h"
HRESULT __stdcall D3D10PreprocessShader( LPCSTR pSrcData, SIZE_T SrcDataSize, LPCSTR pFileName, const D3D10_SHADER_MACRO* pDefines,
             LPD3D10INCLUDE pInclude, ID3D10Blob** ppShaderText, ID3D10Blob** ppErrorMsgs);
# 520 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10shader.h"
HRESULT __stdcall D3D10GetInputSignatureBlob( const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D10Blob **ppSignatureBlob);
HRESULT __stdcall D3D10GetOutputSignatureBlob( const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D10Blob **ppSignatureBlob);
HRESULT __stdcall D3D10GetInputAndOutputSignatureBlob( const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D10Blob **ppSignatureBlob);
# 540 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10shader.h"
HRESULT __stdcall D3D10GetShaderDebugInfo( const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D10Blob** ppDebugInfo);


}
# 6777 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10effect.h" 1
# 35 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10effect.h"
typedef enum _D3D10_DEVICE_STATE_TYPES
{

    D3D10_DST_SO_BUFFERS=1,
    D3D10_DST_OM_RENDER_TARGETS,
    D3D10_DST_OM_DEPTH_STENCIL_STATE,
    D3D10_DST_OM_BLEND_STATE,

    D3D10_DST_VS,
    D3D10_DST_VS_SAMPLERS,
    D3D10_DST_VS_SHADER_RESOURCES,
    D3D10_DST_VS_CONSTANT_BUFFERS,

    D3D10_DST_GS,
    D3D10_DST_GS_SAMPLERS,
    D3D10_DST_GS_SHADER_RESOURCES,
    D3D10_DST_GS_CONSTANT_BUFFERS,

    D3D10_DST_PS,
    D3D10_DST_PS_SAMPLERS,
    D3D10_DST_PS_SHADER_RESOURCES,
    D3D10_DST_PS_CONSTANT_BUFFERS,

    D3D10_DST_IA_VERTEX_BUFFERS,
    D3D10_DST_IA_INDEX_BUFFER,
    D3D10_DST_IA_INPUT_LAYOUT,
    D3D10_DST_IA_PRIMITIVE_TOPOLOGY,

    D3D10_DST_RS_VIEWPORTS,
    D3D10_DST_RS_SCISSOR_RECTS,
    D3D10_DST_RS_RASTERIZER_STATE,

    D3D10_DST_PREDICATION,
} D3D10_DEVICE_STATE_TYPES;
# 81 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10effect.h"
typedef struct _D3D10_STATE_BLOCK_MASK
{
    BYTE VS;
    BYTE VSSamplers[(((( 16 )) + 7) / 8)];
    BYTE VSShaderResources[(((( 128 )) + 7) / 8)];
    BYTE VSConstantBuffers[(((( 14 )) + 7) / 8)];

    BYTE GS;
    BYTE GSSamplers[(((( 16 )) + 7) / 8)];
    BYTE GSShaderResources[(((( 128 )) + 7) / 8)];
    BYTE GSConstantBuffers[(((( 14 )) + 7) / 8)];

    BYTE PS;
    BYTE PSSamplers[(((( 16 )) + 7) / 8)];
    BYTE PSShaderResources[(((( 128 )) + 7) / 8)];
    BYTE PSConstantBuffers[(((( 14 )) + 7) / 8)];

    BYTE IAVertexBuffers[(((( 16 )) + 7) / 8)];
    BYTE IAIndexBuffer;
    BYTE IAInputLayout;
    BYTE IAPrimitiveTopology;

    BYTE OMRenderTargets;
    BYTE OMDepthStencilState;
    BYTE OMBlendState;

    BYTE RSViewports;
    BYTE RSScissorRects;
    BYTE RSRasterizerState;

    BYTE SOBuffers;

    BYTE Predication;
} D3D10_STATE_BLOCK_MASK;





typedef struct ID3D10StateBlock ID3D10StateBlock;
typedef struct ID3D10StateBlock *LPD3D10STATEBLOCK;


extern "C" const GUID IID_ID3D10StateBlock;





struct __declspec(novtable) ID3D10StateBlock : public IUnknown
{
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID *ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall Capture(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall Apply(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall ReleaseAllDeviceObjects(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDevice( ID3D10Device **ppDevice) = 0;
};


extern "C" {
# 171 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10effect.h"
HRESULT __stdcall D3D10StateBlockMaskUnion( D3D10_STATE_BLOCK_MASK *pA, D3D10_STATE_BLOCK_MASK *pB, D3D10_STATE_BLOCK_MASK *pResult);
HRESULT __stdcall D3D10StateBlockMaskIntersect( D3D10_STATE_BLOCK_MASK *pA, D3D10_STATE_BLOCK_MASK *pB, D3D10_STATE_BLOCK_MASK *pResult);
HRESULT __stdcall D3D10StateBlockMaskDifference( D3D10_STATE_BLOCK_MASK *pA, D3D10_STATE_BLOCK_MASK *pB, D3D10_STATE_BLOCK_MASK *pResult);
HRESULT __stdcall D3D10StateBlockMaskEnableCapture( D3D10_STATE_BLOCK_MASK *pMask, D3D10_DEVICE_STATE_TYPES StateType, UINT RangeStart, UINT RangeLength);
HRESULT __stdcall D3D10StateBlockMaskDisableCapture( D3D10_STATE_BLOCK_MASK *pMask, D3D10_DEVICE_STATE_TYPES StateType, UINT RangeStart, UINT RangeLength);
HRESULT __stdcall D3D10StateBlockMaskEnableAll( D3D10_STATE_BLOCK_MASK *pMask);
HRESULT __stdcall D3D10StateBlockMaskDisableAll( D3D10_STATE_BLOCK_MASK *pMask);
BOOL __stdcall D3D10StateBlockMaskGetSetting( D3D10_STATE_BLOCK_MASK *pMask, D3D10_DEVICE_STATE_TYPES StateType, UINT Entry);
# 200 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10effect.h"
HRESULT __stdcall D3D10CreateStateBlock( ID3D10Device *pDevice, D3D10_STATE_BLOCK_MASK *pStateBlockMask, ID3D10StateBlock **ppStateBlock);


}
# 271 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10effect.h"
typedef struct _D3D10_EFFECT_TYPE_DESC
{
    LPCSTR TypeName;


    D3D10_SHADER_VARIABLE_CLASS Class;
    D3D10_SHADER_VARIABLE_TYPE Type;

    UINT Elements;

    UINT Members;

    UINT Rows;

    UINT Columns;


    UINT PackedSize;

    UINT UnpackedSize;

    UINT Stride;

} D3D10_EFFECT_TYPE_DESC;

typedef struct ID3D10EffectType ID3D10EffectType;
typedef struct ID3D10EffectType *LPD3D10EFFECTTYPE;


extern "C" const GUID IID_ID3D10EffectType;





struct __declspec(novtable) ID3D10EffectType
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_TYPE_DESC *pDesc) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetMemberTypeByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetMemberTypeByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetMemberTypeBySemantic( LPCSTR Semantic) = 0;
    virtual __declspec(nothrow) LPCSTR __stdcall GetMemberName( UINT Index) = 0;
    virtual __declspec(nothrow) LPCSTR __stdcall GetMemberSemantic( UINT Index) = 0;
};
# 327 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10effect.h"
typedef struct _D3D10_EFFECT_VARIABLE_DESC
{
    LPCSTR Name;

    LPCSTR Semantic;



    UINT Flags;
    UINT Annotations;


    UINT BufferOffset;



    UINT ExplicitBindPoint;


} D3D10_EFFECT_VARIABLE_DESC;

typedef struct ID3D10EffectVariable ID3D10EffectVariable;
typedef struct ID3D10EffectVariable *LPD3D10EFFECTVARIABLE;


extern "C" const GUID IID_ID3D10EffectVariable;






typedef struct ID3D10EffectScalarVariable ID3D10EffectScalarVariable;
typedef struct ID3D10EffectVectorVariable ID3D10EffectVectorVariable;
typedef struct ID3D10EffectMatrixVariable ID3D10EffectMatrixVariable;
typedef struct ID3D10EffectStringVariable ID3D10EffectStringVariable;
typedef struct ID3D10EffectShaderResourceVariable ID3D10EffectShaderResourceVariable;
typedef struct ID3D10EffectRenderTargetViewVariable ID3D10EffectRenderTargetViewVariable;
typedef struct ID3D10EffectDepthStencilViewVariable ID3D10EffectDepthStencilViewVariable;
typedef struct ID3D10EffectConstantBuffer ID3D10EffectConstantBuffer;
typedef struct ID3D10EffectShaderVariable ID3D10EffectShaderVariable;
typedef struct ID3D10EffectBlendVariable ID3D10EffectBlendVariable;
typedef struct ID3D10EffectDepthStencilVariable ID3D10EffectDepthStencilVariable;
typedef struct ID3D10EffectRasterizerVariable ID3D10EffectRasterizerVariable;
typedef struct ID3D10EffectSamplerVariable ID3D10EffectSamplerVariable;

struct __declspec(novtable) ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;
};





typedef struct ID3D10EffectScalarVariable ID3D10EffectScalarVariable;
typedef struct ID3D10EffectScalarVariable *LPD3D10EFFECTSCALARVARIABLE;


extern "C" const GUID IID_ID3D10EffectScalarVariable;





struct __declspec(novtable) ID3D10EffectScalarVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT ByteOffset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT ByteOffset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetFloat( float Value) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetFloat( float *pValue) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetFloatArray( float *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetFloatArray( float *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetInt( int Value) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetInt( int *pValue) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetIntArray( int *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetIntArray( int *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetBool( BOOL Value) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetBool( BOOL *pValue) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetBoolArray( BOOL *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetBoolArray( BOOL *pData, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectVectorVariable ID3D10EffectVectorVariable;
typedef struct ID3D10EffectVectorVariable *LPD3D10EFFECTVECTORVARIABLE;


extern "C" const GUID IID_ID3D10EffectVectorVariable;





struct __declspec(novtable) ID3D10EffectVectorVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT ByteOffset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT ByteOffset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetBoolVector ( BOOL *pData) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall SetIntVector ( int *pData) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall SetFloatVector( float *pData) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetBoolVector ( BOOL *pData) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetIntVector ( int *pData) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetFloatVector( float *pData) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetBoolVectorArray ( BOOL *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall SetIntVectorArray ( int *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall SetFloatVectorArray( float *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetBoolVectorArray ( BOOL *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetIntVectorArray ( int *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetFloatVectorArray( float *pData, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectMatrixVariable ID3D10EffectMatrixVariable;
typedef struct ID3D10EffectMatrixVariable *LPD3D10EFFECTMATRIXVARIABLE;


extern "C" const GUID IID_ID3D10EffectMatrixVariable;





struct __declspec(novtable) ID3D10EffectMatrixVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT ByteOffset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT ByteOffset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetMatrix( float *pData) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetMatrix( float *pData) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetMatrixArray( float *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetMatrixArray( float *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetMatrixTranspose( float *pData) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetMatrixTranspose( float *pData) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetMatrixTransposeArray( float *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetMatrixTransposeArray( float *pData, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectStringVariable ID3D10EffectStringVariable;
typedef struct ID3D10EffectStringVariable *LPD3D10EFFECTSTRINGVARIABLE;


extern "C" const GUID IID_ID3D10EffectStringVariable;





struct __declspec(novtable) ID3D10EffectStringVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetString( LPCSTR *ppString) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetStringArray( LPCSTR *ppStrings, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectShaderResourceVariable ID3D10EffectShaderResourceVariable;
typedef struct ID3D10EffectShaderResourceVariable *LPD3D10EFFECTSHADERRESOURCEVARIABLE;


extern "C" const GUID IID_ID3D10EffectShaderResourceVariable;






struct __declspec(novtable) ID3D10EffectShaderResourceVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetResource( ID3D10ShaderResourceView *pResource) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetResource( ID3D10ShaderResourceView **ppResource) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetResourceArray( ID3D10ShaderResourceView **ppResources, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetResourceArray( ID3D10ShaderResourceView **ppResources, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectRenderTargetViewVariable ID3D10EffectRenderTargetViewVariable;
typedef struct ID3D10EffectRenderTargetViewVariable *LPD3D10EFFECTRENDERTARGETVIEWVARIABLE;


extern "C" const GUID IID_ID3D10EffectRenderTargetViewVariable;





struct __declspec(novtable) ID3D10EffectRenderTargetViewVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRenderTarget( ID3D10RenderTargetView *pResource) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRenderTarget( ID3D10RenderTargetView **ppResource) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRenderTargetArray( ID3D10RenderTargetView **ppResources, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRenderTargetArray( ID3D10RenderTargetView **ppResources, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectDepthStencilViewVariable ID3D10EffectDepthStencilViewVariable;
typedef struct ID3D10EffectDepthStencilViewVariable *LPD3D10EFFECTDEPTHSTENCILVIEWVARIABLE;


extern "C" const GUID IID_ID3D10EffectDepthStencilViewVariable;





struct __declspec(novtable) ID3D10EffectDepthStencilViewVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetDepthStencil( ID3D10DepthStencilView *pResource) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDepthStencil( ID3D10DepthStencilView **ppResource) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetDepthStencilArray( ID3D10DepthStencilView **ppResources, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDepthStencilArray( ID3D10DepthStencilView **ppResources, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectConstantBuffer ID3D10EffectConstantBuffer;
typedef struct ID3D10EffectConstantBuffer *LPD3D10EFFECTCONSTANTBUFFER;


extern "C" const GUID IID_ID3D10EffectConstantBuffer;





struct __declspec(novtable) ID3D10EffectConstantBuffer : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetConstantBuffer( ID3D10Buffer *pConstantBuffer) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetConstantBuffer( ID3D10Buffer **ppConstantBuffer) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetTextureBuffer( ID3D10ShaderResourceView *pTextureBuffer) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetTextureBuffer( ID3D10ShaderResourceView **ppTextureBuffer) = 0;
};
# 883 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10effect.h"
typedef struct _D3D10_EFFECT_SHADER_DESC
{
    const BYTE *pInputSignature;


    BOOL IsInline;




    const BYTE *pBytecode;
    UINT BytecodeLength;

    LPCSTR SODecl;

    UINT NumInputSignatureEntries;
    UINT NumOutputSignatureEntries;
} D3D10_EFFECT_SHADER_DESC;


typedef struct ID3D10EffectShaderVariable ID3D10EffectShaderVariable;
typedef struct ID3D10EffectShaderVariable *LPD3D10EFFECTSHADERVARIABLE;


extern "C" const GUID IID_ID3D10EffectShaderVariable;





struct __declspec(novtable) ID3D10EffectShaderVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetShaderDesc( UINT ShaderIndex, D3D10_EFFECT_SHADER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetVertexShader( UINT ShaderIndex, ID3D10VertexShader **ppVS) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetGeometryShader( UINT ShaderIndex, ID3D10GeometryShader **ppGS) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetPixelShader( UINT ShaderIndex, ID3D10PixelShader **ppPS) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetInputSignatureElementDesc( UINT ShaderIndex, UINT Element, D3D10_SIGNATURE_PARAMETER_DESC *pDesc) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetOutputSignatureElementDesc( UINT ShaderIndex, UINT Element, D3D10_SIGNATURE_PARAMETER_DESC *pDesc) = 0;
};





typedef struct ID3D10EffectBlendVariable ID3D10EffectBlendVariable;
typedef struct ID3D10EffectBlendVariable *LPD3D10EFFECTBLENDVARIABLE;


extern "C" const GUID IID_ID3D10EffectBlendVariable;





struct __declspec(novtable) ID3D10EffectBlendVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetBlendState( UINT Index, ID3D10BlendState **ppBlendState) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetBackingStore( UINT Index, D3D10_BLEND_DESC *pBlendDesc) = 0;
};





typedef struct ID3D10EffectDepthStencilVariable ID3D10EffectDepthStencilVariable;
typedef struct ID3D10EffectDepthStencilVariable *LPD3D10EFFECTDEPTHSTENCILVARIABLE;


extern "C" const GUID IID_ID3D10EffectDepthStencilVariable;





struct __declspec(novtable) ID3D10EffectDepthStencilVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetDepthStencilState( UINT Index, ID3D10DepthStencilState **ppDepthStencilState) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetBackingStore( UINT Index, D3D10_DEPTH_STENCIL_DESC *pDepthStencilDesc) = 0;
};





typedef struct ID3D10EffectRasterizerVariable ID3D10EffectRasterizerVariable;
typedef struct ID3D10EffectRasterizerVariable *LPD3D10EFFECTRASTERIZERVARIABLE;


extern "C" const GUID IID_ID3D10EffectRasterizerVariable;





struct __declspec(novtable) ID3D10EffectRasterizerVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetRasterizerState( UINT Index, ID3D10RasterizerState **ppRasterizerState) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetBackingStore( UINT Index, D3D10_RASTERIZER_DESC *pRasterizerDesc) = 0;
};





typedef struct ID3D10EffectSamplerVariable ID3D10EffectSamplerVariable;
typedef struct ID3D10EffectSamplerVariable *LPD3D10EFFECTSAMPLERVARIABLE;


extern "C" const GUID IID_ID3D10EffectSamplerVariable;





struct __declspec(novtable) ID3D10EffectSamplerVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetSampler( UINT Index, ID3D10SamplerState **ppSampler) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetBackingStore( UINT Index, D3D10_SAMPLER_DESC *pSamplerDesc) = 0;
};
# 1170 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10effect.h"
typedef struct _D3D10_PASS_DESC
{
    LPCSTR Name;
    UINT Annotations;

    BYTE *pIAInputSignature;

    SIZE_T IAInputSignatureSize;

    UINT StencilRef;
    UINT SampleMask;
    FLOAT BlendFactor[4];
} D3D10_PASS_DESC;







typedef struct _D3D10_PASS_SHADER_DESC
{
    ID3D10EffectShaderVariable *pShaderVariable;
# 1203 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10effect.h"
    UINT ShaderIndex;

} D3D10_PASS_SHADER_DESC;

typedef struct ID3D10EffectPass ID3D10EffectPass;
typedef struct ID3D10EffectPass *LPD3D10EFFECTPASS;


extern "C" const GUID IID_ID3D10EffectPass;





struct __declspec(novtable) ID3D10EffectPass
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_PASS_DESC *pDesc) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetVertexShaderDesc( D3D10_PASS_SHADER_DESC *pDesc) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetGeometryShaderDesc( D3D10_PASS_SHADER_DESC *pDesc) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetPixelShaderDesc( D3D10_PASS_SHADER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall Apply( UINT Flags) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall ComputeStateBlockMask( D3D10_STATE_BLOCK_MASK *pStateBlockMask) = 0;
};
# 1244 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10effect.h"
typedef struct _D3D10_TECHNIQUE_DESC
{
    LPCSTR Name;
    UINT Passes;
    UINT Annotations;
} D3D10_TECHNIQUE_DESC;

typedef struct ID3D10EffectTechnique ID3D10EffectTechnique;
typedef struct ID3D10EffectTechnique *LPD3D10EFFECTTECHNIQUE;


extern "C" const GUID IID_ID3D10EffectTechnique;





struct __declspec(novtable) ID3D10EffectTechnique
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_TECHNIQUE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectPass* __stdcall GetPassByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectPass* __stdcall GetPassByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall ComputeStateBlockMask( D3D10_STATE_BLOCK_MASK *pStateBlockMask) = 0;
};
# 1285 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10effect.h"
typedef struct _D3D10_EFFECT_DESC
{

    BOOL IsChildEffect;


    UINT ConstantBuffers;

    UINT SharedConstantBuffers;


    UINT GlobalVariables;

    UINT SharedGlobalVariables;


    UINT Techniques;

} D3D10_EFFECT_DESC;

typedef struct ID3D10Effect ID3D10Effect;
typedef struct ID3D10Effect *LPD3D10EFFECT;


extern "C" const GUID IID_ID3D10Effect;





struct __declspec(novtable) ID3D10Effect : public IUnknown
{

    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID *ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) BOOL __stdcall IsPool(void) = 0;


    virtual __declspec(nothrow) HRESULT __stdcall GetDevice( ID3D10Device** ppDevice) = 0;


    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetConstantBufferByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetConstantBufferByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetVariableByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetVariableByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetVariableBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectTechnique* __stdcall GetTechniqueByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectTechnique* __stdcall GetTechniqueByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall Optimize(void) = 0;
    virtual __declspec(nothrow) BOOL __stdcall IsOptimized(void) = 0;

};





typedef struct ID3D10EffectPool ID3D10EffectPool;
typedef struct ID3D10EffectPool *LPD3D10EFFECTPOOL;


extern "C" const GUID IID_ID3D10EffectPool;





struct __declspec(novtable) ID3D10EffectPool : public IUnknown
{

    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID *ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    virtual __declspec(nothrow) ID3D10Effect* __stdcall AsEffect(void) = 0;


};






extern "C" {
# 1427 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10effect.h"
HRESULT __stdcall D3D10CompileEffectFromMemory( void *pData, SIZE_T DataLength, LPCSTR pSrcFileName, const D3D10_SHADER_MACRO *pDefines,
             ID3D10Include *pInclude, UINT HLSLFlags, UINT FXFlags,
          ID3D10Blob **ppCompiledEffect, ID3D10Blob **ppErrors);

HRESULT __stdcall D3D10CreateEffectFromMemory( void *pData, SIZE_T DataLength, UINT FXFlags, ID3D10Device *pDevice,
             ID3D10EffectPool *pEffectPool, ID3D10Effect **ppEffect);

HRESULT __stdcall D3D10CreateEffectPoolFromMemory( void *pData, SIZE_T DataLength, UINT FXFlags, ID3D10Device *pDevice,
          ID3D10EffectPool **ppEffectPool);
# 1452 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10effect.h"
HRESULT __stdcall D3D10DisassembleEffect( ID3D10Effect *pEffect, BOOL EnableColorCode, ID3D10Blob **ppDisassembly);


}
# 6778 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10.h" 2



extern "C" const GUID IID_ID3D10DeviceChild;
extern "C" const GUID IID_ID3D10DepthStencilState;
extern "C" const GUID IID_ID3D10BlendState;
extern "C" const GUID IID_ID3D10RasterizerState;
extern "C" const GUID IID_ID3D10Resource;
extern "C" const GUID IID_ID3D10Buffer;
extern "C" const GUID IID_ID3D10Texture1D;
extern "C" const GUID IID_ID3D10Texture2D;
extern "C" const GUID IID_ID3D10Texture3D;
extern "C" const GUID IID_ID3D10View;
extern "C" const GUID IID_ID3D10ShaderResourceView;
extern "C" const GUID IID_ID3D10RenderTargetView;
extern "C" const GUID IID_ID3D10DepthStencilView;
extern "C" const GUID IID_ID3D10VertexShader;
extern "C" const GUID IID_ID3D10GeometryShader;
extern "C" const GUID IID_ID3D10PixelShader;
extern "C" const GUID IID_ID3D10InputLayout;
extern "C" const GUID IID_ID3D10SamplerState;
extern "C" const GUID IID_ID3D10Asynchronous;
extern "C" const GUID IID_ID3D10Query;
extern "C" const GUID IID_ID3D10Predicate;
extern "C" const GUID IID_ID3D10Counter;
extern "C" const GUID IID_ID3D10Device;
extern "C" const GUID IID_ID3D10Multithread;


extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0024_v0_0_s_ifspec;






}
# 129 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h" 2




typedef
enum D3D10_FEATURE_LEVEL1
    {
        D3D10_FEATURE_LEVEL_10_0 = 0xa000,
        D3D10_FEATURE_LEVEL_10_1 = 0xa100,
        D3D10_FEATURE_LEVEL_9_1 = 0x9100,
        D3D10_FEATURE_LEVEL_9_2 = 0x9200,
        D3D10_FEATURE_LEVEL_9_3 = 0x9300
    } D3D10_FEATURE_LEVEL1;

typedef struct D3D10_RENDER_TARGET_BLEND_DESC1
    {
    BOOL BlendEnable;
    D3D10_BLEND SrcBlend;
    D3D10_BLEND DestBlend;
    D3D10_BLEND_OP BlendOp;
    D3D10_BLEND SrcBlendAlpha;
    D3D10_BLEND DestBlendAlpha;
    D3D10_BLEND_OP BlendOpAlpha;
    UINT8 RenderTargetWriteMask;
    } D3D10_RENDER_TARGET_BLEND_DESC1;

typedef struct D3D10_BLEND_DESC1
    {
    BOOL AlphaToCoverageEnable;
    BOOL IndependentBlendEnable;
    D3D10_RENDER_TARGET_BLEND_DESC1 RenderTarget[ 8 ];
    } D3D10_BLEND_DESC1;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0000_v0_0_s_ifspec;
# 174 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h"
extern "C" const IID IID_ID3D10BlendState1;



    struct __declspec(uuid("EDAD8D99-8A35-4d6d-8566-2EA276CDE161")) __declspec(novtable)
    ID3D10BlendState1 : public ID3D10BlendState
    {
    public:
        virtual void __stdcall GetDesc1(

                   D3D10_BLEND_DESC1 *pDesc) = 0;

    };
# 304 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h"
typedef struct D3D10_TEXCUBE_ARRAY_SRV1
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT First2DArrayFace;
    UINT NumCubes;
    } D3D10_TEXCUBE_ARRAY_SRV1;

typedef D3D_SRV_DIMENSION D3D10_SRV_DIMENSION1;

typedef struct D3D10_SHADER_RESOURCE_VIEW_DESC1
    {
    DXGI_FORMAT Format;
    D3D10_SRV_DIMENSION1 ViewDimension;
    union
        {
        D3D10_BUFFER_SRV Buffer;
        D3D10_TEX1D_SRV Texture1D;
        D3D10_TEX1D_ARRAY_SRV Texture1DArray;
        D3D10_TEX2D_SRV Texture2D;
        D3D10_TEX2D_ARRAY_SRV Texture2DArray;
        D3D10_TEX2DMS_SRV Texture2DMS;
        D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        D3D10_TEX3D_SRV Texture3D;
        D3D10_TEXCUBE_SRV TextureCube;
        D3D10_TEXCUBE_ARRAY_SRV1 TextureCubeArray;
        } ;
    } D3D10_SHADER_RESOURCE_VIEW_DESC1;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0001_v0_0_s_ifspec;
# 345 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h"
extern "C" const IID IID_ID3D10ShaderResourceView1;



    struct __declspec(uuid("9B7E4C87-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10ShaderResourceView1 : public ID3D10ShaderResourceView
    {
    public:
        virtual void __stdcall GetDesc1(

                   D3D10_SHADER_RESOURCE_VIEW_DESC1 *pDesc) = 0;

    };
# 484 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h"
typedef
enum D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS
    {
        D3D10_STANDARD_MULTISAMPLE_PATTERN = 0xffffffff,
        D3D10_CENTER_MULTISAMPLE_PATTERN = 0xfffffffe
    } D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0002_v0_0_s_ifspec;
# 503 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h"
extern "C" const IID IID_ID3D10Device1;



    struct __declspec(uuid("9B7E4C8F-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Device1 : public ID3D10Device
    {
    public:
        virtual HRESULT __stdcall CreateShaderResourceView1(

                  ID3D10Resource *pResource,

                      const D3D10_SHADER_RESOURCE_VIEW_DESC1 *pDesc,

                       ID3D10ShaderResourceView1 **ppSRView) = 0;

        virtual HRESULT __stdcall CreateBlendState1(

                  const D3D10_BLEND_DESC1 *pBlendStateDesc,

                       ID3D10BlendState1 **ppBlendState) = 0;

        virtual D3D10_FEATURE_LEVEL1 __stdcall GetFeatureLevel( void) = 0;

    };
# 1673 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1shader.h" 1
# 23 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1shader.h"
typedef enum _D3D10_SHADER_DEBUG_REGTYPE
{
    D3D10_SHADER_DEBUG_REG_INPUT,
    D3D10_SHADER_DEBUG_REG_OUTPUT,
    D3D10_SHADER_DEBUG_REG_CBUFFER,
    D3D10_SHADER_DEBUG_REG_TBUFFER,
    D3D10_SHADER_DEBUG_REG_TEMP,
    D3D10_SHADER_DEBUG_REG_TEMPARRAY,
    D3D10_SHADER_DEBUG_REG_TEXTURE,
    D3D10_SHADER_DEBUG_REG_SAMPLER,
    D3D10_SHADER_DEBUG_REG_IMMEDIATECBUFFER,
    D3D10_SHADER_DEBUG_REG_LITERAL,
    D3D10_SHADER_DEBUG_REG_UNUSED,
    D3D11_SHADER_DEBUG_REG_INTERFACE_POINTERS,
    D3D11_SHADER_DEBUG_REG_UAV,
    D3D10_SHADER_DEBUG_REG_FORCE_DWORD = 0x7fffffff,
} D3D10_SHADER_DEBUG_REGTYPE;

typedef enum _D3D10_SHADER_DEBUG_SCOPETYPE
{
    D3D10_SHADER_DEBUG_SCOPE_GLOBAL,
    D3D10_SHADER_DEBUG_SCOPE_BLOCK,
    D3D10_SHADER_DEBUG_SCOPE_FORLOOP,
    D3D10_SHADER_DEBUG_SCOPE_STRUCT,
    D3D10_SHADER_DEBUG_SCOPE_FUNC_PARAMS,
    D3D10_SHADER_DEBUG_SCOPE_STATEBLOCK,
    D3D10_SHADER_DEBUG_SCOPE_NAMESPACE,
    D3D10_SHADER_DEBUG_SCOPE_ANNOTATION,
    D3D10_SHADER_DEBUG_SCOPE_FORCE_DWORD = 0x7fffffff,
} D3D10_SHADER_DEBUG_SCOPETYPE;

typedef enum _D3D10_SHADER_DEBUG_VARTYPE
{
    D3D10_SHADER_DEBUG_VAR_VARIABLE,
    D3D10_SHADER_DEBUG_VAR_FUNCTION,
    D3D10_SHADER_DEBUG_VAR_FORCE_DWORD = 0x7fffffff,
} D3D10_SHADER_DEBUG_VARTYPE;





typedef struct _D3D10_SHADER_DEBUG_TOKEN_INFO
{
    UINT File;
    UINT Line;
    UINT Column;

    UINT TokenLength;
    UINT TokenId;
} D3D10_SHADER_DEBUG_TOKEN_INFO;


typedef struct _D3D10_SHADER_DEBUG_VAR_INFO
{

    UINT TokenId;
    D3D10_SHADER_VARIABLE_TYPE Type;

    UINT Register;
    UINT Component;

    UINT ScopeVar;

    UINT ScopeVarOffset;
} D3D10_SHADER_DEBUG_VAR_INFO;

typedef struct _D3D10_SHADER_DEBUG_INPUT_INFO
{

    UINT Var;

    D3D10_SHADER_DEBUG_REGTYPE InitialRegisterSet;


    UINT InitialBank;

    UINT InitialRegister;

    UINT InitialComponent;

    UINT InitialValue;
} D3D10_SHADER_DEBUG_INPUT_INFO;

typedef struct _D3D10_SHADER_DEBUG_SCOPEVAR_INFO
{

    UINT TokenId;

    D3D10_SHADER_DEBUG_VARTYPE VarType;
    D3D10_SHADER_VARIABLE_CLASS Class;
    UINT Rows;
    UINT Columns;







    UINT StructMemberScope;


    UINT uArrayIndices;


    UINT ArrayElements;


    UINT ArrayStrides;

    UINT uVariables;

    UINT uFirstVariable;
} D3D10_SHADER_DEBUG_SCOPEVAR_INFO;


typedef struct _D3D10_SHADER_DEBUG_SCOPE_INFO
{
    D3D10_SHADER_DEBUG_SCOPETYPE ScopeType;
    UINT Name;
    UINT uNameLen;
    UINT uVariables;
    UINT VariableData;
} D3D10_SHADER_DEBUG_SCOPE_INFO;


typedef struct _D3D10_SHADER_DEBUG_OUTPUTVAR
{

    UINT Var;

    UINT uValueMin, uValueMax;
    INT iValueMin, iValueMax;
    FLOAT fValueMin, fValueMax;

    BOOL bNaNPossible, bInfPossible;
} D3D10_SHADER_DEBUG_OUTPUTVAR;

typedef struct _D3D10_SHADER_DEBUG_OUTPUTREG_INFO
{

    D3D10_SHADER_DEBUG_REGTYPE OutputRegisterSet;

    UINT OutputReg;

    UINT TempArrayReg;

    UINT OutputComponents[4];
    D3D10_SHADER_DEBUG_OUTPUTVAR OutputVars[4];





    UINT IndexReg;
    UINT IndexComp;
} D3D10_SHADER_DEBUG_OUTPUTREG_INFO;


typedef struct _D3D10_SHADER_DEBUG_INST_INFO
{
    UINT Id;
    UINT Opcode;


    UINT uOutputs;


    D3D10_SHADER_DEBUG_OUTPUTREG_INFO pOutputs[2];


    UINT TokenId;


    UINT NestingLevel;



    UINT Scopes;
    UINT ScopeInfo;



    UINT AccessedVars;
    UINT AccessedVarsInfo;
} D3D10_SHADER_DEBUG_INST_INFO;

typedef struct _D3D10_SHADER_DEBUG_FILE_INFO
{
    UINT FileName;
    UINT FileNameLen;
    UINT FileData;
    UINT FileLen;
} D3D10_SHADER_DEBUG_FILE_INFO;

typedef struct _D3D10_SHADER_DEBUG_INFO
{
    UINT Size;
    UINT Creator;
    UINT EntrypointName;
    UINT ShaderTarget;
    UINT CompileFlags;
    UINT Files;
    UINT FileInfo;
    UINT Instructions;
    UINT InstructionInfo;
    UINT Variables;
    UINT VariableInfo;
    UINT InputVariables;
    UINT InputVariableInfo;
    UINT Tokens;
    UINT TokenInfo;
    UINT Scopes;
    UINT ScopeInfo;
    UINT ScopeVariables;
    UINT ScopeVariableInfo;
    UINT UintOffset;
    UINT StringOffset;
} D3D10_SHADER_DEBUG_INFO;
# 253 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1shader.h"
typedef struct ID3D10ShaderReflection1 ID3D10ShaderReflection1;
typedef struct ID3D10ShaderReflection1 *LPD3D10SHADERREFLECTION1;


extern "C" const GUID IID_ID3D10ShaderReflection1;





struct __declspec(novtable) ID3D10ShaderReflection1 : public IUnknown
{
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID *ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_SHADER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10ShaderReflectionConstantBuffer* __stdcall GetConstantBufferByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10ShaderReflectionConstantBuffer* __stdcall GetConstantBufferByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetResourceBindingDesc( UINT ResourceIndex, D3D10_SHADER_INPUT_BIND_DESC *pDesc) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetInputParameterDesc( UINT ParameterIndex, D3D10_SIGNATURE_PARAMETER_DESC *pDesc) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetOutputParameterDesc( UINT ParameterIndex, D3D10_SIGNATURE_PARAMETER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10ShaderReflectionVariable* __stdcall GetVariableByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetResourceBindingDescByName( LPCSTR Name, D3D10_SHADER_INPUT_BIND_DESC *pDesc) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetMovInstructionCount( UINT* pCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetMovcInstructionCount( UINT* pCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetConversionInstructionCount( UINT* pCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetBitwiseInstructionCount( UINT* pCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetGSInputPrimitive( D3D10_PRIMITIVE* pPrim) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall IsLevel9Shader( BOOL* pbLevel9Shader) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall IsSampleFrequencyShader( BOOL* pbSampleFrequency) = 0;
};






extern "C" {



}
# 1673 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h" 2
# 1708 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h"
typedef HRESULT (__stdcall* PFN_D3D10_CREATE_DEVICE1)(IDXGIAdapter *,
    D3D10_DRIVER_TYPE, HMODULE, UINT, D3D10_FEATURE_LEVEL1, UINT, ID3D10Device1**);

HRESULT __stdcall D3D10CreateDevice1(
             IDXGIAdapter *pAdapter,
    D3D10_DRIVER_TYPE DriverType,
    HMODULE Software,
    UINT Flags,
    D3D10_FEATURE_LEVEL1 HardwareLevel,
    UINT SDKVersion,
              ID3D10Device1 **ppDevice);
# 1760 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d10_1.h"
typedef HRESULT (__stdcall* PFN_D3D10_CREATE_DEVICE_AND_SWAP_CHAIN1)(IDXGIAdapter *,
    D3D10_DRIVER_TYPE, HMODULE, UINT, D3D10_FEATURE_LEVEL1, UINT, DXGI_SWAP_CHAIN_DESC *, IDXGISwapChain **, ID3D10Device1 **);

HRESULT __stdcall D3D10CreateDeviceAndSwapChain1(
             IDXGIAdapter *pAdapter,
    D3D10_DRIVER_TYPE DriverType,
    HMODULE Software,
    UINT Flags,
    D3D10_FEATURE_LEVEL1 HardwareLevel,
    UINT SDKVersion,
             DXGI_SWAP_CHAIN_DESC *pSwapChainDesc,
              IDXGISwapChain **ppSwapChain,
              ID3D10Device1 **ppDevice);



extern "C" const GUID IID_ID3D10BlendState1;
extern "C" const GUID IID_ID3D10ShaderResourceView1;
extern "C" const GUID IID_ID3D10Device1;


extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0003_v0_0_s_ifspec;






}
# 14323 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h" 2
# 14372 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef HRESULT (__stdcall* PFN_D3D11_CREATE_DEVICE)( IDXGIAdapter*,
    D3D_DRIVER_TYPE, HMODULE, UINT,
                                    const D3D_FEATURE_LEVEL*,
    UINT FeatureLevels, UINT, ID3D11Device**,
              D3D_FEATURE_LEVEL*, ID3D11DeviceContext** );

HRESULT __stdcall D3D11CreateDevice(
             IDXGIAdapter* pAdapter,
    D3D_DRIVER_TYPE DriverType,
    HMODULE Software,
    UINT Flags,
                                    const D3D_FEATURE_LEVEL* pFeatureLevels,
    UINT FeatureLevels,
    UINT SDKVersion,
              ID3D11Device** ppDevice,
              D3D_FEATURE_LEVEL* pFeatureLevel,
              ID3D11DeviceContext** ppImmediateContext );
# 14445 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11.h"
typedef HRESULT (__stdcall* PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN)( IDXGIAdapter*,
    D3D_DRIVER_TYPE, HMODULE, UINT,
                                    const D3D_FEATURE_LEVEL*,
    UINT FeatureLevels, UINT, const DXGI_SWAP_CHAIN_DESC*,
              IDXGISwapChain**, ID3D11Device**,
              D3D_FEATURE_LEVEL*, ID3D11DeviceContext** );

HRESULT __stdcall D3D11CreateDeviceAndSwapChain(
             IDXGIAdapter* pAdapter,
    D3D_DRIVER_TYPE DriverType,
    HMODULE Software,
    UINT Flags,
                                    const D3D_FEATURE_LEVEL* pFeatureLevels,
    UINT FeatureLevels,
    UINT SDKVersion,
             const DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,
              IDXGISwapChain** ppSwapChain,
              ID3D11Device** ppDevice,
              D3D_FEATURE_LEVEL* pFeatureLevel,
              ID3D11DeviceContext** ppImmediateContext );



extern "C" const GUID IID_ID3D11DeviceChild;
extern "C" const GUID IID_ID3D11DepthStencilState;
extern "C" const GUID IID_ID3D11BlendState;
extern "C" const GUID IID_ID3D11RasterizerState;
extern "C" const GUID IID_ID3D11Resource;
extern "C" const GUID IID_ID3D11Buffer;
extern "C" const GUID IID_ID3D11Texture1D;
extern "C" const GUID IID_ID3D11Texture2D;
extern "C" const GUID IID_ID3D11Texture3D;
extern "C" const GUID IID_ID3D11View;
extern "C" const GUID IID_ID3D11ShaderResourceView;
extern "C" const GUID IID_ID3D11RenderTargetView;
extern "C" const GUID IID_ID3D11DepthStencilView;
extern "C" const GUID IID_ID3D11UnorderedAccessView;
extern "C" const GUID IID_ID3D11VertexShader;
extern "C" const GUID IID_ID3D11HullShader;
extern "C" const GUID IID_ID3D11DomainShader;
extern "C" const GUID IID_ID3D11GeometryShader;
extern "C" const GUID IID_ID3D11PixelShader;
extern "C" const GUID IID_ID3D11ComputeShader;
extern "C" const GUID IID_ID3D11InputLayout;
extern "C" const GUID IID_ID3D11SamplerState;
extern "C" const GUID IID_ID3D11Asynchronous;
extern "C" const GUID IID_ID3D11Query;
extern "C" const GUID IID_ID3D11Predicate;
extern "C" const GUID IID_ID3D11Counter;
extern "C" const GUID IID_ID3D11ClassInstance;
extern "C" const GUID IID_ID3D11ClassLinkage;
extern "C" const GUID IID_ID3D11CommandList;
extern "C" const GUID IID_ID3D11DeviceContext;
extern "C" const GUID IID_ID3D11VideoDecoder;
extern "C" const GUID IID_ID3D11VideoProcessorEnumerator;
extern "C" const GUID IID_ID3D11VideoProcessor;
extern "C" const GUID IID_ID3D11AuthenticatedChannel;
extern "C" const GUID IID_ID3D11CryptoSession;
extern "C" const GUID IID_ID3D11VideoDecoderOutputView;
extern "C" const GUID IID_ID3D11VideoProcessorInputView;
extern "C" const GUID IID_ID3D11VideoProcessorOutputView;
extern "C" const GUID IID_ID3D11VideoContext;
extern "C" const GUID IID_ID3D11VideoDevice;
extern "C" const GUID IID_ID3D11Device;


extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0041_v0_0_s_ifspec;






}
# 107 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11_1.h" 2


extern "C"{

typedef
enum D3D11_COPY_FLAGS
    {
        D3D11_COPY_NO_OVERWRITE = 0x1,
        D3D11_COPY_DISCARD = 0x2
    } D3D11_COPY_FLAGS;

typedef
enum D3D11_LOGIC_OP
    {
        D3D11_LOGIC_OP_CLEAR = 0,
        D3D11_LOGIC_OP_SET = ( D3D11_LOGIC_OP_CLEAR + 1 ) ,
        D3D11_LOGIC_OP_COPY = ( D3D11_LOGIC_OP_SET + 1 ) ,
        D3D11_LOGIC_OP_COPY_INVERTED = ( D3D11_LOGIC_OP_COPY + 1 ) ,
        D3D11_LOGIC_OP_NOOP = ( D3D11_LOGIC_OP_COPY_INVERTED + 1 ) ,
        D3D11_LOGIC_OP_INVERT = ( D3D11_LOGIC_OP_NOOP + 1 ) ,
        D3D11_LOGIC_OP_AND = ( D3D11_LOGIC_OP_INVERT + 1 ) ,
        D3D11_LOGIC_OP_NAND = ( D3D11_LOGIC_OP_AND + 1 ) ,
        D3D11_LOGIC_OP_OR = ( D3D11_LOGIC_OP_NAND + 1 ) ,
        D3D11_LOGIC_OP_NOR = ( D3D11_LOGIC_OP_OR + 1 ) ,
        D3D11_LOGIC_OP_XOR = ( D3D11_LOGIC_OP_NOR + 1 ) ,
        D3D11_LOGIC_OP_EQUIV = ( D3D11_LOGIC_OP_XOR + 1 ) ,
        D3D11_LOGIC_OP_AND_REVERSE = ( D3D11_LOGIC_OP_EQUIV + 1 ) ,
        D3D11_LOGIC_OP_AND_INVERTED = ( D3D11_LOGIC_OP_AND_REVERSE + 1 ) ,
        D3D11_LOGIC_OP_OR_REVERSE = ( D3D11_LOGIC_OP_AND_INVERTED + 1 ) ,
        D3D11_LOGIC_OP_OR_INVERTED = ( D3D11_LOGIC_OP_OR_REVERSE + 1 )
    } D3D11_LOGIC_OP;

typedef struct D3D11_RENDER_TARGET_BLEND_DESC1
    {
    BOOL BlendEnable;
    BOOL LogicOpEnable;
    D3D11_BLEND SrcBlend;
    D3D11_BLEND DestBlend;
    D3D11_BLEND_OP BlendOp;
    D3D11_BLEND SrcBlendAlpha;
    D3D11_BLEND DestBlendAlpha;
    D3D11_BLEND_OP BlendOpAlpha;
    D3D11_LOGIC_OP LogicOp;
    UINT8 RenderTargetWriteMask;
    } D3D11_RENDER_TARGET_BLEND_DESC1;

typedef struct D3D11_BLEND_DESC1
    {
    BOOL AlphaToCoverageEnable;
    BOOL IndependentBlendEnable;
    D3D11_RENDER_TARGET_BLEND_DESC1 RenderTarget[ 8 ];
    } D3D11_BLEND_DESC1;




}
struct CD3D11_BLEND_DESC1 : public D3D11_BLEND_DESC1
{
    CD3D11_BLEND_DESC1()
    {}
    explicit CD3D11_BLEND_DESC1( const D3D11_BLEND_DESC1& o ) :
        D3D11_BLEND_DESC1( o )
    {}
    explicit CD3D11_BLEND_DESC1( CD3D11_DEFAULT )
    {
        AlphaToCoverageEnable = 0;
        IndependentBlendEnable = 0;
        const D3D11_RENDER_TARGET_BLEND_DESC1 defaultRenderTargetBlendDesc =
        {
            0,0,
            D3D11_BLEND_ONE, D3D11_BLEND_ZERO, D3D11_BLEND_OP_ADD,
            D3D11_BLEND_ONE, D3D11_BLEND_ZERO, D3D11_BLEND_OP_ADD,
            D3D11_LOGIC_OP_NOOP,
            D3D11_COLOR_WRITE_ENABLE_ALL,
        };
        for (UINT i = 0; i < ( 8 ); ++i)
            RenderTarget[ i ] = defaultRenderTargetBlendDesc;
    }
    ~CD3D11_BLEND_DESC1() {}
    operator const D3D11_BLEND_DESC1&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_1_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_1_0000_0000_v0_0_s_ifspec;
# 203 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11_1.h"
extern "C" const IID IID_ID3D11BlendState1;



    struct __declspec(uuid("cc86fabe-da55-401d-85e7-e3c9de2877e9")) __declspec(novtable)
    ID3D11BlendState1 : public ID3D11BlendState
    {
    public:
        virtual void __stdcall GetDesc1(

                   D3D11_BLEND_DESC1 *pDesc) = 0;

    };
# 333 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11_1.h"
typedef struct D3D11_RASTERIZER_DESC1
    {
    D3D11_FILL_MODE FillMode;
    D3D11_CULL_MODE CullMode;
    BOOL FrontCounterClockwise;
    INT DepthBias;
    FLOAT DepthBiasClamp;
    FLOAT SlopeScaledDepthBias;
    BOOL DepthClipEnable;
    BOOL ScissorEnable;
    BOOL MultisampleEnable;
    BOOL AntialiasedLineEnable;
    UINT ForcedSampleCount;
    } D3D11_RASTERIZER_DESC1;


}
struct CD3D11_RASTERIZER_DESC1 : public D3D11_RASTERIZER_DESC1
{
    CD3D11_RASTERIZER_DESC1()
    {}
    explicit CD3D11_RASTERIZER_DESC1( const D3D11_RASTERIZER_DESC1& o ) :
        D3D11_RASTERIZER_DESC1( o )
    {}
    explicit CD3D11_RASTERIZER_DESC1( CD3D11_DEFAULT )
    {
        FillMode = D3D11_FILL_SOLID;
        CullMode = D3D11_CULL_BACK;
        FrontCounterClockwise = 0;
        DepthBias = ( 0 );
        DepthBiasClamp = ( 0.0f );
        SlopeScaledDepthBias = ( 0.0f );
        DepthClipEnable = 1;
        ScissorEnable = 0;
        MultisampleEnable = 0;
        AntialiasedLineEnable = 0;
        ForcedSampleCount = 0;
    }
    explicit CD3D11_RASTERIZER_DESC1(
        D3D11_FILL_MODE fillMode,
        D3D11_CULL_MODE cullMode,
        BOOL frontCounterClockwise,
        INT depthBias,
        FLOAT depthBiasClamp,
        FLOAT slopeScaledDepthBias,
        BOOL depthClipEnable,
        BOOL scissorEnable,
        BOOL multisampleEnable,
        BOOL antialiasedLineEnable,
        UINT forcedSampleCount )
    {
        FillMode = fillMode;
        CullMode = cullMode;
        FrontCounterClockwise = frontCounterClockwise;
        DepthBias = depthBias;
        DepthBiasClamp = depthBiasClamp;
        SlopeScaledDepthBias = slopeScaledDepthBias;
        DepthClipEnable = depthClipEnable;
        ScissorEnable = scissorEnable;
        MultisampleEnable = multisampleEnable;
        AntialiasedLineEnable = antialiasedLineEnable;
        ForcedSampleCount = forcedSampleCount;
    }
    ~CD3D11_RASTERIZER_DESC1() {}
    operator const D3D11_RASTERIZER_DESC1&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_1_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_1_0000_0001_v0_0_s_ifspec;
# 413 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11_1.h"
extern "C" const IID IID_ID3D11RasterizerState1;



    struct __declspec(uuid("1217d7a6-5039-418c-b042-9cbe256afd6e")) __declspec(novtable)
    ID3D11RasterizerState1 : public ID3D11RasterizerState
    {
    public:
        virtual void __stdcall GetDesc1(

                   D3D11_RASTERIZER_DESC1 *pDesc) = 0;

    };
# 543 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11_1.h"
typedef
enum D3D11_1_CREATE_DEVICE_CONTEXT_STATE_FLAG
    {
        D3D11_1_CREATE_DEVICE_CONTEXT_STATE_SINGLETHREADED = 0x1
    } D3D11_1_CREATE_DEVICE_CONTEXT_STATE_FLAG;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_1_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_1_0000_0002_v0_0_s_ifspec;
# 561 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11_1.h"
extern "C" const IID IID_ID3DDeviceContextState;



    struct __declspec(uuid("5c1e0d8a-7c23-48f9-8c59-a92958ceff11")) __declspec(novtable)
    ID3DDeviceContextState : public ID3D11DeviceChild
    {
    public:
    };
# 674 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11_1.h"
extern "C" const IID IID_ID3D11DeviceContext1;



    struct __declspec(uuid("bb2c6faa-b5fb-4082-8e6b-388b8cfa90e1")) __declspec(novtable)
    ID3D11DeviceContext1 : public ID3D11DeviceContext
    {
    public:
        virtual void __stdcall CopySubresourceRegion1(

                  ID3D11Resource *pDstResource,

                  UINT DstSubresource,

                  UINT DstX,

                  UINT DstY,

                  UINT DstZ,

                  ID3D11Resource *pSrcResource,

                  UINT SrcSubresource,

                      const D3D11_BOX *pSrcBox,

                  UINT CopyFlags) = 0;

        virtual void __stdcall UpdateSubresource1(

                  ID3D11Resource *pDstResource,

                  UINT DstSubresource,

                      const D3D11_BOX *pDstBox,

                  const void *pSrcData,

                  UINT SrcRowPitch,

                  UINT SrcDepthPitch,

                  UINT CopyFlags) = 0;

        virtual void __stdcall DiscardResource(

                  ID3D11Resource *pResource) = 0;

        virtual void __stdcall DiscardView(

                  ID3D11View *pResourceView) = 0;

        virtual void __stdcall VSSetConstantBuffers1(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D11Buffer *const *ppConstantBuffers,

                                        const UINT *pFirstConstant,

                                        const UINT *pNumConstants) = 0;

        virtual void __stdcall HSSetConstantBuffers1(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D11Buffer *const *ppConstantBuffers,

                                        const UINT *pFirstConstant,

                                        const UINT *pNumConstants) = 0;

        virtual void __stdcall DSSetConstantBuffers1(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D11Buffer *const *ppConstantBuffers,

                                        const UINT *pFirstConstant,

                                        const UINT *pNumConstants) = 0;

        virtual void __stdcall GSSetConstantBuffers1(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D11Buffer *const *ppConstantBuffers,

                                        const UINT *pFirstConstant,

                                        const UINT *pNumConstants) = 0;

        virtual void __stdcall PSSetConstantBuffers1(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D11Buffer *const *ppConstantBuffers,

                                        const UINT *pFirstConstant,

                                        const UINT *pNumConstants) = 0;

        virtual void __stdcall CSSetConstantBuffers1(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                        ID3D11Buffer *const *ppConstantBuffers,

                                        const UINT *pFirstConstant,

                                        const UINT *pNumConstants) = 0;

        virtual void __stdcall VSGetConstantBuffers1(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D11Buffer **ppConstantBuffers,

                                          UINT *pFirstConstant,

                                          UINT *pNumConstants) = 0;

        virtual void __stdcall HSGetConstantBuffers1(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D11Buffer **ppConstantBuffers,

                                          UINT *pFirstConstant,

                                          UINT *pNumConstants) = 0;

        virtual void __stdcall DSGetConstantBuffers1(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D11Buffer **ppConstantBuffers,

                                          UINT *pFirstConstant,

                                          UINT *pNumConstants) = 0;

        virtual void __stdcall GSGetConstantBuffers1(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D11Buffer **ppConstantBuffers,

                                          UINT *pFirstConstant,

                                          UINT *pNumConstants) = 0;

        virtual void __stdcall PSGetConstantBuffers1(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D11Buffer **ppConstantBuffers,

                                          UINT *pFirstConstant,

                                          UINT *pNumConstants) = 0;

        virtual void __stdcall CSGetConstantBuffers1(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                          ID3D11Buffer **ppConstantBuffers,

                                          UINT *pFirstConstant,

                                          UINT *pNumConstants) = 0;

        virtual void __stdcall SwapDeviceContextState(

                  ID3DDeviceContextState *pState,

                       ID3DDeviceContextState **ppPreviousState) = 0;

        virtual void __stdcall ClearView(

                  ID3D11View *pView,

                  const FLOAT Color[ 4 ],

                                      const D3D11_RECT *pRect,
            UINT NumRects) = 0;

        virtual void __stdcall DiscardView1(

                  ID3D11View *pResourceView,

                                      const D3D11_RECT *pRects,
            UINT NumRects) = 0;

    };
# 2517 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11_1.h"
extern "C" const IID IID_ID3D11Device1;



    struct __declspec(uuid("a04bfb29-08ef-43d6-a49c-a9bdbdcbe686")) __declspec(novtable)
    ID3D11Device1 : public ID3D11Device
    {
    public:
        virtual void __stdcall GetImmediateContext1(

                   ID3D11DeviceContext1 **ppImmediateContext) = 0;

        virtual HRESULT __stdcall CreateDeferredContext1(
            UINT ContextFlags,

                       ID3D11DeviceContext1 **ppDeferredContext) = 0;

        virtual HRESULT __stdcall CreateBlendState1(

                  const D3D11_BLEND_DESC1 *pBlendStateDesc,

                       ID3D11BlendState1 **ppBlendState) = 0;

        virtual HRESULT __stdcall CreateRasterizerState1(

                  const D3D11_RASTERIZER_DESC1 *pRasterizerDesc,

                       ID3D11RasterizerState1 **ppRasterizerState) = 0;

        virtual HRESULT __stdcall CreateDeviceContextState(
            UINT Flags,

                                         const D3D_FEATURE_LEVEL *pFeatureLevels,
            UINT FeatureLevels,
            UINT SDKVersion,
            const IID & EmulatedInterface,

                       D3D_FEATURE_LEVEL *pChosenFeatureLevel,

                       ID3DDeviceContextState **ppContextState) = 0;

        virtual HRESULT __stdcall OpenSharedResource1(

                  HANDLE hResource,

                  const IID & returnedInterface,

                   void **ppResource) = 0;

        virtual HRESULT __stdcall OpenSharedResourceByName(

                  LPCWSTR lpName,

                  DWORD dwDesiredAccess,

                  const IID & returnedInterface,

                   void **ppResource) = 0;

    };
# 3174 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11_1.h"
extern "C" const IID IID_ID3DUserDefinedAnnotation;



    struct __declspec(uuid("b2daad8b-03d4-4dbf-95eb-32ab4b63d0ab")) __declspec(novtable)
    ID3DUserDefinedAnnotation : public IUnknown
    {
    public:
        virtual INT __stdcall BeginEvent(

                  LPCWSTR Name) = 0;

        virtual INT __stdcall EndEvent( void) = 0;

        virtual void __stdcall SetMarker(

                  LPCWSTR Name) = 0;

        virtual BOOL __stdcall GetStatus( void) = 0;

    };
# 3280 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11_1.h"
extern "C" const GUID IID_ID3D11BlendState1;
extern "C" const GUID IID_ID3D11RasterizerState1;
extern "C" const GUID IID_ID3DDeviceContextState;
extern "C" const GUID IID_ID3D11DeviceContext1;
extern "C" const GUID IID_ID3D11Device1;
extern "C" const GUID IID_ID3DUserDefinedAnnotation;


extern RPC_IF_HANDLE __MIDL_itf_d3d11_1_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_1_0000_0006_v0_0_s_ifspec;






}
# 67 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3d11_2.h" 2



extern "C"{







}



extern "C"{

typedef struct D3D11_TILED_RESOURCE_COORDINATE
    {
    UINT X;
    UINT Y;
    UINT Z;
    UINT Subresource;
    } D3D11_TILED_RESOURCE_COORDINATE;

typedef struct D3D11_TILE_REGION_SIZE
    {
    UINT NumTiles;
    BOOL bUseBox;
    UINT Width;
    UINT16 Height;
    UINT16 Depth;
    } D3D11_TILE_REGION_SIZE;

typedef
enum D3D11_TILE_MAPPING_FLAG
    {
        D3D11_TILE_MAPPING_NO_OVERWRITE = 0x1
    } D3D11_TILE_MAPPING_FLAG;

typedef
enum D3D11_TILE_RANGE_FLAG
    {
        D3D11_TILE_RANGE_NULL = 0x1,
        D3D11_TILE_RANGE_SKIP = 0x2,
        D3D11_TILE_RANGE_REUSE_SINGLE_TILE = 0x4
    } D3D11_TILE_RANGE_FLAG;

typedef struct D3D11_SUBRESOURCE_TILING
    {
    UINT WidthInTiles;
    UINT16 HeightInTiles;
    UINT16 DepthInTiles;
    UINT StartTileIndexInOverallResource;
    } D3D11_SUBRESOURCE_TILING;



typedef struct D3D11_TILE_SHAPE
    {
    UINT WidthInTexels;
    UINT HeightInTexels;
    UINT DepthInTexels;
    } D3D11_TILE_SHAPE;

typedef struct D3D11_PACKED_MIP_DESC
    {
    UINT8 NumStandardMips;
    UINT8 NumPackedMips;
    UINT NumTilesForPackedMips;
    UINT StartTileIndexInOverallResource;
    } D3D11_PACKED_MIP_DESC;

typedef
enum D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_FLAG
    {
        D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_TILED_RESOURCE = 0x1
    } D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_FLAG;

typedef
enum D3D11_TILE_COPY_FLAG
    {
        D3D11_TILE_COPY_NO_OVERWRITE = 0x1,
        D3D11_TILE_COPY_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 0x2,
        D3D11_TILE_COPY_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 0x4
    } D3D11_TILE_COPY_FLAG;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_2_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_2_0000_0000_v0_0_s_ifspec;
# 166 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3d11_2.h"
extern "C" const IID IID_ID3D11DeviceContext2;



    struct __declspec(uuid("420d5b32-b90c-4da4-bef0-359f6a24a83a")) __declspec(novtable)
    ID3D11DeviceContext2 : public ID3D11DeviceContext1
    {
    public:
        virtual HRESULT __stdcall UpdateTileMappings(

                  ID3D11Resource *pTiledResource,

                  UINT NumTiledResourceRegions,

                                                     const D3D11_TILED_RESOURCE_COORDINATE *pTiledResourceRegionStartCoordinates,

                                                     const D3D11_TILE_REGION_SIZE *pTiledResourceRegionSizes,

                      ID3D11Buffer *pTilePool,

                  UINT NumRanges,

                                       const UINT *pRangeFlags,

                                       const UINT *pTilePoolStartOffsets,

                                       const UINT *pRangeTileCounts,

                  UINT Flags) = 0;

        virtual HRESULT __stdcall CopyTileMappings(

                  ID3D11Resource *pDestTiledResource,

                  const D3D11_TILED_RESOURCE_COORDINATE *pDestRegionStartCoordinate,

                  ID3D11Resource *pSourceTiledResource,

                  const D3D11_TILED_RESOURCE_COORDINATE *pSourceRegionStartCoordinate,

                  const D3D11_TILE_REGION_SIZE *pTileRegionSize,

                  UINT Flags) = 0;

        virtual void __stdcall CopyTiles(

                  ID3D11Resource *pTiledResource,

                  const D3D11_TILED_RESOURCE_COORDINATE *pTileRegionStartCoordinate,

                  const D3D11_TILE_REGION_SIZE *pTileRegionSize,

                  ID3D11Buffer *pBuffer,

                  UINT64 BufferStartOffsetInBytes,

                  UINT Flags) = 0;

        virtual void __stdcall UpdateTiles(

                  ID3D11Resource *pDestTiledResource,

                  const D3D11_TILED_RESOURCE_COORDINATE *pDestTileRegionStartCoordinate,

                  const D3D11_TILE_REGION_SIZE *pDestTileRegionSize,

                  const void *pSourceTileData,

                  UINT Flags) = 0;

        virtual HRESULT __stdcall ResizeTilePool(

                  ID3D11Buffer *pTilePool,

                  UINT64 NewSizeInBytes) = 0;

        virtual void __stdcall TiledResourceBarrier(

                      ID3D11DeviceChild *pTiledResourceOrViewAccessBeforeBarrier,

                      ID3D11DeviceChild *pTiledResourceOrViewAccessAfterBarrier) = 0;

        virtual BOOL __stdcall IsAnnotationEnabled( void) = 0;

        virtual void __stdcall SetMarkerInt(

                  LPCWSTR pLabel,
            INT Data) = 0;

        virtual void __stdcall BeginEventInt(

                  LPCWSTR pLabel,
            INT Data) = 0;

        virtual void __stdcall EndEvent( void) = 0;

    };
# 2016 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3d11_2.h"
extern "C" const IID IID_ID3D11Device2;



    struct __declspec(uuid("9d06dffa-d1e5-4d07-83a8-1bb123f2f841")) __declspec(novtable)
    ID3D11Device2 : public ID3D11Device1
    {
    public:
        virtual void __stdcall GetImmediateContext2(

                   ID3D11DeviceContext2 **ppImmediateContext) = 0;

        virtual HRESULT __stdcall CreateDeferredContext2(
            UINT ContextFlags,

                       ID3D11DeviceContext2 **ppDeferredContext) = 0;

        virtual void __stdcall GetResourceTiling(

                  ID3D11Resource *pTiledResource,

                       UINT *pNumTilesForEntireResource,

                       D3D11_PACKED_MIP_DESC *pPackedMipDesc,

                       D3D11_TILE_SHAPE *pStandardTileShapeForNonPackedMips,

                         UINT *pNumSubresourceTilings,

                  UINT FirstSubresourceTilingToGet,

                                                   D3D11_SUBRESOURCE_TILING *pSubresourceTilingsForNonPackedMips) = 0;

        virtual HRESULT __stdcall CheckMultisampleQualityLevels1(

                  DXGI_FORMAT Format,

                  UINT SampleCount,

                  UINT Flags,

                   UINT *pNumQualityLevels) = 0;

    };
# 2705 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3d11_2.h"
extern "C" const GUID IID_ID3D11DeviceContext2;
extern "C" const GUID IID_ID3D11Device2;


extern RPC_IF_HANDLE __MIDL_itf_d3d11_2_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_2_0000_0002_v0_0_s_ifspec;






}
# 6 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/DeviceClass.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h" 1
# 32 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11shader.h" 1
# 16 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11shader.h"
typedef enum D3D11_SHADER_VERSION_TYPE
{
    D3D11_SHVER_PIXEL_SHADER = 0,
    D3D11_SHVER_VERTEX_SHADER = 1,
    D3D11_SHVER_GEOMETRY_SHADER = 2,


    D3D11_SHVER_HULL_SHADER = 3,
    D3D11_SHVER_DOMAIN_SHADER = 4,
    D3D11_SHVER_COMPUTE_SHADER = 5,

    D3D11_SHVER_RESERVED0 = 0xFFF0,
} D3D11_SHADER_VERSION_TYPE;
# 41 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11shader.h"
typedef enum _D3D_PARAMETER_FLAGS
{
    D3D_PF_NONE = 0x00000000,
    D3D_PF_IN = 0x00000001,
    D3D_PF_OUT = 0x00000002,
    D3D_PF_FORCE_DWORD = 0x7fffffff
} D3D_PARAMETER_FLAGS, *LPD3D_PARAMETER_FLAGS;

typedef D3D_RESOURCE_RETURN_TYPE D3D11_RESOURCE_RETURN_TYPE;

typedef D3D_CBUFFER_TYPE D3D11_CBUFFER_TYPE;


typedef struct _D3D11_SIGNATURE_PARAMETER_DESC
{
    LPCSTR SemanticName;
    UINT SemanticIndex;
    UINT Register;
    D3D_NAME SystemValueType;
    D3D_REGISTER_COMPONENT_TYPE ComponentType;
    BYTE Mask;

    BYTE ReadWriteMask;



    UINT Stream;
    D3D_MIN_PRECISION MinPrecision;
} D3D11_SIGNATURE_PARAMETER_DESC;

typedef struct _D3D11_SHADER_BUFFER_DESC
{
    LPCSTR Name;
    D3D_CBUFFER_TYPE Type;
    UINT Variables;
    UINT Size;
    UINT uFlags;
} D3D11_SHADER_BUFFER_DESC;

typedef struct _D3D11_SHADER_VARIABLE_DESC
{
    LPCSTR Name;
    UINT StartOffset;
    UINT Size;
    UINT uFlags;
    LPVOID DefaultValue;
    UINT StartTexture;
    UINT TextureSize;
    UINT StartSampler;
    UINT SamplerSize;
} D3D11_SHADER_VARIABLE_DESC;

typedef struct _D3D11_SHADER_TYPE_DESC
{
    D3D_SHADER_VARIABLE_CLASS Class;
    D3D_SHADER_VARIABLE_TYPE Type;
    UINT Rows;
    UINT Columns;
    UINT Elements;
    UINT Members;
    UINT Offset;
    LPCSTR Name;
} D3D11_SHADER_TYPE_DESC;

typedef D3D_TESSELLATOR_DOMAIN D3D11_TESSELLATOR_DOMAIN;

typedef D3D_TESSELLATOR_PARTITIONING D3D11_TESSELLATOR_PARTITIONING;

typedef D3D_TESSELLATOR_OUTPUT_PRIMITIVE D3D11_TESSELLATOR_OUTPUT_PRIMITIVE;

typedef struct _D3D11_SHADER_DESC
{
    UINT Version;
    LPCSTR Creator;
    UINT Flags;

    UINT ConstantBuffers;
    UINT BoundResources;
    UINT InputParameters;
    UINT OutputParameters;

    UINT InstructionCount;
    UINT TempRegisterCount;
    UINT TempArrayCount;
    UINT DefCount;
    UINT DclCount;
    UINT TextureNormalInstructions;
    UINT TextureLoadInstructions;
    UINT TextureCompInstructions;
    UINT TextureBiasInstructions;
    UINT TextureGradientInstructions;
    UINT FloatInstructionCount;
    UINT IntInstructionCount;
    UINT UintInstructionCount;
    UINT StaticFlowControlCount;
    UINT DynamicFlowControlCount;
    UINT MacroInstructionCount;
    UINT ArrayInstructionCount;
    UINT CutInstructionCount;
    UINT EmitInstructionCount;
    D3D_PRIMITIVE_TOPOLOGY GSOutputTopology;
    UINT GSMaxOutputVertexCount;
    D3D_PRIMITIVE InputPrimitive;
    UINT PatchConstantParameters;
    UINT cGSInstanceCount;
    UINT cControlPoints;
    D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive;
    D3D_TESSELLATOR_PARTITIONING HSPartitioning;
    D3D_TESSELLATOR_DOMAIN TessellatorDomain;

    UINT cBarrierInstructions;
    UINT cInterlockedInstructions;
    UINT cTextureStoreInstructions;
} D3D11_SHADER_DESC;

typedef struct _D3D11_SHADER_INPUT_BIND_DESC
{
    LPCSTR Name;
    D3D_SHADER_INPUT_TYPE Type;
    UINT BindPoint;
    UINT BindCount;

    UINT uFlags;
    D3D_RESOURCE_RETURN_TYPE ReturnType;
    D3D_SRV_DIMENSION Dimension;
    UINT NumSamples;
} D3D11_SHADER_INPUT_BIND_DESC;
# 180 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/d3d11shader.h"
typedef struct _D3D11_LIBRARY_DESC
{
    LPCSTR Creator;
    UINT Flags;
    UINT FunctionCount;
} D3D11_LIBRARY_DESC;

typedef struct _D3D11_FUNCTION_DESC
{
    UINT Version;
    LPCSTR Creator;
    UINT Flags;

    UINT ConstantBuffers;
    UINT BoundResources;

    UINT InstructionCount;
    UINT TempRegisterCount;
    UINT TempArrayCount;
    UINT DefCount;
    UINT DclCount;
    UINT TextureNormalInstructions;
    UINT TextureLoadInstructions;
    UINT TextureCompInstructions;
    UINT TextureBiasInstructions;
    UINT TextureGradientInstructions;
    UINT FloatInstructionCount;
    UINT IntInstructionCount;
    UINT UintInstructionCount;
    UINT StaticFlowControlCount;
    UINT DynamicFlowControlCount;
    UINT MacroInstructionCount;
    UINT ArrayInstructionCount;
    UINT MovInstructionCount;
    UINT MovcInstructionCount;
    UINT ConversionInstructionCount;
    UINT BitwiseInstructionCount;
    D3D_FEATURE_LEVEL MinFeatureLevel;
    UINT64 RequiredFeatureFlags;

    LPCSTR Name;
    INT FunctionParameterCount;
    BOOL HasReturn;
    BOOL Has10Level9VertexShader;
    BOOL Has10Level9PixelShader;
} D3D11_FUNCTION_DESC;

typedef struct _D3D11_PARAMETER_DESC
{
    LPCSTR Name;
    LPCSTR SemanticName;
    D3D_SHADER_VARIABLE_TYPE Type;
    D3D_SHADER_VARIABLE_CLASS Class;
    UINT Rows;
    UINT Columns;
    D3D_INTERPOLATION_MODE InterpolationMode;
    D3D_PARAMETER_FLAGS Flags;

    UINT FirstInRegister;
    UINT FirstInComponent;
    UINT FirstOutRegister;
    UINT FirstOutComponent;
} D3D11_PARAMETER_DESC;






typedef struct ID3D11ShaderReflectionType ID3D11ShaderReflectionType;
typedef struct ID3D11ShaderReflectionType *LPD3D11SHADERREFLECTIONTYPE;

typedef struct ID3D11ShaderReflectionVariable ID3D11ShaderReflectionVariable;
typedef struct ID3D11ShaderReflectionVariable *LPD3D11SHADERREFLECTIONVARIABLE;

typedef struct ID3D11ShaderReflectionConstantBuffer ID3D11ShaderReflectionConstantBuffer;
typedef struct ID3D11ShaderReflectionConstantBuffer *LPD3D11SHADERREFLECTIONCONSTANTBUFFER;

typedef struct ID3D11ShaderReflection ID3D11ShaderReflection;
typedef struct ID3D11ShaderReflection *LPD3D11SHADERREFLECTION;

typedef struct ID3D11LibraryReflection ID3D11LibraryReflection;
typedef struct ID3D11LibraryReflection *LPD3D11LIBRARYREFLECTION;

typedef struct ID3D11FunctionReflection ID3D11FunctionReflection;
typedef struct ID3D11FunctionReflection *LPD3D11FUNCTIONREFLECTION;

typedef struct ID3D11FunctionParameterReflection ID3D11FunctionParameterReflection;
typedef struct ID3D11FunctionParameterReflection *LPD3D11FUNCTIONPARAMETERREFLECTION;


struct __declspec(uuid("6E6FFA6A-9BAE-4613-A51E-91652D508C21")) ID3D11ShaderReflectionType;
extern "C" const GUID IID_ID3D11ShaderReflectionType;





struct __declspec(novtable) ID3D11ShaderReflectionType
{
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D11_SHADER_TYPE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D11ShaderReflectionType* __stdcall GetMemberTypeByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionType* __stdcall GetMemberTypeByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) LPCSTR __stdcall GetMemberTypeName( UINT Index) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall IsEqual( ID3D11ShaderReflectionType* pType) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionType* __stdcall GetSubType(void) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionType* __stdcall GetBaseClass(void) = 0;
    virtual __declspec(nothrow) UINT __stdcall GetNumInterfaces(void) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionType* __stdcall GetInterfaceByIndex( UINT uIndex) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall IsOfType( ID3D11ShaderReflectionType* pType) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall ImplementsInterface( ID3D11ShaderReflectionType* pBase) = 0;
};


struct __declspec(uuid("51F23923-F3E5-4BD1-91CB-606177D8DB4C")) ID3D11ShaderReflectionVariable;
extern "C" const GUID IID_ID3D11ShaderReflectionVariable;





struct __declspec(novtable) ID3D11ShaderReflectionVariable
{
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D11_SHADER_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D11ShaderReflectionType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionConstantBuffer* __stdcall GetBuffer(void) = 0;

    virtual __declspec(nothrow) UINT __stdcall GetInterfaceSlot( UINT uArrayIndex) = 0;
};


struct __declspec(uuid("EB62D63D-93DD-4318-8AE8-C6F83AD371B8")) ID3D11ShaderReflectionConstantBuffer;
extern "C" const GUID IID_ID3D11ShaderReflectionConstantBuffer;





struct __declspec(novtable) ID3D11ShaderReflectionConstantBuffer
{
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D11_SHADER_BUFFER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D11ShaderReflectionVariable* __stdcall GetVariableByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionVariable* __stdcall GetVariableByName( LPCSTR Name) = 0;
};







struct __declspec(uuid("8d536ca1-0cca-4956-a837-786963755584")) ID3D11ShaderReflection;
extern "C" const GUID IID_ID3D11ShaderReflection;




struct __declspec(novtable) ID3D11ShaderReflection : public IUnknown
{
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid,
                                    LPVOID *ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D11_SHADER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D11ShaderReflectionConstantBuffer* __stdcall GetConstantBufferByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionConstantBuffer* __stdcall GetConstantBufferByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetResourceBindingDesc( UINT ResourceIndex,
                                            D3D11_SHADER_INPUT_BIND_DESC *pDesc) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetInputParameterDesc( UINT ParameterIndex,
                                           D3D11_SIGNATURE_PARAMETER_DESC *pDesc) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetOutputParameterDesc( UINT ParameterIndex,
                                            D3D11_SIGNATURE_PARAMETER_DESC *pDesc) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetPatchConstantParameterDesc( UINT ParameterIndex,
                                                   D3D11_SIGNATURE_PARAMETER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D11ShaderReflectionVariable* __stdcall GetVariableByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetResourceBindingDescByName( LPCSTR Name,
                                                  D3D11_SHADER_INPUT_BIND_DESC *pDesc) = 0;

    virtual __declspec(nothrow) UINT __stdcall GetMovInstructionCount(void) = 0;
    virtual __declspec(nothrow) UINT __stdcall GetMovcInstructionCount(void) = 0;
    virtual __declspec(nothrow) UINT __stdcall GetConversionInstructionCount(void) = 0;
    virtual __declspec(nothrow) UINT __stdcall GetBitwiseInstructionCount(void) = 0;

    virtual __declspec(nothrow) D3D_PRIMITIVE __stdcall GetGSInputPrimitive(void) = 0;
    virtual __declspec(nothrow) BOOL __stdcall IsSampleFrequencyShader(void) = 0;

    virtual __declspec(nothrow) UINT __stdcall GetNumInterfaceSlots(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetMinFeatureLevel( enum D3D_FEATURE_LEVEL* pLevel) = 0;

    virtual __declspec(nothrow) UINT __stdcall GetThreadGroupSize(
                                                   UINT* pSizeX,
                                                   UINT* pSizeY,
                                                   UINT* pSizeZ) = 0;

    virtual __declspec(nothrow) UINT64 __stdcall GetRequiresFlags(void) = 0;
};


struct __declspec(uuid("54384F1B-5B3E-4BB7-AE01-60BA3097CBB6")) ID3D11LibraryReflection;
extern "C" const GUID IID_ID3D11LibraryReflection;





struct __declspec(novtable) ID3D11LibraryReflection : public IUnknown
{
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID * ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D11_LIBRARY_DESC * pDesc) = 0;

    virtual __declspec(nothrow) ID3D11FunctionReflection * __stdcall GetFunctionByIndex( INT FunctionIndex) = 0;
};


struct __declspec(uuid("207BCECB-D683-4A06-A8A3-9B149B9F73A4")) ID3D11FunctionReflection;
extern "C" const GUID IID_ID3D11FunctionReflection;





struct __declspec(novtable) ID3D11FunctionReflection
{
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D11_FUNCTION_DESC * pDesc) = 0;

    virtual __declspec(nothrow) ID3D11ShaderReflectionConstantBuffer * __stdcall GetConstantBufferByIndex( UINT BufferIndex) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionConstantBuffer * __stdcall GetConstantBufferByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetResourceBindingDesc( UINT ResourceIndex,
                                            D3D11_SHADER_INPUT_BIND_DESC * pDesc) = 0;

    virtual __declspec(nothrow) ID3D11ShaderReflectionVariable * __stdcall GetVariableByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetResourceBindingDescByName( LPCSTR Name,
                                                  D3D11_SHADER_INPUT_BIND_DESC * pDesc) = 0;


    virtual __declspec(nothrow) ID3D11FunctionParameterReflection * __stdcall GetFunctionParameter( INT ParameterIndex) = 0;
};


struct __declspec(uuid("42757488-334F-47FE-982E-1A65D08CC462")) ID3D11FunctionParameterReflection;
extern "C" const GUID IID_ID3D11FunctionParameterReflection;





struct __declspec(novtable) ID3D11FunctionParameterReflection
{
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D11_PARAMETER_DESC * pDesc) = 0;
};


struct __declspec(uuid("CAC701EE-80FC-4122-8242-10B39C8CEC34")) ID3D11Module;
extern "C" const GUID IID_ID3D11Module;





struct __declspec(novtable) ID3D11Module : public IUnknown
{
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID * ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;


    virtual __declspec(nothrow) HRESULT __stdcall CreateInstance( LPCSTR pNamespace,
                                          struct ID3D11ModuleInstance ** ppModuleInstance) = 0;
};



struct __declspec(uuid("469E07F7-045A-48D5-AA12-68A478CDF75D")) ID3D11ModuleInstance;
extern "C" const GUID IID_ID3D11ModuleInstance;





struct __declspec(novtable) ID3D11ModuleInstance : public IUnknown
{
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID * ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;




    virtual __declspec(nothrow) HRESULT __stdcall BindConstantBuffer( UINT uSrcSlot, UINT uDstSlot, UINT cbDstOffset) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall BindConstantBufferByName( LPCSTR pName, UINT uDstSlot, UINT cbDstOffset) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall BindResource( UINT uSrcSlot, UINT uDstSlot, UINT uCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall BindResourceByName( LPCSTR pName, UINT uDstSlot, UINT uCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall BindSampler( UINT uSrcSlot, UINT uDstSlot, UINT uCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall BindSamplerByName( LPCSTR pName, UINT uDstSlot, UINT uCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall BindUnorderedAccessView( UINT uSrcSlot, UINT uDstSlot, UINT uCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall BindUnorderedAccessViewByName( LPCSTR pName, UINT uDstSlot, UINT uCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall BindResourceAsUnorderedAccessView( UINT uSrcSrvSlot, UINT uDstUavSlot, UINT uCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall BindResourceAsUnorderedAccessViewByName( LPCSTR pSrvName, UINT uDstUavSlot, UINT uCount) = 0;
};



struct __declspec(uuid("59A6CD0E-E10D-4C1F-88C0-63ABA1DAF30E")) ID3D11Linker;
extern "C" const GUID IID_ID3D11Linker;





struct __declspec(novtable) ID3D11Linker : public IUnknown
{
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID * ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;


    virtual __declspec(nothrow) HRESULT __stdcall Link( struct ID3D11ModuleInstance * pEntry,
                               LPCSTR pEntryName,
                               LPCSTR pTargetName,
                               UINT uFlags,
                                ID3DBlob ** ppShaderBlob,
                                ID3DBlob ** ppErrorBuffer) = 0;


    virtual __declspec(nothrow) HRESULT __stdcall UseLibrary( struct ID3D11ModuleInstance * pLibraryMI) = 0;


    virtual __declspec(nothrow) HRESULT __stdcall AddClipPlaneFromCBuffer( UINT uCBufferSlot, UINT uCBufferEntry) = 0;
};



struct __declspec(uuid("D80DD70C-8D2F-4751-94A1-03C79B3556DB")) ID3D11LinkingNode;
extern "C" const GUID IID_ID3D11LinkingNode;





struct __declspec(novtable) ID3D11LinkingNode : public IUnknown
{
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID * ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;
};



struct __declspec(uuid("54133220-1CE8-43D3-8236-9855C5CEECFF")) ID3D11FunctionLinkingGraph;
extern "C" const GUID IID_ID3D11FunctionLinkingGraph;





struct __declspec(novtable) ID3D11FunctionLinkingGraph : public IUnknown
{
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID * ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;


    virtual __declspec(nothrow) HRESULT __stdcall CreateModuleInstance( struct ID3D11ModuleInstance ** ppModuleInstance,
                                                    ID3DBlob ** ppErrorBuffer) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetInputSignature( const D3D11_PARAMETER_DESC * pInputParameters,
                                            UINT cInputParameters,
                                             struct ID3D11LinkingNode ** ppInputNode) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetOutputSignature( const D3D11_PARAMETER_DESC * pOutputParameters,
                                             UINT cOutputParameters,
                                              struct ID3D11LinkingNode ** ppOutputNode) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall CallFunction( LPCSTR pModuleInstanceNamespace,
                                       struct ID3D11Module * pModuleWithFunctionPrototype,
                                       LPCSTR pFunctionName,
                                        struct ID3D11LinkingNode ** ppCallNode) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall PassValue( struct ID3D11LinkingNode * pSrcNode,
                                    INT SrcParameterIndex,
                                    struct ID3D11LinkingNode * pDstNode,
                                    INT DstParameterIndex) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall PassValueWithSwizzle( struct ID3D11LinkingNode * pSrcNode,
                                               INT SrcParameterIndex,
                                               LPCSTR pSrcSwizzle,
                                               struct ID3D11LinkingNode * pDstNode,
                                               INT DstParameterIndex,
                                               LPCSTR pDstSwizzle) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetLastError( ID3DBlob ** ppErrorBuffer) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GenerateHlsl( UINT uFlags,
                                        ID3DBlob ** ppBuffer) = 0;
};







extern "C" {



}
# 32 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h" 2







extern "C" {
# 52 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h"
HRESULT __stdcall
D3DReadFileToBlob( LPCWSTR pFileName,
                        ID3DBlob** ppContents);







HRESULT __stdcall
D3DWriteBlobToFile( ID3DBlob* pBlob,
                        LPCWSTR pFileName,
                        BOOL bOverwrite);
# 195 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h"
HRESULT __stdcall
D3DCompile( LPCVOID pSrcData,
                SIZE_T SrcDataSize,
                    LPCSTR pSourceName,
                                                                   const D3D_SHADER_MACRO* pDefines,
                    ID3DInclude* pInclude,
                    LPCSTR pEntrypoint,
                LPCSTR pTarget,
                UINT Flags1,
                UINT Flags2,
                 ID3DBlob** ppCode,
                     ID3DBlob** ppErrorMsgs);

typedef HRESULT (__stdcall *pD3DCompile)
    (LPCVOID pSrcData,
     SIZE_T SrcDataSize,
     LPCSTR pFileName,
     const D3D_SHADER_MACRO* pDefines,
     ID3DInclude* pInclude,
     LPCSTR pEntrypoint,
     LPCSTR pTarget,
     UINT Flags1,
     UINT Flags2,
     ID3DBlob** ppCode,
     ID3DBlob** ppErrorMsgs);





HRESULT __stdcall
D3DCompile2( LPCVOID pSrcData,
                 SIZE_T SrcDataSize,
                     LPCSTR pSourceName,
                                                                    const D3D_SHADER_MACRO* pDefines,
                     ID3DInclude* pInclude,
                 LPCSTR pEntrypoint,
                 LPCSTR pTarget,
                 UINT Flags1,
                 UINT Flags2,
                 UINT SecondaryDataFlags,
                                                    LPCVOID pSecondaryData,
                 SIZE_T SecondaryDataSize,
                  ID3DBlob** ppCode,
                      ID3DBlob** ppErrorMsgs);







HRESULT __stdcall
D3DCompileFromFile( LPCWSTR pFileName,
                                                                           const D3D_SHADER_MACRO* pDefines,
                            ID3DInclude* pInclude,
                        LPCSTR pEntrypoint,
                        LPCSTR pTarget,
                        UINT Flags1,
                        UINT Flags2,
                         ID3DBlob** ppCode,
                             ID3DBlob** ppErrorMsgs);
# 271 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h"
HRESULT __stdcall
D3DPreprocess( LPCVOID pSrcData,
                   SIZE_T SrcDataSize,
                       LPCSTR pSourceName,
                       const D3D_SHADER_MACRO* pDefines,
                       ID3DInclude* pInclude,
                    ID3DBlob** ppCodeText,
                        ID3DBlob** ppErrorMsgs);

typedef HRESULT (__stdcall *pD3DPreprocess)
    (LPCVOID pSrcData,
     SIZE_T SrcDataSize,
     LPCSTR pFileName,
     const D3D_SHADER_MACRO* pDefines,
     ID3DInclude* pInclude,
     ID3DBlob** ppCodeText,
     ID3DBlob** ppErrorMsgs);
# 302 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h"
HRESULT __stdcall
D3DGetDebugInfo( LPCVOID pSrcData,
                     SIZE_T SrcDataSize,
                      ID3DBlob** ppDebugInfo);
# 320 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h"
HRESULT __stdcall
D3DReflect( LPCVOID pSrcData,
                SIZE_T SrcDataSize,
                const IID & pInterface,
                 void** ppReflector);
# 333 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h"
HRESULT __stdcall
D3DReflectLibrary( LPCVOID pSrcData,
                       SIZE_T SrcDataSize,
                    const IID & riid,
                        LPVOID * ppReflector);
# 354 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h"
HRESULT __stdcall
D3DDisassemble( LPCVOID pSrcData,
                    SIZE_T SrcDataSize,
                    UINT Flags,
                        LPCSTR szComments,
                     ID3DBlob** ppDisassembly);

typedef HRESULT (__stdcall *pD3DDisassemble)
    ( LPCVOID pSrcData,
          SIZE_T SrcDataSize,
          UINT Flags,
              LPCSTR szComments,
           ID3DBlob** ppDisassembly);

HRESULT __stdcall
D3DDisassembleRegion( LPCVOID pSrcData,
                          SIZE_T SrcDataSize,
                          UINT Flags,
                              LPCSTR szComments,
                          SIZE_T StartByteOffset,
                          SIZE_T NumInsts,
                               SIZE_T* pFinishByteOffset,
                           ID3DBlob** ppDisassembly);




HRESULT __stdcall
D3DCreateLinker( struct ID3D11Linker ** ppLinker);

HRESULT __stdcall
D3DLoadModule( LPCVOID pSrcData,
                   SIZE_T cbSrcDataSize,
                    struct ID3D11Module ** ppModule);

HRESULT __stdcall
D3DCreateFunctionLinkingGraph( UINT uFlags,
                                    struct ID3D11FunctionLinkingGraph ** ppFunctionLinkingGraph);
# 407 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h"
HRESULT __stdcall
D3DDisassemble10Effect( struct ID3D10Effect *pEffect,
                            UINT Flags,
                             ID3DBlob** ppDisassembly);
# 428 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h"
HRESULT __stdcall
D3DGetTraceInstructionOffsets( LPCVOID pSrcData,
                                   SIZE_T SrcDataSize,
                                   UINT Flags,
                                   SIZE_T StartInstIndex,
                                   SIZE_T NumInsts,
                                                                                         SIZE_T* pOffsets,
                                        SIZE_T* pTotalInsts);
# 449 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h"
HRESULT __stdcall
D3DGetInputSignatureBlob( LPCVOID pSrcData,
                              SIZE_T SrcDataSize,
                               ID3DBlob** ppSignatureBlob);







HRESULT __stdcall
D3DGetOutputSignatureBlob( LPCVOID pSrcData,
                               SIZE_T SrcDataSize,
                                ID3DBlob** ppSignatureBlob);







HRESULT __stdcall
D3DGetInputAndOutputSignatureBlob( LPCVOID pSrcData,
                                       SIZE_T SrcDataSize,
                                        ID3DBlob** ppSignatureBlob);
# 488 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h"
typedef enum D3DCOMPILER_STRIP_FLAGS
{
    D3DCOMPILER_STRIP_REFLECTION_DATA = 1,
    D3DCOMPILER_STRIP_DEBUG_INFO = 2,
    D3DCOMPILER_STRIP_TEST_BLOBS = 4,
    D3DCOMPILER_STRIP_PRIVATE_DATA = 8,
    D3DCOMPILER_STRIP_FORCE_DWORD = 0x7fffffff,
} D3DCOMPILER_STRIP_FLAGS;

HRESULT __stdcall
D3DStripShader( LPCVOID pShaderBytecode,
                    SIZE_T BytecodeLength,
                    UINT uStripFlags,
                     ID3DBlob** ppStrippedBlob);







typedef enum D3D_BLOB_PART
{
    D3D_BLOB_INPUT_SIGNATURE_BLOB,
    D3D_BLOB_OUTPUT_SIGNATURE_BLOB,
    D3D_BLOB_INPUT_AND_OUTPUT_SIGNATURE_BLOB,
    D3D_BLOB_PATCH_CONSTANT_SIGNATURE_BLOB,
    D3D_BLOB_ALL_SIGNATURE_BLOB,
    D3D_BLOB_DEBUG_INFO,
    D3D_BLOB_LEGACY_SHADER,
    D3D_BLOB_XNA_PREPASS_SHADER,
    D3D_BLOB_XNA_SHADER,
    D3D_BLOB_PDB,
    D3D_BLOB_PRIVATE_DATA,



    D3D_BLOB_TEST_ALTERNATE_SHADER = 0x8000,
    D3D_BLOB_TEST_COMPILE_DETAILS,
    D3D_BLOB_TEST_COMPILE_PERF,
    D3D_BLOB_TEST_COMPILE_REPORT,
} D3D_BLOB_PART;

HRESULT __stdcall
D3DGetBlobPart( LPCVOID pSrcData,
                    SIZE_T SrcDataSize,
                    D3D_BLOB_PART Part,
                    UINT Flags,
                     ID3DBlob** ppPart);







HRESULT __stdcall
D3DSetBlobPart( LPCVOID pSrcData,
                    SIZE_T SrcDataSize,
                    D3D_BLOB_PART Part,
                    UINT Flags,
                                          LPCVOID pPart,
                    SIZE_T PartSize,
                     ID3DBlob** ppNewShader);







HRESULT __stdcall
D3DCreateBlob( SIZE_T Size,
                    ID3DBlob** ppBlob);
# 572 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\d3dcompiler.h"
typedef struct _D3D_SHADER_DATA
{
    LPCVOID pBytecode;
    SIZE_T BytecodeLength;
} D3D_SHADER_DATA;






HRESULT __stdcall
D3DCompressShaders( UINT uNumShaders,
                                           D3D_SHADER_DATA* pShaderData,
                        UINT uFlags,
                         ID3DBlob** ppCompressedData);







HRESULT __stdcall
D3DDecompressShaders( LPCVOID pSrcData,
                          SIZE_T SrcDataSize,
                          UINT uNumShaders,
                          UINT uStartIndex,
                                                 UINT* pIndices,
                          UINT uFlags,
                                               ID3DBlob** ppShaders,
                               UINT* pTotalShaders);





}
# 7 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/DeviceClass.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h" 1
# 47 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 4985)

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 1
# 49 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h" 2



#pragma warning(pop)
# 73 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
 extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
}
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(pop)
# 73 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h" 2
# 85 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
#pragma warning(push)
#pragma warning(disable: 4005 4668)

#pragma warning(pop)
# 125 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
namespace DirectX
{
# 158 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
const float XM_PI = 3.141592654f;
const float XM_2PI = 6.283185307f;
const float XM_1DIVPI = 0.318309886f;
const float XM_1DIV2PI = 0.159154943f;
const float XM_PIDIV2 = 1.570796327f;
const float XM_PIDIV4 = 0.785398163f;

const uint32_t XM_SELECT_0 = 0x00000000;
const uint32_t XM_SELECT_1 = 0xFFFFFFFF;

const uint32_t XM_PERMUTE_0X = 0;
const uint32_t XM_PERMUTE_0Y = 1;
const uint32_t XM_PERMUTE_0Z = 2;
const uint32_t XM_PERMUTE_0W = 3;
const uint32_t XM_PERMUTE_1X = 4;
const uint32_t XM_PERMUTE_1Y = 5;
const uint32_t XM_PERMUTE_1Z = 6;
const uint32_t XM_PERMUTE_1W = 7;

const uint32_t XM_SWIZZLE_X = 0;
const uint32_t XM_SWIZZLE_Y = 1;
const uint32_t XM_SWIZZLE_Z = 2;
const uint32_t XM_SWIZZLE_W = 3;

const uint32_t XM_CRMASK_CR6 = 0x000000F0;
const uint32_t XM_CRMASK_CR6TRUE = 0x00000080;
const uint32_t XM_CRMASK_CR6FALSE = 0x00000020;
const uint32_t XM_CRMASK_CR6BOUNDS = XM_CRMASK_CR6FALSE;


const size_t XM_CACHE_LINE_SIZE = 64;
# 208 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
inline float XMConvertToRadians(float fDegrees) { return fDegrees * (XM_PI / 180.0f); }
inline float XMConvertToDegrees(float fRadians) { return fRadians * (180.0f / XM_PI); }



inline bool XMComparisonAllTrue(uint32_t CR) { return (((CR) & XM_CRMASK_CR6TRUE) == XM_CRMASK_CR6TRUE); }
inline bool XMComparisonAnyTrue(uint32_t CR) { return (((CR) & XM_CRMASK_CR6FALSE) != XM_CRMASK_CR6FALSE); }
inline bool XMComparisonAllFalse(uint32_t CR) { return (((CR) & XM_CRMASK_CR6FALSE) == XM_CRMASK_CR6FALSE); }
inline bool XMComparisonAnyFalse(uint32_t CR) { return (((CR) & XM_CRMASK_CR6TRUE) != XM_CRMASK_CR6TRUE); }
inline bool XMComparisonMixed(uint32_t CR) { return (((CR) & XM_CRMASK_CR6) == 0); }
inline bool XMComparisonAllInBounds(uint32_t CR) { return (((CR) & XM_CRMASK_CR6BOUNDS) == XM_CRMASK_CR6BOUNDS); }
inline bool XMComparisonAnyOutOfBounds(uint32_t CR) { return (((CR) & XM_CRMASK_CR6BOUNDS) != XM_CRMASK_CR6BOUNDS); }








#pragma warning(push)
#pragma warning(disable: 4068 4201 4365 4324 4820)

#pragma prefast(push)
#pragma prefast(disable : 25000, "FXMVECTOR is 16 bytes")
# 252 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
typedef __declspec(align(16)) uint32_t __vector4i[4];






typedef __m128 XMVECTOR;
# 268 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
typedef const XMVECTOR FXMVECTOR;






typedef const XMVECTOR GXMVECTOR;






typedef const XMVECTOR HXMVECTOR;





typedef const XMVECTOR& CXMVECTOR;



__declspec(align(16)) struct XMVECTORF32
{
    union
    {
        float f[4];
        XMVECTOR v;
    };

    inline operator XMVECTOR() const { return v; }
    inline operator const float*() const { return f; }

    inline operator __m128i() const { return _mm_castps_si128(v); }
    inline operator __m128d() const { return _mm_castps_pd(v); }

};

__declspec(align(16)) struct XMVECTORI32
{
    union
    {
        int32_t i[4];
        XMVECTOR v;
    };

    inline operator XMVECTOR() const { return v; }

    inline operator __m128i() const { return _mm_castps_si128(v); }
    inline operator __m128d() const { return _mm_castps_pd(v); }

};

__declspec(align(16)) struct XMVECTORU8
{
    union
    {
        uint8_t u[16];
        XMVECTOR v;
    };

    inline operator XMVECTOR() const { return v; }

    inline operator __m128i() const { return _mm_castps_si128(v); }
    inline operator __m128d() const { return _mm_castps_pd(v); }

};

__declspec(align(16)) struct XMVECTORU32
{
    union
    {
        uint32_t u[4];
        XMVECTOR v;
    };

    inline operator XMVECTOR() const { return v; }

    inline operator __m128i() const { return _mm_castps_si128(v); }
    inline operator __m128d() const { return _mm_castps_pd(v); }

};



XMVECTOR __vectorcall operator+ (FXMVECTOR V);
XMVECTOR __vectorcall operator- (FXMVECTOR V);

XMVECTOR& __vectorcall operator+= (XMVECTOR& V1, FXMVECTOR V2);
XMVECTOR& __vectorcall operator-= (XMVECTOR& V1, FXMVECTOR V2);
XMVECTOR& __vectorcall operator*= (XMVECTOR& V1, FXMVECTOR V2);
XMVECTOR& __vectorcall operator/= (XMVECTOR& V1, FXMVECTOR V2);

XMVECTOR& operator*= (XMVECTOR& V, float S);
XMVECTOR& operator/= (XMVECTOR& V, float S);

XMVECTOR __vectorcall operator+ (FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall operator- (FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall operator* (FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall operator/ (FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall operator* (FXMVECTOR V, float S);
XMVECTOR __vectorcall operator* (float S, FXMVECTOR V);
XMVECTOR __vectorcall operator/ (FXMVECTOR V, float S);





struct XMMATRIX;



typedef const XMMATRIX FXMMATRIX;





typedef const XMMATRIX& CXMMATRIX;




__declspec(align(16)) struct XMMATRIX

{
# 410 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
    XMVECTOR r[4];


    XMMATRIX() {}
    XMMATRIX(FXMVECTOR R0, FXMVECTOR R1, FXMVECTOR R2, CXMVECTOR R3) { r[0] = R0; r[1] = R1; r[2] = R2; r[3] = R3; }
    XMMATRIX(float m00, float m01, float m02, float m03,
             float m10, float m11, float m12, float m13,
             float m20, float m21, float m22, float m23,
             float m30, float m31, float m32, float m33);
    explicit XMMATRIX( const float *pArray);






    XMMATRIX& operator= (const XMMATRIX& M) { r[0] = M.r[0]; r[1] = M.r[1]; r[2] = M.r[2]; r[3] = M.r[3]; return *this; }

    XMMATRIX operator+ () const { return *this; }
    XMMATRIX operator- () const;

    XMMATRIX& __vectorcall operator+= (FXMMATRIX M);
    XMMATRIX& __vectorcall operator-= (FXMMATRIX M);
    XMMATRIX& __vectorcall operator*= (FXMMATRIX M);
    XMMATRIX& operator*= (float S);
    XMMATRIX& operator/= (float S);

    XMMATRIX __vectorcall operator+ (FXMMATRIX M) const;
    XMMATRIX __vectorcall operator- (FXMMATRIX M) const;
    XMMATRIX __vectorcall operator* (FXMMATRIX M) const;
    XMMATRIX operator* (float S) const;
    XMMATRIX operator/ (float S) const;

    friend XMMATRIX __vectorcall operator* (float S, FXMMATRIX M);
};



struct XMFLOAT2
{
    float x;
    float y;

    XMFLOAT2() {}
    XMFLOAT2(float _x, float _y) : x(_x), y(_y) {}
    explicit XMFLOAT2( const float *pArray) : x(pArray[0]), y(pArray[1]) {}

    XMFLOAT2& operator= (const XMFLOAT2& Float2) { x = Float2.x; y = Float2.y; return *this; }
};


__declspec(align(16)) struct XMFLOAT2A : public XMFLOAT2
{
    XMFLOAT2A() : XMFLOAT2() {}
    XMFLOAT2A(float _x, float _y) : XMFLOAT2(_x, _y) {}
    explicit XMFLOAT2A( const float *pArray) : XMFLOAT2(pArray) {}

    XMFLOAT2A& operator= (const XMFLOAT2A& Float2) { x = Float2.x; y = Float2.y; return *this; }
};



struct XMINT2
{
    int32_t x;
    int32_t y;

    XMINT2() {}
    XMINT2(int32_t _x, int32_t _y) : x(_x), y(_y) {}
    explicit XMINT2( const int32_t *pArray) : x(pArray[0]), y(pArray[1]) {}

    XMINT2& operator= (const XMINT2& Int2) { x = Int2.x; y = Int2.y; return *this; }
};


struct XMUINT2
{
    uint32_t x;
    uint32_t y;

    XMUINT2() {}
    XMUINT2(uint32_t _x, uint32_t _y) : x(_x), y(_y) {}
    explicit XMUINT2( const uint32_t *pArray) : x(pArray[0]), y(pArray[1]) {}

    XMUINT2& operator= (const XMUINT2& UInt2) { x = UInt2.x; y = UInt2.y; return *this; }
};



struct XMFLOAT3
{
    float x;
    float y;
    float z;

    XMFLOAT3() {}
    XMFLOAT3(float _x, float _y, float _z) : x(_x), y(_y), z(_z) {}
    explicit XMFLOAT3( const float *pArray) : x(pArray[0]), y(pArray[1]), z(pArray[2]) {}

    XMFLOAT3& operator= (const XMFLOAT3& Float3) { x = Float3.x; y = Float3.y; z = Float3.z; return *this; }
};


__declspec(align(16)) struct XMFLOAT3A : public XMFLOAT3
{
    XMFLOAT3A() : XMFLOAT3() {}
    XMFLOAT3A(float _x, float _y, float _z) : XMFLOAT3(_x, _y, _z) {}
    explicit XMFLOAT3A( const float *pArray) : XMFLOAT3(pArray) {}

    XMFLOAT3A& operator= (const XMFLOAT3A& Float3) { x = Float3.x; y = Float3.y; z = Float3.z; return *this; }
};



struct XMINT3
{
    int32_t x;
    int32_t y;
    int32_t z;

    XMINT3() {}
    XMINT3(int32_t _x, int32_t _y, int32_t _z) : x(_x), y(_y), z(_z) {}
    explicit XMINT3( const int32_t *pArray) : x(pArray[0]), y(pArray[1]), z(pArray[2]) {}

    XMINT3& operator= (const XMINT3& i3) { x = i3.x; y = i3.y; z = i3.z; return *this; }
};


struct XMUINT3
{
    uint32_t x;
    uint32_t y;
    uint32_t z;

    XMUINT3() {}
    XMUINT3(uint32_t _x, uint32_t _y, uint32_t _z) : x(_x), y(_y), z(_z) {}
    explicit XMUINT3( const uint32_t *pArray) : x(pArray[0]), y(pArray[1]), z(pArray[2]) {}

    XMUINT3& operator= (const XMUINT3& u3) { x = u3.x; y = u3.y; z = u3.z; return *this; }
};



struct XMFLOAT4
{
    float x;
    float y;
    float z;
    float w;

    XMFLOAT4() {}
    XMFLOAT4(float _x, float _y, float _z, float _w) : x(_x), y(_y), z(_z), w(_w) {}
    explicit XMFLOAT4( const float *pArray) : x(pArray[0]), y(pArray[1]), z(pArray[2]), w(pArray[3]) {}

    XMFLOAT4& operator= (const XMFLOAT4& Float4) { x = Float4.x; y = Float4.y; z = Float4.z; w = Float4.w; return *this; }
};


__declspec(align(16)) struct XMFLOAT4A : public XMFLOAT4
{
    XMFLOAT4A() : XMFLOAT4() {}
    XMFLOAT4A(float _x, float _y, float _z, float _w) : XMFLOAT4(_x, _y, _z, _w) {}
    explicit XMFLOAT4A( const float *pArray) : XMFLOAT4(pArray) {}

    XMFLOAT4A& operator= (const XMFLOAT4A& Float4) { x = Float4.x; y = Float4.y; z = Float4.z; w = Float4.w; return *this; }
};



struct XMINT4
{
    int32_t x;
    int32_t y;
    int32_t z;
    int32_t w;

    XMINT4() {}
    XMINT4(int32_t _x, int32_t _y, int32_t _z, int32_t _w) : x(_x), y(_y), z(_z), w(_w) {}
    explicit XMINT4( const int32_t *pArray) : x(pArray[0]), y(pArray[1]), z(pArray[2]), w(pArray[3]) {}

    XMINT4& operator= (const XMINT4& Int4) { x = Int4.x; y = Int4.y; z = Int4.z; w = Int4.w; return *this; }
};


struct XMUINT4
{
    uint32_t x;
    uint32_t y;
    uint32_t z;
    uint32_t w;

    XMUINT4() {}
    XMUINT4(uint32_t _x, uint32_t _y, uint32_t _z, uint32_t _w) : x(_x), y(_y), z(_z), w(_w) {}
    explicit XMUINT4( const uint32_t *pArray) : x(pArray[0]), y(pArray[1]), z(pArray[2]), w(pArray[3]) {}

    XMUINT4& operator= (const XMUINT4& UInt4) { x = UInt4.x; y = UInt4.y; z = UInt4.z; w = UInt4.w; return *this; }
};



struct XMFLOAT3X3
{
    union
    {
        struct
        {
            float _11, _12, _13;
            float _21, _22, _23;
            float _31, _32, _33;
        };
        float m[3][3];
    };

    XMFLOAT3X3() {}
    XMFLOAT3X3(float m00, float m01, float m02,
                float m10, float m11, float m12,
                float m20, float m21, float m22);
    explicit XMFLOAT3X3( const float *pArray);

    float operator() (size_t Row, size_t Column) const { return m[Row][Column]; }
    float& operator() (size_t Row, size_t Column) { return m[Row][Column]; }

    XMFLOAT3X3& operator= (const XMFLOAT3X3& Float3x3);
};



struct XMFLOAT4X3
{
    union
    {
        struct
        {
            float _11, _12, _13;
            float _21, _22, _23;
            float _31, _32, _33;
            float _41, _42, _43;
        };
        float m[4][3];
    };

    XMFLOAT4X3() {}
    XMFLOAT4X3(float m00, float m01, float m02,
                float m10, float m11, float m12,
                float m20, float m21, float m22,
                float m30, float m31, float m32);
    explicit XMFLOAT4X3( const float *pArray);

    float operator() (size_t Row, size_t Column) const { return m[Row][Column]; }
    float& operator() (size_t Row, size_t Column) { return m[Row][Column]; }

    XMFLOAT4X3& operator= (const XMFLOAT4X3& Float4x3);

};


__declspec(align(16)) struct XMFLOAT4X3A : public XMFLOAT4X3
{
    XMFLOAT4X3A() : XMFLOAT4X3() {}
    XMFLOAT4X3A(float m00, float m01, float m02,
                float m10, float m11, float m12,
                float m20, float m21, float m22,
                float m30, float m31, float m32) :
        XMFLOAT4X3(m00,m01,m02,m10,m11,m12,m20,m21,m22,m30,m31,m32) {}
    explicit XMFLOAT4X3A( const float *pArray) : XMFLOAT4X3(pArray) {}

    float operator() (size_t Row, size_t Column) const { return m[Row][Column]; }
    float& operator() (size_t Row, size_t Column) { return m[Row][Column]; }

    XMFLOAT4X3A& operator= (const XMFLOAT4X3A& Float4x3);
};



struct XMFLOAT4X4
{
    union
    {
        struct
        {
            float _11, _12, _13, _14;
            float _21, _22, _23, _24;
            float _31, _32, _33, _34;
            float _41, _42, _43, _44;
        };
        float m[4][4];
    };

    XMFLOAT4X4() {}
    XMFLOAT4X4(float m00, float m01, float m02, float m03,
                float m10, float m11, float m12, float m13,
                float m20, float m21, float m22, float m23,
                float m30, float m31, float m32, float m33);
    explicit XMFLOAT4X4( const float *pArray);

    float operator() (size_t Row, size_t Column) const { return m[Row][Column]; }
    float& operator() (size_t Row, size_t Column) { return m[Row][Column]; }

    XMFLOAT4X4& operator= (const XMFLOAT4X4& Float4x4);
};


__declspec(align(16)) struct XMFLOAT4X4A : public XMFLOAT4X4
{
    XMFLOAT4X4A() : XMFLOAT4X4() {}
    XMFLOAT4X4A(float m00, float m01, float m02, float m03,
                float m10, float m11, float m12, float m13,
                float m20, float m21, float m22, float m23,
                float m30, float m31, float m32, float m33)
        : XMFLOAT4X4(m00,m01,m02,m03,m10,m11,m12,m13,m20,m21,m22,m23,m30,m31,m32,m33) {}
    explicit XMFLOAT4X4A( const float *pArray) : XMFLOAT4X4(pArray) {}

    float operator() (size_t Row, size_t Column) const { return m[Row][Column]; }
    float& operator() (size_t Row, size_t Column) { return m[Row][Column]; }

    XMFLOAT4X4A& operator= (const XMFLOAT4X4A& Float4x4);
};



#pragma prefast(pop)
#pragma warning(pop)







XMVECTOR __vectorcall XMConvertVectorIntToFloat(FXMVECTOR VInt, uint32_t DivExponent);
XMVECTOR __vectorcall XMConvertVectorFloatToInt(FXMVECTOR VFloat, uint32_t MulExponent);
XMVECTOR __vectorcall XMConvertVectorUIntToFloat(FXMVECTOR VUInt, uint32_t DivExponent);
XMVECTOR __vectorcall XMConvertVectorFloatToUInt(FXMVECTOR VFloat, uint32_t MulExponent);







XMVECTOR __vectorcall XMVectorSetBinaryConstant(uint32_t C0, uint32_t C1, uint32_t C2, uint32_t C3);
XMVECTOR __vectorcall XMVectorSplatConstant(int32_t IntConstant, uint32_t DivExponent);
XMVECTOR __vectorcall XMVectorSplatConstantInt(int32_t IntConstant);







XMVECTOR __vectorcall XMLoadInt( const uint32_t* pSource);
XMVECTOR __vectorcall XMLoadFloat( const float* pSource);

XMVECTOR __vectorcall XMLoadInt2( const uint32_t* pSource);
XMVECTOR __vectorcall XMLoadInt2A( const uint32_t* PSource);
XMVECTOR __vectorcall XMLoadFloat2( const XMFLOAT2* pSource);
XMVECTOR __vectorcall XMLoadFloat2A( const XMFLOAT2A* pSource);
XMVECTOR __vectorcall XMLoadSInt2( const XMINT2* pSource);
XMVECTOR __vectorcall XMLoadUInt2( const XMUINT2* pSource);

XMVECTOR __vectorcall XMLoadInt3( const uint32_t* pSource);
XMVECTOR __vectorcall XMLoadInt3A( const uint32_t* pSource);
XMVECTOR __vectorcall XMLoadFloat3( const XMFLOAT3* pSource);
XMVECTOR __vectorcall XMLoadFloat3A( const XMFLOAT3A* pSource);
XMVECTOR __vectorcall XMLoadSInt3( const XMINT3* pSource);
XMVECTOR __vectorcall XMLoadUInt3( const XMUINT3* pSource);

XMVECTOR __vectorcall XMLoadInt4( const uint32_t* pSource);
XMVECTOR __vectorcall XMLoadInt4A( const uint32_t* pSource);
XMVECTOR __vectorcall XMLoadFloat4( const XMFLOAT4* pSource);
XMVECTOR __vectorcall XMLoadFloat4A( const XMFLOAT4A* pSource);
XMVECTOR __vectorcall XMLoadSInt4( const XMINT4* pSource);
XMVECTOR __vectorcall XMLoadUInt4( const XMUINT4* pSource);

XMMATRIX __vectorcall XMLoadFloat3x3( const XMFLOAT3X3* pSource);
XMMATRIX __vectorcall XMLoadFloat4x3( const XMFLOAT4X3* pSource);
XMMATRIX __vectorcall XMLoadFloat4x3A( const XMFLOAT4X3A* pSource);
XMMATRIX __vectorcall XMLoadFloat4x4( const XMFLOAT4X4* pSource);
XMMATRIX __vectorcall XMLoadFloat4x4A( const XMFLOAT4X4A* pSource);







void __vectorcall XMStoreInt( uint32_t* pDestination, FXMVECTOR V);
void __vectorcall XMStoreFloat( float* pDestination, FXMVECTOR V);

void __vectorcall XMStoreInt2( uint32_t* pDestination, FXMVECTOR V);
void __vectorcall XMStoreInt2A( uint32_t* pDestination, FXMVECTOR V);
void __vectorcall XMStoreFloat2( XMFLOAT2* pDestination, FXMVECTOR V);
void __vectorcall XMStoreFloat2A( XMFLOAT2A* pDestination, FXMVECTOR V);
void __vectorcall XMStoreSInt2( XMINT2* pDestination, FXMVECTOR V);
void __vectorcall XMStoreUInt2( XMUINT2* pDestination, FXMVECTOR V);

void __vectorcall XMStoreInt3( uint32_t* pDestination, FXMVECTOR V);
void __vectorcall XMStoreInt3A( uint32_t* pDestination, FXMVECTOR V);
void __vectorcall XMStoreFloat3( XMFLOAT3* pDestination, FXMVECTOR V);
void __vectorcall XMStoreFloat3A( XMFLOAT3A* pDestination, FXMVECTOR V);
void __vectorcall XMStoreSInt3( XMINT3* pDestination, FXMVECTOR V);
void __vectorcall XMStoreUInt3( XMUINT3* pDestination, FXMVECTOR V);

void __vectorcall XMStoreInt4( uint32_t* pDestination, FXMVECTOR V);
void __vectorcall XMStoreInt4A( uint32_t* pDestination, FXMVECTOR V);
void __vectorcall XMStoreFloat4( XMFLOAT4* pDestination, FXMVECTOR V);
void __vectorcall XMStoreFloat4A( XMFLOAT4A* pDestination, FXMVECTOR V);
void __vectorcall XMStoreSInt4( XMINT4* pDestination, FXMVECTOR V);
void __vectorcall XMStoreUInt4( XMUINT4* pDestination, FXMVECTOR V);

void __vectorcall XMStoreFloat3x3( XMFLOAT3X3* pDestination, FXMMATRIX M);
void __vectorcall XMStoreFloat4x3( XMFLOAT4X3* pDestination, FXMMATRIX M);
void __vectorcall XMStoreFloat4x3A( XMFLOAT4X3A* pDestination, FXMMATRIX M);
void __vectorcall XMStoreFloat4x4( XMFLOAT4X4* pDestination, FXMMATRIX M);
void __vectorcall XMStoreFloat4x4A( XMFLOAT4X4A* pDestination, FXMMATRIX M);







XMVECTOR __vectorcall XMVectorZero();
XMVECTOR __vectorcall XMVectorSet(float x, float y, float z, float w);
XMVECTOR __vectorcall XMVectorSetInt(uint32_t x, uint32_t y, uint32_t z, uint32_t w);
XMVECTOR __vectorcall XMVectorReplicate(float Value);
XMVECTOR __vectorcall XMVectorReplicatePtr( const float *pValue);
XMVECTOR __vectorcall XMVectorReplicateInt(uint32_t Value);
XMVECTOR __vectorcall XMVectorReplicateIntPtr( const uint32_t *pValue);
XMVECTOR __vectorcall XMVectorTrueInt();
XMVECTOR __vectorcall XMVectorFalseInt();
XMVECTOR __vectorcall XMVectorSplatX(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorSplatY(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorSplatZ(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorSplatW(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorSplatOne();
XMVECTOR __vectorcall XMVectorSplatInfinity();
XMVECTOR __vectorcall XMVectorSplatQNaN();
XMVECTOR __vectorcall XMVectorSplatEpsilon();
XMVECTOR __vectorcall XMVectorSplatSignMask();

float __vectorcall XMVectorGetByIndex(FXMVECTOR V, size_t i);
float __vectorcall XMVectorGetX(FXMVECTOR V);
float __vectorcall XMVectorGetY(FXMVECTOR V);
float __vectorcall XMVectorGetZ(FXMVECTOR V);
float __vectorcall XMVectorGetW(FXMVECTOR V);

void __vectorcall XMVectorGetByIndexPtr( float *f, FXMVECTOR V, size_t i);
void __vectorcall XMVectorGetXPtr( float *x, FXMVECTOR V);
void __vectorcall XMVectorGetYPtr( float *y, FXMVECTOR V);
void __vectorcall XMVectorGetZPtr( float *z, FXMVECTOR V);
void __vectorcall XMVectorGetWPtr( float *w, FXMVECTOR V);

uint32_t __vectorcall XMVectorGetIntByIndex(FXMVECTOR V, size_t i);
uint32_t __vectorcall XMVectorGetIntX(FXMVECTOR V);
uint32_t __vectorcall XMVectorGetIntY(FXMVECTOR V);
uint32_t __vectorcall XMVectorGetIntZ(FXMVECTOR V);
uint32_t __vectorcall XMVectorGetIntW(FXMVECTOR V);

void __vectorcall XMVectorGetIntByIndexPtr( uint32_t *x, FXMVECTOR V, size_t i);
void __vectorcall XMVectorGetIntXPtr( uint32_t *x, FXMVECTOR V);
void __vectorcall XMVectorGetIntYPtr( uint32_t *y, FXMVECTOR V);
void __vectorcall XMVectorGetIntZPtr( uint32_t *z, FXMVECTOR V);
void __vectorcall XMVectorGetIntWPtr( uint32_t *w, FXMVECTOR V);

XMVECTOR __vectorcall XMVectorSetByIndex(FXMVECTOR V,float f, size_t i);
XMVECTOR __vectorcall XMVectorSetX(FXMVECTOR V, float x);
XMVECTOR __vectorcall XMVectorSetY(FXMVECTOR V, float y);
XMVECTOR __vectorcall XMVectorSetZ(FXMVECTOR V, float z);
XMVECTOR __vectorcall XMVectorSetW(FXMVECTOR V, float w);

XMVECTOR __vectorcall XMVectorSetByIndexPtr( FXMVECTOR V, const float *f, size_t i);
XMVECTOR __vectorcall XMVectorSetXPtr( FXMVECTOR V, const float *x);
XMVECTOR __vectorcall XMVectorSetYPtr( FXMVECTOR V, const float *y);
XMVECTOR __vectorcall XMVectorSetZPtr( FXMVECTOR V, const float *z);
XMVECTOR __vectorcall XMVectorSetWPtr( FXMVECTOR V, const float *w);

XMVECTOR __vectorcall XMVectorSetIntByIndex(FXMVECTOR V, uint32_t x, size_t i);
XMVECTOR __vectorcall XMVectorSetIntX(FXMVECTOR V, uint32_t x);
XMVECTOR __vectorcall XMVectorSetIntY(FXMVECTOR V, uint32_t y);
XMVECTOR __vectorcall XMVectorSetIntZ(FXMVECTOR V, uint32_t z);
XMVECTOR __vectorcall XMVectorSetIntW(FXMVECTOR V, uint32_t w);

XMVECTOR __vectorcall XMVectorSetIntByIndexPtr( FXMVECTOR V, const uint32_t *x, size_t i);
XMVECTOR __vectorcall XMVectorSetIntXPtr( FXMVECTOR V, const uint32_t *x);
XMVECTOR __vectorcall XMVectorSetIntYPtr( FXMVECTOR V, const uint32_t *y);
XMVECTOR __vectorcall XMVectorSetIntZPtr( FXMVECTOR V, const uint32_t *z);
XMVECTOR __vectorcall XMVectorSetIntWPtr( FXMVECTOR V, const uint32_t *w);





XMVECTOR __vectorcall XMVectorSwizzle(FXMVECTOR V, uint32_t E0, uint32_t E1, uint32_t E2, uint32_t E3);
XMVECTOR __vectorcall XMVectorPermute(FXMVECTOR V1, FXMVECTOR V2, uint32_t PermuteX, uint32_t PermuteY, uint32_t PermuteZ, uint32_t PermuteW);
XMVECTOR __vectorcall XMVectorSelectControl(uint32_t VectorIndex0, uint32_t VectorIndex1, uint32_t VectorIndex2, uint32_t VectorIndex3);
XMVECTOR __vectorcall XMVectorSelect(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Control);
XMVECTOR __vectorcall XMVectorMergeXY(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorMergeZW(FXMVECTOR V1, FXMVECTOR V2);
# 917 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
XMVECTOR __vectorcall XMVectorShiftLeft(FXMVECTOR V1, FXMVECTOR V2, uint32_t Elements);
XMVECTOR __vectorcall XMVectorRotateLeft(FXMVECTOR V, uint32_t Elements);
XMVECTOR __vectorcall XMVectorRotateRight(FXMVECTOR V, uint32_t Elements);
XMVECTOR __vectorcall XMVectorInsert(FXMVECTOR VD, FXMVECTOR VS, uint32_t VSLeftRotateElements,
                                           uint32_t Select0, uint32_t Select1, uint32_t Select2, uint32_t Select3);

XMVECTOR __vectorcall XMVectorEqual(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorEqualR( uint32_t* pCR, FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorEqualInt(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorEqualIntR( uint32_t* pCR, FXMVECTOR V, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorNearEqual(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Epsilon);
XMVECTOR __vectorcall XMVectorNotEqual(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorNotEqualInt(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorGreater(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorGreaterR( uint32_t* pCR, FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorGreaterOrEqual(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorGreaterOrEqualR( uint32_t* pCR, FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorLess(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorLessOrEqual(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorInBounds(FXMVECTOR V, FXMVECTOR Bounds);
XMVECTOR __vectorcall XMVectorInBoundsR( uint32_t* pCR, FXMVECTOR V, FXMVECTOR Bounds);

XMVECTOR __vectorcall XMVectorIsNaN(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorIsInfinite(FXMVECTOR V);

XMVECTOR __vectorcall XMVectorMin(FXMVECTOR V1,FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorMax(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorRound(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorTruncate(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorFloor(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorCeiling(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorClamp(FXMVECTOR V, FXMVECTOR Min, FXMVECTOR Max);
XMVECTOR __vectorcall XMVectorSaturate(FXMVECTOR V);

XMVECTOR __vectorcall XMVectorAndInt(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorAndCInt(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorOrInt(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorNorInt(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorXorInt(FXMVECTOR V1, FXMVECTOR V2);

XMVECTOR __vectorcall XMVectorNegate(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorAdd(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorAddAngles(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorSubtract(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorSubtractAngles(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorMultiply(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorMultiplyAdd(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR V3);
XMVECTOR __vectorcall XMVectorDivide(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorNegativeMultiplySubtract(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR V3);
XMVECTOR __vectorcall XMVectorScale(FXMVECTOR V, float ScaleFactor);
XMVECTOR __vectorcall XMVectorReciprocalEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorReciprocal(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorSqrtEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorSqrt(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorReciprocalSqrtEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorReciprocalSqrt(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorExp2(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorExpE(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorExp(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorLog2(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorLogE(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorLog(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorPow(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorAbs(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorMod(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVectorModAngles(FXMVECTOR Angles);
XMVECTOR __vectorcall XMVectorSin(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorSinEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorCos(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorCosEst(FXMVECTOR V);
void __vectorcall XMVectorSinCos( XMVECTOR* pSin, XMVECTOR* pCos, FXMVECTOR V);
void __vectorcall XMVectorSinCosEst( XMVECTOR* pSin, XMVECTOR* pCos, FXMVECTOR V);
XMVECTOR __vectorcall XMVectorTan(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorTanEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorSinH(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorCosH(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorTanH(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorASin(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorASinEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorACos(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorACosEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorATan(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorATanEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVectorATan2(FXMVECTOR Y, FXMVECTOR X);
XMVECTOR __vectorcall XMVectorATan2Est(FXMVECTOR Y, FXMVECTOR X);
XMVECTOR __vectorcall XMVectorLerp(FXMVECTOR V0, FXMVECTOR V1, float t);
XMVECTOR __vectorcall XMVectorLerpV(FXMVECTOR V0, FXMVECTOR V1, FXMVECTOR T);
XMVECTOR __vectorcall XMVectorHermite(FXMVECTOR Position0, FXMVECTOR Tangent0, FXMVECTOR Position1, GXMVECTOR Tangent1, float t);
XMVECTOR __vectorcall XMVectorHermiteV(FXMVECTOR Position0, FXMVECTOR Tangent0, FXMVECTOR Position1, GXMVECTOR Tangent1, HXMVECTOR T);
XMVECTOR __vectorcall XMVectorCatmullRom(FXMVECTOR Position0, FXMVECTOR Position1, FXMVECTOR Position2, GXMVECTOR Position3, float t);
XMVECTOR __vectorcall XMVectorCatmullRomV(FXMVECTOR Position0, FXMVECTOR Position1, FXMVECTOR Position2, GXMVECTOR Position3, HXMVECTOR T);
XMVECTOR __vectorcall XMVectorBaryCentric(FXMVECTOR Position0, FXMVECTOR Position1, FXMVECTOR Position2, float f, float g);
XMVECTOR __vectorcall XMVectorBaryCentricV(FXMVECTOR Position0, FXMVECTOR Position1, FXMVECTOR Position2, GXMVECTOR F, HXMVECTOR G);







bool __vectorcall XMVector2Equal(FXMVECTOR V1, FXMVECTOR V2);
uint32_t __vectorcall XMVector2EqualR(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector2EqualInt(FXMVECTOR V1, FXMVECTOR V2);
uint32_t __vectorcall XMVector2EqualIntR(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector2NearEqual(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Epsilon);
bool __vectorcall XMVector2NotEqual(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector2NotEqualInt(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector2Greater(FXMVECTOR V1, FXMVECTOR V2);
uint32_t __vectorcall XMVector2GreaterR(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector2GreaterOrEqual(FXMVECTOR V1, FXMVECTOR V2);
uint32_t __vectorcall XMVector2GreaterOrEqualR(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector2Less(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector2LessOrEqual(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector2InBounds(FXMVECTOR V, FXMVECTOR Bounds);

bool __vectorcall XMVector2IsNaN(FXMVECTOR V);
bool __vectorcall XMVector2IsInfinite(FXMVECTOR V);

XMVECTOR __vectorcall XMVector2Dot(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVector2Cross(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVector2LengthSq(FXMVECTOR V);
XMVECTOR __vectorcall XMVector2ReciprocalLengthEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVector2ReciprocalLength(FXMVECTOR V);
XMVECTOR __vectorcall XMVector2LengthEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVector2Length(FXMVECTOR V);
XMVECTOR __vectorcall XMVector2NormalizeEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVector2Normalize(FXMVECTOR V);
XMVECTOR __vectorcall XMVector2ClampLength(FXMVECTOR V, float LengthMin, float LengthMax);
XMVECTOR __vectorcall XMVector2ClampLengthV(FXMVECTOR V, FXMVECTOR LengthMin, FXMVECTOR LengthMax);
XMVECTOR __vectorcall XMVector2Reflect(FXMVECTOR Incident, FXMVECTOR Normal);
XMVECTOR __vectorcall XMVector2Refract(FXMVECTOR Incident, FXMVECTOR Normal, float RefractionIndex);
XMVECTOR __vectorcall XMVector2RefractV(FXMVECTOR Incident, FXMVECTOR Normal, FXMVECTOR RefractionIndex);
XMVECTOR __vectorcall XMVector2Orthogonal(FXMVECTOR V);
XMVECTOR __vectorcall XMVector2AngleBetweenNormalsEst(FXMVECTOR N1, FXMVECTOR N2);
XMVECTOR __vectorcall XMVector2AngleBetweenNormals(FXMVECTOR N1, FXMVECTOR N2);
XMVECTOR __vectorcall XMVector2AngleBetweenVectors(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVector2LinePointDistance(FXMVECTOR LinePoint1, FXMVECTOR LinePoint2, FXMVECTOR Point);
XMVECTOR __vectorcall XMVector2IntersectLine(FXMVECTOR Line1Point1, FXMVECTOR Line1Point2, FXMVECTOR Line2Point1, GXMVECTOR Line2Point2);
XMVECTOR __vectorcall XMVector2Transform(FXMVECTOR V, FXMMATRIX M);
XMFLOAT4* __vectorcall XMVector2TransformStream( XMFLOAT4* pOutputStream,
                                                         size_t OutputStride,
                                                                                                                   const XMFLOAT2* pInputStream,
                                                         size_t InputStride, size_t VectorCount, FXMMATRIX M);
XMVECTOR __vectorcall XMVector2TransformCoord(FXMVECTOR V, FXMMATRIX M);
XMFLOAT2* __vectorcall XMVector2TransformCoordStream( XMFLOAT2* pOutputStream,
                                                               size_t OutputStride,
                                                                                                                         const XMFLOAT2* pInputStream,
                                                               size_t InputStride, size_t VectorCount, FXMMATRIX M);
XMVECTOR __vectorcall XMVector2TransformNormal(FXMVECTOR V, FXMMATRIX M);
XMFLOAT2* __vectorcall XMVector2TransformNormalStream( XMFLOAT2* pOutputStream,
                                                                size_t OutputStride,
                                                                                                                          const XMFLOAT2* pInputStream,
                                                                size_t InputStride, size_t VectorCount, FXMMATRIX M);







bool __vectorcall XMVector3Equal(FXMVECTOR V1, FXMVECTOR V2);
uint32_t __vectorcall XMVector3EqualR(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector3EqualInt(FXMVECTOR V1, FXMVECTOR V2);
uint32_t __vectorcall XMVector3EqualIntR(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector3NearEqual(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Epsilon);
bool __vectorcall XMVector3NotEqual(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector3NotEqualInt(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector3Greater(FXMVECTOR V1, FXMVECTOR V2);
uint32_t __vectorcall XMVector3GreaterR(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector3GreaterOrEqual(FXMVECTOR V1, FXMVECTOR V2);
uint32_t __vectorcall XMVector3GreaterOrEqualR(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector3Less(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector3LessOrEqual(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector3InBounds(FXMVECTOR V, FXMVECTOR Bounds);

bool __vectorcall XMVector3IsNaN(FXMVECTOR V);
bool __vectorcall XMVector3IsInfinite(FXMVECTOR V);

XMVECTOR __vectorcall XMVector3Dot(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVector3Cross(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVector3LengthSq(FXMVECTOR V);
XMVECTOR __vectorcall XMVector3ReciprocalLengthEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVector3ReciprocalLength(FXMVECTOR V);
XMVECTOR __vectorcall XMVector3LengthEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVector3Length(FXMVECTOR V);
XMVECTOR __vectorcall XMVector3NormalizeEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVector3Normalize(FXMVECTOR V);
XMVECTOR __vectorcall XMVector3ClampLength(FXMVECTOR V, float LengthMin, float LengthMax);
XMVECTOR __vectorcall XMVector3ClampLengthV(FXMVECTOR V, FXMVECTOR LengthMin, FXMVECTOR LengthMax);
XMVECTOR __vectorcall XMVector3Reflect(FXMVECTOR Incident, FXMVECTOR Normal);
XMVECTOR __vectorcall XMVector3Refract(FXMVECTOR Incident, FXMVECTOR Normal, float RefractionIndex);
XMVECTOR __vectorcall XMVector3RefractV(FXMVECTOR Incident, FXMVECTOR Normal, FXMVECTOR RefractionIndex);
XMVECTOR __vectorcall XMVector3Orthogonal(FXMVECTOR V);
XMVECTOR __vectorcall XMVector3AngleBetweenNormalsEst(FXMVECTOR N1, FXMVECTOR N2);
XMVECTOR __vectorcall XMVector3AngleBetweenNormals(FXMVECTOR N1, FXMVECTOR N2);
XMVECTOR __vectorcall XMVector3AngleBetweenVectors(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVector3LinePointDistance(FXMVECTOR LinePoint1, FXMVECTOR LinePoint2, FXMVECTOR Point);
void __vectorcall XMVector3ComponentsFromNormal( XMVECTOR* pParallel, XMVECTOR* pPerpendicular, FXMVECTOR V, FXMVECTOR Normal);
XMVECTOR __vectorcall XMVector3Rotate(FXMVECTOR V, FXMVECTOR RotationQuaternion);
XMVECTOR __vectorcall XMVector3InverseRotate(FXMVECTOR V, FXMVECTOR RotationQuaternion);
XMVECTOR __vectorcall XMVector3Transform(FXMVECTOR V, FXMMATRIX M);
XMFLOAT4* __vectorcall XMVector3TransformStream( XMFLOAT4* pOutputStream,
                                                          size_t OutputStride,
                                                                                                                    const XMFLOAT3* pInputStream,
                                                          size_t InputStride, size_t VectorCount, FXMMATRIX M);
XMVECTOR __vectorcall XMVector3TransformCoord(FXMVECTOR V, FXMMATRIX M);
XMFLOAT3* __vectorcall XMVector3TransformCoordStream( XMFLOAT3* pOutputStream,
                                                               size_t OutputStride,
                                                                                                                         const XMFLOAT3* pInputStream,
                                                               size_t InputStride, size_t VectorCount, FXMMATRIX M);
XMVECTOR __vectorcall XMVector3TransformNormal(FXMVECTOR V, FXMMATRIX M);
XMFLOAT3* __vectorcall XMVector3TransformNormalStream( XMFLOAT3* pOutputStream,
                                                                size_t OutputStride,
                                                                                                                          const XMFLOAT3* pInputStream,
                                                                size_t InputStride, size_t VectorCount, FXMMATRIX M);
XMVECTOR __vectorcall XMVector3Project(FXMVECTOR V, float ViewportX, float ViewportY, float ViewportWidth, float ViewportHeight, float ViewportMinZ, float ViewportMaxZ,
                                             FXMMATRIX Projection, CXMMATRIX View, CXMMATRIX World);
XMFLOAT3* __vectorcall XMVector3ProjectStream( XMFLOAT3* pOutputStream,
                                                        size_t OutputStride,
                                                                                                                  const XMFLOAT3* pInputStream,
                                                        size_t InputStride, size_t VectorCount,
                                                        float ViewportX, float ViewportY, float ViewportWidth, float ViewportHeight, float ViewportMinZ, float ViewportMaxZ,
                                                        FXMMATRIX Projection, CXMMATRIX View, CXMMATRIX World);
XMVECTOR __vectorcall XMVector3Unproject(FXMVECTOR V, float ViewportX, float ViewportY, float ViewportWidth, float ViewportHeight, float ViewportMinZ, float ViewportMaxZ,
                                               FXMMATRIX Projection, CXMMATRIX View, CXMMATRIX World);
XMFLOAT3* __vectorcall XMVector3UnprojectStream( XMFLOAT3* pOutputStream,
                                                          size_t OutputStride,
                                                                                                                    const XMFLOAT3* pInputStream,
                                                          size_t InputStride, size_t VectorCount,
                                                          float ViewportX, float ViewportY, float ViewportWidth, float ViewportHeight, float ViewportMinZ, float ViewportMaxZ,
                                                          FXMMATRIX Projection, CXMMATRIX View, CXMMATRIX World);







bool __vectorcall XMVector4Equal(FXMVECTOR V1, FXMVECTOR V2);
uint32_t __vectorcall XMVector4EqualR(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector4EqualInt(FXMVECTOR V1, FXMVECTOR V2);
uint32_t __vectorcall XMVector4EqualIntR(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector4NearEqual(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR Epsilon);
bool __vectorcall XMVector4NotEqual(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector4NotEqualInt(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector4Greater(FXMVECTOR V1, FXMVECTOR V2);
uint32_t __vectorcall XMVector4GreaterR(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector4GreaterOrEqual(FXMVECTOR V1, FXMVECTOR V2);
uint32_t __vectorcall XMVector4GreaterOrEqualR(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector4Less(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector4LessOrEqual(FXMVECTOR V1, FXMVECTOR V2);
bool __vectorcall XMVector4InBounds(FXMVECTOR V, FXMVECTOR Bounds);

bool __vectorcall XMVector4IsNaN(FXMVECTOR V);
bool __vectorcall XMVector4IsInfinite(FXMVECTOR V);

XMVECTOR __vectorcall XMVector4Dot(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVector4Cross(FXMVECTOR V1, FXMVECTOR V2, FXMVECTOR V3);
XMVECTOR __vectorcall XMVector4LengthSq(FXMVECTOR V);
XMVECTOR __vectorcall XMVector4ReciprocalLengthEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVector4ReciprocalLength(FXMVECTOR V);
XMVECTOR __vectorcall XMVector4LengthEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVector4Length(FXMVECTOR V);
XMVECTOR __vectorcall XMVector4NormalizeEst(FXMVECTOR V);
XMVECTOR __vectorcall XMVector4Normalize(FXMVECTOR V);
XMVECTOR __vectorcall XMVector4ClampLength(FXMVECTOR V, float LengthMin, float LengthMax);
XMVECTOR __vectorcall XMVector4ClampLengthV(FXMVECTOR V, FXMVECTOR LengthMin, FXMVECTOR LengthMax);
XMVECTOR __vectorcall XMVector4Reflect(FXMVECTOR Incident, FXMVECTOR Normal);
XMVECTOR __vectorcall XMVector4Refract(FXMVECTOR Incident, FXMVECTOR Normal, float RefractionIndex);
XMVECTOR __vectorcall XMVector4RefractV(FXMVECTOR Incident, FXMVECTOR Normal, FXMVECTOR RefractionIndex);
XMVECTOR __vectorcall XMVector4Orthogonal(FXMVECTOR V);
XMVECTOR __vectorcall XMVector4AngleBetweenNormalsEst(FXMVECTOR N1, FXMVECTOR N2);
XMVECTOR __vectorcall XMVector4AngleBetweenNormals(FXMVECTOR N1, FXMVECTOR N2);
XMVECTOR __vectorcall XMVector4AngleBetweenVectors(FXMVECTOR V1, FXMVECTOR V2);
XMVECTOR __vectorcall XMVector4Transform(FXMVECTOR V, FXMMATRIX M);
XMFLOAT4* __vectorcall XMVector4TransformStream( XMFLOAT4* pOutputStream,
                                                          size_t OutputStride,
                                                                                                                    const XMFLOAT4* pInputStream,
                                                          size_t InputStride, size_t VectorCount, FXMMATRIX M);







bool __vectorcall XMMatrixIsNaN(FXMMATRIX M);
bool __vectorcall XMMatrixIsInfinite(FXMMATRIX M);
bool __vectorcall XMMatrixIsIdentity(FXMMATRIX M);

XMMATRIX __vectorcall XMMatrixMultiply(FXMMATRIX M1, CXMMATRIX M2);
XMMATRIX __vectorcall XMMatrixMultiplyTranspose(FXMMATRIX M1, CXMMATRIX M2);
XMMATRIX __vectorcall XMMatrixTranspose(FXMMATRIX M);
XMMATRIX __vectorcall XMMatrixInverse( XMVECTOR* pDeterminant, FXMMATRIX M);
XMVECTOR __vectorcall XMMatrixDeterminant(FXMMATRIX M);

bool __vectorcall XMMatrixDecompose( XMVECTOR *outScale, XMVECTOR *outRotQuat, XMVECTOR *outTrans, FXMMATRIX M);

XMMATRIX __vectorcall XMMatrixIdentity();
XMMATRIX __vectorcall XMMatrixSet(float m00, float m01, float m02, float m03,
                                        float m10, float m11, float m12, float m13,
                                        float m20, float m21, float m22, float m23,
                                        float m30, float m31, float m32, float m33);
XMMATRIX __vectorcall XMMatrixTranslation(float OffsetX, float OffsetY, float OffsetZ);
XMMATRIX __vectorcall XMMatrixTranslationFromVector(FXMVECTOR Offset);
XMMATRIX __vectorcall XMMatrixScaling(float ScaleX, float ScaleY, float ScaleZ);
XMMATRIX __vectorcall XMMatrixScalingFromVector(FXMVECTOR Scale);
XMMATRIX __vectorcall XMMatrixRotationX(float Angle);
XMMATRIX __vectorcall XMMatrixRotationY(float Angle);
XMMATRIX __vectorcall XMMatrixRotationZ(float Angle);
XMMATRIX __vectorcall XMMatrixRotationRollPitchYaw(float Pitch, float Yaw, float Roll);
XMMATRIX __vectorcall XMMatrixRotationRollPitchYawFromVector(FXMVECTOR Angles);
XMMATRIX __vectorcall XMMatrixRotationNormal(FXMVECTOR NormalAxis, float Angle);
XMMATRIX __vectorcall XMMatrixRotationAxis(FXMVECTOR Axis, float Angle);
XMMATRIX __vectorcall XMMatrixRotationQuaternion(FXMVECTOR Quaternion);
XMMATRIX __vectorcall XMMatrixTransformation2D(FXMVECTOR ScalingOrigin, float ScalingOrientation, FXMVECTOR Scaling,
                                                     FXMVECTOR RotationOrigin, float Rotation, GXMVECTOR Translation);
XMMATRIX __vectorcall XMMatrixTransformation(FXMVECTOR ScalingOrigin, FXMVECTOR ScalingOrientationQuaternion, FXMVECTOR Scaling,
                                                   GXMVECTOR RotationOrigin, HXMVECTOR RotationQuaternion, HXMVECTOR Translation);
XMMATRIX __vectorcall XMMatrixAffineTransformation2D(FXMVECTOR Scaling, FXMVECTOR RotationOrigin, float Rotation, FXMVECTOR Translation);
XMMATRIX __vectorcall XMMatrixAffineTransformation(FXMVECTOR Scaling, FXMVECTOR RotationOrigin, FXMVECTOR RotationQuaternion, GXMVECTOR Translation);
XMMATRIX __vectorcall XMMatrixReflect(FXMVECTOR ReflectionPlane);
XMMATRIX __vectorcall XMMatrixShadow(FXMVECTOR ShadowPlane, FXMVECTOR LightPosition);

XMMATRIX __vectorcall XMMatrixLookAtLH(FXMVECTOR EyePosition, FXMVECTOR FocusPosition, FXMVECTOR UpDirection);
XMMATRIX __vectorcall XMMatrixLookAtRH(FXMVECTOR EyePosition, FXMVECTOR FocusPosition, FXMVECTOR UpDirection);
XMMATRIX __vectorcall XMMatrixLookToLH(FXMVECTOR EyePosition, FXMVECTOR EyeDirection, FXMVECTOR UpDirection);
XMMATRIX __vectorcall XMMatrixLookToRH(FXMVECTOR EyePosition, FXMVECTOR EyeDirection, FXMVECTOR UpDirection);
XMMATRIX __vectorcall XMMatrixPerspectiveLH(float ViewWidth, float ViewHeight, float NearZ, float FarZ);
XMMATRIX __vectorcall XMMatrixPerspectiveRH(float ViewWidth, float ViewHeight, float NearZ, float FarZ);
XMMATRIX __vectorcall XMMatrixPerspectiveFovLH(float FovAngleY, float AspectHByW, float NearZ, float FarZ);
XMMATRIX __vectorcall XMMatrixPerspectiveFovRH(float FovAngleY, float AspectHByW, float NearZ, float FarZ);
XMMATRIX __vectorcall XMMatrixPerspectiveOffCenterLH(float ViewLeft, float ViewRight, float ViewBottom, float ViewTop, float NearZ, float FarZ);
XMMATRIX __vectorcall XMMatrixPerspectiveOffCenterRH(float ViewLeft, float ViewRight, float ViewBottom, float ViewTop, float NearZ, float FarZ);
XMMATRIX __vectorcall XMMatrixOrthographicLH(float ViewWidth, float ViewHeight, float NearZ, float FarZ);
XMMATRIX __vectorcall XMMatrixOrthographicRH(float ViewWidth, float ViewHeight, float NearZ, float FarZ);
XMMATRIX __vectorcall XMMatrixOrthographicOffCenterLH(float ViewLeft, float ViewRight, float ViewBottom, float ViewTop, float NearZ, float FarZ);
XMMATRIX __vectorcall XMMatrixOrthographicOffCenterRH(float ViewLeft, float ViewRight, float ViewBottom, float ViewTop, float NearZ, float FarZ);
# 1263 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
bool __vectorcall XMQuaternionEqual(FXMVECTOR Q1, FXMVECTOR Q2);
bool __vectorcall XMQuaternionNotEqual(FXMVECTOR Q1, FXMVECTOR Q2);

bool __vectorcall XMQuaternionIsNaN(FXMVECTOR Q);
bool __vectorcall XMQuaternionIsInfinite(FXMVECTOR Q);
bool __vectorcall XMQuaternionIsIdentity(FXMVECTOR Q);

XMVECTOR __vectorcall XMQuaternionDot(FXMVECTOR Q1, FXMVECTOR Q2);
XMVECTOR __vectorcall XMQuaternionMultiply(FXMVECTOR Q1, FXMVECTOR Q2);
XMVECTOR __vectorcall XMQuaternionLengthSq(FXMVECTOR Q);
XMVECTOR __vectorcall XMQuaternionReciprocalLength(FXMVECTOR Q);
XMVECTOR __vectorcall XMQuaternionLength(FXMVECTOR Q);
XMVECTOR __vectorcall XMQuaternionNormalizeEst(FXMVECTOR Q);
XMVECTOR __vectorcall XMQuaternionNormalize(FXMVECTOR Q);
XMVECTOR __vectorcall XMQuaternionConjugate(FXMVECTOR Q);
XMVECTOR __vectorcall XMQuaternionInverse(FXMVECTOR Q);
XMVECTOR __vectorcall XMQuaternionLn(FXMVECTOR Q);
XMVECTOR __vectorcall XMQuaternionExp(FXMVECTOR Q);
XMVECTOR __vectorcall XMQuaternionSlerp(FXMVECTOR Q0, FXMVECTOR Q1, float t);
XMVECTOR __vectorcall XMQuaternionSlerpV(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR T);
XMVECTOR __vectorcall XMQuaternionSquad(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, GXMVECTOR Q3, float t);
XMVECTOR __vectorcall XMQuaternionSquadV(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, GXMVECTOR Q3, HXMVECTOR T);
void __vectorcall XMQuaternionSquadSetup( XMVECTOR* pA, XMVECTOR* pB, XMVECTOR* pC, FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, GXMVECTOR Q3);
XMVECTOR __vectorcall XMQuaternionBaryCentric(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, float f, float g);
XMVECTOR __vectorcall XMQuaternionBaryCentricV(FXMVECTOR Q0, FXMVECTOR Q1, FXMVECTOR Q2, GXMVECTOR F, HXMVECTOR G);

XMVECTOR __vectorcall XMQuaternionIdentity();
XMVECTOR __vectorcall XMQuaternionRotationRollPitchYaw(float Pitch, float Yaw, float Roll);
XMVECTOR __vectorcall XMQuaternionRotationRollPitchYawFromVector(FXMVECTOR Angles);
XMVECTOR __vectorcall XMQuaternionRotationNormal(FXMVECTOR NormalAxis, float Angle);
XMVECTOR __vectorcall XMQuaternionRotationAxis(FXMVECTOR Axis, float Angle);
XMVECTOR __vectorcall XMQuaternionRotationMatrix(FXMMATRIX M);

void __vectorcall XMQuaternionToAxisAngle( XMVECTOR* pAxis, float* pAngle, FXMVECTOR Q);







bool __vectorcall XMPlaneEqual(FXMVECTOR P1, FXMVECTOR P2);
bool __vectorcall XMPlaneNearEqual(FXMVECTOR P1, FXMVECTOR P2, FXMVECTOR Epsilon);
bool __vectorcall XMPlaneNotEqual(FXMVECTOR P1, FXMVECTOR P2);

bool __vectorcall XMPlaneIsNaN(FXMVECTOR P);
bool __vectorcall XMPlaneIsInfinite(FXMVECTOR P);

XMVECTOR __vectorcall XMPlaneDot(FXMVECTOR P, FXMVECTOR V);
XMVECTOR __vectorcall XMPlaneDotCoord(FXMVECTOR P, FXMVECTOR V);
XMVECTOR __vectorcall XMPlaneDotNormal(FXMVECTOR P, FXMVECTOR V);
XMVECTOR __vectorcall XMPlaneNormalizeEst(FXMVECTOR P);
XMVECTOR __vectorcall XMPlaneNormalize(FXMVECTOR P);
XMVECTOR __vectorcall XMPlaneIntersectLine(FXMVECTOR P, FXMVECTOR LinePoint1, FXMVECTOR LinePoint2);
void __vectorcall XMPlaneIntersectPlane( XMVECTOR* pLinePoint1, XMVECTOR* pLinePoint2, FXMVECTOR P1, FXMVECTOR P2);
XMVECTOR __vectorcall XMPlaneTransform(FXMVECTOR P, FXMMATRIX M);
XMFLOAT4* __vectorcall XMPlaneTransformStream( XMFLOAT4* pOutputStream,
                                                        size_t OutputStride,
                                                                                                                 const XMFLOAT4* pInputStream,
                                                        size_t InputStride, size_t PlaneCount, FXMMATRIX M);

XMVECTOR __vectorcall XMPlaneFromPointNormal(FXMVECTOR Point, FXMVECTOR Normal);
XMVECTOR __vectorcall XMPlaneFromPoints(FXMVECTOR Point1, FXMVECTOR Point2, FXMVECTOR Point3);







bool __vectorcall XMColorEqual(FXMVECTOR C1, FXMVECTOR C2);
bool __vectorcall XMColorNotEqual(FXMVECTOR C1, FXMVECTOR C2);
bool __vectorcall XMColorGreater(FXMVECTOR C1, FXMVECTOR C2);
bool __vectorcall XMColorGreaterOrEqual(FXMVECTOR C1, FXMVECTOR C2);
bool __vectorcall XMColorLess(FXMVECTOR C1, FXMVECTOR C2);
bool __vectorcall XMColorLessOrEqual(FXMVECTOR C1, FXMVECTOR C2);

bool __vectorcall XMColorIsNaN(FXMVECTOR C);
bool __vectorcall XMColorIsInfinite(FXMVECTOR C);

XMVECTOR __vectorcall XMColorNegative(FXMVECTOR C);
XMVECTOR __vectorcall XMColorModulate(FXMVECTOR C1, FXMVECTOR C2);
XMVECTOR __vectorcall XMColorAdjustSaturation(FXMVECTOR C, float Saturation);
XMVECTOR __vectorcall XMColorAdjustContrast(FXMVECTOR C, float Contrast);

XMVECTOR __vectorcall XMColorRGBToHSL( FXMVECTOR rgb );
XMVECTOR __vectorcall XMColorHSLToRGB( FXMVECTOR hsl );

XMVECTOR __vectorcall XMColorRGBToHSV( FXMVECTOR rgb );
XMVECTOR __vectorcall XMColorHSVToRGB( FXMVECTOR hsv );

XMVECTOR __vectorcall XMColorRGBToYUV( FXMVECTOR rgb );
XMVECTOR __vectorcall XMColorYUVToRGB( FXMVECTOR yuv );

XMVECTOR __vectorcall XMColorRGBToYUV_HD( FXMVECTOR rgb );
XMVECTOR __vectorcall XMColorYUVToRGB_HD( FXMVECTOR yuv );

XMVECTOR __vectorcall XMColorRGBToXYZ( FXMVECTOR rgb );
XMVECTOR __vectorcall XMColorXYZToRGB( FXMVECTOR xyz );

XMVECTOR __vectorcall XMColorXYZToSRGB( FXMVECTOR xyz );
XMVECTOR __vectorcall XMColorSRGBToXYZ( FXMVECTOR srgb );

XMVECTOR __vectorcall XMColorRGBToSRGB( FXMVECTOR rgb );
XMVECTOR __vectorcall XMColorSRGBToRGB( FXMVECTOR srgb );
# 1376 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
bool XMVerifyCPUSupport();

XMVECTOR __vectorcall XMFresnelTerm(FXMVECTOR CosIncidentAngle, FXMVECTOR RefractionIndex);

bool XMScalarNearEqual(float S1, float S2, float Epsilon);
float XMScalarModAngle(float Value);

float XMScalarSin(float Value);
float XMScalarSinEst(float Value);

float XMScalarCos(float Value);
float XMScalarCosEst(float Value);

void XMScalarSinCos( float* pSin, float* pCos, float Value);
void XMScalarSinCosEst( float* pSin, float* pCos, float Value);

float XMScalarASin(float Value);
float XMScalarASinEst(float Value);

float XMScalarACos(float Value);
float XMScalarACosEst(float Value);
# 1409 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
template<class T> inline T XMMin(T a, T b) { return (a < b) ? a : b; }
template<class T> inline T XMMax(T a, T b) { return (a > b) ? a : b; }






namespace Internal
{

    template<uint32_t Shuffle, bool WhichX, bool WhichY, bool WhichZ, bool WhichW> struct PermuteHelper
    {
        static XMVECTOR __vectorcall Permute(FXMVECTOR v1, FXMVECTOR v2)
        {
            static const XMVECTORU32 selectMask =
            {
                WhichX ? 0xFFFFFFFF : 0,
                WhichY ? 0xFFFFFFFF : 0,
                WhichZ ? 0xFFFFFFFF : 0,
                WhichW ? 0xFFFFFFFF : 0,
            };

            XMVECTOR shuffled1 = _mm_shuffle_ps( v1, v1, Shuffle );
            XMVECTOR shuffled2 = _mm_shuffle_ps( v2, v2, Shuffle );

            XMVECTOR masked1 = _mm_andnot_ps(selectMask, shuffled1);
            XMVECTOR masked2 = _mm_and_ps(selectMask, shuffled2);

            return _mm_or_ps(masked1, masked2);
        }
    };


    template<uint32_t Shuffle> struct PermuteHelper<Shuffle, false, false, false, false>
    {
        static XMVECTOR __vectorcall Permute(FXMVECTOR v1, FXMVECTOR v2) { (v2); return _mm_shuffle_ps( v1, v1, Shuffle ); }
    };


    template<uint32_t Shuffle> struct PermuteHelper<Shuffle, true, true, true, true>
    {
        static XMVECTOR __vectorcall Permute(FXMVECTOR v1, FXMVECTOR v2){ (v1); return _mm_shuffle_ps( v2, v2, Shuffle ); }
    };


    template<uint32_t Shuffle> struct PermuteHelper<Shuffle, false, false, true, true>
    {
        static XMVECTOR __vectorcall Permute(FXMVECTOR v1, FXMVECTOR v2) { return _mm_shuffle_ps(v1, v2, Shuffle); }
    };


    template<uint32_t Shuffle> struct PermuteHelper<Shuffle, true, true, false, false>
    {
        static XMVECTOR __vectorcall Permute(FXMVECTOR v1, FXMVECTOR v2) { return _mm_shuffle_ps(v2, v1, Shuffle); }
    };
};




template<uint32_t PermuteX, uint32_t PermuteY, uint32_t PermuteZ, uint32_t PermuteW>
    inline XMVECTOR __vectorcall XMVectorPermute(FXMVECTOR V1, FXMVECTOR V2)
{
    static_assert(PermuteX <= 7, "PermuteX template parameter out of range");
    static_assert(PermuteY <= 7, "PermuteY template parameter out of range");
    static_assert(PermuteZ <= 7, "PermuteZ template parameter out of range");
    static_assert(PermuteW <= 7, "PermuteW template parameter out of range");


    const uint32_t Shuffle = (((PermuteW & 3) << 6) | ((PermuteZ & 3) << 4) | ((PermuteY & 3) << 2) | ((PermuteX & 3)));

    const bool WhichX = PermuteX > 3;
    const bool WhichY = PermuteY > 3;
    const bool WhichZ = PermuteZ > 3;
    const bool WhichW = PermuteW > 3;

    return Internal::PermuteHelper<Shuffle, WhichX, WhichY, WhichZ, WhichW>::Permute(V1, V2);





}


template<> inline XMVECTOR __vectorcall XMVectorPermute<0,1,2,3>(FXMVECTOR V1, FXMVECTOR V2) { (V2); return V1; }
template<> inline XMVECTOR __vectorcall XMVectorPermute<4,5,6,7>(FXMVECTOR V1, FXMVECTOR V2) { (V1); return V2; }
# 1542 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
template<uint32_t SwizzleX, uint32_t SwizzleY, uint32_t SwizzleZ, uint32_t SwizzleW>
    inline XMVECTOR __vectorcall XMVectorSwizzle(FXMVECTOR V)
{
    static_assert(SwizzleX <= 3, "SwizzleX template parameter out of range");
    static_assert(SwizzleY <= 3, "SwizzleY template parameter out of range");
    static_assert(SwizzleZ <= 3, "SwizzleZ template parameter out of range");
    static_assert(SwizzleW <= 3, "SwizzleW template parameter out of range");


    return _mm_shuffle_ps( V, V, (((SwizzleW) << 6) | ((SwizzleZ) << 4) | ((SwizzleY) << 2) | ((SwizzleX))) );





}


template<> inline XMVECTOR __vectorcall XMVectorSwizzle<0,1,2,3>(FXMVECTOR V) { return V; }
# 1600 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
template<uint32_t Elements>
    inline XMVECTOR __vectorcall XMVectorShiftLeft(FXMVECTOR V1, FXMVECTOR V2)
{
    static_assert( Elements < 4, "Elements template parameter out of range" );
    return XMVectorPermute<Elements, (Elements + 1), (Elements + 2), (Elements + 3)>(V1, V2);
}

template<uint32_t Elements>
    inline XMVECTOR __vectorcall XMVectorRotateLeft(FXMVECTOR V)
{
    static_assert( Elements < 4, "Elements template parameter out of range" );
    return XMVectorSwizzle<Elements & 3, (Elements + 1) & 3, (Elements + 2) & 3, (Elements + 3) & 3>(V);
}

template<uint32_t Elements>
    inline XMVECTOR __vectorcall XMVectorRotateRight(FXMVECTOR V)
{
    static_assert( Elements < 4, "Elements template parameter out of range" );
    return XMVectorSwizzle<(4 - Elements) & 3, (5 - Elements) & 3, (6 - Elements) & 3, (7 - Elements) & 3>(V);
}

template<uint32_t VSLeftRotateElements, uint32_t Select0, uint32_t Select1, uint32_t Select2, uint32_t Select3>
    inline XMVECTOR __vectorcall XMVectorInsert(FXMVECTOR VD, FXMVECTOR VS)
{
    XMVECTOR Control = XMVectorSelectControl(Select0&1, Select1&1, Select2&1, Select3&1);
    return XMVectorSelect( VD, XMVectorRotateLeft<VSLeftRotateElements>(VS), Control );
}
# 1646 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
extern const __declspec(selectany) XMVECTORF32 g_XMSinCoefficients0 = {-0.16666667f, +0.0083333310f, -0.00019840874f, +2.7525562e-06f};
extern const __declspec(selectany) XMVECTORF32 g_XMSinCoefficients1 = {-2.3889859e-08f, -0.16665852f , +0.0083139502f , -0.00018524670f };
extern const __declspec(selectany) XMVECTORF32 g_XMCosCoefficients0 = {-0.5f, +0.041666638f, -0.0013888378f, +2.4760495e-05f};
extern const __declspec(selectany) XMVECTORF32 g_XMCosCoefficients1 = {-2.6051615e-07f, -0.49992746f , +0.041493919f , -0.0012712436f };
extern const __declspec(selectany) XMVECTORF32 g_XMTanCoefficients0 = {1.0f, 0.333333333f, 0.133333333f, 5.396825397e-2f};
extern const __declspec(selectany) XMVECTORF32 g_XMTanCoefficients1 = {2.186948854e-2f, 8.863235530e-3f, 3.592128167e-3f, 1.455834485e-3f};
extern const __declspec(selectany) XMVECTORF32 g_XMTanCoefficients2 = {5.900274264e-4f, 2.391290764e-4f, 9.691537707e-5f, 3.927832950e-5f};
extern const __declspec(selectany) XMVECTORF32 g_XMArcCoefficients0 = {+1.5707963050f, -0.2145988016f, +0.0889789874f, -0.0501743046f};
extern const __declspec(selectany) XMVECTORF32 g_XMArcCoefficients1 = {+0.0308918810f, -0.0170881256f, +0.0066700901f, -0.0012624911f};
extern const __declspec(selectany) XMVECTORF32 g_XMATanCoefficients0 = {-0.3333314528f, +0.1999355085f, -0.1420889944f, +0.1065626393f};
extern const __declspec(selectany) XMVECTORF32 g_XMATanCoefficients1 = {-0.0752896400f, +0.0429096138f, -0.0161657367f, +0.0028662257f};
extern const __declspec(selectany) XMVECTORF32 g_XMATanEstCoefficients0 = {+0.999866f, +0.999866f, +0.999866f, +0.999866f};
extern const __declspec(selectany) XMVECTORF32 g_XMATanEstCoefficients1 = {-0.3302995f, +0.180141f, -0.085133f, +0.0208351f};
extern const __declspec(selectany) XMVECTORF32 g_XMTanEstCoefficients = {2.484f, -1.954923183e-1f, 2.467401101f, XM_1DIVPI};
extern const __declspec(selectany) XMVECTORF32 g_XMArcEstCoefficients = {+1.5707288f,-0.2121144f,+0.0742610f,-0.0187293f};
extern const __declspec(selectany) XMVECTORF32 g_XMPiConstants0 = {XM_PI, XM_2PI, XM_1DIVPI, XM_1DIV2PI};
extern const __declspec(selectany) XMVECTORF32 g_XMIdentityR0 = {1.0f, 0.0f, 0.0f, 0.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMIdentityR1 = {0.0f, 1.0f, 0.0f, 0.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMIdentityR2 = {0.0f, 0.0f, 1.0f, 0.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMIdentityR3 = {0.0f, 0.0f, 0.0f, 1.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMNegIdentityR0 = {-1.0f,0.0f, 0.0f, 0.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMNegIdentityR1 = {0.0f,-1.0f, 0.0f, 0.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMNegIdentityR2 = {0.0f, 0.0f,-1.0f, 0.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMNegIdentityR3 = {0.0f, 0.0f, 0.0f,-1.0f};
extern const __declspec(selectany) XMVECTORU32 g_XMNegativeZero = {0x80000000, 0x80000000, 0x80000000, 0x80000000};
extern const __declspec(selectany) XMVECTORU32 g_XMNegate3 = {0x80000000, 0x80000000, 0x80000000, 0x00000000};
extern const __declspec(selectany) XMVECTORU32 g_XMMask3 = {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000};
extern const __declspec(selectany) XMVECTORU32 g_XMMaskX = {0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000};
extern const __declspec(selectany) XMVECTORU32 g_XMMaskY = {0x00000000, 0xFFFFFFFF, 0x00000000, 0x00000000};
extern const __declspec(selectany) XMVECTORU32 g_XMMaskZ = {0x00000000, 0x00000000, 0xFFFFFFFF, 0x00000000};
extern const __declspec(selectany) XMVECTORU32 g_XMMaskW = {0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF};
extern const __declspec(selectany) XMVECTORF32 g_XMOne = { 1.0f, 1.0f, 1.0f, 1.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMOne3 = { 1.0f, 1.0f, 1.0f, 0.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMZero = { 0.0f, 0.0f, 0.0f, 0.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMTwo = { 2.f, 2.f, 2.f, 2.f };
extern const __declspec(selectany) XMVECTORF32 g_XMFour = { 4.f, 4.f, 4.f, 4.f };
extern const __declspec(selectany) XMVECTORF32 g_XMSix = { 6.f, 6.f, 6.f, 6.f };
extern const __declspec(selectany) XMVECTORF32 g_XMNegativeOne = {-1.0f,-1.0f,-1.0f,-1.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMOneHalf = { 0.5f, 0.5f, 0.5f, 0.5f};
extern const __declspec(selectany) XMVECTORF32 g_XMNegativeOneHalf = {-0.5f,-0.5f,-0.5f,-0.5f};
extern const __declspec(selectany) XMVECTORF32 g_XMNegativeTwoPi = {-XM_2PI, -XM_2PI, -XM_2PI, -XM_2PI};
extern const __declspec(selectany) XMVECTORF32 g_XMNegativePi = {-XM_PI, -XM_PI, -XM_PI, -XM_PI};
extern const __declspec(selectany) XMVECTORF32 g_XMHalfPi = {XM_PIDIV2, XM_PIDIV2, XM_PIDIV2, XM_PIDIV2};
extern const __declspec(selectany) XMVECTORF32 g_XMPi = {XM_PI, XM_PI, XM_PI, XM_PI};
extern const __declspec(selectany) XMVECTORF32 g_XMReciprocalPi = {XM_1DIVPI, XM_1DIVPI, XM_1DIVPI, XM_1DIVPI};
extern const __declspec(selectany) XMVECTORF32 g_XMTwoPi = {XM_2PI, XM_2PI, XM_2PI, XM_2PI};
extern const __declspec(selectany) XMVECTORF32 g_XMReciprocalTwoPi = {XM_1DIV2PI, XM_1DIV2PI, XM_1DIV2PI, XM_1DIV2PI};
extern const __declspec(selectany) XMVECTORF32 g_XMEpsilon = {1.192092896e-7f, 1.192092896e-7f, 1.192092896e-7f, 1.192092896e-7f};
extern const __declspec(selectany) XMVECTORI32 g_XMInfinity = {0x7F800000, 0x7F800000, 0x7F800000, 0x7F800000};
extern const __declspec(selectany) XMVECTORI32 g_XMQNaN = {0x7FC00000, 0x7FC00000, 0x7FC00000, 0x7FC00000};
extern const __declspec(selectany) XMVECTORI32 g_XMQNaNTest = {0x007FFFFF, 0x007FFFFF, 0x007FFFFF, 0x007FFFFF};
extern const __declspec(selectany) XMVECTORI32 g_XMAbsMask = {0x7FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF};
extern const __declspec(selectany) XMVECTORI32 g_XMFltMin = {0x00800000, 0x00800000, 0x00800000, 0x00800000};
extern const __declspec(selectany) XMVECTORI32 g_XMFltMax = {0x7F7FFFFF, 0x7F7FFFFF, 0x7F7FFFFF, 0x7F7FFFFF};
extern const __declspec(selectany) XMVECTORU32 g_XMNegOneMask = {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF};
extern const __declspec(selectany) XMVECTORU32 g_XMMaskA8R8G8B8 = {0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000};
extern const __declspec(selectany) XMVECTORU32 g_XMFlipA8R8G8B8 = {0x00000000, 0x00000000, 0x00000000, 0x80000000};
extern const __declspec(selectany) XMVECTORF32 g_XMFixAA8R8G8B8 = {0.0f,0.0f,0.0f,(float)(0x80000000U)};
extern const __declspec(selectany) XMVECTORF32 g_XMNormalizeA8R8G8B8 = {1.0f/(255.0f*(float)(0x10000)),1.0f/(255.0f*(float)(0x100)),1.0f/255.0f,1.0f/(255.0f*(float)(0x1000000))};
extern const __declspec(selectany) XMVECTORU32 g_XMMaskA2B10G10R10 = {0x000003FF, 0x000FFC00, 0x3FF00000, 0xC0000000};
extern const __declspec(selectany) XMVECTORU32 g_XMFlipA2B10G10R10 = {0x00000200, 0x00080000, 0x20000000, 0x80000000};
extern const __declspec(selectany) XMVECTORF32 g_XMFixAA2B10G10R10 = {-512.0f,-512.0f*(float)(0x400),-512.0f*(float)(0x100000),(float)(0x80000000U)};
extern const __declspec(selectany) XMVECTORF32 g_XMNormalizeA2B10G10R10 = {1.0f/511.0f,1.0f/(511.0f*(float)(0x400)),1.0f/(511.0f*(float)(0x100000)),1.0f/(3.0f*(float)(0x40000000))};
extern const __declspec(selectany) XMVECTORU32 g_XMMaskX16Y16 = {0x0000FFFF, 0xFFFF0000, 0x00000000, 0x00000000};
extern const __declspec(selectany) XMVECTORI32 g_XMFlipX16Y16 = {0x00008000, 0x00000000, 0x00000000, 0x00000000};
extern const __declspec(selectany) XMVECTORF32 g_XMFixX16Y16 = {-32768.0f,0.0f,0.0f,0.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMNormalizeX16Y16 = {1.0f/32767.0f,1.0f/(32767.0f*65536.0f),0.0f,0.0f};
extern const __declspec(selectany) XMVECTORU32 g_XMMaskX16Y16Z16W16 = {0x0000FFFF, 0x0000FFFF, 0xFFFF0000, 0xFFFF0000};
extern const __declspec(selectany) XMVECTORI32 g_XMFlipX16Y16Z16W16 = {0x00008000, 0x00008000, 0x00000000, 0x00000000};
extern const __declspec(selectany) XMVECTORF32 g_XMFixX16Y16Z16W16 = {-32768.0f,-32768.0f,0.0f,0.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMNormalizeX16Y16Z16W16 = {1.0f/32767.0f,1.0f/32767.0f,1.0f/(32767.0f*65536.0f),1.0f/(32767.0f*65536.0f)};
extern const __declspec(selectany) XMVECTORF32 g_XMNoFraction = {8388608.0f,8388608.0f,8388608.0f,8388608.0f};
extern const __declspec(selectany) XMVECTORI32 g_XMMaskByte = {0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF};
extern const __declspec(selectany) XMVECTORF32 g_XMNegateX = {-1.0f, 1.0f, 1.0f, 1.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMNegateY = { 1.0f,-1.0f, 1.0f, 1.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMNegateZ = { 1.0f, 1.0f,-1.0f, 1.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMNegateW = { 1.0f, 1.0f, 1.0f,-1.0f};
extern const __declspec(selectany) XMVECTORU32 g_XMSelect0101 = {XM_SELECT_0, XM_SELECT_1, XM_SELECT_0, XM_SELECT_1};
extern const __declspec(selectany) XMVECTORU32 g_XMSelect1010 = {XM_SELECT_1, XM_SELECT_0, XM_SELECT_1, XM_SELECT_0};
extern const __declspec(selectany) XMVECTORI32 g_XMOneHalfMinusEpsilon = { 0x3EFFFFFD, 0x3EFFFFFD, 0x3EFFFFFD, 0x3EFFFFFD};
extern const __declspec(selectany) XMVECTORU32 g_XMSelect1000 = {XM_SELECT_1, XM_SELECT_0, XM_SELECT_0, XM_SELECT_0};
extern const __declspec(selectany) XMVECTORU32 g_XMSelect1100 = {XM_SELECT_1, XM_SELECT_1, XM_SELECT_0, XM_SELECT_0};
extern const __declspec(selectany) XMVECTORU32 g_XMSelect1110 = {XM_SELECT_1, XM_SELECT_1, XM_SELECT_1, XM_SELECT_0};
extern const __declspec(selectany) XMVECTORU32 g_XMSelect1011 = { XM_SELECT_1, XM_SELECT_0, XM_SELECT_1, XM_SELECT_1 };
extern const __declspec(selectany) XMVECTORF32 g_XMFixupY16 = {1.0f,1.0f/65536.0f,0.0f,0.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMFixupY16W16 = {1.0f,1.0f,1.0f/65536.0f,1.0f/65536.0f};
extern const __declspec(selectany) XMVECTORU32 g_XMFlipY = {0,0x80000000,0,0};
extern const __declspec(selectany) XMVECTORU32 g_XMFlipZ = {0,0,0x80000000,0};
extern const __declspec(selectany) XMVECTORU32 g_XMFlipW = {0,0,0,0x80000000};
extern const __declspec(selectany) XMVECTORU32 g_XMFlipYZ = {0,0x80000000,0x80000000,0};
extern const __declspec(selectany) XMVECTORU32 g_XMFlipZW = {0,0,0x80000000,0x80000000};
extern const __declspec(selectany) XMVECTORU32 g_XMFlipYW = {0,0x80000000,0,0x80000000};
extern const __declspec(selectany) XMVECTORI32 g_XMMaskDec4 = {0x3FF,0x3FF<<10,0x3FF<<20,0x3<<30};
extern const __declspec(selectany) XMVECTORI32 g_XMXorDec4 = {0x200,0x200<<10,0x200<<20,0};
extern const __declspec(selectany) XMVECTORF32 g_XMAddUDec4 = {0,0,0,32768.0f*65536.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMAddDec4 = {-512.0f,-512.0f*1024.0f,-512.0f*1024.0f*1024.0f,0};
extern const __declspec(selectany) XMVECTORF32 g_XMMulDec4 = {1.0f,1.0f/1024.0f,1.0f/(1024.0f*1024.0f),1.0f/(1024.0f*1024.0f*1024.0f)};
extern const __declspec(selectany) XMVECTORU32 g_XMMaskByte4 = {0xFF,0xFF00,0xFF0000,0xFF000000};
extern const __declspec(selectany) XMVECTORI32 g_XMXorByte4 = {0x80,0x8000,0x800000,0x00000000};
extern const __declspec(selectany) XMVECTORF32 g_XMAddByte4 = {-128.0f,-128.0f*256.0f,-128.0f*65536.0f,0};
extern const __declspec(selectany) XMVECTORF32 g_XMFixUnsigned = {32768.0f*65536.0f,32768.0f*65536.0f,32768.0f*65536.0f,32768.0f*65536.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMMaxInt = {65536.0f*32768.0f-128.0f,65536.0f*32768.0f-128.0f,65536.0f*32768.0f-128.0f,65536.0f*32768.0f-128.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMMaxUInt = {65536.0f*65536.0f-256.0f,65536.0f*65536.0f-256.0f,65536.0f*65536.0f-256.0f,65536.0f*65536.0f-256.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMUnsignedFix = {32768.0f*65536.0f,32768.0f*65536.0f,32768.0f*65536.0f,32768.0f*65536.0f};
extern const __declspec(selectany) XMVECTORF32 g_XMsrgbScale = { 12.92f, 12.92f, 12.92f, 1.0f };
extern const __declspec(selectany) XMVECTORF32 g_XMsrgbA = { 0.055f, 0.055f, 0.055f, 0.0f };
extern const __declspec(selectany) XMVECTORF32 g_XMsrgbA1 = { 1.055f, 1.055f, 1.055f, 1.0f };
extern const __declspec(selectany) XMVECTORI32 g_XMExponentBias = {127, 127, 127, 127};
extern const __declspec(selectany) XMVECTORI32 g_XMSubnormalExponent = {-126, -126, -126, -126};
extern const __declspec(selectany) XMVECTORI32 g_XMNumTrailing = {23, 23, 23, 23};
extern const __declspec(selectany) XMVECTORI32 g_XMMinNormal = {0x00800000, 0x00800000, 0x00800000, 0x00800000};
extern const __declspec(selectany) XMVECTORU32 g_XMNegInfinity = {0xFF800000, 0xFF800000, 0xFF800000, 0xFF800000};
extern const __declspec(selectany) XMVECTORU32 g_XMNegQNaN = {0xFFC00000, 0xFFC00000, 0xFFC00000, 0xFFC00000};
extern const __declspec(selectany) XMVECTORI32 g_XMBin128 = {0x43000000, 0x43000000, 0x43000000, 0x43000000};
extern const __declspec(selectany) XMVECTORU32 g_XMBinNeg150 = {0xC3160000, 0xC3160000, 0xC3160000, 0xC3160000};
extern const __declspec(selectany) XMVECTORI32 g_XM253 = {253, 253, 253, 253};
extern const __declspec(selectany) XMVECTORF32 g_XMExpEst1 = {-6.93147182e-1f, -6.93147182e-1f, -6.93147182e-1f, -6.93147182e-1f};
extern const __declspec(selectany) XMVECTORF32 g_XMExpEst2 = {+2.40226462e-1f, +2.40226462e-1f, +2.40226462e-1f, +2.40226462e-1f};
extern const __declspec(selectany) XMVECTORF32 g_XMExpEst3 = {-5.55036440e-2f, -5.55036440e-2f, -5.55036440e-2f, -5.55036440e-2f};
extern const __declspec(selectany) XMVECTORF32 g_XMExpEst4 = {+9.61597636e-3f, +9.61597636e-3f, +9.61597636e-3f, +9.61597636e-3f};
extern const __declspec(selectany) XMVECTORF32 g_XMExpEst5 = {-1.32823968e-3f, -1.32823968e-3f, -1.32823968e-3f, -1.32823968e-3f};
extern const __declspec(selectany) XMVECTORF32 g_XMExpEst6 = {+1.47491097e-4f, +1.47491097e-4f, +1.47491097e-4f, +1.47491097e-4f};
extern const __declspec(selectany) XMVECTORF32 g_XMExpEst7 = {-1.08635004e-5f, -1.08635004e-5f, -1.08635004e-5f, -1.08635004e-5f};
extern const __declspec(selectany) XMVECTORF32 g_XMLogEst0 = {+1.442693f, +1.442693f, +1.442693f, +1.442693f};
extern const __declspec(selectany) XMVECTORF32 g_XMLogEst1 = {-0.721242f, -0.721242f, -0.721242f, -0.721242f};
extern const __declspec(selectany) XMVECTORF32 g_XMLogEst2 = {+0.479384f, +0.479384f, +0.479384f, +0.479384f};
extern const __declspec(selectany) XMVECTORF32 g_XMLogEst3 = {-0.350295f, -0.350295f, -0.350295f, -0.350295f};
extern const __declspec(selectany) XMVECTORF32 g_XMLogEst4 = {+0.248590f, +0.248590f, +0.248590f, +0.248590f};
extern const __declspec(selectany) XMVECTORF32 g_XMLogEst5 = {-0.145700f, -0.145700f, -0.145700f, -0.145700f};
extern const __declspec(selectany) XMVECTORF32 g_XMLogEst6 = {+0.057148f, +0.057148f, +0.057148f, +0.057148f};
extern const __declspec(selectany) XMVECTORF32 g_XMLogEst7 = {-0.010578f, -0.010578f, -0.010578f, -0.010578f};
extern const __declspec(selectany) XMVECTORF32 g_XMLgE = {+1.442695f, +1.442695f, +1.442695f, +1.442695f};
extern const __declspec(selectany) XMVECTORF32 g_XMInvLgE = {+6.93147182e-1f, +6.93147182e-1f, +6.93147182e-1f, +6.93147182e-1f};







#pragma warning(push)
#pragma warning(disable: 4068 4214 4204 4365 4616 4640 6001)

#pragma prefast(push)
#pragma prefast(disable : 25000, "FXMVECTOR is 16 bytes")



inline XMVECTOR __vectorcall XMVectorSetBinaryConstant(uint32_t C0, uint32_t C1, uint32_t C2, uint32_t C3)
{
# 1811 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
    static const XMVECTORU32 g_vMask1 = {1,1,1,1};

    __m128i vTemp = _mm_set_epi32(C3,C2,C1,C0);

    vTemp = _mm_and_si128(vTemp,g_vMask1);

    vTemp = _mm_cmpeq_epi32(vTemp,g_vMask1);

    vTemp = _mm_and_si128(vTemp,g_XMOne);
    return _mm_castsi128_ps(vTemp);

}



inline XMVECTOR __vectorcall XMVectorSplatConstant(int32_t IntConstant, uint32_t DivExponent)
{
    (void)( (!!(IntConstant >= -16 && IntConstant <= 15)) || (_wassert(L"IntConstant >= -16 && IntConstant <= 15", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h", (unsigned)(1828)), 0) );
    (void)( (!!(DivExponent < 32)) || (_wassert(L"DivExponent < 32", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h", (unsigned)(1829)), 0) );
# 1851 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
    __m128i vScale = _mm_set1_epi32(IntConstant);

    XMVECTOR vResult = _mm_cvtepi32_ps(vScale);

    uint32_t uScale = 0x3F800000U - (DivExponent << 23);

    vScale = _mm_set1_epi32(uScale);

    vResult = _mm_mul_ps(vResult,_mm_castsi128_ps(vScale));
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorSplatConstantInt(int32_t IntConstant)
{
    (void)( (!!(IntConstant >= -16 && IntConstant <= 15)) || (_wassert(L"IntConstant >= -16 && IntConstant <= 15", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h", (unsigned)(1868)), 0) );
# 1878 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h"
    __m128i V = _mm_set1_epi32( IntConstant );
    return _mm_castsi128_ps(V);

}


# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl" 1
# 24 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
#pragma warning(push)
#pragma warning(disable: 4701)

inline XMVECTOR __vectorcall XMConvertVectorIntToFloat
(
    FXMVECTOR VInt,
    uint32_t DivExponent
)
{
    (void)( (!!(DivExponent<32)) || (_wassert(L"DivExponent<32", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(33)), 0) );
# 49 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vResult = _mm_cvtepi32_ps(_mm_castps_si128(VInt));

    uint32_t uScale = 0x3F800000U - (DivExponent << 23);

    __m128i vScale = _mm_set1_epi32(uScale);
    vResult = _mm_mul_ps(vResult,_mm_castsi128_ps(vScale));
    return vResult;

}



inline XMVECTOR __vectorcall XMConvertVectorFloatToInt
(
    FXMVECTOR VFloat,
    uint32_t MulExponent
)
{
    (void)( (!!(MulExponent<32)) || (_wassert(L"MulExponent<32", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(67)), 0) );
# 98 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vResult = _mm_set_ps1((float)(1U << MulExponent));
    vResult = _mm_mul_ps(vResult,VFloat);

    XMVECTOR vOverflow = _mm_cmpgt_ps(vResult,g_XMMaxInt);

    __m128i vResulti = _mm_cvttps_epi32(vResult);

    vResult = _mm_and_ps(vOverflow,g_XMAbsMask);
    vOverflow = _mm_andnot_ps(vOverflow,_mm_castsi128_ps(vResulti));
    vOverflow = _mm_or_ps(vOverflow,vResult);
    return vOverflow;

}



inline XMVECTOR __vectorcall XMConvertVectorUIntToFloat
(
    FXMVECTOR VUInt,
    uint32_t DivExponent
)
{
    (void)( (!!(DivExponent<32)) || (_wassert(L"DivExponent<32", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(120)), 0) );
# 136 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vMask = _mm_and_ps(VUInt,g_XMNegativeZero);

    XMVECTOR vResult = _mm_xor_ps(VUInt,vMask);

    vResult = _mm_cvtepi32_ps(_mm_castps_si128(vResult));

    __m128i iMask = _mm_srai_epi32(_mm_castps_si128(vMask),31);

    vMask = _mm_and_ps(_mm_castsi128_ps(iMask),g_XMFixUnsigned);
    vResult = _mm_add_ps(vResult,vMask);

    uint32_t uScale = 0x3F800000U - (DivExponent << 23);

    iMask = _mm_set1_epi32(uScale);
    vResult = _mm_mul_ps(vResult,_mm_castsi128_ps(iMask));
    return vResult;

}



inline XMVECTOR __vectorcall XMConvertVectorFloatToUInt
(
    FXMVECTOR VFloat,
    uint32_t MulExponent
)
{
    (void)( (!!(MulExponent<32)) || (_wassert(L"MulExponent<32", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(163)), 0) );
# 193 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vResult = _mm_set_ps1(static_cast<float>(1U << MulExponent));
    vResult = _mm_mul_ps(vResult,VFloat);

    vResult = _mm_max_ps(vResult,g_XMZero);

    XMVECTOR vOverflow = _mm_cmpgt_ps(vResult,g_XMMaxUInt);
    XMVECTOR vValue = g_XMUnsignedFix;

    XMVECTOR vMask = _mm_cmpge_ps(vResult,vValue);

    vValue = _mm_and_ps(vValue,vMask);

    vResult = _mm_sub_ps(vResult,vValue);
    __m128i vResulti = _mm_cvttps_epi32(vResult);

    vMask = _mm_and_ps(vMask,g_XMNegativeZero);
    vResult = _mm_xor_ps(_mm_castsi128_ps(vResulti),vMask);

    vResult = _mm_or_ps(vResult,vOverflow);
    return vResult;

}

#pragma warning(pop)
# 226 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
inline XMVECTOR __vectorcall XMLoadInt(const uint32_t* pSource)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(228)), 0) );
# 240 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    return _mm_load_ss( reinterpret_cast<const float*>(pSource) );

}



inline XMVECTOR __vectorcall XMLoadFloat(const float* pSource)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(248)), 0) );
# 260 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    return _mm_load_ss( pSource );

}



inline XMVECTOR __vectorcall XMLoadInt2
(
    const uint32_t* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(271)), 0) );
# 284 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128 x = _mm_load_ss( reinterpret_cast<const float*>(pSource) );
    __m128 y = _mm_load_ss( reinterpret_cast<const float*>(pSource+1) );
    return _mm_unpacklo_ps( x, y );

}



inline XMVECTOR __vectorcall XMLoadInt2A
(
    const uint32_t* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(297)), 0) );
    (void)( (!!(((uintptr_t)pSource & 0xF) == 0)) || (_wassert(L"((uintptr_t)pSource & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(298)), 0) );
# 311 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128i V = _mm_loadl_epi64( reinterpret_cast<const __m128i*>(pSource) );
    return _mm_castsi128_ps(V);

}



inline XMVECTOR __vectorcall XMLoadFloat2
(
    const XMFLOAT2* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(323)), 0) );
# 336 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128 x = _mm_load_ss( &pSource->x );
    __m128 y = _mm_load_ss( &pSource->y );
    return _mm_unpacklo_ps( x, y );

}



inline XMVECTOR __vectorcall XMLoadFloat2A
(
    const XMFLOAT2A* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(349)), 0) );
    (void)( (!!(((uintptr_t)pSource & 0xF) == 0)) || (_wassert(L"((uintptr_t)pSource & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(350)), 0) );
# 363 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128i V = _mm_loadl_epi64( reinterpret_cast<const __m128i*>(pSource) );
    return _mm_castsi128_ps(V);

}



inline XMVECTOR __vectorcall XMLoadSInt2
(
    const XMINT2* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(375)), 0) );
# 389 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128 x = _mm_load_ss( reinterpret_cast<const float*>(&pSource->x) );
    __m128 y = _mm_load_ss( reinterpret_cast<const float*>(&pSource->y) );
    __m128 V = _mm_unpacklo_ps( x, y );
    return _mm_cvtepi32_ps(_mm_castps_si128(V));

}



inline XMVECTOR __vectorcall XMLoadUInt2
(
    const XMUINT2* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(403)), 0) );
# 417 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128 x = _mm_load_ss( reinterpret_cast<const float*>(&pSource->x) );
    __m128 y = _mm_load_ss( reinterpret_cast<const float*>(&pSource->y) );
    __m128 V = _mm_unpacklo_ps( x, y );


    XMVECTOR vMask = _mm_and_ps(V,g_XMNegativeZero);

    XMVECTOR vResult = _mm_xor_ps(V,vMask);

    vResult = _mm_cvtepi32_ps(_mm_castps_si128(vResult));

    __m128i iMask = _mm_srai_epi32(_mm_castps_si128(vMask),31);

    vMask = _mm_and_ps(_mm_castsi128_ps(iMask),g_XMFixUnsigned);
    vResult = _mm_add_ps(vResult,vMask);
    return vResult;

}



inline XMVECTOR __vectorcall XMLoadInt3
(
    const uint32_t* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(443)), 0) );
# 457 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128 x = _mm_load_ss( reinterpret_cast<const float*>(pSource) );
    __m128 y = _mm_load_ss( reinterpret_cast<const float*>(pSource+1) );
    __m128 z = _mm_load_ss( reinterpret_cast<const float*>(pSource+2) );
    __m128 xy = _mm_unpacklo_ps( x, y );
    return _mm_movelh_ps( xy, z );

}



inline XMVECTOR __vectorcall XMLoadInt3A
(
    const uint32_t* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(472)), 0) );
    (void)( (!!(((uintptr_t)pSource & 0xF) == 0)) || (_wassert(L"((uintptr_t)pSource & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(473)), 0) );
# 487 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128i V = _mm_load_si128( reinterpret_cast<const __m128i*>(pSource) );
    V = _mm_and_si128( V, g_XMMask3 );
    return _mm_castsi128_ps(V);

}



inline XMVECTOR __vectorcall XMLoadFloat3
(
    const XMFLOAT3* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(500)), 0) );
# 514 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128 x = _mm_load_ss( &pSource->x );
    __m128 y = _mm_load_ss( &pSource->y );
    __m128 z = _mm_load_ss( &pSource->z );
    __m128 xy = _mm_unpacklo_ps( x, y );
    return _mm_movelh_ps( xy, z );

}



inline XMVECTOR __vectorcall XMLoadFloat3A
(
    const XMFLOAT3A* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(529)), 0) );
    (void)( (!!(((uintptr_t)pSource & 0xF) == 0)) || (_wassert(L"((uintptr_t)pSource & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(530)), 0) );
# 544 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128 V = _mm_load_ps( &pSource->x );
    return _mm_and_ps( V, g_XMMask3 );

}



inline XMVECTOR __vectorcall XMLoadSInt3
(
    const XMINT3* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(556)), 0) );
# 573 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128 x = _mm_load_ss( reinterpret_cast<const float*>(&pSource->x) );
    __m128 y = _mm_load_ss( reinterpret_cast<const float*>(&pSource->y) );
    __m128 z = _mm_load_ss( reinterpret_cast<const float*>(&pSource->z) );
    __m128 xy = _mm_unpacklo_ps( x, y );
    __m128 V = _mm_movelh_ps( xy, z );
    return _mm_cvtepi32_ps(_mm_castps_si128(V));

}



inline XMVECTOR __vectorcall XMLoadUInt3
(
    const XMUINT3* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(589)), 0) );
# 604 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128 x = _mm_load_ss( reinterpret_cast<const float*>(&pSource->x) );
    __m128 y = _mm_load_ss( reinterpret_cast<const float*>(&pSource->y) );
    __m128 z = _mm_load_ss( reinterpret_cast<const float*>(&pSource->z) );
    __m128 xy = _mm_unpacklo_ps( x, y );
    __m128 V = _mm_movelh_ps( xy, z );


    XMVECTOR vMask = _mm_and_ps(V,g_XMNegativeZero);

    XMVECTOR vResult = _mm_xor_ps(V,vMask);

    vResult = _mm_cvtepi32_ps(_mm_castps_si128(vResult));

    __m128i iMask = _mm_srai_epi32(_mm_castps_si128(vMask),31);

    vMask = _mm_and_ps(_mm_castsi128_ps(iMask),g_XMFixUnsigned);
    vResult = _mm_add_ps(vResult,vMask);
    return vResult;


}



inline XMVECTOR __vectorcall XMLoadInt4
(
    const uint32_t* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(633)), 0) );
# 645 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128i V = _mm_loadu_si128( reinterpret_cast<const __m128i*>(pSource) );
    return _mm_castsi128_ps(V);

}



inline XMVECTOR __vectorcall XMLoadInt4A
(
    const uint32_t* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(657)), 0) );
    (void)( (!!(((uintptr_t)pSource & 0xF) == 0)) || (_wassert(L"((uintptr_t)pSource & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(658)), 0) );
# 669 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128i V = _mm_load_si128( reinterpret_cast<const __m128i*>(pSource) );
    return _mm_castsi128_ps(V);

}



inline XMVECTOR __vectorcall XMLoadFloat4
(
    const XMFLOAT4* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(681)), 0) );
# 692 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    return _mm_loadu_ps( &pSource->x );

}



inline XMVECTOR __vectorcall XMLoadFloat4A
(
    const XMFLOAT4A* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(703)), 0) );
    (void)( (!!(((uintptr_t)pSource & 0xF) == 0)) || (_wassert(L"((uintptr_t)pSource & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(704)), 0) );
# 715 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    return _mm_load_ps( &pSource->x );

}



inline XMVECTOR __vectorcall XMLoadSInt4
(
    const XMINT4* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(726)), 0) );
# 740 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128i V = _mm_loadu_si128( reinterpret_cast<const __m128i*>(pSource) );
    return _mm_cvtepi32_ps(V);

}



inline XMVECTOR __vectorcall XMLoadUInt4
(
    const XMUINT4* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(752)), 0) );
# 764 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128i V = _mm_loadu_si128( reinterpret_cast<const __m128i*>(pSource) );


    XMVECTOR vMask = _mm_and_ps(_mm_castsi128_ps(V),g_XMNegativeZero);

    XMVECTOR vResult = _mm_xor_ps(_mm_castsi128_ps(V),vMask);

    vResult = _mm_cvtepi32_ps(_mm_castps_si128(vResult));

    __m128i iMask = _mm_srai_epi32(_mm_castps_si128(vMask),31);

    vMask = _mm_and_ps(_mm_castsi128_ps(iMask),g_XMFixUnsigned);
    vResult = _mm_add_ps(vResult,vMask);
    return vResult;

}



inline XMMATRIX __vectorcall XMLoadFloat3x3
(
    const XMFLOAT3X3* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(788)), 0) );
# 825 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    __m128 Z = _mm_setzero_ps();

    __m128 V1 = _mm_loadu_ps( &pSource->m[0][0] );
    __m128 V2 = _mm_loadu_ps( &pSource->m[1][1] );
    __m128 V3 = _mm_load_ss( &pSource->m[2][2] );

    __m128 T1 = _mm_unpackhi_ps( V1, Z );
    __m128 T2 = _mm_unpacklo_ps( V2, Z );
    __m128 T3 = _mm_shuffle_ps( V3, T2, (((0) << 6) | ((1) << 4) | ((0) << 2) | ((0))) );
    __m128 T4 = _mm_movehl_ps( T2, T3 );
    __m128 T5 = _mm_movehl_ps( Z, T1 );

    XMMATRIX M;
    M.r[0] = _mm_movelh_ps( V1, T1 );
    M.r[1] = _mm_add_ps( T4, T5 );
    M.r[2] = _mm_shuffle_ps( V2, V3, (((1) << 6) | ((0) << 4) | ((3) << 2) | ((2))) );
    M.r[3] = g_XMIdentityR3;
    return M;

}



inline XMMATRIX __vectorcall XMLoadFloat4x3
(
    const XMFLOAT4X3* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(853)), 0) );
# 897 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vTemp1 = _mm_loadu_ps(&pSource->m[0][0]);

    XMVECTOR vTemp2 = _mm_loadu_ps(&pSource->m[1][1]);

    XMVECTOR vTemp4 = _mm_loadu_ps(&pSource->m[2][2]);

    XMVECTOR vTemp3 = _mm_shuffle_ps(vTemp2,vTemp4,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2))));

    vTemp2 = _mm_shuffle_ps(vTemp2,vTemp1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0))));

    vTemp2 = _mm_shuffle_ps( vTemp2, vTemp2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) );

    vTemp1 = _mm_and_ps(vTemp1,g_XMMask3);

    vTemp2 = _mm_and_ps(vTemp2,g_XMMask3);

    vTemp3 = _mm_and_ps(vTemp3,g_XMMask3);

    __m128i vTemp4i = _mm_srli_si128(_mm_castps_si128(vTemp4),32/8);

    vTemp4i = _mm_or_si128(vTemp4i,g_XMIdentityR3);
    XMMATRIX M(vTemp1,
            vTemp2,
            vTemp3,
            _mm_castsi128_ps(vTemp4i));
    return M;

}



inline XMMATRIX __vectorcall XMLoadFloat4x3A
(
    const XMFLOAT4X3A* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(933)), 0) );
    (void)( (!!(((uintptr_t)pSource & 0xF) == 0)) || (_wassert(L"((uintptr_t)pSource & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(934)), 0) );
# 978 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vTemp1 = _mm_load_ps(&pSource->m[0][0]);

    XMVECTOR vTemp2 = _mm_load_ps(&pSource->m[1][1]);

    XMVECTOR vTemp4 = _mm_load_ps(&pSource->m[2][2]);

    XMVECTOR vTemp3 = _mm_shuffle_ps(vTemp2,vTemp4,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2))));

    vTemp2 = _mm_shuffle_ps(vTemp2,vTemp1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0))));

    vTemp2 = _mm_shuffle_ps( vTemp2, vTemp2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) );

    vTemp1 = _mm_and_ps(vTemp1,g_XMMask3);

    vTemp2 = _mm_and_ps(vTemp2,g_XMMask3);

    vTemp3 = _mm_and_ps(vTemp3,g_XMMask3);

    __m128i vTemp4i = _mm_srli_si128(_mm_castps_si128(vTemp4),32/8);

    vTemp4i = _mm_or_si128(vTemp4i,g_XMIdentityR3);
    XMMATRIX M(vTemp1,
            vTemp2,
            vTemp3,
            _mm_castsi128_ps(vTemp4i));
    return M;

}



inline XMMATRIX __vectorcall XMLoadFloat4x4
(
    const XMFLOAT4X4* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1014)), 0) );
# 1047 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMMATRIX M;
    M.r[0] = _mm_loadu_ps( &pSource->_11 );
    M.r[1] = _mm_loadu_ps( &pSource->_21 );
    M.r[2] = _mm_loadu_ps( &pSource->_31 );
    M.r[3] = _mm_loadu_ps( &pSource->_41 );
    return M;

}



inline XMMATRIX __vectorcall XMLoadFloat4x4A
(
    const XMFLOAT4X4A* pSource
)
{
    (void)( (!!(pSource)) || (_wassert(L"pSource", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1063)), 0) );
    (void)( (!!(((uintptr_t)pSource & 0xF) == 0)) || (_wassert(L"((uintptr_t)pSource & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1064)), 0) );
# 1097 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMMATRIX M;
    M.r[0] = _mm_load_ps( &pSource->_11 );
    M.r[1] = _mm_load_ps( &pSource->_21 );
    M.r[2] = _mm_load_ps( &pSource->_31 );
    M.r[3] = _mm_load_ps( &pSource->_41 );
    return M;

}







inline void __vectorcall XMStoreInt
(
    uint32_t* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1118)), 0) );





    _mm_store_ss( reinterpret_cast<float*>(pDestination), V );

}



inline void __vectorcall XMStoreFloat
(
    float* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1136)), 0) );





    _mm_store_ss( pDestination, V );

}



inline void __vectorcall XMStoreInt2
(
    uint32_t* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1154)), 0) );







    XMVECTOR T = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination[0]), V );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination[1]), T );

}



inline void __vectorcall XMStoreInt2A
(
    uint32_t* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1176)), 0) );
    (void)( (!!(((uintptr_t)pDestination & 0xF) == 0)) || (_wassert(L"((uintptr_t)pDestination & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1177)), 0) );







    _mm_storel_epi64( reinterpret_cast<__m128i*>(pDestination), _mm_castps_si128(V) );

}



inline void __vectorcall XMStoreFloat2
(
    XMFLOAT2* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1197)), 0) );







    XMVECTOR T = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    _mm_store_ss( &pDestination->x, V );
    _mm_store_ss( &pDestination->y, T );

}



inline void __vectorcall XMStoreFloat2A
(
    XMFLOAT2A* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1219)), 0) );
    (void)( (!!(((uintptr_t)pDestination & 0xF) == 0)) || (_wassert(L"((uintptr_t)pDestination & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1220)), 0) );







    _mm_storel_epi64( reinterpret_cast<__m128i*>(pDestination), _mm_castps_si128(V) );

}



inline void __vectorcall XMStoreSInt2
(
    XMINT2* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1240)), 0) );
# 1250 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vOverflow = _mm_cmpgt_ps(V,g_XMMaxInt);

    __m128i vResulti = _mm_cvttps_epi32(V);

    XMVECTOR vResult = _mm_and_ps(vOverflow,g_XMAbsMask);
    vOverflow = _mm_andnot_ps(vOverflow,_mm_castsi128_ps(vResulti));
    vOverflow = _mm_or_ps(vOverflow,vResult);

    XMVECTOR T = _mm_shuffle_ps( vOverflow, vOverflow, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination->x), vOverflow );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination->y), T );

}



inline void __vectorcall XMStoreUInt2
(
    XMUINT2* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1272)), 0) );
# 1282 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vResult = _mm_max_ps(V,g_XMZero);

    XMVECTOR vOverflow = _mm_cmpgt_ps(vResult,g_XMMaxUInt);
    XMVECTOR vValue = g_XMUnsignedFix;

    XMVECTOR vMask = _mm_cmpge_ps(vResult,vValue);

    vValue = _mm_and_ps(vValue,vMask);

    vResult = _mm_sub_ps(vResult,vValue);
    __m128i vResulti = _mm_cvttps_epi32(vResult);

    vMask = _mm_and_ps(vMask,g_XMNegativeZero);
    vResult = _mm_xor_ps(_mm_castsi128_ps(vResulti),vMask);

    vResult = _mm_or_ps(vResult,vOverflow);

    XMVECTOR T = _mm_shuffle_ps( vResult, vResult, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination->x), vResult );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination->y), T );

}



inline void __vectorcall XMStoreInt3
(
    uint32_t* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1313)), 0) );
# 1323 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR T1 = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    XMVECTOR T2 = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    _mm_store_ss( reinterpret_cast<float*>(pDestination), V );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination[1]), T1 );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination[2]), T2 );

}



inline void __vectorcall XMStoreInt3A
(
    uint32_t* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1339)), 0) );
    (void)( (!!(((uintptr_t)pDestination & 0xF) == 0)) || (_wassert(L"((uintptr_t)pDestination & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1340)), 0) );
# 1350 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR T = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    _mm_storel_epi64( reinterpret_cast<__m128i*>(pDestination), _mm_castps_si128(V) );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination[2]), T );

}



inline void __vectorcall XMStoreFloat3
(
    XMFLOAT3* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1364)), 0) );
# 1374 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR T1 = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    XMVECTOR T2 = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    _mm_store_ss( &pDestination->x, V );
    _mm_store_ss( &pDestination->y, T1 );
    _mm_store_ss( &pDestination->z, T2 );

}



inline void __vectorcall XMStoreFloat3A
(
    XMFLOAT3A* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1390)), 0) );
    (void)( (!!(((uintptr_t)pDestination & 0xF) == 0)) || (_wassert(L"((uintptr_t)pDestination & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1391)), 0) );
# 1401 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR T = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    _mm_storel_epi64( reinterpret_cast<__m128i*>(pDestination), _mm_castps_si128(V) );
    _mm_store_ss( &pDestination->z, T );

}



inline void __vectorcall XMStoreSInt3
(
    XMINT3* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1415)), 0) );
# 1427 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vOverflow = _mm_cmpgt_ps(V,g_XMMaxInt);

    __m128i vResulti = _mm_cvttps_epi32(V);

    XMVECTOR vResult = _mm_and_ps(vOverflow,g_XMAbsMask);
    vOverflow = _mm_andnot_ps(vOverflow,_mm_castsi128_ps(vResulti));
    vOverflow = _mm_or_ps(vOverflow,vResult);

    XMVECTOR T1 = _mm_shuffle_ps( vOverflow, vOverflow, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    XMVECTOR T2 = _mm_shuffle_ps( vOverflow, vOverflow, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination->x), vOverflow );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination->y), T1 );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination->z), T2 );

}



inline void __vectorcall XMStoreUInt3
(
    XMUINT3* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1451)), 0) );
# 1463 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vResult = _mm_max_ps(V,g_XMZero);

    XMVECTOR vOverflow = _mm_cmpgt_ps(vResult,g_XMMaxUInt);
    XMVECTOR vValue = g_XMUnsignedFix;

    XMVECTOR vMask = _mm_cmpge_ps(vResult,vValue);

    vValue = _mm_and_ps(vValue,vMask);

    vResult = _mm_sub_ps(vResult,vValue);
    __m128i vResulti = _mm_cvttps_epi32(vResult);

    vMask = _mm_and_ps(vMask,g_XMNegativeZero);
    vResult = _mm_xor_ps(_mm_castsi128_ps(vResulti),vMask);

    vResult = _mm_or_ps(vResult,vOverflow);

    XMVECTOR T1 = _mm_shuffle_ps( vResult, vResult, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    XMVECTOR T2 = _mm_shuffle_ps( vResult, vResult, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination->x), vResult );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination->y), T1 );
    _mm_store_ss( reinterpret_cast<float*>(&pDestination->z), T2 );

}



inline void __vectorcall XMStoreInt4
(
    uint32_t* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1496)), 0) );
# 1505 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    _mm_storeu_si128( reinterpret_cast<__m128i*>(pDestination), _mm_castps_si128(V) );

}



inline void __vectorcall XMStoreInt4A
(
    uint32_t* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1517)), 0) );
    (void)( (!!(((uintptr_t)pDestination & 0xF) == 0)) || (_wassert(L"((uintptr_t)pDestination & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1518)), 0) );
# 1527 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    _mm_store_si128( reinterpret_cast<__m128i*>(pDestination), _mm_castps_si128(V) );

}



inline void __vectorcall XMStoreFloat4
(
    XMFLOAT4* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1539)), 0) );
# 1548 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    _mm_storeu_ps( &pDestination->x, V );

}



inline void __vectorcall XMStoreFloat4A
(
    XMFLOAT4A* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1560)), 0) );
    (void)( (!!(((uintptr_t)pDestination & 0xF) == 0)) || (_wassert(L"((uintptr_t)pDestination & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1561)), 0) );
# 1570 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    _mm_store_ps( &pDestination->x, V );

}



inline void __vectorcall XMStoreSInt4
(
    XMINT4* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1582)), 0) );
# 1593 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vOverflow = _mm_cmpgt_ps(V,g_XMMaxInt);

    __m128i vResulti = _mm_cvttps_epi32(V);

    XMVECTOR vResult = _mm_and_ps(vOverflow,g_XMAbsMask);
    vOverflow = _mm_andnot_ps(vOverflow,_mm_castsi128_ps(vResulti));
    vOverflow = _mm_or_ps(vOverflow,vResult);
    _mm_storeu_si128( reinterpret_cast<__m128i*>(pDestination), _mm_castps_si128(vOverflow) );

}



inline void __vectorcall XMStoreUInt4
(
    XMUINT4* pDestination,
    FXMVECTOR V
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1612)), 0) );
# 1623 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vResult = _mm_max_ps(V,g_XMZero);

    XMVECTOR vOverflow = _mm_cmpgt_ps(vResult,g_XMMaxUInt);
    XMVECTOR vValue = g_XMUnsignedFix;

    XMVECTOR vMask = _mm_cmpge_ps(vResult,vValue);

    vValue = _mm_and_ps(vValue,vMask);

    vResult = _mm_sub_ps(vResult,vValue);
    __m128i vResulti = _mm_cvttps_epi32(vResult);

    vMask = _mm_and_ps(vMask,g_XMNegativeZero);
    vResult = _mm_xor_ps(_mm_castsi128_ps(vResulti),vMask);

    vResult = _mm_or_ps(vResult,vOverflow);
    _mm_storeu_si128( reinterpret_cast<__m128i*>(pDestination), _mm_castps_si128(vResult) );

}



inline void __vectorcall XMStoreFloat3x3
(
    XMFLOAT3X3* pDestination,
    FXMMATRIX M
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1651)), 0) );
# 1677 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vTemp1 = M.r[0];
    XMVECTOR vTemp2 = M.r[1];
    XMVECTOR vTemp3 = M.r[2];
    XMVECTOR vWork = _mm_shuffle_ps(vTemp1,vTemp2,(((0) << 6) | ((0) << 4) | ((2) << 2) | ((2))));
    vTemp1 = _mm_shuffle_ps(vTemp1,vWork,(((2) << 6) | ((0) << 4) | ((1) << 2) | ((0))));
    _mm_storeu_ps(&pDestination->m[0][0],vTemp1);
    vTemp2 = _mm_shuffle_ps(vTemp2,vTemp3,(((1) << 6) | ((0) << 4) | ((2) << 2) | ((1))));
    _mm_storeu_ps(&pDestination->m[1][1],vTemp2);
    vTemp3 = _mm_shuffle_ps( vTemp3, vTemp3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    _mm_store_ss(&pDestination->m[2][2],vTemp3);

}



inline void __vectorcall XMStoreFloat4x3
(
    XMFLOAT4X3* pDestination,
    FXMMATRIX M
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1698)), 0) );
# 1730 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vTemp1 = M.r[0];
    XMVECTOR vTemp2 = M.r[1];
    XMVECTOR vTemp3 = M.r[2];
    XMVECTOR vTemp4 = M.r[3];
    XMVECTOR vTemp2x = _mm_shuffle_ps(vTemp2,vTemp3,(((1) << 6) | ((0) << 4) | ((2) << 2) | ((1))));
    vTemp2 = _mm_shuffle_ps(vTemp2,vTemp1,(((2) << 6) | ((2) << 4) | ((0) << 2) | ((0))));
    vTemp1 = _mm_shuffle_ps(vTemp1,vTemp2,(((0) << 6) | ((2) << 4) | ((1) << 2) | ((0))));
    vTemp3 = _mm_shuffle_ps(vTemp3,vTemp4,(((0) << 6) | ((0) << 4) | ((2) << 2) | ((2))));
    vTemp3 = _mm_shuffle_ps(vTemp3,vTemp4,(((2) << 6) | ((1) << 4) | ((2) << 2) | ((0))));
    _mm_storeu_ps(&pDestination->m[0][0],vTemp1);
    _mm_storeu_ps(&pDestination->m[1][1],vTemp2x);
    _mm_storeu_ps(&pDestination->m[2][2],vTemp3);

}



inline void __vectorcall XMStoreFloat4x3A
(
    XMFLOAT4X3A* pDestination,
    FXMMATRIX M
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1753)), 0) );
    (void)( (!!(((uintptr_t)pDestination & 0xF) == 0)) || (_wassert(L"((uintptr_t)pDestination & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1754)), 0) );
# 1787 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    XMVECTOR vTemp1 = M.r[0];

    XMVECTOR vTemp2 = M.r[1];

    XMVECTOR vTemp3 = M.r[2];

    XMVECTOR vTemp4 = M.r[3];

    XMVECTOR vTemp = _mm_shuffle_ps(vTemp1,vTemp2,(((1) << 6) | ((0) << 4) | ((2) << 2) | ((2))));

    vTemp2 = _mm_shuffle_ps(vTemp2,vTemp3,(((1) << 6) | ((0) << 4) | ((2) << 2) | ((1))));

    vTemp1 = _mm_shuffle_ps(vTemp1,vTemp,(((2) << 6) | ((0) << 4) | ((1) << 2) | ((0))));

    vTemp3 = _mm_shuffle_ps(vTemp3,vTemp4,(((0) << 6) | ((0) << 4) | ((2) << 2) | ((2))));

    vTemp3 = _mm_shuffle_ps(vTemp3,vTemp4,(((2) << 6) | ((1) << 4) | ((2) << 2) | ((0))));

    _mm_store_ps(&pDestination->m[0][0],vTemp1);
    _mm_store_ps(&pDestination->m[1][1],vTemp2);
    _mm_store_ps(&pDestination->m[2][2],vTemp3);

}



inline void __vectorcall XMStoreFloat4x4
(
    XMFLOAT4X4* pDestination,
    FXMMATRIX M
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1819)), 0) );
# 1848 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    _mm_storeu_ps( &pDestination->_11, M.r[0] );
    _mm_storeu_ps( &pDestination->_21, M.r[1] );
    _mm_storeu_ps( &pDestination->_31, M.r[2] );
    _mm_storeu_ps( &pDestination->_41, M.r[3] );

}



inline void __vectorcall XMStoreFloat4x4A
(
    XMFLOAT4X4A* pDestination,
    FXMMATRIX M
)
{
    (void)( (!!(pDestination)) || (_wassert(L"pDestination", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1863)), 0) );
    (void)( (!!(((uintptr_t)pDestination & 0xF) == 0)) || (_wassert(L"((uintptr_t)pDestination & 0xF) == 0", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl", (unsigned)(1864)), 0) );
# 1893 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathConvert.inl"
    _mm_store_ps( &pDestination->_11, M.r[0] );
    _mm_store_ps( &pDestination->_21, M.r[1] );
    _mm_store_ps( &pDestination->_31, M.r[2] );
    _mm_store_ps( &pDestination->_41, M.r[3] );

}
# 1883 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl" 1
# 50 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
inline XMVECTOR __vectorcall XMVectorZero()
{






    return _mm_setzero_ps();

}



inline XMVECTOR __vectorcall XMVectorSet
(
    float x,
    float y,
    float z,
    float w
)
{
# 80 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_set_ps( w, z, y, x );

}



inline XMVECTOR __vectorcall XMVectorSetInt
(
    uint32_t x,
    uint32_t y,
    uint32_t z,
    uint32_t w
)
{
# 102 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i V = _mm_set_epi32( w, z, y, x );
    return _mm_castsi128_ps(V);

}



inline XMVECTOR __vectorcall XMVectorReplicate
(
    float Value
)
{
# 124 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_set_ps1( Value );

}




inline XMVECTOR __vectorcall XMVectorReplicatePtr
(
    const float *pValue
)
{
# 147 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_load_ps1( pValue );

}



inline XMVECTOR __vectorcall XMVectorReplicateInt
(
    uint32_t Value
)
{
# 168 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i vTemp = _mm_set1_epi32( Value );
    return _mm_castsi128_ps(vTemp);

}




inline XMVECTOR __vectorcall XMVectorReplicateIntPtr
(
    const uint32_t *pValue
)
{
# 192 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_load_ps1(reinterpret_cast<const float *>(pValue));

}



inline XMVECTOR __vectorcall XMVectorTrueInt()
{






    __m128i V = _mm_set1_epi32(-1);
    return _mm_castsi128_ps(V);

}



inline XMVECTOR __vectorcall XMVectorFalseInt()
{






    return _mm_setzero_ps();

}



inline XMVECTOR __vectorcall XMVectorSplatX
(
    FXMVECTOR V
)
{
# 242 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

}



inline XMVECTOR __vectorcall XMVectorSplatY
(
    FXMVECTOR V
)
{
# 263 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

}



inline XMVECTOR __vectorcall XMVectorSplatZ
(
    FXMVECTOR V
)
{
# 284 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

}



inline XMVECTOR __vectorcall XMVectorSplatW
(
    FXMVECTOR V
)
{
# 305 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

}



inline XMVECTOR __vectorcall XMVectorSplatOne()
{
# 323 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return g_XMOne;

}



inline XMVECTOR __vectorcall XMVectorSplatInfinity()
{
# 341 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return g_XMInfinity;

}



inline XMVECTOR __vectorcall XMVectorSplatQNaN()
{
# 359 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return g_XMQNaN;

}



inline XMVECTOR __vectorcall XMVectorSplatEpsilon()
{
# 377 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return g_XMEpsilon;

}



inline XMVECTOR __vectorcall XMVectorSplatSignMask()
{
# 395 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i V = _mm_set1_epi32( 0x80000000 );
    return _mm_castsi128_ps(V);

}




inline float __vectorcall XMVectorGetByIndex(FXMVECTOR V, size_t i)
{
    (void)( (!!(i < 4)) || (_wassert(L"i < 4", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(405)), 0) );
                              ;





    return V.m128_f32[i];

}



inline float __vectorcall XMVectorGetX(FXMVECTOR V)
{





    return _mm_cvtss_f32(V);

}


inline float __vectorcall XMVectorGetY(FXMVECTOR V)
{





    XMVECTOR vTemp = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    return _mm_cvtss_f32(vTemp);

}


inline float __vectorcall XMVectorGetZ(FXMVECTOR V)
{





    XMVECTOR vTemp = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    return _mm_cvtss_f32(vTemp);

}


inline float __vectorcall XMVectorGetW(FXMVECTOR V)
{





    XMVECTOR vTemp = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    return _mm_cvtss_f32(vTemp);

}





inline void __vectorcall XMVectorGetByIndexPtr(float *f, FXMVECTOR V, size_t i)
{
    (void)( (!!(f != nullptr)) || (_wassert(L"f != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(474)), 0) );
    (void)( (!!(i < 4)) || (_wassert(L"i < 4", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(475)), 0) );
                              ;





    *f = V.m128_f32[i];

}





inline void __vectorcall XMVectorGetXPtr(float *x, FXMVECTOR V)
{
    (void)( (!!(x != nullptr)) || (_wassert(L"x != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(492)), 0) );





    _mm_store_ss(x,V);

}



inline void __vectorcall XMVectorGetYPtr(float *y, FXMVECTOR V)
{
    (void)( (!!(y != nullptr)) || (_wassert(L"y != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(506)), 0) );





    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    _mm_store_ss(y,vResult);

}



inline void __vectorcall XMVectorGetZPtr(float *z, FXMVECTOR V)
{
    (void)( (!!(z != nullptr)) || (_wassert(L"z != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(521)), 0) );





    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    _mm_store_ss(z,vResult);

}



inline void __vectorcall XMVectorGetWPtr(float *w, FXMVECTOR V)
{
    (void)( (!!(w != nullptr)) || (_wassert(L"w != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(536)), 0) );





    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    _mm_store_ss(w,vResult);

}





inline uint32_t __vectorcall XMVectorGetIntByIndex(FXMVECTOR V, size_t i)
{
    (void)( (!!(i < 4)) || (_wassert(L"i < 4", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(553)), 0) );
                              ;





    return V.m128_u32[i];

}




inline uint32_t __vectorcall XMVectorGetIntX(FXMVECTOR V)
{





    return static_cast<uint32_t>(_mm_cvtsi128_si32(_mm_castps_si128(V)));

}


inline uint32_t __vectorcall XMVectorGetIntY(FXMVECTOR V)
{





    __m128i vResulti = _mm_shuffle_epi32(_mm_castps_si128(V),(((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))));
    return static_cast<uint32_t>(_mm_cvtsi128_si32(vResulti));

}


inline uint32_t __vectorcall XMVectorGetIntZ(FXMVECTOR V)
{





    __m128i vResulti = _mm_shuffle_epi32(_mm_castps_si128(V),(((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))));
    return static_cast<uint32_t>(_mm_cvtsi128_si32(vResulti));

}


inline uint32_t __vectorcall XMVectorGetIntW(FXMVECTOR V)
{





    __m128i vResulti = _mm_shuffle_epi32(_mm_castps_si128(V),(((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))));
    return static_cast<uint32_t>(_mm_cvtsi128_si32(vResulti));

}





inline void __vectorcall XMVectorGetIntByIndexPtr(uint32_t *x, FXMVECTOR V, size_t i)
{
    (void)( (!!(x != nullptr)) || (_wassert(L"x != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(623)), 0) );
    (void)( (!!(i < 4)) || (_wassert(L"i < 4", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(624)), 0) );
                              ;





    *x = V.m128_u32[i];

}





inline void __vectorcall XMVectorGetIntXPtr(uint32_t *x, FXMVECTOR V)
{
    (void)( (!!(x != nullptr)) || (_wassert(L"x != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(641)), 0) );





    _mm_store_ss(reinterpret_cast<float *>(x),V);

}



inline void __vectorcall XMVectorGetIntYPtr(uint32_t *y, FXMVECTOR V)
{
    (void)( (!!(y != nullptr)) || (_wassert(L"y != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(655)), 0) );





    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    _mm_store_ss(reinterpret_cast<float *>(y),vResult);

}



inline void __vectorcall XMVectorGetIntZPtr(uint32_t *z, FXMVECTOR V)
{
    (void)( (!!(z != nullptr)) || (_wassert(L"z != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(670)), 0) );





    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    _mm_store_ss(reinterpret_cast<float *>(z),vResult);

}



inline void __vectorcall XMVectorGetIntWPtr(uint32_t *w, FXMVECTOR V)
{
    (void)( (!!(w != nullptr)) || (_wassert(L"w != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(685)), 0) );





    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    _mm_store_ss(reinterpret_cast<float *>(w),vResult);

}




inline XMVECTOR __vectorcall XMVectorSetByIndex(FXMVECTOR V, float f, size_t i)
{
    (void)( (!!(i < 4)) || (_wassert(L"i < 4", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(701)), 0) );
                              ;
# 713 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR U = V;
    U.m128_f32[i] = f;
    return U;

}




inline XMVECTOR __vectorcall XMVectorSetX(FXMVECTOR V, float x)
{
# 734 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_set_ss(x);
    vResult = _mm_move_ss(V,vResult);
    return vResult;

}


inline XMVECTOR __vectorcall XMVectorSetY(FXMVECTOR V, float y)
{
# 754 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((3) << 6) | ((2) << 4) | ((0) << 2) | ((1))) );

    XMVECTOR vTemp = _mm_set_ss(y);

    vResult = _mm_move_ss(vResult,vTemp);

    vResult = _mm_shuffle_ps( vResult, vResult, (((3) << 6) | ((2) << 4) | ((0) << 2) | ((1))) );
    return vResult;

}

inline XMVECTOR __vectorcall XMVectorSetZ(FXMVECTOR V, float z)
{
# 778 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((3) << 6) | ((0) << 4) | ((1) << 2) | ((2))) );

    XMVECTOR vTemp = _mm_set_ss(z);

    vResult = _mm_move_ss(vResult,vTemp);

    vResult = _mm_shuffle_ps( vResult, vResult, (((3) << 6) | ((0) << 4) | ((1) << 2) | ((2))) );
    return vResult;

}


inline XMVECTOR __vectorcall XMVectorSetW(FXMVECTOR V, float w)
{
# 803 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((0) << 6) | ((2) << 4) | ((1) << 2) | ((3))) );

    XMVECTOR vTemp = _mm_set_ss(w);

    vResult = _mm_move_ss(vResult,vTemp);

    vResult = _mm_shuffle_ps( vResult, vResult, (((0) << 6) | ((2) << 4) | ((1) << 2) | ((3))) );
    return vResult;

}





inline XMVECTOR __vectorcall XMVectorSetByIndexPtr(FXMVECTOR V, const float *f, size_t i)
{
    (void)( (!!(f != nullptr)) || (_wassert(L"f != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(820)), 0) );
    (void)( (!!(i < 4)) || (_wassert(L"i < 4", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(821)), 0) );
                              ;
# 833 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR U = V;
    U.m128_f32[i] = *f;
    return U;

}





inline XMVECTOR __vectorcall XMVectorSetXPtr(FXMVECTOR V, const float *x)
{
    (void)( (!!(x != nullptr)) || (_wassert(L"x != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(845)), 0) );
# 856 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_load_ss(x);
    vResult = _mm_move_ss(V,vResult);
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorSetYPtr(FXMVECTOR V, const float *y)
{
    (void)( (!!(y != nullptr)) || (_wassert(L"y != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(866)), 0) );
# 878 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((3) << 6) | ((2) << 4) | ((0) << 2) | ((1))) );

    XMVECTOR vTemp = _mm_load_ss(y);

    vResult = _mm_move_ss(vResult,vTemp);

    vResult = _mm_shuffle_ps( vResult, vResult, (((3) << 6) | ((2) << 4) | ((0) << 2) | ((1))) );
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorSetZPtr(FXMVECTOR V, const float *z)
{
    (void)( (!!(z != nullptr)) || (_wassert(L"z != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(893)), 0) );
# 905 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((3) << 6) | ((0) << 4) | ((1) << 2) | ((2))) );

    XMVECTOR vTemp = _mm_load_ss(z);

    vResult = _mm_move_ss(vResult,vTemp);

    vResult = _mm_shuffle_ps( vResult, vResult, (((3) << 6) | ((0) << 4) | ((1) << 2) | ((2))) );
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorSetWPtr(FXMVECTOR V, const float *w)
{
    (void)( (!!(w != nullptr)) || (_wassert(L"w != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(920)), 0) );
# 932 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((0) << 6) | ((2) << 4) | ((1) << 2) | ((3))) );

    XMVECTOR vTemp = _mm_load_ss(w);

    vResult = _mm_move_ss(vResult,vTemp);

    vResult = _mm_shuffle_ps( vResult, vResult, (((0) << 6) | ((2) << 4) | ((1) << 2) | ((3))) );
    return vResult;

}




inline XMVECTOR __vectorcall XMVectorSetIntByIndex(FXMVECTOR V, uint32_t x, size_t i)
{
    (void)( (!!(i < 4)) || (_wassert(L"i < 4", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(948)), 0) );
                              ;
# 961 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTORU32 tmp;
    tmp.v = V;
    tmp.u[i] = x;
    return tmp;

}




inline XMVECTOR __vectorcall XMVectorSetIntX(FXMVECTOR V, uint32_t x)
{
# 983 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i vTemp = _mm_cvtsi32_si128(x);
    XMVECTOR vResult = _mm_move_ss(V,_mm_castsi128_ps(vTemp));
    return vResult;

}


inline XMVECTOR __vectorcall XMVectorSetIntY(FXMVECTOR V, uint32_t y)
{
# 1003 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((3) << 6) | ((2) << 4) | ((0) << 2) | ((1))) );

    __m128i vTemp = _mm_cvtsi32_si128(y);

    vResult = _mm_move_ss(vResult,_mm_castsi128_ps(vTemp));

    vResult = _mm_shuffle_ps( vResult, vResult, (((3) << 6) | ((2) << 4) | ((0) << 2) | ((1))) );
    return vResult;

}


inline XMVECTOR __vectorcall XMVectorSetIntZ(FXMVECTOR V, uint32_t z)
{
# 1028 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((3) << 6) | ((0) << 4) | ((1) << 2) | ((2))) );

    __m128i vTemp = _mm_cvtsi32_si128(z);

    vResult = _mm_move_ss(vResult,_mm_castsi128_ps(vTemp));

    vResult = _mm_shuffle_ps( vResult, vResult, (((3) << 6) | ((0) << 4) | ((1) << 2) | ((2))) );
    return vResult;

}


inline XMVECTOR __vectorcall XMVectorSetIntW(FXMVECTOR V, uint32_t w)
{
# 1053 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((0) << 6) | ((2) << 4) | ((1) << 2) | ((3))) );

    __m128i vTemp = _mm_cvtsi32_si128(w);

    vResult = _mm_move_ss(vResult,_mm_castsi128_ps(vTemp));

    vResult = _mm_shuffle_ps( vResult, vResult, (((0) << 6) | ((2) << 4) | ((1) << 2) | ((3))) );
    return vResult;

}





inline XMVECTOR __vectorcall XMVectorSetIntByIndexPtr(FXMVECTOR V, const uint32_t *x, size_t i)
{
    (void)( (!!(x != nullptr)) || (_wassert(L"x != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1070)), 0) );
    (void)( (!!(i < 4)) || (_wassert(L"i < 4", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1071)), 0) );
                              ;
# 1084 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTORU32 tmp;
    tmp.v = V;
    tmp.u[i] = *x;
    return tmp;

}





inline XMVECTOR __vectorcall XMVectorSetIntXPtr(FXMVECTOR V, const uint32_t *x)
{
    (void)( (!!(x != nullptr)) || (_wassert(L"x != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1097)), 0) );
# 1108 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_load_ss(reinterpret_cast<const float *>(x));
    XMVECTOR vResult = _mm_move_ss(V,vTemp);
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorSetIntYPtr(FXMVECTOR V, const uint32_t *y)
{
    (void)( (!!(y != nullptr)) || (_wassert(L"y != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1118)), 0) );
# 1130 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((3) << 6) | ((2) << 4) | ((0) << 2) | ((1))) );

    XMVECTOR vTemp = _mm_load_ss(reinterpret_cast<const float *>(y));

    vResult = _mm_move_ss(vResult,vTemp);

    vResult = _mm_shuffle_ps( vResult, vResult, (((3) << 6) | ((2) << 4) | ((0) << 2) | ((1))) );
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorSetIntZPtr(FXMVECTOR V, const uint32_t *z)
{
    (void)( (!!(z != nullptr)) || (_wassert(L"z != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1145)), 0) );
# 1157 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((3) << 6) | ((0) << 4) | ((1) << 2) | ((2))) );

    XMVECTOR vTemp = _mm_load_ss(reinterpret_cast<const float *>(z));

    vResult = _mm_move_ss(vResult,vTemp);

    vResult = _mm_shuffle_ps( vResult, vResult, (((3) << 6) | ((0) << 4) | ((1) << 2) | ((2))) );
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorSetIntWPtr(FXMVECTOR V, const uint32_t *w)
{
    (void)( (!!(w != nullptr)) || (_wassert(L"w != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1172)), 0) );
# 1184 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((0) << 6) | ((2) << 4) | ((1) << 2) | ((3))) );

    XMVECTOR vTemp = _mm_load_ss(reinterpret_cast<const float *>(w));

    vResult = _mm_move_ss(vResult,vTemp);

    vResult = _mm_shuffle_ps( vResult, vResult, (((0) << 6) | ((2) << 4) | ((1) << 2) | ((3))) );
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorSwizzle
(
    FXMVECTOR V,
    uint32_t E0,
    uint32_t E1,
    uint32_t E2,
    uint32_t E3
)
{
    (void)( (!!((E0 < 4) && (E1 < 4) && (E2 < 4) && (E3 < 4))) || (_wassert(L"(E0 < 4) && (E1 < 4) && (E2 < 4) && (E3 < 4)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1206)), 0) );
                                                                     ;
# 1237 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    const uint32_t *aPtr = (const uint32_t* )(&V);

    XMVECTOR Result;
    uint32_t *pWork = (uint32_t*)(&Result);

    pWork[0] = aPtr[E0];
    pWork[1] = aPtr[E1];
    pWork[2] = aPtr[E2];
    pWork[3] = aPtr[E3];

    return Result;

}


inline XMVECTOR __vectorcall XMVectorPermute
(
    FXMVECTOR V1,
    FXMVECTOR V2,
    uint32_t PermuteX,
    uint32_t PermuteY,
    uint32_t PermuteZ,
    uint32_t PermuteW
)
{
    (void)( (!!(PermuteX <= 7 && PermuteY <= 7 && PermuteZ <= 7 && PermuteW <= 7)) || (_wassert(L"PermuteX <= 7 && PermuteY <= 7 && PermuteZ <= 7 && PermuteW <= 7", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1262)), 0) );
                                                                                         ;
# 1293 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    const uint32_t *aPtr[2];
    aPtr[0] = (const uint32_t* )(&V1);
    aPtr[1] = (const uint32_t* )(&V2);

    XMVECTOR Result;
    uint32_t *pWork = (uint32_t*)(&Result);

    const uint32_t i0 = PermuteX & 3;
    const uint32_t vi0 = PermuteX >> 2;
    pWork[0] = aPtr[vi0][i0];

    const uint32_t i1 = PermuteY & 3;
    const uint32_t vi1 = PermuteY >> 2;
    pWork[1] = aPtr[vi1][i1];

    const uint32_t i2 = PermuteZ & 3;
    const uint32_t vi2 = PermuteZ >> 2;
    pWork[2] = aPtr[vi2][i2];

    const uint32_t i3 = PermuteW & 3;
    const uint32_t vi3 = PermuteW >> 2;
    pWork[3] = aPtr[vi3][i3];

    return Result;

}
# 1331 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
inline XMVECTOR __vectorcall XMVectorSelectControl
(
    uint32_t VectorIndex0,
    uint32_t VectorIndex1,
    uint32_t VectorIndex2,
    uint32_t VectorIndex3
)
{


    __m128i vTemp = _mm_set_epi32(VectorIndex3,VectorIndex2,VectorIndex1,VectorIndex0);

    vTemp = _mm_cmpgt_epi32(vTemp,g_XMZero);
    return _mm_castsi128_ps(vTemp);
# 1376 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
}



inline XMVECTOR __vectorcall XMVectorSelect
(
    FXMVECTOR V1,
    FXMVECTOR V2,
    FXMVECTOR Control
)
{
# 1399 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp1 = _mm_andnot_ps(Control,V1);
    XMVECTOR vTemp2 = _mm_and_ps(V2,Control);
    return _mm_or_ps(vTemp1,vTemp2);

}



inline XMVECTOR __vectorcall XMVectorMergeXY
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 1425 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_unpacklo_ps( V1, V2 );

}



inline XMVECTOR __vectorcall XMVectorMergeZW
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 1449 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_unpackhi_ps( V1, V2 );

}



inline XMVECTOR __vectorcall XMVectorShiftLeft(FXMVECTOR V1, FXMVECTOR V2, uint32_t Elements)
{
    (void)( (!!(Elements < 4)) || (_wassert(L"Elements < 4", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1457)), 0) );
                                     ;
    return XMVectorPermute(V1, V2, Elements, ((Elements) + 1), ((Elements) + 2), ((Elements) + 3));
}



inline XMVECTOR __vectorcall XMVectorRotateLeft(FXMVECTOR V, uint32_t Elements)
{
    (void)( (!!(Elements < 4)) || (_wassert(L"Elements < 4", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1466)), 0) );
                                     ;
    return XMVectorSwizzle( V, Elements & 3, (Elements + 1) & 3, (Elements + 2) & 3, (Elements + 3) & 3 );
}



inline XMVECTOR __vectorcall XMVectorRotateRight(FXMVECTOR V, uint32_t Elements)
{
    (void)( (!!(Elements < 4)) || (_wassert(L"Elements < 4", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1475)), 0) );
                                     ;
    return XMVectorSwizzle( V, (4 - (Elements)) & 3, (5 - (Elements)) & 3, (6 - (Elements)) & 3, (7 - (Elements)) & 3 );
}



inline XMVECTOR __vectorcall XMVectorInsert(FXMVECTOR VD, FXMVECTOR VS, uint32_t VSLeftRotateElements,
                                  uint32_t Select0, uint32_t Select1, uint32_t Select2, uint32_t Select3)
{
    XMVECTOR Control = XMVectorSelectControl(Select0&1, Select1&1, Select2&1, Select3&1);
    return XMVectorSelect( VD, XMVectorRotateLeft(VS, VSLeftRotateElements), Control );
}







inline XMVECTOR __vectorcall XMVectorEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 1513 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_cmpeq_ps( V1, V2 );

}




inline XMVECTOR __vectorcall XMVectorEqualR
(
    uint32_t* pCR,
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
    (void)( (!!(pCR != nullptr)) || (_wassert(L"pCR != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1527)), 0) );
# 1572 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpeq_ps(V1,V2);
    uint32_t CR = 0;
    int iTest = _mm_movemask_ps(vTemp);
    if (iTest==0xf)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (!iTest)
    {

        CR = XM_CRMASK_CR6FALSE;
    }
    *pCR = CR;
    return vTemp;

}







inline XMVECTOR __vectorcall XMVectorEqualInt
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 1613 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i V = _mm_cmpeq_epi32( _mm_castps_si128(V1),_mm_castps_si128(V2) );
    return _mm_castsi128_ps(V);

}




inline XMVECTOR __vectorcall XMVectorEqualIntR
(
    uint32_t* pCR,
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
    (void)( (!!(pCR != nullptr)) || (_wassert(L"pCR != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1628)), 0) );
# 1665 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i V = _mm_cmpeq_epi32( _mm_castps_si128(V1),_mm_castps_si128(V2) );
    int iTemp = _mm_movemask_ps(_mm_castsi128_ps(V));
    uint32_t CR = 0;
    if (iTemp==0x0F)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (!iTemp)
    {
        CR = XM_CRMASK_CR6FALSE;
    }
    *pCR = CR;
    return _mm_castsi128_ps(V);

}



inline XMVECTOR __vectorcall XMVectorNearEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2,
    FXMVECTOR Epsilon
)
{
# 1714 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vDelta = _mm_sub_ps(V1,V2);

    XMVECTOR vTemp = _mm_setzero_ps();
    vTemp = _mm_sub_ps(vTemp,vDelta);
    vTemp = _mm_max_ps(vTemp,vDelta);
    vTemp = _mm_cmple_ps(vTemp,Epsilon);
    return vTemp;

}



inline XMVECTOR __vectorcall XMVectorNotEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 1744 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_cmpneq_ps( V1, V2 );

}



inline XMVECTOR __vectorcall XMVectorNotEqualInt
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 1768 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i V = _mm_cmpeq_epi32( _mm_castps_si128(V1),_mm_castps_si128(V2) );
    return _mm_xor_ps(_mm_castsi128_ps(V),g_XMNegOneMask);

}



inline XMVECTOR __vectorcall XMVectorGreater
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 1793 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_cmpgt_ps( V1, V2 );

}




inline XMVECTOR __vectorcall XMVectorGreaterR
(
    uint32_t* pCR,
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
    (void)( (!!(pCR != nullptr)) || (_wassert(L"pCR != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1807)), 0) );
# 1853 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpgt_ps(V1,V2);
    uint32_t CR = 0;
    int iTest = _mm_movemask_ps(vTemp);
    if (iTest==0xf)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (!iTest)
    {

        CR = XM_CRMASK_CR6FALSE;
    }
    *pCR = CR;
    return vTemp;

}



inline XMVECTOR __vectorcall XMVectorGreaterOrEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 1890 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_cmpge_ps( V1, V2 );

}




inline XMVECTOR __vectorcall XMVectorGreaterOrEqualR
(
    uint32_t* pCR,
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
    (void)( (!!(pCR != nullptr)) || (_wassert(L"pCR != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(1904)), 0) );
# 1950 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpge_ps(V1,V2);
    uint32_t CR = 0;
    int iTest = _mm_movemask_ps(vTemp);
    if (iTest==0xf)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (!iTest)
    {

        CR = XM_CRMASK_CR6FALSE;
    }
    *pCR = CR;
    return vTemp;

}



inline XMVECTOR __vectorcall XMVectorLess
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 1987 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_cmplt_ps( V1, V2 );

}



inline XMVECTOR __vectorcall XMVectorLessOrEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 2011 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_cmple_ps( V1, V2 );

}



inline XMVECTOR __vectorcall XMVectorInBounds
(
    FXMVECTOR V,
    FXMVECTOR Bounds
)
{
# 2044 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp1 = _mm_cmple_ps(V,Bounds);

    XMVECTOR vTemp2 = _mm_mul_ps(Bounds,g_XMNegativeOne);

    vTemp2 = _mm_cmple_ps(vTemp2,V);

    vTemp1 = _mm_and_ps(vTemp1,vTemp2);
    return vTemp1;

}




inline XMVECTOR __vectorcall XMVectorInBoundsR
(
    uint32_t* pCR,
    FXMVECTOR V,
    FXMVECTOR Bounds
)
{
    (void)( (!!(pCR != nullptr)) || (_wassert(L"pCR != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(2065)), 0) );
# 2110 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp1 = _mm_cmple_ps(V,Bounds);

    XMVECTOR vTemp2 = _mm_mul_ps(Bounds,g_XMNegativeOne);

    vTemp2 = _mm_cmple_ps(vTemp2,V);

    vTemp1 = _mm_and_ps(vTemp1,vTemp2);

    uint32_t CR = 0;
    if (_mm_movemask_ps(vTemp1)==0xf) {

        CR = XM_CRMASK_CR6BOUNDS;
    }
    *pCR = CR;
    return vTemp1;

}



inline XMVECTOR __vectorcall XMVectorIsNaN
(
    FXMVECTOR V
)
{
# 2151 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_cmpneq_ps(V,V);

}



inline XMVECTOR __vectorcall XMVectorIsInfinite
(
    FXMVECTOR V
)
{
# 2180 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128 vTemp = _mm_and_ps(V,g_XMAbsMask);

    vTemp = _mm_cmpeq_ps(vTemp,g_XMInfinity);

    return vTemp;

}







inline XMVECTOR __vectorcall XMVectorMin
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 2212 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_min_ps( V1, V2 );

}



inline XMVECTOR __vectorcall XMVectorMax
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 2236 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_max_ps( V1, V2 );

}
# 2269 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
#pragma float_control(push)
#pragma float_control(precise, on)


inline XMVECTOR __vectorcall XMVectorRound
(
    FXMVECTOR V
)
{
# 2306 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128 sign = _mm_and_ps( V, g_XMNegativeZero );
    __m128 sMagic = _mm_or_ps( g_XMNoFraction, sign );
    __m128 R1 = _mm_add_ps( V, sMagic );
    R1 = _mm_sub_ps( R1, sMagic );
    __m128 R2 = _mm_and_ps( V, g_XMAbsMask );
    __m128 mask = _mm_cmple_ps( R2, g_XMNoFraction );
    R2 = _mm_andnot_ps(mask,V);
    R1 = _mm_and_ps(R1,mask);
    XMVECTOR vResult = _mm_xor_ps(R1, R2);
    return vResult;

}


#pragma float_control(pop)




inline XMVECTOR __vectorcall XMVectorTruncate
(
    FXMVECTOR V
)
{
# 2367 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i vTest = _mm_and_si128(_mm_castps_si128(V),g_XMAbsMask);

    vTest = _mm_cmplt_epi32(vTest,g_XMNoFraction);

    __m128i vInt = _mm_cvttps_epi32(V);

    XMVECTOR vResult = _mm_cvtepi32_ps(vInt);

    vResult = _mm_and_ps(vResult,_mm_castsi128_ps(vTest));

    vTest = _mm_andnot_si128(vTest,_mm_castps_si128(V));
    vResult = _mm_or_ps(vResult,_mm_castsi128_ps(vTest));
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorFloor
(
    FXMVECTOR V
)
{
# 2412 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i vTest = _mm_and_si128(_mm_castps_si128(V),g_XMAbsMask);
    vTest = _mm_cmplt_epi32(vTest,g_XMNoFraction);

    __m128i vInt = _mm_cvttps_epi32(V);
    XMVECTOR vResult = _mm_cvtepi32_ps(vInt);
    __m128 vLarger = _mm_cmpgt_ps( vResult, V );

    vLarger = _mm_cvtepi32_ps( _mm_castps_si128( vLarger ) );
    vResult = _mm_add_ps( vResult, vLarger );

    vResult = _mm_and_ps(vResult,_mm_castsi128_ps(vTest));

    vTest = _mm_andnot_si128(vTest,_mm_castps_si128(V));
    vResult = _mm_or_ps(vResult,_mm_castsi128_ps(vTest));
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorCeiling
(
    FXMVECTOR V
)
{
# 2459 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i vTest = _mm_and_si128(_mm_castps_si128(V),g_XMAbsMask);
    vTest = _mm_cmplt_epi32(vTest,g_XMNoFraction);

    __m128i vInt = _mm_cvttps_epi32(V);
    XMVECTOR vResult = _mm_cvtepi32_ps(vInt);
    __m128 vSmaller = _mm_cmplt_ps( vResult, V );

    vSmaller = _mm_cvtepi32_ps( _mm_castps_si128( vSmaller ) );
    vResult = _mm_sub_ps( vResult, vSmaller );

    vResult = _mm_and_ps(vResult,_mm_castsi128_ps(vTest));

    vTest = _mm_andnot_si128(vTest,_mm_castps_si128(V));
    vResult = _mm_or_ps(vResult,_mm_castsi128_ps(vTest));
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorClamp
(
    FXMVECTOR V,
    FXMVECTOR Min,
    FXMVECTOR Max
)
{
    (void)( (!!(XMVector4LessOrEqual(Min, Max))) || (_wassert(L"XMVector4LessOrEqual(Min, Max)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(2486)), 0) );
# 2501 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult;
    vResult = _mm_max_ps(Min,V);
    vResult = _mm_min_ps(vResult,Max);
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorSaturate
(
    FXMVECTOR V
)
{
# 2528 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_max_ps(V,g_XMZero);

    return _mm_min_ps(vResult,g_XMOne);

}





inline XMVECTOR __vectorcall XMVectorAndInt
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 2556 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_and_ps(V1,V2);

}



inline XMVECTOR __vectorcall XMVectorAndCInt
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 2580 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i V = _mm_andnot_si128( _mm_castps_si128(V2), _mm_castps_si128(V1) );
    return _mm_castsi128_ps(V);

}



inline XMVECTOR __vectorcall XMVectorOrInt
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 2605 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i V = _mm_or_si128( _mm_castps_si128(V1), _mm_castps_si128(V2) );
    return _mm_castsi128_ps(V);

}



inline XMVECTOR __vectorcall XMVectorNorInt
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 2631 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i Result;
    Result = _mm_or_si128( _mm_castps_si128(V1), _mm_castps_si128(V2) );
    Result = _mm_andnot_si128( Result,g_XMNegOneMask);
    return _mm_castsi128_ps(Result);

}



inline XMVECTOR __vectorcall XMVectorXorInt
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 2658 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i V = _mm_xor_si128( _mm_castps_si128(V1), _mm_castps_si128(V2) );
    return _mm_castsi128_ps(V);

}







inline XMVECTOR __vectorcall XMVectorNegate
(
    FXMVECTOR V
)
{
# 2686 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR Z;

    Z = _mm_setzero_ps();

    return _mm_sub_ps( Z, V );

}



inline XMVECTOR __vectorcall XMVectorAdd
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 2714 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_add_ps( V1, V2 );

}



inline XMVECTOR __vectorcall XMVectorAddAngles
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 2762 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_add_ps(V1,V2);

    XMVECTOR vOffset = _mm_cmplt_ps(vResult,g_XMNegativePi);
    vOffset = _mm_and_ps(vOffset,g_XMTwoPi);

    vResult = _mm_add_ps(vResult,vOffset);

    vOffset = _mm_cmpge_ps(vResult,g_XMPi);
    vOffset = _mm_and_ps(vOffset,g_XMTwoPi);

    vResult = _mm_sub_ps(vResult,vOffset);
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorSubtract
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 2797 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_sub_ps( V1, V2 );

}



inline XMVECTOR __vectorcall XMVectorSubtractAngles
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 2845 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_sub_ps(V1,V2);

    XMVECTOR vOffset = _mm_cmplt_ps(vResult,g_XMNegativePi);
    vOffset = _mm_and_ps(vOffset,g_XMTwoPi);

    vResult = _mm_add_ps(vResult,vOffset);

    vOffset = _mm_cmpge_ps(vResult,g_XMPi);
    vOffset = _mm_and_ps(vOffset,g_XMTwoPi);

    vResult = _mm_sub_ps(vResult,vOffset);
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorMultiply
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 2878 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_mul_ps( V1, V2 );

}



inline XMVECTOR __vectorcall XMVectorMultiplyAdd
(
    FXMVECTOR V1,
    FXMVECTOR V2,
    FXMVECTOR V3
)
{
# 2901 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_mul_ps( V1, V2 );
    return _mm_add_ps(vResult, V3 );

}



inline XMVECTOR __vectorcall XMVectorDivide
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 2930 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_div_ps( V1, V2 );

}



inline XMVECTOR __vectorcall XMVectorNegativeMultiplySubtract
(
    FXMVECTOR V1,
    FXMVECTOR V2,
    FXMVECTOR V3
)
{
# 2953 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR R = _mm_mul_ps( V1, V2 );
    return _mm_sub_ps( V3, R );

}



inline XMVECTOR __vectorcall XMVectorScale
(
    FXMVECTOR V,
    float ScaleFactor
)
{
# 2976 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
   XMVECTOR vResult = _mm_set_ps1(ScaleFactor);
   return _mm_mul_ps(vResult,V);

}



inline XMVECTOR __vectorcall XMVectorReciprocalEst
(
    FXMVECTOR V
)
{
# 2998 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_rcp_ps(V);

}



inline XMVECTOR __vectorcall XMVectorReciprocal
(
    FXMVECTOR V
)
{
# 3024 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_div_ps(g_XMOne,V);

}



inline XMVECTOR __vectorcall XMVectorSqrtEst
(
    FXMVECTOR V
)
{
# 3055 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_sqrt_ps(V);

}



inline XMVECTOR __vectorcall XMVectorSqrt
(
    FXMVECTOR V
)
{
# 3092 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_sqrt_ps(V);

}



inline XMVECTOR __vectorcall XMVectorReciprocalSqrtEst
(
    FXMVECTOR V
)
{
# 3113 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    return _mm_rsqrt_ps(V);

}



inline XMVECTOR __vectorcall XMVectorReciprocalSqrt
(
    FXMVECTOR V
)
{
# 3144 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_sqrt_ps(V);
    vResult = _mm_div_ps(g_XMOne,vResult);
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorExp2
(
    FXMVECTOR V
)
{
# 3221 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i itrunc = _mm_cvttps_epi32(V);
    __m128 ftrunc = _mm_cvtepi32_ps(itrunc);
    __m128 y = _mm_sub_ps(V, ftrunc);
    __m128 poly = _mm_mul_ps(g_XMExpEst7, y);
    poly = _mm_add_ps(g_XMExpEst6, poly);
    poly = _mm_mul_ps(poly, y);
    poly = _mm_add_ps(g_XMExpEst5, poly);
    poly = _mm_mul_ps(poly, y);
    poly = _mm_add_ps(g_XMExpEst4, poly);
    poly = _mm_mul_ps(poly, y);
    poly = _mm_add_ps(g_XMExpEst3, poly);
    poly = _mm_mul_ps(poly, y);
    poly = _mm_add_ps(g_XMExpEst2, poly);
    poly = _mm_mul_ps(poly, y);
    poly = _mm_add_ps(g_XMExpEst1, poly);
    poly = _mm_mul_ps(poly, y);
    poly = _mm_add_ps(g_XMOne, poly);

    __m128i biased = _mm_add_epi32(itrunc, g_XMExponentBias);
    biased = _mm_slli_epi32(biased, 23);
    __m128 result0 = _mm_div_ps(_mm_castsi128_ps(biased), poly);

    biased = _mm_add_epi32(itrunc, g_XM253);
    biased = _mm_slli_epi32(biased, 23);
    __m128 result1 = _mm_div_ps(_mm_castsi128_ps(biased), poly);
    result1 = _mm_mul_ps(g_XMMinNormal.v, result1);
# 3259 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i comp = _mm_cmplt_epi32( _mm_castps_si128(V), g_XMBin128);
    __m128i select0 = _mm_and_si128(comp, _mm_castps_si128(result0));
    __m128i select1 = _mm_andnot_si128(comp, g_XMInfinity);
    __m128i result2 = _mm_or_si128(select0, select1);

    comp = _mm_cmplt_epi32(itrunc, g_XMSubnormalExponent);
    select1 = _mm_and_si128(comp, _mm_castps_si128(result1));
    select0 = _mm_andnot_si128(comp, _mm_castps_si128(result0));
    __m128i result3 = _mm_or_si128(select0, select1);

    comp = _mm_cmplt_epi32(_mm_castps_si128(V), g_XMBinNeg150);
    select0 = _mm_and_si128(comp, result3);
    select1 = _mm_andnot_si128(comp, g_XMZero);
    __m128i result4 = _mm_or_si128(select0, select1);

    __m128i sign = _mm_and_si128(_mm_castps_si128(V), g_XMNegativeZero);
    comp = _mm_cmpeq_epi32(sign, g_XMNegativeZero);
    select0 = _mm_and_si128(comp, result4);
    select1 = _mm_andnot_si128(comp, result2);
    __m128i result5 = _mm_or_si128(select0, select1);

    __m128i t0 = _mm_and_si128(_mm_castps_si128(V), g_XMQNaNTest);
    __m128i t1 = _mm_and_si128(_mm_castps_si128(V), g_XMInfinity);
    t0 = _mm_cmpeq_epi32(t0, g_XMZero);
    t1 = _mm_cmpeq_epi32(t1, g_XMInfinity);
    __m128i isNaN = _mm_andnot_si128(t0, t1);

    select0 = _mm_and_si128(isNaN, g_XMQNaN);
    select1 = _mm_andnot_si128(isNaN, result5);
    __m128i vResult = _mm_or_si128(select0, select1);

    return _mm_castsi128_ps(vResult);

}



inline XMVECTOR __vectorcall XMVectorExpE
(
    FXMVECTOR V
)
{
# 3370 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128 Ve = _mm_mul_ps(g_XMLgE, V);

    __m128i itrunc = _mm_cvttps_epi32(Ve);
    __m128 ftrunc = _mm_cvtepi32_ps(itrunc);
    __m128 y = _mm_sub_ps(Ve, ftrunc);
    __m128 poly = _mm_mul_ps(g_XMExpEst7, y);
    poly = _mm_add_ps(g_XMExpEst6, poly);
    poly = _mm_mul_ps(poly, y);
    poly = _mm_add_ps(g_XMExpEst5, poly);
    poly = _mm_mul_ps(poly, y);
    poly = _mm_add_ps(g_XMExpEst4, poly);
    poly = _mm_mul_ps(poly, y);
    poly = _mm_add_ps(g_XMExpEst3, poly);
    poly = _mm_mul_ps(poly, y);
    poly = _mm_add_ps(g_XMExpEst2, poly);
    poly = _mm_mul_ps(poly, y);
    poly = _mm_add_ps(g_XMExpEst1, poly);
    poly = _mm_mul_ps(poly, y);
    poly = _mm_add_ps(g_XMOne, poly);

    __m128i biased = _mm_add_epi32(itrunc, g_XMExponentBias);
    biased = _mm_slli_epi32(biased, 23);
    __m128 result0 = _mm_div_ps(_mm_castsi128_ps(biased), poly);

    biased = _mm_add_epi32(itrunc, g_XM253);
    biased = _mm_slli_epi32(biased, 23);
    __m128 result1 = _mm_div_ps(_mm_castsi128_ps(biased), poly);
    result1 = _mm_mul_ps(g_XMMinNormal.v, result1);
# 3410 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i comp = _mm_cmplt_epi32( _mm_castps_si128(Ve), g_XMBin128);
    __m128i select0 = _mm_and_si128(comp, _mm_castps_si128(result0));
    __m128i select1 = _mm_andnot_si128(comp, g_XMInfinity);
    __m128i result2 = _mm_or_si128(select0, select1);

    comp = _mm_cmplt_epi32(itrunc, g_XMSubnormalExponent);
    select1 = _mm_and_si128(comp, _mm_castps_si128(result1));
    select0 = _mm_andnot_si128(comp, _mm_castps_si128(result0));
    __m128i result3 = _mm_or_si128(select0, select1);

    comp = _mm_cmplt_epi32(_mm_castps_si128(Ve), g_XMBinNeg150);
    select0 = _mm_and_si128(comp, result3);
    select1 = _mm_andnot_si128(comp, g_XMZero);
    __m128i result4 = _mm_or_si128(select0, select1);

    __m128i sign = _mm_and_si128(_mm_castps_si128(Ve), g_XMNegativeZero);
    comp = _mm_cmpeq_epi32(sign, g_XMNegativeZero);
    select0 = _mm_and_si128(comp, result4);
    select1 = _mm_andnot_si128(comp, result2);
    __m128i result5 = _mm_or_si128(select0, select1);

    __m128i t0 = _mm_and_si128(_mm_castps_si128(Ve), g_XMQNaNTest);
    __m128i t1 = _mm_and_si128(_mm_castps_si128(Ve), g_XMInfinity);
    t0 = _mm_cmpeq_epi32(t0, g_XMZero);
    t1 = _mm_cmpeq_epi32(t1, g_XMInfinity);
    __m128i isNaN = _mm_andnot_si128(t0, t1);

    select0 = _mm_and_si128(isNaN, g_XMQNaN);
    select1 = _mm_andnot_si128(isNaN, result5);
    __m128i vResult = _mm_or_si128(select0, select1);

    return _mm_castsi128_ps(vResult);

}



inline XMVECTOR __vectorcall XMVectorExp
(
    FXMVECTOR V
)
{
    return XMVectorExp2(V);
}





namespace Internal
{
    inline __m128i multi_sll_epi32(__m128i value, __m128i count)
    {
        __m128i v = _mm_shuffle_epi32(value, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))));
        __m128i c = _mm_shuffle_epi32(count, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))));
        c = _mm_and_si128(c, g_XMMaskX);
        __m128i r0 = _mm_sll_epi32(v, c);

        v = _mm_shuffle_epi32(value, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))));
        c = _mm_shuffle_epi32(count, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))));
        c = _mm_and_si128(c, g_XMMaskX);
        __m128i r1 = _mm_sll_epi32(v, c);

        v = _mm_shuffle_epi32(value, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))));
        c = _mm_shuffle_epi32(count, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))));
        c = _mm_and_si128(c, g_XMMaskX);
        __m128i r2 = _mm_sll_epi32(v, c);

        v = _mm_shuffle_epi32(value, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))));
        c = _mm_shuffle_epi32(count, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))));
        c = _mm_and_si128(c, g_XMMaskX);
        __m128i r3 = _mm_sll_epi32(v, c);


        __m128 r01 = _mm_shuffle_ps(_mm_castsi128_ps(r0), _mm_castsi128_ps(r1), (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))));

        __m128 r23 = _mm_shuffle_ps(_mm_castsi128_ps(r2), _mm_castsi128_ps(r3), (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))));

        __m128 result = _mm_shuffle_ps(r01, r23, (((2) << 6) | ((0) << 4) | ((2) << 2) | ((0))));
        return _mm_castps_si128(result);
    }

    inline __m128i multi_srl_epi32(__m128i value, __m128i count)
    {
        __m128i v = _mm_shuffle_epi32(value, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))));
        __m128i c = _mm_shuffle_epi32(count, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))));
        c = _mm_and_si128(c, g_XMMaskX);
        __m128i r0 = _mm_srl_epi32(v, c);

        v = _mm_shuffle_epi32(value, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))));
        c = _mm_shuffle_epi32(count, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))));
        c = _mm_and_si128(c, g_XMMaskX);
        __m128i r1 = _mm_srl_epi32(v, c);

        v = _mm_shuffle_epi32(value, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))));
        c = _mm_shuffle_epi32(count, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))));
        c = _mm_and_si128(c, g_XMMaskX);
        __m128i r2 = _mm_srl_epi32(v, c);

        v = _mm_shuffle_epi32(value, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))));
        c = _mm_shuffle_epi32(count, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))));
        c = _mm_and_si128(c, g_XMMaskX);
        __m128i r3 = _mm_srl_epi32(v, c);


        __m128 r01 = _mm_shuffle_ps(_mm_castsi128_ps(r0), _mm_castsi128_ps(r1), (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))));

        __m128 r23 = _mm_shuffle_ps(_mm_castsi128_ps(r2), _mm_castsi128_ps(r3), (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))));

        __m128 result = _mm_shuffle_ps(r01, r23, (((2) << 6) | ((0) << 4) | ((2) << 2) | ((0))));
        return _mm_castps_si128(result);
    }

    inline __m128i GetLeadingBit(const __m128i value)
    {
        static const XMVECTORI32 g_XM0000FFFF = {0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF};
        static const XMVECTORI32 g_XM000000FF = {0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF};
        static const XMVECTORI32 g_XM0000000F = {0x0000000F, 0x0000000F, 0x0000000F, 0x0000000F};
        static const XMVECTORI32 g_XM00000003 = {0x00000003, 0x00000003, 0x00000003, 0x00000003};

        __m128i v = value, r, c, b, s;

        c = _mm_cmpgt_epi32(v, g_XM0000FFFF);
        b = _mm_srli_epi32(c, 31);
        r = _mm_slli_epi32(b, 4);
        v = multi_srl_epi32(v, r);

        c = _mm_cmpgt_epi32(v, g_XM000000FF);
        b = _mm_srli_epi32(c, 31);
        s = _mm_slli_epi32(b, 3);
        v = multi_srl_epi32(v, s);
        r = _mm_or_si128(r, s);

        c = _mm_cmpgt_epi32(v, g_XM0000000F);
        b = _mm_srli_epi32(c, 31);
        s = _mm_slli_epi32(b, 2);
        v = multi_srl_epi32(v, s);
        r = _mm_or_si128(r, s);

        c = _mm_cmpgt_epi32(v, g_XM00000003);
        b = _mm_srli_epi32(c, 31);
        s = _mm_slli_epi32(b, 1);
        v = multi_srl_epi32(v, s);
        r = _mm_or_si128(r, s);

        s = _mm_srli_epi32(v, 1);
        r = _mm_or_si128(r, s);
        return r;
    }
}
# 3614 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
inline XMVECTOR __vectorcall XMVectorLog2
(
    FXMVECTOR V
)
{
# 3692 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i rawBiased = _mm_and_si128(_mm_castps_si128(V), g_XMInfinity);
    __m128i trailing = _mm_and_si128(_mm_castps_si128(V), g_XMQNaNTest);
    __m128i isExponentZero = _mm_cmpeq_epi32(g_XMZero, rawBiased);


    __m128i biased = _mm_srli_epi32(rawBiased, 23);
    __m128i exponentNor = _mm_sub_epi32(biased, g_XMExponentBias);
    __m128i trailingNor = trailing;


    __m128i leading = Internal::GetLeadingBit(trailing);
    __m128i shift = _mm_sub_epi32(g_XMNumTrailing, leading);
    __m128i exponentSub = _mm_sub_epi32(g_XMSubnormalExponent, shift);
    __m128i trailingSub = Internal::multi_sll_epi32(trailing, shift);
    trailingSub = _mm_and_si128(trailingSub, g_XMQNaNTest);

    __m128i select0 = _mm_and_si128(isExponentZero, exponentSub);
    __m128i select1 = _mm_andnot_si128(isExponentZero, exponentNor);
    __m128i e = _mm_or_si128(select0, select1);

    select0 = _mm_and_si128(isExponentZero, trailingSub);
    select1 = _mm_andnot_si128(isExponentZero, trailingNor);
    __m128i t = _mm_or_si128(select0, select1);


    __m128i tmp = _mm_or_si128(g_XMOne, t);
    __m128 y = _mm_sub_ps(_mm_castsi128_ps(tmp), g_XMOne);

    __m128 log2 = _mm_mul_ps(g_XMLogEst7, y);
    log2 = _mm_add_ps(g_XMLogEst6, log2);
    log2 = _mm_mul_ps(log2, y);
    log2 = _mm_add_ps(g_XMLogEst5, log2);
    log2 = _mm_mul_ps(log2, y);
    log2 = _mm_add_ps(g_XMLogEst4, log2);
    log2 = _mm_mul_ps(log2, y);
    log2 = _mm_add_ps(g_XMLogEst3, log2);
    log2 = _mm_mul_ps(log2, y);
    log2 = _mm_add_ps(g_XMLogEst2, log2);
    log2 = _mm_mul_ps(log2, y);
    log2 = _mm_add_ps(g_XMLogEst1, log2);
    log2 = _mm_mul_ps(log2, y);
    log2 = _mm_add_ps(g_XMLogEst0, log2);
    log2 = _mm_mul_ps(log2, y);
    log2 = _mm_add_ps(log2, _mm_cvtepi32_ps(e));
# 3745 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i isInfinite = _mm_and_si128(_mm_castps_si128(V), g_XMAbsMask);
    isInfinite = _mm_cmpeq_epi32(isInfinite, g_XMInfinity);

    __m128i isGreaterZero = _mm_cmpgt_epi32(_mm_castps_si128(V), g_XMZero);
    __m128i isNotFinite = _mm_cmpgt_epi32(_mm_castps_si128(V), g_XMInfinity);
    __m128i isPositive = _mm_andnot_si128(isNotFinite, isGreaterZero);

    __m128i isZero = _mm_and_si128(_mm_castps_si128(V), g_XMAbsMask);
    isZero = _mm_cmpeq_epi32(isZero, g_XMZero);

    __m128i t0 = _mm_and_si128(_mm_castps_si128(V), g_XMQNaNTest);
    __m128i t1 = _mm_and_si128(_mm_castps_si128(V), g_XMInfinity);
    t0 = _mm_cmpeq_epi32(t0, g_XMZero);
    t1 = _mm_cmpeq_epi32(t1, g_XMInfinity);
    __m128i isNaN = _mm_andnot_si128(t0, t1);

    select0 = _mm_and_si128(isInfinite, g_XMInfinity);
    select1 = _mm_andnot_si128(isInfinite, _mm_castps_si128(log2));
    __m128i result = _mm_or_si128(select0, select1);

    select0 = _mm_and_si128(isZero, g_XMNegInfinity);
    select1 = _mm_andnot_si128(isZero, g_XMNegQNaN);
    tmp = _mm_or_si128(select0, select1);

    select0 = _mm_and_si128(isPositive, result);
    select1 = _mm_andnot_si128(isPositive, tmp);
    result = _mm_or_si128(select0, select1);

    select0 = _mm_and_si128(isNaN, g_XMQNaN);
    select1 = _mm_andnot_si128(isNaN, result);
    result = _mm_or_si128(select0, select1);

    return _mm_castsi128_ps(result);

}



inline XMVECTOR __vectorcall XMVectorLogE
(
    FXMVECTOR V
)
{
# 3861 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i rawBiased = _mm_and_si128(_mm_castps_si128(V), g_XMInfinity);
    __m128i trailing = _mm_and_si128(_mm_castps_si128(V), g_XMQNaNTest);
    __m128i isExponentZero = _mm_cmpeq_epi32(g_XMZero, rawBiased);


    __m128i biased = _mm_srli_epi32(rawBiased, 23);
    __m128i exponentNor = _mm_sub_epi32(biased, g_XMExponentBias);
    __m128i trailingNor = trailing;


    __m128i leading = Internal::GetLeadingBit(trailing);
    __m128i shift = _mm_sub_epi32(g_XMNumTrailing, leading);
    __m128i exponentSub = _mm_sub_epi32(g_XMSubnormalExponent, shift);
    __m128i trailingSub = Internal::multi_sll_epi32(trailing, shift);
    trailingSub = _mm_and_si128(trailingSub, g_XMQNaNTest);

    __m128i select0 = _mm_and_si128(isExponentZero, exponentSub);
    __m128i select1 = _mm_andnot_si128(isExponentZero, exponentNor);
    __m128i e = _mm_or_si128(select0, select1);

    select0 = _mm_and_si128(isExponentZero, trailingSub);
    select1 = _mm_andnot_si128(isExponentZero, trailingNor);
    __m128i t = _mm_or_si128(select0, select1);


    __m128i tmp = _mm_or_si128(g_XMOne, t);
    __m128 y = _mm_sub_ps(_mm_castsi128_ps(tmp), g_XMOne);

    __m128 log2 = _mm_mul_ps(g_XMLogEst7, y);
    log2 = _mm_add_ps(g_XMLogEst6, log2);
    log2 = _mm_mul_ps(log2, y);
    log2 = _mm_add_ps(g_XMLogEst5, log2);
    log2 = _mm_mul_ps(log2, y);
    log2 = _mm_add_ps(g_XMLogEst4, log2);
    log2 = _mm_mul_ps(log2, y);
    log2 = _mm_add_ps(g_XMLogEst3, log2);
    log2 = _mm_mul_ps(log2, y);
    log2 = _mm_add_ps(g_XMLogEst2, log2);
    log2 = _mm_mul_ps(log2, y);
    log2 = _mm_add_ps(g_XMLogEst1, log2);
    log2 = _mm_mul_ps(log2, y);
    log2 = _mm_add_ps(g_XMLogEst0, log2);
    log2 = _mm_mul_ps(log2, y);
    log2 = _mm_add_ps(log2, _mm_cvtepi32_ps(e));

    log2 = _mm_mul_ps(g_XMInvLgE, log2);
# 3916 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i isInfinite = _mm_and_si128(_mm_castps_si128(V), g_XMAbsMask);
    isInfinite = _mm_cmpeq_epi32(isInfinite, g_XMInfinity);

    __m128i isGreaterZero = _mm_cmpgt_epi32(_mm_castps_si128(V), g_XMZero);
    __m128i isNotFinite = _mm_cmpgt_epi32(_mm_castps_si128(V), g_XMInfinity);
    __m128i isPositive = _mm_andnot_si128(isNotFinite, isGreaterZero);

    __m128i isZero = _mm_and_si128(_mm_castps_si128(V), g_XMAbsMask);
    isZero = _mm_cmpeq_epi32(isZero, g_XMZero);

    __m128i t0 = _mm_and_si128(_mm_castps_si128(V), g_XMQNaNTest);
    __m128i t1 = _mm_and_si128(_mm_castps_si128(V), g_XMInfinity);
    t0 = _mm_cmpeq_epi32(t0, g_XMZero);
    t1 = _mm_cmpeq_epi32(t1, g_XMInfinity);
    __m128i isNaN = _mm_andnot_si128(t0, t1);

    select0 = _mm_and_si128(isInfinite, g_XMInfinity);
    select1 = _mm_andnot_si128(isInfinite, _mm_castps_si128(log2));
    __m128i result = _mm_or_si128(select0, select1);

    select0 = _mm_and_si128(isZero, g_XMNegInfinity);
    select1 = _mm_andnot_si128(isZero, g_XMNegQNaN);
    tmp = _mm_or_si128(select0, select1);

    select0 = _mm_and_si128(isPositive, result);
    select1 = _mm_andnot_si128(isPositive, tmp);
    result = _mm_or_si128(select0, select1);

    select0 = _mm_and_si128(isNaN, g_XMQNaN);
    select1 = _mm_andnot_si128(isNaN, result);
    result = _mm_or_si128(select0, select1);

    return _mm_castsi128_ps(result);

}



inline XMVECTOR __vectorcall XMVectorLog
(
    FXMVECTOR V
)
{
    return XMVectorLog2(V);
}



inline XMVECTOR __vectorcall XMVectorPow
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 3988 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __declspec(align(16)) float a[4];
    __declspec(align(16)) float b[4];
    _mm_store_ps( a, V1 );
    _mm_store_ps( b, V2 );
    XMVECTOR vResult = _mm_setr_ps(
        powf(a[0],b[0]),
        powf(a[1],b[1]),
        powf(a[2],b[2]),
        powf(a[3],b[3]));
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorAbs
(
    FXMVECTOR V
)
{
# 4018 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_setzero_ps();
    vResult = _mm_sub_ps(vResult,V);
    vResult = _mm_max_ps(vResult,V);
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorMod
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 4047 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_div_ps(V1, V2);
    vResult = XMVectorTruncate(vResult);
    vResult = _mm_mul_ps(vResult,V2);
    vResult = _mm_sub_ps(V1,vResult);
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorModAngles
(
    FXMVECTOR Angles
)
{
# 4081 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_mul_ps(Angles,g_XMReciprocalTwoPi);

    vResult = XMVectorRound(vResult);
    vResult = _mm_mul_ps(vResult,g_XMTwoPi);
    vResult = _mm_sub_ps(Angles,vResult);
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorSin
(
    FXMVECTOR V
)
{
# 4140 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR x = XMVectorModAngles(V);


    __m128 sign = _mm_and_ps(x, g_XMNegativeZero);
    __m128 c = _mm_or_ps(g_XMPi, sign);
    __m128 absx = _mm_andnot_ps(sign, x);
    __m128 rflx = _mm_sub_ps(c, x);
    __m128 comp = _mm_cmple_ps(absx, g_XMHalfPi);
    __m128 select0 = _mm_and_ps(comp, x);
    __m128 select1 = _mm_andnot_ps(comp, rflx);
    x = _mm_or_ps(select0, select1);

    __m128 x2 = _mm_mul_ps(x, x);


    const XMVECTOR SC1 = g_XMSinCoefficients1;
    XMVECTOR vConstants = _mm_shuffle_ps( SC1, SC1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    __m128 Result = _mm_mul_ps(vConstants, x2);

    const XMVECTOR SC0 = g_XMSinCoefficients0;
    vConstants = _mm_shuffle_ps( SC0, SC0, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( SC0, SC0, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( SC0, SC0, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( SC0, SC0, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);
    Result = _mm_add_ps(Result, g_XMOne);
    Result = _mm_mul_ps(Result, x);
    return Result;

}



inline XMVECTOR __vectorcall XMVectorCos
(
    FXMVECTOR V
)
{
# 4232 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR x = XMVectorModAngles(V);


    XMVECTOR sign = _mm_and_ps(x, g_XMNegativeZero);
    __m128 c = _mm_or_ps(g_XMPi, sign);
    __m128 absx = _mm_andnot_ps(sign, x);
    __m128 rflx = _mm_sub_ps(c, x);
    __m128 comp = _mm_cmple_ps(absx, g_XMHalfPi);
    __m128 select0 = _mm_and_ps(comp, x);
    __m128 select1 = _mm_andnot_ps(comp, rflx);
    x = _mm_or_ps(select0, select1);
    select0 = _mm_and_ps(comp, g_XMOne);
    select1 = _mm_andnot_ps(comp, g_XMNegativeOne);
    sign = _mm_or_ps(select0, select1);

    __m128 x2 = _mm_mul_ps(x, x);


    const XMVECTOR CC1 = g_XMCosCoefficients1;
    XMVECTOR vConstants = _mm_shuffle_ps( CC1, CC1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    __m128 Result = _mm_mul_ps(vConstants, x2);

    const XMVECTOR CC0 = g_XMCosCoefficients0;
    vConstants = _mm_shuffle_ps( CC0, CC0, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( CC0, CC0, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( CC0, CC0, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( CC0, CC0, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);
    Result = _mm_add_ps(Result, g_XMOne);
    Result = _mm_mul_ps(Result, sign);
    return Result;

}




inline void __vectorcall XMVectorSinCos
(
    XMVECTOR* pSin,
    XMVECTOR* pCos,
    FXMVECTOR V
)
{
    (void)( (!!(pSin != nullptr)) || (_wassert(L"pSin != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(4286)), 0) );
    (void)( (!!(pCos != nullptr)) || (_wassert(L"pCos != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(4287)), 0) );
# 4358 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR x = XMVectorModAngles(V);


    XMVECTOR sign = _mm_and_ps(x, g_XMNegativeZero);
    __m128 c = _mm_or_ps(g_XMPi, sign);
    __m128 absx = _mm_andnot_ps(sign, x);
    __m128 rflx = _mm_sub_ps(c, x);
    __m128 comp = _mm_cmple_ps(absx, g_XMHalfPi);
    __m128 select0 = _mm_and_ps(comp, x);
    __m128 select1 = _mm_andnot_ps(comp, rflx);
    x = _mm_or_ps(select0, select1);
    select0 = _mm_and_ps(comp, g_XMOne);
    select1 = _mm_andnot_ps(comp, g_XMNegativeOne);
    sign = _mm_or_ps(select0, select1);

    __m128 x2 = _mm_mul_ps(x, x);


    const XMVECTOR SC1 = g_XMSinCoefficients1;
    XMVECTOR vConstants = _mm_shuffle_ps( SC1, SC1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    __m128 Result = _mm_mul_ps(vConstants, x2);

    const XMVECTOR SC0 = g_XMSinCoefficients0;
    vConstants = _mm_shuffle_ps( SC0, SC0, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( SC0, SC0, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( SC0, SC0, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( SC0, SC0, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);
    Result = _mm_add_ps(Result, g_XMOne);
    Result = _mm_mul_ps(Result, x);
    *pSin = Result;


    const XMVECTOR CC1 = g_XMCosCoefficients1;
    vConstants = _mm_shuffle_ps( CC1, CC1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    Result = _mm_mul_ps(vConstants, x2);

    const XMVECTOR CC0 = g_XMCosCoefficients0;
    vConstants = _mm_shuffle_ps( CC0, CC0, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( CC0, CC0, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( CC0, CC0, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( CC0, CC0, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);
    Result = _mm_add_ps(Result, g_XMOne);
    Result = _mm_mul_ps(Result, sign);
    *pCos = Result;

}



inline XMVECTOR __vectorcall XMVectorTan
(
    FXMVECTOR V
)
{
# 4445 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    static const XMVECTORF32 TanCoefficients0 = {1.0f, -4.667168334e-1f, 2.566383229e-2f, -3.118153191e-4f};
    static const XMVECTORF32 TanCoefficients1 = {4.981943399e-7f, -1.333835001e-1f, 3.424887824e-3f, -1.786170734e-5f};
    static const XMVECTORF32 TanConstants = {1.570796371f, 6.077100628e-11f, 0.000244140625f, 0.63661977228f };
    static const XMVECTORU32 Mask = {0x1, 0x1, 0x1, 0x1};

    XMVECTOR TwoDivPi = XMVectorSplatW(TanConstants.v);

    XMVECTOR Zero = XMVectorZero();

    XMVECTOR C0 = XMVectorSplatX(TanConstants.v);
    XMVECTOR C1 = XMVectorSplatY(TanConstants.v);
    XMVECTOR Epsilon = XMVectorSplatZ(TanConstants.v);

    XMVECTOR VA = XMVectorMultiply(V, TwoDivPi);

    VA = XMVectorRound(VA);

    XMVECTOR VC = XMVectorNegativeMultiplySubtract(VA, C0, V);

    XMVECTOR VB = XMVectorAbs(VA);

    VC = XMVectorNegativeMultiplySubtract(VA, C1, VC);




    reinterpret_cast<__m128i *>(&VB)[0] = _mm_cvttps_epi32(VB);







    XMVECTOR VC2 = XMVectorMultiply(VC, VC);

    XMVECTOR T7 = XMVectorSplatW(TanCoefficients1.v);
    XMVECTOR T6 = XMVectorSplatZ(TanCoefficients1.v);
    XMVECTOR T4 = XMVectorSplatX(TanCoefficients1.v);
    XMVECTOR T3 = XMVectorSplatW(TanCoefficients0.v);
    XMVECTOR T5 = XMVectorSplatY(TanCoefficients1.v);
    XMVECTOR T2 = XMVectorSplatZ(TanCoefficients0.v);
    XMVECTOR T1 = XMVectorSplatY(TanCoefficients0.v);
    XMVECTOR T0 = XMVectorSplatX(TanCoefficients0.v);

    XMVECTOR VBIsEven = XMVectorAndInt(VB, Mask.v);
    VBIsEven = XMVectorEqualInt(VBIsEven, Zero);

    XMVECTOR N = XMVectorMultiplyAdd(VC2, T7, T6);
    XMVECTOR D = XMVectorMultiplyAdd(VC2, T4, T3);
    N = XMVectorMultiplyAdd(VC2, N, T5);
    D = XMVectorMultiplyAdd(VC2, D, T2);
    N = XMVectorMultiply(VC2, N);
    D = XMVectorMultiplyAdd(VC2, D, T1);
    N = XMVectorMultiplyAdd(VC, N, VC);
    XMVECTOR VCNearZero = XMVectorInBounds(VC, Epsilon);
    D = XMVectorMultiplyAdd(VC2, D, T0);

    N = XMVectorSelect(N, VC, VCNearZero);
    D = XMVectorSelect(D, g_XMOne.v, VCNearZero);

    XMVECTOR R0 = XMVectorNegate(N);
    XMVECTOR R1 = XMVectorDivide(N,D);
    R0 = XMVectorDivide(D,R0);

    XMVECTOR VIsZero = XMVectorEqual(V, Zero);

    XMVECTOR Result = XMVectorSelect(R0, R1, VBIsEven);

    Result = XMVectorSelect(Result, Zero, VIsZero);

    return Result;


}



inline XMVECTOR __vectorcall XMVectorSinH
(
    FXMVECTOR V
)
{
# 4545 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    static const XMVECTORF32 Scale = {1.442695040888963f, 1.442695040888963f, 1.442695040888963f, 1.442695040888963f};

    XMVECTOR V1 = _mm_mul_ps(V, Scale);
    V1 = _mm_add_ps(V1,g_XMNegativeOne);
    XMVECTOR V2 = _mm_mul_ps(V, Scale);
    V2 = _mm_sub_ps(g_XMNegativeOne,V2);
    XMVECTOR E1 = XMVectorExp(V1);
    XMVECTOR E2 = XMVectorExp(V2);

    return _mm_sub_ps(E1, E2);

}



inline XMVECTOR __vectorcall XMVectorCosH
(
    FXMVECTOR V
)
{
# 4581 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    static const XMVECTORF32 Scale = {1.442695040888963f, 1.442695040888963f, 1.442695040888963f, 1.442695040888963f};

    XMVECTOR V1 = _mm_mul_ps(V,Scale.v);
    V1 = _mm_add_ps(V1,g_XMNegativeOne.v);
    XMVECTOR V2 = _mm_mul_ps(V, Scale.v);
    V2 = _mm_sub_ps(g_XMNegativeOne.v,V2);
    XMVECTOR E1 = XMVectorExp(V1);
    XMVECTOR E2 = XMVectorExp(V2);
    return _mm_add_ps(E1, E2);

}



inline XMVECTOR __vectorcall XMVectorTanH
(
    FXMVECTOR V
)
{
# 4616 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    static const XMVECTORF32 Scale = {2.8853900817779268f, 2.8853900817779268f, 2.8853900817779268f, 2.8853900817779268f};

    XMVECTOR E = _mm_mul_ps(V, Scale.v);
    E = XMVectorExp(E);
    E = _mm_mul_ps(E,g_XMOneHalf.v);
    E = _mm_add_ps(E,g_XMOneHalf.v);
    E = _mm_div_ps(g_XMOne.v,E);
    return _mm_sub_ps(g_XMOne.v,E);

}



inline XMVECTOR __vectorcall XMVectorASin
(
    FXMVECTOR V
)
{
# 4682 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128 nonnegative = _mm_cmpge_ps(V, g_XMZero);
    __m128 mvalue = _mm_sub_ps(g_XMZero, V);
    __m128 x = _mm_max_ps(V, mvalue);


    __m128 oneMValue = _mm_sub_ps(g_XMOne, x);
    __m128 clampOneMValue = _mm_max_ps(g_XMZero, oneMValue);
    __m128 root = _mm_sqrt_ps(clampOneMValue);


    const XMVECTOR AC1 = g_XMArcCoefficients1;
    XMVECTOR vConstants = _mm_shuffle_ps( AC1, AC1, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    __m128 t0 = _mm_mul_ps(vConstants, x);

    vConstants = _mm_shuffle_ps( AC1, AC1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    vConstants = _mm_shuffle_ps( AC1, AC1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    vConstants = _mm_shuffle_ps( AC1, AC1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    const XMVECTOR AC0 = g_XMArcCoefficients0;
    vConstants = _mm_shuffle_ps( AC0, AC0, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    vConstants = _mm_shuffle_ps( AC0, AC0, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    vConstants = _mm_shuffle_ps( AC0, AC0, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    vConstants = _mm_shuffle_ps( AC0, AC0, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, root);

    __m128 t1 = _mm_sub_ps(g_XMPi, t0);
    t0 = _mm_and_ps(nonnegative, t0);
    t1 = _mm_andnot_ps(nonnegative, t1);
    t0 = _mm_or_ps(t0, t1);
    t0 = _mm_sub_ps(g_XMHalfPi, t0);
    return t0;

}



inline XMVECTOR __vectorcall XMVectorACos
(
    FXMVECTOR V
)
{
# 4788 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128 nonnegative = _mm_cmpge_ps(V, g_XMZero);
    __m128 mvalue = _mm_sub_ps(g_XMZero, V);
    __m128 x = _mm_max_ps(V, mvalue);


    __m128 oneMValue = _mm_sub_ps(g_XMOne, x);
    __m128 clampOneMValue = _mm_max_ps(g_XMZero, oneMValue);
    __m128 root = _mm_sqrt_ps(clampOneMValue);


    const XMVECTOR AC1 = g_XMArcCoefficients1;
    XMVECTOR vConstants = _mm_shuffle_ps( AC1, AC1, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    __m128 t0 = _mm_mul_ps(vConstants, x);

    vConstants = _mm_shuffle_ps( AC1, AC1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    vConstants = _mm_shuffle_ps( AC1, AC1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    vConstants = _mm_shuffle_ps( AC1, AC1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    const XMVECTOR AC0 = g_XMArcCoefficients0;
    vConstants = _mm_shuffle_ps( AC0, AC0, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    vConstants = _mm_shuffle_ps( AC0, AC0, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    vConstants = _mm_shuffle_ps( AC0, AC0, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    vConstants = _mm_shuffle_ps( AC0, AC0, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, root);

    __m128 t1 = _mm_sub_ps(g_XMPi, t0);
    t0 = _mm_and_ps(nonnegative, t0);
    t1 = _mm_andnot_ps(nonnegative, t1);
    t0 = _mm_or_ps(t0, t1);
    return t0;

}



inline XMVECTOR __vectorcall XMVectorATan
(
    FXMVECTOR V
)
{
# 4900 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128 absV = XMVectorAbs(V);
    __m128 invV = _mm_div_ps(g_XMOne, V);
    __m128 comp = _mm_cmpgt_ps(V, g_XMOne);
    __m128 select0 = _mm_and_ps(comp, g_XMOne);
    __m128 select1 = _mm_andnot_ps(comp, g_XMNegativeOne);
    __m128 sign = _mm_or_ps(select0, select1);
    comp = _mm_cmple_ps(absV, g_XMOne);
    select0 = _mm_and_ps(comp, g_XMZero);
    select1 = _mm_andnot_ps(comp, sign);
    sign = _mm_or_ps(select0, select1);
    select0 = _mm_and_ps(comp, V);
    select1 = _mm_andnot_ps(comp, invV);
    __m128 x = _mm_or_ps(select0, select1);

    __m128 x2 = _mm_mul_ps(x, x);


    const XMVECTOR TC1 = g_XMATanCoefficients1;
    XMVECTOR vConstants = _mm_shuffle_ps( TC1, TC1, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    __m128 Result = _mm_mul_ps(vConstants, x2);

    vConstants = _mm_shuffle_ps( TC1, TC1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( TC1, TC1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( TC1, TC1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    const XMVECTOR TC0 = g_XMATanCoefficients0;
    vConstants = _mm_shuffle_ps( TC0, TC0, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( TC0, TC0, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( TC0, TC0, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( TC0, TC0, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);
    Result = _mm_add_ps(Result, g_XMOne);
    Result = _mm_mul_ps(Result, x);
    __m128 result1 = _mm_mul_ps(sign, g_XMHalfPi);
    result1 = _mm_sub_ps(result1, Result);

    comp = _mm_cmpeq_ps(sign, g_XMZero);
    select0 = _mm_and_ps(comp, Result);
    select1 = _mm_andnot_ps(comp, result1);
    Result = _mm_or_ps(select0, select1);
    return Result;

}



inline XMVECTOR __vectorcall XMVectorATan2
(
    FXMVECTOR Y,
    FXMVECTOR X
)
{
# 4991 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    static const XMVECTORF32 ATan2Constants = {XM_PI, XM_PIDIV2, XM_PIDIV4, XM_PI * 3.0f / 4.0f};

    XMVECTOR Zero = XMVectorZero();
    XMVECTOR ATanResultValid = XMVectorTrueInt();

    XMVECTOR Pi = XMVectorSplatX(ATan2Constants);
    XMVECTOR PiOverTwo = XMVectorSplatY(ATan2Constants);
    XMVECTOR PiOverFour = XMVectorSplatZ(ATan2Constants);
    XMVECTOR ThreePiOverFour = XMVectorSplatW(ATan2Constants);

    XMVECTOR YEqualsZero = XMVectorEqual(Y, Zero);
    XMVECTOR XEqualsZero = XMVectorEqual(X, Zero);
    XMVECTOR XIsPositive = XMVectorAndInt(X, g_XMNegativeZero.v);
    XIsPositive = XMVectorEqualInt(XIsPositive, Zero);
    XMVECTOR YEqualsInfinity = XMVectorIsInfinite(Y);
    XMVECTOR XEqualsInfinity = XMVectorIsInfinite(X);

    XMVECTOR YSign = XMVectorAndInt(Y, g_XMNegativeZero.v);
    Pi = XMVectorOrInt(Pi, YSign);
    PiOverTwo = XMVectorOrInt(PiOverTwo, YSign);
    PiOverFour = XMVectorOrInt(PiOverFour, YSign);
    ThreePiOverFour = XMVectorOrInt(ThreePiOverFour, YSign);

    XMVECTOR R1 = XMVectorSelect(Pi, YSign, XIsPositive);
    XMVECTOR R2 = XMVectorSelect(ATanResultValid, PiOverTwo, XEqualsZero);
    XMVECTOR R3 = XMVectorSelect(R2, R1, YEqualsZero);
    XMVECTOR R4 = XMVectorSelect(ThreePiOverFour, PiOverFour, XIsPositive);
    XMVECTOR R5 = XMVectorSelect(PiOverTwo, R4, XEqualsInfinity);
    XMVECTOR Result = XMVectorSelect(R3, R5, YEqualsInfinity);
    ATanResultValid = XMVectorEqualInt(Result, ATanResultValid);

    XMVECTOR V = XMVectorDivide(Y, X);

    XMVECTOR R0 = XMVectorATan(V);

    R1 = XMVectorSelect( Pi, g_XMNegativeZero, XIsPositive );
    R2 = XMVectorAdd(R0, R1);

    return XMVectorSelect(Result, R2, ATanResultValid);


}



inline XMVECTOR __vectorcall XMVectorSinEst
(
    FXMVECTOR V
)
{
# 5077 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR x = XMVectorModAngles(V);


    __m128 sign = _mm_and_ps(x, g_XMNegativeZero);
    __m128 c = _mm_or_ps(g_XMPi, sign);
    __m128 absx = _mm_andnot_ps(sign, x);
    __m128 rflx = _mm_sub_ps(c, x);
    __m128 comp = _mm_cmple_ps(absx, g_XMHalfPi);
    __m128 select0 = _mm_and_ps(comp, x);
    __m128 select1 = _mm_andnot_ps(comp, rflx);
    x = _mm_or_ps(select0, select1);

    __m128 x2 = _mm_mul_ps(x, x);


    const XMVECTOR SEC = g_XMSinCoefficients1;
    XMVECTOR vConstants = _mm_shuffle_ps( SEC, SEC, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    __m128 Result = _mm_mul_ps(vConstants, x2);

    vConstants = _mm_shuffle_ps( SEC, SEC, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( SEC, SEC, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    Result = _mm_add_ps(Result, g_XMOne);
    Result = _mm_mul_ps(Result, x);
    return Result;

}



inline XMVECTOR __vectorcall XMVectorCosEst
(
    FXMVECTOR V
)
{
# 5154 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR x = XMVectorModAngles(V);


    XMVECTOR sign = _mm_and_ps(x, g_XMNegativeZero);
    __m128 c = _mm_or_ps(g_XMPi, sign);
    __m128 absx = _mm_andnot_ps(sign, x);
    __m128 rflx = _mm_sub_ps(c, x);
    __m128 comp = _mm_cmple_ps(absx, g_XMHalfPi);
    __m128 select0 = _mm_and_ps(comp, x);
    __m128 select1 = _mm_andnot_ps(comp, rflx);
    x = _mm_or_ps(select0, select1);
    select0 = _mm_and_ps(comp, g_XMOne);
    select1 = _mm_andnot_ps(comp, g_XMNegativeOne);
    sign = _mm_or_ps(select0, select1);

    __m128 x2 = _mm_mul_ps(x, x);


    const XMVECTOR CEC = g_XMCosCoefficients1;
    XMVECTOR vConstants = _mm_shuffle_ps( CEC, CEC, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    __m128 Result = _mm_mul_ps(vConstants, x2);

    vConstants = _mm_shuffle_ps( CEC, CEC, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( CEC, CEC, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    Result = _mm_add_ps(Result, g_XMOne);
    Result = _mm_mul_ps(Result, sign);
    return Result;

}




inline void __vectorcall XMVectorSinCosEst
(
    XMVECTOR* pSin,
    XMVECTOR* pCos,
    FXMVECTOR V
)
{
    (void)( (!!(pSin != nullptr)) || (_wassert(L"pSin != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(5200)), 0) );
    (void)( (!!(pCos != nullptr)) || (_wassert(L"pCos != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(5201)), 0) );
# 5258 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR x = XMVectorModAngles(V);


    XMVECTOR sign = _mm_and_ps(x, g_XMNegativeZero);
    __m128 c = _mm_or_ps(g_XMPi, sign);
    __m128 absx = _mm_andnot_ps(sign, x);
    __m128 rflx = _mm_sub_ps(c, x);
    __m128 comp = _mm_cmple_ps(absx, g_XMHalfPi);
    __m128 select0 = _mm_and_ps(comp, x);
    __m128 select1 = _mm_andnot_ps(comp, rflx);
    x = _mm_or_ps(select0, select1);
    select0 = _mm_and_ps(comp, g_XMOne);
    select1 = _mm_andnot_ps(comp, g_XMNegativeOne);
    sign = _mm_or_ps(select0, select1);

    __m128 x2 = _mm_mul_ps(x, x);


    const XMVECTOR SEC = g_XMSinCoefficients1;
    XMVECTOR vConstants = _mm_shuffle_ps( SEC, SEC, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    __m128 Result = _mm_mul_ps(vConstants, x2);

    vConstants = _mm_shuffle_ps( SEC, SEC, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( SEC, SEC, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    Result = _mm_add_ps(Result, g_XMOne);
    Result = _mm_mul_ps(Result, x);
    *pSin = Result;


    const XMVECTOR CEC = g_XMCosCoefficients1;
    vConstants = _mm_shuffle_ps( CEC, CEC, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    Result = _mm_mul_ps(vConstants, x2);

    vConstants = _mm_shuffle_ps( CEC, CEC, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( CEC, CEC, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    Result = _mm_add_ps(Result, g_XMOne);
    Result = _mm_mul_ps(Result, sign);
    *pCos = Result;

}



inline XMVECTOR __vectorcall XMVectorTanEst
(
    FXMVECTOR V
)
{
# 5327 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR OneOverPi = XMVectorSplatW(g_XMTanEstCoefficients.v);

    XMVECTOR V1 = XMVectorMultiply(V, OneOverPi);
    V1 = XMVectorRound(V1);

    V1 = XMVectorNegativeMultiplySubtract(g_XMPi.v, V1, V);

    XMVECTOR T0 = XMVectorSplatX(g_XMTanEstCoefficients.v);
    XMVECTOR T1 = XMVectorSplatY(g_XMTanEstCoefficients.v);
    XMVECTOR T2 = XMVectorSplatZ(g_XMTanEstCoefficients.v);

    XMVECTOR V2T2 = XMVectorNegativeMultiplySubtract(V1, V1, T2);
    XMVECTOR V2 = XMVectorMultiply(V1, V1);
    XMVECTOR V1T0 = XMVectorMultiply(V1, T0);
    XMVECTOR V1T1 = XMVectorMultiply(V1, T1);

    XMVECTOR D = XMVectorReciprocalEst(V2T2);
    XMVECTOR N = XMVectorMultiplyAdd(V2, V1T1, V1T0);

    return XMVectorMultiply(N, D);


}



inline XMVECTOR __vectorcall XMVectorASinEst
(
    FXMVECTOR V
)
{
# 5393 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128 nonnegative = _mm_cmpge_ps(V, g_XMZero);
    __m128 mvalue = _mm_sub_ps(g_XMZero, V);
    __m128 x = _mm_max_ps(V, mvalue);


    __m128 oneMValue = _mm_sub_ps(g_XMOne, x);
    __m128 clampOneMValue = _mm_max_ps(g_XMZero, oneMValue);
    __m128 root = _mm_sqrt_ps(clampOneMValue);


    const XMVECTOR AEC = g_XMArcEstCoefficients;
    XMVECTOR vConstants = _mm_shuffle_ps( AEC, AEC, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    __m128 t0 = _mm_mul_ps(vConstants, x);

    vConstants = _mm_shuffle_ps( AEC, AEC, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    vConstants = _mm_shuffle_ps( AEC, AEC, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    vConstants = _mm_shuffle_ps( AEC, AEC, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, root);

    __m128 t1 = _mm_sub_ps(g_XMPi, t0);
    t0 = _mm_and_ps(nonnegative, t0);
    t1 = _mm_andnot_ps(nonnegative, t1);
    t0 = _mm_or_ps(t0, t1);
    t0 = _mm_sub_ps(g_XMHalfPi, t0);
    return t0;

}



inline XMVECTOR __vectorcall XMVectorACosEst
(
    FXMVECTOR V
)
{
# 5469 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128 nonnegative = _mm_cmpge_ps(V, g_XMZero);
    __m128 mvalue = _mm_sub_ps(g_XMZero, V);
    __m128 x = _mm_max_ps(V, mvalue);


    __m128 oneMValue = _mm_sub_ps(g_XMOne, x);
    __m128 clampOneMValue = _mm_max_ps(g_XMZero, oneMValue);
    __m128 root = _mm_sqrt_ps(clampOneMValue);


    const XMVECTOR AEC = g_XMArcEstCoefficients;
    XMVECTOR vConstants = _mm_shuffle_ps( AEC, AEC, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    __m128 t0 = _mm_mul_ps(vConstants, x);

    vConstants = _mm_shuffle_ps( AEC, AEC, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    vConstants = _mm_shuffle_ps( AEC, AEC, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, x);

    vConstants = _mm_shuffle_ps( AEC, AEC, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    t0 = _mm_add_ps(t0, vConstants);
    t0 = _mm_mul_ps(t0, root);

    __m128 t1 = _mm_sub_ps(g_XMPi, t0);
    t0 = _mm_and_ps(nonnegative, t0);
    t1 = _mm_andnot_ps(nonnegative, t1);
    t0 = _mm_or_ps(t0, t1);
    return t0;

}



inline XMVECTOR __vectorcall XMVectorATanEst
(
    FXMVECTOR V
)
{
# 5552 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128 absV = XMVectorAbs(V);
    __m128 invV = _mm_div_ps(g_XMOne, V);
    __m128 comp = _mm_cmpgt_ps(V, g_XMOne);
    __m128 select0 = _mm_and_ps(comp, g_XMOne);
    __m128 select1 = _mm_andnot_ps(comp, g_XMNegativeOne);
    __m128 sign = _mm_or_ps(select0, select1);
    comp = _mm_cmple_ps(absV, g_XMOne);
    select0 = _mm_and_ps(comp, g_XMZero);
    select1 = _mm_andnot_ps(comp, sign);
    sign = _mm_or_ps(select0, select1);
    select0 = _mm_and_ps(comp, V);
    select1 = _mm_andnot_ps(comp, invV);
    __m128 x = _mm_or_ps(select0, select1);

    __m128 x2 = _mm_mul_ps(x, x);


    const XMVECTOR AEC = g_XMATanEstCoefficients1;
    XMVECTOR vConstants = _mm_shuffle_ps( AEC, AEC, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    __m128 Result = _mm_mul_ps(vConstants, x2);

    vConstants = _mm_shuffle_ps( AEC, AEC, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( AEC, AEC, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);

    vConstants = _mm_shuffle_ps( AEC, AEC, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    Result = _mm_add_ps(Result, vConstants);
    Result = _mm_mul_ps(Result, x2);


    Result = _mm_add_ps(Result, g_XMATanEstCoefficients0);
    Result = _mm_mul_ps(Result, x);
    __m128 result1 = _mm_mul_ps(sign, g_XMHalfPi);
    result1 = _mm_sub_ps(result1, Result);

    comp = _mm_cmpeq_ps(sign, g_XMZero);
    select0 = _mm_and_ps(comp, Result);
    select1 = _mm_andnot_ps(comp, result1);
    Result = _mm_or_ps(select0, select1);
    return Result;

}



inline XMVECTOR __vectorcall XMVectorATan2Est
(
    FXMVECTOR Y,
    FXMVECTOR X
)
{
# 5616 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    static const XMVECTORF32 ATan2Constants = {XM_PI, XM_PIDIV2, XM_PIDIV4, 2.3561944905f };

    const XMVECTOR Zero = XMVectorZero();
    XMVECTOR ATanResultValid = XMVectorTrueInt();

    XMVECTOR Pi = XMVectorSplatX(ATan2Constants);
    XMVECTOR PiOverTwo = XMVectorSplatY(ATan2Constants);
    XMVECTOR PiOverFour = XMVectorSplatZ(ATan2Constants);
    XMVECTOR ThreePiOverFour = XMVectorSplatW(ATan2Constants);

    XMVECTOR YEqualsZero = XMVectorEqual(Y, Zero);
    XMVECTOR XEqualsZero = XMVectorEqual(X, Zero);
    XMVECTOR XIsPositive = XMVectorAndInt(X, g_XMNegativeZero.v);
    XIsPositive = XMVectorEqualInt(XIsPositive, Zero);
    XMVECTOR YEqualsInfinity = XMVectorIsInfinite(Y);
    XMVECTOR XEqualsInfinity = XMVectorIsInfinite(X);

    XMVECTOR YSign = XMVectorAndInt(Y, g_XMNegativeZero.v);
    Pi = XMVectorOrInt(Pi, YSign);
    PiOverTwo = XMVectorOrInt(PiOverTwo, YSign);
    PiOverFour = XMVectorOrInt(PiOverFour, YSign);
    ThreePiOverFour = XMVectorOrInt(ThreePiOverFour, YSign);

    XMVECTOR R1 = XMVectorSelect(Pi, YSign, XIsPositive);
    XMVECTOR R2 = XMVectorSelect(ATanResultValid, PiOverTwo, XEqualsZero);
    XMVECTOR R3 = XMVectorSelect(R2, R1, YEqualsZero);
    XMVECTOR R4 = XMVectorSelect(ThreePiOverFour, PiOverFour, XIsPositive);
    XMVECTOR R5 = XMVectorSelect(PiOverTwo, R4, XEqualsInfinity);
    XMVECTOR Result = XMVectorSelect(R3, R5, YEqualsInfinity);
    ATanResultValid = XMVectorEqualInt(Result, ATanResultValid);

    XMVECTOR Reciprocal = XMVectorReciprocalEst(X);
    XMVECTOR V = XMVectorMultiply(Y, Reciprocal);
    XMVECTOR R0 = XMVectorATanEst(V);

    R1 = XMVectorSelect( Pi, g_XMNegativeZero, XIsPositive );
    R2 = XMVectorAdd(R0, R1);

    Result = XMVectorSelect(Result, R2, ATanResultValid);

    return Result;


}



inline XMVECTOR __vectorcall XMVectorLerp
(
    FXMVECTOR V0,
    FXMVECTOR V1,
    float t
)
{
# 5682 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR L = _mm_sub_ps( V1, V0 );
    XMVECTOR S = _mm_set_ps1( t );
    XMVECTOR Result = _mm_mul_ps( L, S );
    return _mm_add_ps( Result, V0 );

}



inline XMVECTOR __vectorcall XMVectorLerpV
(
    FXMVECTOR V0,
    FXMVECTOR V1,
    FXMVECTOR T
)
{
# 5709 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR Length = _mm_sub_ps( V1, V0 );
    XMVECTOR Result = _mm_mul_ps( Length, T );
    return _mm_add_ps( Result, V0 );

}



inline XMVECTOR __vectorcall XMVectorHermite
(
    FXMVECTOR Position0,
    FXMVECTOR Tangent0,
    FXMVECTOR Position1,
    GXMVECTOR Tangent1,
    float t
)
{
# 5763 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    float t2 = t * t;
    float t3 = t * t2;

    XMVECTOR P0 = _mm_set_ps1(2.0f * t3 - 3.0f * t2 + 1.0f);
    XMVECTOR T0 = _mm_set_ps1(t3 - 2.0f * t2 + t);
    XMVECTOR P1 = _mm_set_ps1(-2.0f * t3 + 3.0f * t2);
    XMVECTOR T1 = _mm_set_ps1(t3 - t2);

    XMVECTOR vResult = _mm_mul_ps(P0, Position0);
    XMVECTOR vTemp = _mm_mul_ps(T0, Tangent0);
    vResult = _mm_add_ps(vResult,vTemp);
    vTemp = _mm_mul_ps(P1, Position1);
    vResult = _mm_add_ps(vResult,vTemp);
    vTemp = _mm_mul_ps(T1, Tangent1);
    vResult = _mm_add_ps(vResult,vTemp);
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorHermiteV
(
    FXMVECTOR Position0,
    FXMVECTOR Tangent0,
    FXMVECTOR Position1,
    GXMVECTOR Tangent1,
    HXMVECTOR T
)
{
# 5842 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    static const XMVECTORF32 CatMulT2 = {-3.0f,-2.0f,3.0f,-1.0f};
    static const XMVECTORF32 CatMulT3 = {2.0f,1.0f,-2.0f,1.0f};

    XMVECTOR T2 = _mm_mul_ps(T,T);
    XMVECTOR T3 = _mm_mul_ps(T,T2);

    T2 = _mm_mul_ps(T2,CatMulT2);

    T3 = _mm_mul_ps(T3,CatMulT3);

    T3 = _mm_add_ps(T3,T2);

    T2 = _mm_and_ps(T,g_XMMaskY);
    T3 = _mm_add_ps(T3,T2);

    T3 = _mm_add_ps(T3,g_XMIdentityR0);


    XMVECTOR vResult = _mm_shuffle_ps( T3, T3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    vResult = _mm_mul_ps(vResult,Position0);

    T2 = _mm_shuffle_ps( T3, T3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    T2 = _mm_mul_ps(T2,Tangent0);
    vResult = _mm_add_ps(vResult,T2);

    T2 = _mm_shuffle_ps( T3, T3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    T2 = _mm_mul_ps(T2,Position1);
    vResult = _mm_add_ps(vResult,T2);

    T3 = _mm_shuffle_ps( T3, T3, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    T3 = _mm_mul_ps(T3,Tangent1);
    vResult = _mm_add_ps(vResult,T3);
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorCatmullRom
(
    FXMVECTOR Position0,
    FXMVECTOR Position1,
    FXMVECTOR Position2,
    GXMVECTOR Position3,
    float t
)
{
# 5927 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    float t2 = t * t;
    float t3 = t * t2;

    XMVECTOR P0 = _mm_set_ps1((-t3 + 2.0f * t2 - t) * 0.5f);
    XMVECTOR P1 = _mm_set_ps1((3.0f * t3 - 5.0f * t2 + 2.0f) * 0.5f);
    XMVECTOR P2 = _mm_set_ps1((-3.0f * t3 + 4.0f * t2 + t) * 0.5f);
    XMVECTOR P3 = _mm_set_ps1((t3 - t2) * 0.5f);

    P0 = _mm_mul_ps(P0, Position0);
    P1 = _mm_mul_ps(P1, Position1);
    P2 = _mm_mul_ps(P2, Position2);
    P3 = _mm_mul_ps(P3, Position3);
    P0 = _mm_add_ps(P0,P1);
    P2 = _mm_add_ps(P2,P3);
    P0 = _mm_add_ps(P0,P2);
    return P0;

}



inline XMVECTOR __vectorcall XMVectorCatmullRomV
(
    FXMVECTOR Position0,
    FXMVECTOR Position1,
    FXMVECTOR Position2,
    GXMVECTOR Position3,
    HXMVECTOR T
)
{
# 6010 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    static const XMVECTORF32 Catmul2 = {2.0f,2.0f,2.0f,2.0f};
    static const XMVECTORF32 Catmul3 = {3.0f,3.0f,3.0f,3.0f};
    static const XMVECTORF32 Catmul4 = {4.0f,4.0f,4.0f,4.0f};
    static const XMVECTORF32 Catmul5 = {5.0f,5.0f,5.0f,5.0f};

    XMVECTOR T2 = _mm_mul_ps(T,T);
    XMVECTOR T3 = _mm_mul_ps(T,T2);

    XMVECTOR vResult = _mm_add_ps(T2,T2);
    vResult = _mm_sub_ps(vResult,T);
    vResult = _mm_sub_ps(vResult,T3);
    vResult = _mm_mul_ps(vResult,Position0);

    XMVECTOR vTemp = _mm_mul_ps(T3,Catmul3);
    XMVECTOR vTemp2 = _mm_mul_ps(T2,Catmul5);
    vTemp = _mm_sub_ps(vTemp,vTemp2);
    vTemp = _mm_add_ps(vTemp,Catmul2);
    vTemp = _mm_mul_ps(vTemp,Position1);
    vResult = _mm_add_ps(vResult,vTemp);

    vTemp = _mm_mul_ps(T2,Catmul4);
    vTemp2 = _mm_mul_ps(T3,Catmul3);
    vTemp = _mm_sub_ps(vTemp,vTemp2);
    vTemp = _mm_add_ps(vTemp,T);
    vTemp = _mm_mul_ps(vTemp,Position2);
    vResult = _mm_add_ps(vResult,vTemp);

    T3 = _mm_sub_ps(T3,T2);
    T3 = _mm_mul_ps(T3,Position3);
    vResult = _mm_add_ps(vResult,T3);

    vResult = _mm_mul_ps(vResult,g_XMOneHalf);
    return vResult;

}



inline XMVECTOR __vectorcall XMVectorBaryCentric
(
    FXMVECTOR Position0,
    FXMVECTOR Position1,
    FXMVECTOR Position2,
    float f,
    float g
)
{
# 6078 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR R1 = _mm_sub_ps(Position1,Position0);
    XMVECTOR SF = _mm_set_ps1(f);
    XMVECTOR R2 = _mm_sub_ps(Position2,Position0);
    XMVECTOR SG = _mm_set_ps1(g);
    R1 = _mm_mul_ps(R1,SF);
    R2 = _mm_mul_ps(R2,SG);
    R1 = _mm_add_ps(R1,Position0);
    R1 = _mm_add_ps(R1,R2);
    return R1;

}



inline XMVECTOR __vectorcall XMVectorBaryCentricV
(
    FXMVECTOR Position0,
    FXMVECTOR Position1,
    FXMVECTOR Position2,
    GXMVECTOR F,
    HXMVECTOR G
)
{
# 6119 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR R1 = _mm_sub_ps(Position1,Position0);
    XMVECTOR R2 = _mm_sub_ps(Position2,Position0);
    R1 = _mm_mul_ps(R1,F);
    R2 = _mm_mul_ps(R2,G);
    R1 = _mm_add_ps(R1,Position0);
    R1 = _mm_add_ps(R1,R2);
    return R1;

}
# 6141 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
inline bool __vectorcall XMVector2Equal
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{






    XMVECTOR vTemp = _mm_cmpeq_ps(V1,V2);

    return (((_mm_movemask_ps(vTemp)&3)==3) != 0);

}




inline uint32_t __vectorcall XMVector2EqualR
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 6197 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpeq_ps(V1,V2);

    int iTest = _mm_movemask_ps(vTemp)&3;
    uint32_t CR = 0;
    if (iTest==3)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (!iTest)
    {
        CR = XM_CRMASK_CR6FALSE;
    }
    return CR;

}



inline bool __vectorcall XMVector2EqualInt
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{






    __m128i vTemp = _mm_cmpeq_epi32(_mm_castps_si128(V1),_mm_castps_si128(V2));
    return (((_mm_movemask_ps(_mm_castsi128_ps(vTemp))&3)==3) != 0);

}



inline uint32_t __vectorcall XMVector2EqualIntR
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 6269 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i vTemp = _mm_cmpeq_epi32(_mm_castps_si128(V1),_mm_castps_si128(V2));
    int iTest = _mm_movemask_ps(_mm_castsi128_ps(vTemp))&3;
    uint32_t CR = 0;
    if (iTest==3)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (!iTest)
    {
        CR = XM_CRMASK_CR6FALSE;
    }
    return CR;

}



inline bool __vectorcall XMVector2NearEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2,
    FXMVECTOR Epsilon
)
{
# 6305 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vDelta = _mm_sub_ps(V1,V2);

    XMVECTOR vTemp = _mm_setzero_ps();
    vTemp = _mm_sub_ps(vTemp,vDelta);
    vTemp = _mm_max_ps(vTemp,vDelta);
    vTemp = _mm_cmple_ps(vTemp,Epsilon);

    return (((_mm_movemask_ps(vTemp)&3)==0x3) != 0);

}



inline bool __vectorcall XMVector2NotEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{






    XMVECTOR vTemp = _mm_cmpeq_ps(V1,V2);

    return (((_mm_movemask_ps(vTemp)&3)!=3) != 0);

}



inline bool __vectorcall XMVector2NotEqualInt
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{






    __m128i vTemp = _mm_cmpeq_epi32(_mm_castps_si128(V1),_mm_castps_si128(V2));
    return (((_mm_movemask_ps(_mm_castsi128_ps(vTemp))&3)!=3) != 0);

}



inline bool __vectorcall XMVector2Greater
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{






    XMVECTOR vTemp = _mm_cmpgt_ps(V1,V2);

    return (((_mm_movemask_ps(vTemp)&3)==3) != 0);

}



inline uint32_t __vectorcall XMVector2GreaterR
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 6412 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpgt_ps(V1,V2);
    int iTest = _mm_movemask_ps(vTemp)&3;
    uint32_t CR = 0;
    if (iTest==3)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (!iTest)
    {
        CR = XM_CRMASK_CR6FALSE;
    }
    return CR;

}



inline bool __vectorcall XMVector2GreaterOrEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{






    XMVECTOR vTemp = _mm_cmpge_ps(V1,V2);
    return (((_mm_movemask_ps(vTemp)&3)==3) != 0);

}



inline uint32_t __vectorcall XMVector2GreaterOrEqualR
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 6483 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpge_ps(V1,V2);
    int iTest = _mm_movemask_ps(vTemp)&3;
    uint32_t CR = 0;
    if (iTest == 3)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (!iTest)
    {
        CR = XM_CRMASK_CR6FALSE;
    }
    return CR;

}



inline bool __vectorcall XMVector2Less
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{






    XMVECTOR vTemp = _mm_cmplt_ps(V1,V2);
    return (((_mm_movemask_ps(vTemp)&3)==3) != 0);

}



inline bool __vectorcall XMVector2LessOrEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{






    XMVECTOR vTemp = _mm_cmple_ps(V1,V2);
    return (((_mm_movemask_ps(vTemp)&3)==3) != 0);

}



inline bool __vectorcall XMVector2InBounds
(
    FXMVECTOR V,
    FXMVECTOR Bounds
)
{
# 6562 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp1 = _mm_cmple_ps(V,Bounds);

    XMVECTOR vTemp2 = _mm_mul_ps(Bounds,g_XMNegativeOne);

    vTemp2 = _mm_cmple_ps(vTemp2,V);

    vTemp1 = _mm_and_ps(vTemp1,vTemp2);

    return (((_mm_movemask_ps(vTemp1)&0x3)==0x3) != 0);

}



inline bool __vectorcall XMVector2IsNaN
(
    FXMVECTOR V
)
{
# 6592 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTempNan = _mm_cmpneq_ps(V,V);

    return ((_mm_movemask_ps(vTempNan)&3) != 0);

}



inline bool __vectorcall XMVector2IsInfinite
(
    FXMVECTOR V
)
{
# 6618 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128 vTemp = _mm_and_ps(V,g_XMAbsMask);

    vTemp = _mm_cmpeq_ps(vTemp,g_XMInfinity);

    return ((_mm_movemask_ps(vTemp)&3) != 0);

}







inline XMVECTOR __vectorcall XMVector2Dot
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 6654 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V1,V2);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    vLengthSq = _mm_add_ss(vLengthSq,vTemp);
    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    return vLengthSq;

}



inline XMVECTOR __vectorcall XMVector2Cross
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 6691 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((1) << 4) | ((0) << 2) | ((1))) );

    vResult = _mm_mul_ps(vResult,V1);

    XMVECTOR vTemp = _mm_shuffle_ps( vResult, vResult, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    vResult = _mm_sub_ss(vResult,vTemp);

    vResult = _mm_shuffle_ps( vResult, vResult, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    return vResult;

}



inline XMVECTOR __vectorcall XMVector2LengthSq
(
    FXMVECTOR V
)
{
    return XMVector2Dot(V, V);
}



inline XMVECTOR __vectorcall XMVector2ReciprocalLengthEst
(
    FXMVECTOR V
)
{
# 6738 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    vLengthSq = _mm_add_ss(vLengthSq,vTemp);
    vLengthSq = _mm_rsqrt_ss(vLengthSq);
    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    return vLengthSq;

}



inline XMVECTOR __vectorcall XMVector2ReciprocalLength
(
    FXMVECTOR V
)
{
# 6779 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    vLengthSq = _mm_add_ss(vLengthSq,vTemp);
    vLengthSq = _mm_sqrt_ss(vLengthSq);
    vLengthSq = _mm_div_ss(g_XMOne,vLengthSq);
    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    return vLengthSq;

}



inline XMVECTOR __vectorcall XMVector2LengthEst
(
    FXMVECTOR V
)
{
# 6819 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    vLengthSq = _mm_add_ss(vLengthSq,vTemp);
    vLengthSq = _mm_sqrt_ss(vLengthSq);
    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    return vLengthSq;

}



inline XMVECTOR __vectorcall XMVector2Length
(
    FXMVECTOR V
)
{
# 6864 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    vLengthSq = _mm_add_ss(vLengthSq,vTemp);
    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    vLengthSq = _mm_sqrt_ps(vLengthSq);
    return vLengthSq;

}





inline XMVECTOR __vectorcall XMVector2NormalizeEst
(
    FXMVECTOR V
)
{
# 6903 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    vLengthSq = _mm_add_ss(vLengthSq,vTemp);
    vLengthSq = _mm_rsqrt_ss(vLengthSq);
    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    vLengthSq = _mm_mul_ps(vLengthSq,V);
    return vLengthSq;

}



inline XMVECTOR __vectorcall XMVector2Normalize
(
    FXMVECTOR V
)
{
# 6960 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);
    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    vLengthSq = _mm_add_ss(vLengthSq,vTemp);
    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    XMVECTOR vResult = _mm_sqrt_ps(vLengthSq);

    XMVECTOR vZeroMask = _mm_setzero_ps();

    vZeroMask = _mm_cmpneq_ps(vZeroMask,vResult);


    vLengthSq = _mm_cmpneq_ps(vLengthSq,g_XMInfinity);

    vResult = _mm_div_ps(V,vResult);

    vResult = _mm_and_ps(vResult,vZeroMask);

    XMVECTOR vTemp1 = _mm_andnot_ps(vLengthSq,g_XMQNaN);
    XMVECTOR vTemp2 = _mm_and_ps(vResult,vLengthSq);
    vResult = _mm_or_ps(vTemp1,vTemp2);
    return vResult;

}



inline XMVECTOR __vectorcall XMVector2ClampLength
(
    FXMVECTOR V,
    float LengthMin,
    float LengthMax
)
{
    XMVECTOR ClampMax = XMVectorReplicate(LengthMax);
    XMVECTOR ClampMin = XMVectorReplicate(LengthMin);
    return XMVector2ClampLengthV(V, ClampMin, ClampMax);
}



inline XMVECTOR __vectorcall XMVector2ClampLengthV
(
    FXMVECTOR V,
    FXMVECTOR LengthMin,
    FXMVECTOR LengthMax
)
{
    (void)( (!!((XMVectorGetY(LengthMin) == XMVectorGetX(LengthMin)))) || (_wassert(L"(XMVectorGetY(LengthMin) == XMVectorGetX(LengthMin))", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(7008)), 0) );
    (void)( (!!((XMVectorGetY(LengthMax) == XMVectorGetX(LengthMax)))) || (_wassert(L"(XMVectorGetY(LengthMax) == XMVectorGetX(LengthMax))", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(7009)), 0) );
    (void)( (!!(XMVector2GreaterOrEqual(LengthMin, g_XMZero))) || (_wassert(L"XMVector2GreaterOrEqual(LengthMin, g_XMZero)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(7010)), 0) );
    (void)( (!!(XMVector2GreaterOrEqual(LengthMax, g_XMZero))) || (_wassert(L"XMVector2GreaterOrEqual(LengthMax, g_XMZero)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(7011)), 0) );
    (void)( (!!(XMVector2GreaterOrEqual(LengthMax, LengthMin))) || (_wassert(L"XMVector2GreaterOrEqual(LengthMax, LengthMin)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(7012)), 0) );

    XMVECTOR LengthSq = XMVector2LengthSq(V);

    const XMVECTOR Zero = XMVectorZero();

    XMVECTOR RcpLength = XMVectorReciprocalSqrt(LengthSq);

    XMVECTOR InfiniteLength = XMVectorEqualInt(LengthSq, g_XMInfinity.v);
    XMVECTOR ZeroLength = XMVectorEqual(LengthSq, Zero);

    XMVECTOR Length = XMVectorMultiply(LengthSq, RcpLength);

    XMVECTOR Normal = XMVectorMultiply(V, RcpLength);

    XMVECTOR Select = XMVectorEqualInt(InfiniteLength, ZeroLength);
    Length = XMVectorSelect(LengthSq, Length, Select);
    Normal = XMVectorSelect(LengthSq, Normal, Select);

    XMVECTOR ControlMax = XMVectorGreater(Length, LengthMax);
    XMVECTOR ControlMin = XMVectorLess(Length, LengthMin);

    XMVECTOR ClampLength = XMVectorSelect(Length, LengthMax, ControlMax);
    ClampLength = XMVectorSelect(ClampLength, LengthMin, ControlMin);

    XMVECTOR Result = XMVectorMultiply(Normal, ClampLength);


    XMVECTOR Control = XMVectorEqualInt(ControlMax, ControlMin);
    Result = XMVectorSelect(Result, V, Control);

    return Result;
}



inline XMVECTOR __vectorcall XMVector2Reflect
(
    FXMVECTOR Incident,
    FXMVECTOR Normal
)
{


    XMVECTOR Result;
    Result = XMVector2Dot(Incident, Normal);
    Result = XMVectorAdd(Result, Result);
    Result = XMVectorNegativeMultiplySubtract(Result, Normal, Incident);
    return Result;
}



inline XMVECTOR __vectorcall XMVector2Refract
(
    FXMVECTOR Incident,
    FXMVECTOR Normal,
    float RefractionIndex
)
{
    XMVECTOR Index = XMVectorReplicate(RefractionIndex);
    return XMVector2RefractV(Incident, Normal, Index);
}




inline XMVECTOR __vectorcall XMVector2RefractV
(
    FXMVECTOR Incident,
    FXMVECTOR Normal,
    FXMVECTOR RefractionIndex
)
{
# 7147 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR IDotN = XMVector2Dot(Incident, Normal);

    XMVECTOR vTemp = _mm_mul_ps(IDotN,IDotN);
    vTemp = _mm_sub_ps(g_XMOne,vTemp);
    vTemp = _mm_mul_ps(vTemp,RefractionIndex);
    vTemp = _mm_mul_ps(vTemp,RefractionIndex);
    vTemp = _mm_sub_ps(g_XMOne,vTemp);

    XMVECTOR vMask = _mm_cmpgt_ps(vTemp,g_XMZero);

    vTemp = _mm_sqrt_ps(vTemp);
    XMVECTOR vResult = _mm_mul_ps(RefractionIndex,IDotN);
    vTemp = _mm_add_ps(vTemp,vResult);

    vResult = _mm_mul_ps(RefractionIndex,Incident);
    vTemp = _mm_mul_ps(vTemp,Normal);
    vResult = _mm_sub_ps(vResult,vTemp);
    vResult = _mm_and_ps(vResult,vMask);
    return vResult;

}



inline XMVECTOR __vectorcall XMVector2Orthogonal
(
    FXMVECTOR V
)
{
# 7193 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((3) << 6) | ((2) << 4) | ((0) << 2) | ((1))) );
    vResult = _mm_mul_ps(vResult,g_XMNegateX);
    return vResult;

}



inline XMVECTOR __vectorcall XMVector2AngleBetweenNormalsEst
(
    FXMVECTOR N1,
    FXMVECTOR N2
)
{
    XMVECTOR Result = XMVector2Dot(N1, N2);
    Result = XMVectorClamp(Result, g_XMNegativeOne.v, g_XMOne.v);
    Result = XMVectorACosEst(Result);
    return Result;
}



inline XMVECTOR __vectorcall XMVector2AngleBetweenNormals
(
    FXMVECTOR N1,
    FXMVECTOR N2
)
{
    XMVECTOR Result = XMVector2Dot(N1, N2);
    Result = XMVectorClamp(Result, g_XMNegativeOne, g_XMOne);
    Result = XMVectorACos(Result);
    return Result;
}



inline XMVECTOR __vectorcall XMVector2AngleBetweenVectors
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
    XMVECTOR L1 = XMVector2ReciprocalLength(V1);
    XMVECTOR L2 = XMVector2ReciprocalLength(V2);

    XMVECTOR Dot = XMVector2Dot(V1, V2);

    L1 = XMVectorMultiply(L1, L2);

    XMVECTOR CosAngle = XMVectorMultiply(Dot, L1);
    CosAngle = XMVectorClamp(CosAngle, g_XMNegativeOne.v, g_XMOne.v);

    return XMVectorACos(CosAngle);
}



inline XMVECTOR __vectorcall XMVector2LinePointDistance
(
    FXMVECTOR LinePoint1,
    FXMVECTOR LinePoint2,
    FXMVECTOR Point
)
{







    XMVECTOR PointVector = XMVectorSubtract(Point, LinePoint1);
    XMVECTOR LineVector = XMVectorSubtract(LinePoint2, LinePoint1);

    XMVECTOR LengthSq = XMVector2LengthSq(LineVector);

    XMVECTOR PointProjectionScale = XMVector2Dot(PointVector, LineVector);
    PointProjectionScale = XMVectorDivide(PointProjectionScale, LengthSq);

    XMVECTOR DistanceVector = XMVectorMultiply(LineVector, PointProjectionScale);
    DistanceVector = XMVectorSubtract(PointVector, DistanceVector);

    return XMVector2Length(DistanceVector);
}



inline XMVECTOR __vectorcall XMVector2IntersectLine
(
    FXMVECTOR Line1Point1,
    FXMVECTOR Line1Point2,
    FXMVECTOR Line2Point1,
    GXMVECTOR Line2Point2
)
{
# 7323 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR V1 = _mm_sub_ps(Line1Point2, Line1Point1);
    XMVECTOR V2 = _mm_sub_ps(Line2Point2, Line2Point1);
    XMVECTOR V3 = _mm_sub_ps(Line1Point1, Line2Point1);

    XMVECTOR C1 = XMVector2Cross(V1, V2);
    XMVECTOR C2 = XMVector2Cross(V2, V3);

    XMVECTOR vResultMask = _mm_setzero_ps();
    vResultMask = _mm_sub_ps(vResultMask,C1);
    vResultMask = _mm_max_ps(vResultMask,C1);

    vResultMask = _mm_cmpgt_ps(vResultMask,g_XMEpsilon);

    XMVECTOR vFailMask = _mm_setzero_ps();
    vFailMask = _mm_sub_ps(vFailMask,C2);
    vFailMask = _mm_max_ps(vFailMask,C2);
    vFailMask = _mm_cmple_ps(vFailMask,g_XMEpsilon);
    XMVECTOR vFail = _mm_and_ps(vFailMask,g_XMInfinity);
    vFailMask = _mm_andnot_ps(vFailMask,g_XMQNaN);

    vFail = _mm_or_ps(vFail,vFailMask);

    XMVECTOR vResult = _mm_div_ps(C2,C1);
    vResult = _mm_mul_ps(vResult,V1);
    vResult = _mm_add_ps(vResult,Line1Point1);

    vResult = _mm_and_ps(vResult,vResultMask);
    vResultMask = _mm_andnot_ps(vResultMask,vFail);
    vResult = _mm_or_ps(vResult,vResultMask);
    return vResult;

}



inline XMVECTOR __vectorcall XMVector2Transform
(
    FXMVECTOR V,
    FXMMATRIX M
)
{
# 7379 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    vResult = _mm_mul_ps(vResult,M.r[0]);
    XMVECTOR vTemp = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    vTemp = _mm_mul_ps(vTemp,M.r[1]);
    vResult = _mm_add_ps(vResult,vTemp);
    vResult = _mm_add_ps(vResult,M.r[3]);
    return vResult;

}




inline XMFLOAT4* __vectorcall XMVector2TransformStream
(
    XMFLOAT4* pOutputStream,
    size_t OutputStride,
    const XMFLOAT2* pInputStream,
    size_t InputStride,
    size_t VectorCount,
    FXMMATRIX M
)
{
    (void)( (!!(pOutputStream != nullptr)) || (_wassert(L"pOutputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(7402)), 0) );
    (void)( (!!(pInputStream != nullptr)) || (_wassert(L"pInputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(7403)), 0) );

    (void)( (!!(InputStride >= sizeof(XMFLOAT2))) || (_wassert(L"InputStride >= sizeof(XMFLOAT2)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(7405)), 0) );
                                                      ;

    (void)( (!!(OutputStride >= sizeof(XMFLOAT4))) || (_wassert(L"OutputStride >= sizeof(XMFLOAT4)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(7408)), 0) );
                                                       ;
# 7511 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    const uint8_t* pInputVector = (const uint8_t*)pInputStream;
    uint8_t* pOutputVector = (uint8_t*)pOutputStream;

    const XMVECTOR row0 = M.r[0];
    const XMVECTOR row1 = M.r[1];
    const XMVECTOR row3 = M.r[3];

    size_t i = 0;
    size_t two = VectorCount >> 1;
    if ( two > 0 )
    {
        if ( InputStride == sizeof(XMFLOAT2) )
        {
            if ( !((uintptr_t)pOutputStream & 0xF) && !(OutputStride & 0xF) )
            {

                for (size_t j = 0; j < two; ++j)
                {
                    XMVECTOR V = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                    pInputVector += sizeof(XMFLOAT2)*2;

                    XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
                    XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );

                    _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                    pOutputVector += OutputStride;

                    Y = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                    X = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

                    vTemp = _mm_mul_ps( Y, row1 );
                    vTemp2 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );

                    _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                    pOutputVector += OutputStride;

                    i += 2;
                }
            }
            else
            {

                for (size_t j = 0; j < two; ++j)
                {
                    XMVECTOR V = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                    pInputVector += sizeof(XMFLOAT2)*2;

                    XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
                    XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );

                    _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                    pOutputVector += OutputStride;

                    Y = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                    X = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

                    vTemp = _mm_mul_ps( Y, row1 );
                    vTemp2 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );

                    _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                    pOutputVector += OutputStride;

                    i += 2;
                }
            }
        }
    }

    if ( !((uintptr_t)pInputVector & 0xF) && !(InputStride & 0xF) )
    {
        if ( !((uintptr_t)pOutputStream & 0xF) && !(OutputStride & 0xF) )
        {

            for (; i < VectorCount; i++)
            {
                XMVECTOR V = _mm_castsi128_ps( _mm_loadl_epi64( reinterpret_cast<const __m128i*>(pInputVector) ) );
                pInputVector += InputStride;

                XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
                XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
                vTemp = _mm_add_ps( vTemp, row3 );
                vTemp = _mm_add_ps( vTemp, vTemp2 );

                _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                pOutputVector += OutputStride;
            }
        }
        else
        {

            for (; i < VectorCount; i++)
            {
                XMVECTOR V = _mm_castsi128_ps( _mm_loadl_epi64( reinterpret_cast<const __m128i*>(pInputVector) ) );
                pInputVector += InputStride;

                XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
                XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
                vTemp = _mm_add_ps( vTemp, row3 );
                vTemp = _mm_add_ps( vTemp, vTemp2 );

                _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                pOutputVector += OutputStride;
            }
        }
    }
    else
    {

        for (; i < VectorCount; i++)
        {
            __m128 x = _mm_load_ss( reinterpret_cast<const float*>(pInputVector) );
            __m128 y = _mm_load_ss( reinterpret_cast<const float*>(pInputVector+4) );
            pInputVector += InputStride;

            XMVECTOR Y = _mm_shuffle_ps( y, y, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
            XMVECTOR X = _mm_shuffle_ps( x, x, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

            XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
            XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
            vTemp = _mm_add_ps( vTemp, row3 );
            vTemp = _mm_add_ps( vTemp, vTemp2 );

            _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
            pOutputVector += OutputStride;
        }
    }

    return pOutputStream;

}



inline XMVECTOR __vectorcall XMVector2TransformCoord
(
    FXMVECTOR V,
    FXMMATRIX M
)
{
    XMVECTOR Y = XMVectorSplatY(V);
    XMVECTOR X = XMVectorSplatX(V);

    XMVECTOR Result = XMVectorMultiplyAdd(Y, M.r[1], M.r[3]);
    Result = XMVectorMultiplyAdd(X, M.r[0], Result);

    XMVECTOR W = XMVectorSplatW(Result);
    return XMVectorDivide( Result, W );
}




inline XMFLOAT2* __vectorcall XMVector2TransformCoordStream
(
    XMFLOAT2* pOutputStream,
    size_t OutputStride,
    const XMFLOAT2* pInputStream,
    size_t InputStride,
    size_t VectorCount,
    FXMMATRIX M
)
{
    (void)( (!!(pOutputStream != nullptr)) || (_wassert(L"pOutputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(7693)), 0) );
    (void)( (!!(pInputStream != nullptr)) || (_wassert(L"pInputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(7694)), 0) );

    (void)( (!!(InputStride >= sizeof(XMFLOAT2))) || (_wassert(L"InputStride >= sizeof(XMFLOAT2)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(7696)), 0) );
                                                      ;

    (void)( (!!(OutputStride >= sizeof(XMFLOAT2))) || (_wassert(L"OutputStride >= sizeof(XMFLOAT2)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(7699)), 0) );
                                                       ;
# 7821 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    const uint8_t* pInputVector = (const uint8_t*)pInputStream;
    uint8_t* pOutputVector = (uint8_t*)pOutputStream;

    const XMVECTOR row0 = M.r[0];
    const XMVECTOR row1 = M.r[1];
    const XMVECTOR row3 = M.r[3];

    size_t i = 0;
    size_t two = VectorCount >> 1;
    if ( two > 0 )
    {
        if ( InputStride == sizeof(XMFLOAT2) )
        {
            if ( OutputStride == sizeof(XMFLOAT2) )
            {
                if ( !((uintptr_t)pOutputStream & 0xF) )
                {

                    for (size_t j = 0; j < two; ++j)
                    {
                        XMVECTOR V = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                        pInputVector += sizeof(XMFLOAT2)*2;


                        XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
                        XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, row3 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );

                        XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                        XMVECTOR V1 = _mm_div_ps( vTemp, W );


                        Y = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        X = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

                        vTemp = _mm_mul_ps( Y, row1 );
                        vTemp2 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, row3 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                        XMVECTOR V2 = _mm_div_ps( vTemp, W );

                        vTemp = _mm_movelh_ps( V1, V2 );

                        _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                        pOutputVector += sizeof(XMFLOAT2)*2;

                        i += 2;
                    }
                }
                else
                {

                    for (size_t j = 0; j < two; ++j)
                    {
                        XMVECTOR V = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                        pInputVector += sizeof(XMFLOAT2)*2;


                        XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
                        XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, row3 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );

                        XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                        XMVECTOR V1 = _mm_div_ps( vTemp, W );


                        Y = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        X = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

                        vTemp = _mm_mul_ps( Y, row1 );
                        vTemp2 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, row3 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                        XMVECTOR V2 = _mm_div_ps( vTemp, W );

                        vTemp = _mm_movelh_ps( V1, V2 );

                        _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                        pOutputVector += sizeof(XMFLOAT2)*2;

                        i += 2;
                    }
                }
            }
            else
            {

                for (size_t j = 0; j < two; ++j)
                {
                    XMVECTOR V = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                    pInputVector += sizeof(XMFLOAT2)*2;


                    XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
                    XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );

                    XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                    vTemp = _mm_div_ps( vTemp, W );
                    vTemp2 = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

                    _mm_store_ss( reinterpret_cast<float*>(pOutputVector), vTemp );
                    _mm_store_ss( reinterpret_cast<float*>(pOutputVector+4), vTemp2 );
                    pOutputVector += OutputStride;


                    Y = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                    X = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

                    vTemp = _mm_mul_ps( Y, row1 );
                    vTemp2 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );

                    W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                    vTemp = _mm_div_ps( vTemp, W );
                    vTemp2 = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

                    _mm_store_ss( reinterpret_cast<float*>(pOutputVector), vTemp );
                    _mm_store_ss( reinterpret_cast<float*>(pOutputVector+4), vTemp2 );
                    pOutputVector += OutputStride;

                    i += 2;
                }
            }
        }
    }

    if ( !((uintptr_t)pInputVector & 0xF) && !(InputStride & 0xF) )
    {

        for (; i < VectorCount; i++)
        {
            XMVECTOR V = _mm_castsi128_ps( _mm_loadl_epi64( reinterpret_cast<const __m128i*>(pInputVector) ) );
            pInputVector += InputStride;

            XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
            XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

            XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
            XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
            vTemp = _mm_add_ps( vTemp, row3 );
            vTemp = _mm_add_ps( vTemp, vTemp2 );

            XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

            vTemp = _mm_div_ps( vTemp, W );
            vTemp2 = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

            _mm_store_ss( reinterpret_cast<float*>(pOutputVector), vTemp );
            _mm_store_ss( reinterpret_cast<float*>(pOutputVector+4), vTemp2 );
            pOutputVector += OutputStride;
        }
    }
    else
    {

        for (; i < VectorCount; i++)
        {
            __m128 x = _mm_load_ss( reinterpret_cast<const float*>(pInputVector) );
            __m128 y = _mm_load_ss( reinterpret_cast<const float*>(pInputVector+4) );
            pInputVector += InputStride;

            XMVECTOR Y = _mm_shuffle_ps( y, y, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
            XMVECTOR X = _mm_shuffle_ps( x, x, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

            XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
            XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
            vTemp = _mm_add_ps( vTemp, row3 );
            vTemp = _mm_add_ps( vTemp, vTemp2 );

            XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

            vTemp = _mm_div_ps( vTemp, W );
            vTemp2 = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

            _mm_store_ss( reinterpret_cast<float*>(pOutputVector), vTemp );
            _mm_store_ss( reinterpret_cast<float*>(pOutputVector+4), vTemp2 );
            pOutputVector += OutputStride;
        }
    }

    return pOutputStream;

}



inline XMVECTOR __vectorcall XMVector2TransformNormal
(
    FXMVECTOR V,
    FXMMATRIX M
)
{
# 8052 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    vResult = _mm_mul_ps(vResult,M.r[0]);
    XMVECTOR vTemp = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    vTemp = _mm_mul_ps(vTemp,M.r[1]);
    vResult = _mm_add_ps(vResult,vTemp);
    return vResult;

}




inline XMFLOAT2* __vectorcall XMVector2TransformNormalStream
(
    XMFLOAT2* pOutputStream,
    size_t OutputStride,
    const XMFLOAT2* pInputStream,
    size_t InputStride,
    size_t VectorCount,
    FXMMATRIX M
)
{
    (void)( (!!(pOutputStream != nullptr)) || (_wassert(L"pOutputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(8074)), 0) );
    (void)( (!!(pInputStream != nullptr)) || (_wassert(L"pInputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(8075)), 0) );

    (void)( (!!(InputStride >= sizeof(XMFLOAT2))) || (_wassert(L"InputStride >= sizeof(XMFLOAT2)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(8077)), 0) );
                                                      ;

    (void)( (!!(OutputStride >= sizeof(XMFLOAT2))) || (_wassert(L"OutputStride >= sizeof(XMFLOAT2)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(8080)), 0) );
                                                       ;
# 8167 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    const uint8_t* pInputVector = (const uint8_t*)pInputStream;
    uint8_t* pOutputVector = (uint8_t*)pOutputStream;

    const XMVECTOR row0 = M.r[0];
    const XMVECTOR row1 = M.r[1];

    size_t i = 0;
    size_t two = VectorCount >> 1;
    if ( two > 0 )
    {
        if ( InputStride == sizeof(XMFLOAT2) )
        {
            if ( OutputStride == sizeof(XMFLOAT2) )
            {
                if ( !((uintptr_t)pOutputStream & 0xF) )
                {

                    for (size_t j = 0; j < two; ++j)
                    {
                        XMVECTOR V = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                        pInputVector += sizeof(XMFLOAT2)*2;


                        XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
                        XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
                        XMVECTOR V1 = _mm_add_ps( vTemp, vTemp2 );


                        Y = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        X = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

                        vTemp = _mm_mul_ps( Y, row1 );
                        vTemp2 = _mm_mul_ps( X, row0 );
                        XMVECTOR V2 = _mm_add_ps( vTemp, vTemp2 );

                        vTemp = _mm_movelh_ps( V1, V2 );

                        _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                        pOutputVector += sizeof(XMFLOAT2)*2;

                        i += 2;
                    }
                }
                else
                {

                    for (size_t j = 0; j < two; ++j)
                    {
                        XMVECTOR V = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                        pInputVector += sizeof(XMFLOAT2)*2;


                        XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
                        XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
                        XMVECTOR V1 = _mm_add_ps( vTemp, vTemp2 );


                        Y = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        X = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

                        vTemp = _mm_mul_ps( Y, row1 );
                        vTemp2 = _mm_mul_ps( X, row0 );
                        XMVECTOR V2 = _mm_add_ps( vTemp, vTemp2 );

                        vTemp = _mm_movelh_ps( V1, V2 );

                        _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                        pOutputVector += sizeof(XMFLOAT2)*2;

                        i += 2;
                    }
                }
            }
            else
            {

                for (size_t j = 0; j < two; ++j)
                {
                    XMVECTOR V = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                    pInputVector += sizeof(XMFLOAT2)*2;


                    XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
                    XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp2 = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

                    _mm_store_ss( reinterpret_cast<float*>(pOutputVector), vTemp );
                    _mm_store_ss( reinterpret_cast<float*>(pOutputVector+4), vTemp2 );
                    pOutputVector += OutputStride;


                    Y = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                    X = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

                    vTemp = _mm_mul_ps( Y, row1 );
                    vTemp2 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp2 = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

                    _mm_store_ss( reinterpret_cast<float*>(pOutputVector), vTemp );
                    _mm_store_ss( reinterpret_cast<float*>(pOutputVector+4), vTemp2 );
                    pOutputVector += OutputStride;

                    i += 2;
                }
            }
        }
    }

    if ( !((uintptr_t)pInputVector & 0xF) && !(InputStride & 0xF) )
    {

        for (; i < VectorCount; i++)
        {
            XMVECTOR V = _mm_castsi128_ps( _mm_loadl_epi64( reinterpret_cast<const __m128i*>(pInputVector) ) );
            pInputVector += InputStride;

            XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
            XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

            XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
            XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
            vTemp = _mm_add_ps( vTemp, vTemp2 );
            vTemp2 = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

            _mm_store_ss( reinterpret_cast<float*>(pOutputVector), vTemp );
            _mm_store_ss( reinterpret_cast<float*>(pOutputVector+4), vTemp2 );
            pOutputVector += OutputStride;
        }
    }
    else
    {

        for (; i < VectorCount; i++)
        {
            __m128 x = _mm_load_ss( reinterpret_cast<const float*>(pInputVector) );
            __m128 y = _mm_load_ss( reinterpret_cast<const float*>(pInputVector+4) );
            pInputVector += InputStride;

            XMVECTOR Y = _mm_shuffle_ps( y, y, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
            XMVECTOR X = _mm_shuffle_ps( x, x, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

            XMVECTOR vTemp = _mm_mul_ps( Y, row1 );
            XMVECTOR vTemp2 = _mm_mul_ps( X, row0 );
            vTemp = _mm_add_ps( vTemp, vTemp2 );
            vTemp2 = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

            _mm_store_ss( reinterpret_cast<float*>(pOutputVector), vTemp );
            _mm_store_ss( reinterpret_cast<float*>(pOutputVector+4), vTemp2 );
            pOutputVector += OutputStride;
        }
    }

    return pOutputStream;

}
# 8346 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
inline bool __vectorcall XMVector3Equal
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 8360 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpeq_ps(V1,V2);
    return (((_mm_movemask_ps(vTemp)&7)==7) != 0);

}



inline uint32_t __vectorcall XMVector3EqualR
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 8405 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpeq_ps(V1,V2);
    int iTest = _mm_movemask_ps(vTemp)&7;
    uint32_t CR = 0;
    if (iTest==7)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (!iTest)
    {
        CR = XM_CRMASK_CR6FALSE;
    }
    return CR;

}



inline bool __vectorcall XMVector3EqualInt
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 8436 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i vTemp = _mm_cmpeq_epi32(_mm_castps_si128(V1),_mm_castps_si128(V2));
    return (((_mm_movemask_ps(_mm_castsi128_ps(vTemp))&7)==7) != 0);

}



inline uint32_t __vectorcall XMVector3EqualIntR
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 8481 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i vTemp = _mm_cmpeq_epi32(_mm_castps_si128(V1),_mm_castps_si128(V2));
    int iTemp = _mm_movemask_ps(_mm_castsi128_ps(vTemp))&7;
    uint32_t CR = 0;
    if (iTemp==7)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (!iTemp)
    {
        CR = XM_CRMASK_CR6FALSE;
    }
    return CR;

}



inline bool __vectorcall XMVector3NearEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2,
    FXMVECTOR Epsilon
)
{
# 8522 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vDelta = _mm_sub_ps(V1,V2);

    XMVECTOR vTemp = _mm_setzero_ps();
    vTemp = _mm_sub_ps(vTemp,vDelta);
    vTemp = _mm_max_ps(vTemp,vDelta);
    vTemp = _mm_cmple_ps(vTemp,Epsilon);

    return (((_mm_movemask_ps(vTemp)&7)==0x7) != 0);

}



inline bool __vectorcall XMVector3NotEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 8549 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpeq_ps(V1,V2);
    return (((_mm_movemask_ps(vTemp)&7)!=7) != 0);

}



inline bool __vectorcall XMVector3NotEqualInt
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 8570 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i vTemp = _mm_cmpeq_epi32(_mm_castps_si128(V1),_mm_castps_si128(V2));
    return (((_mm_movemask_ps(_mm_castsi128_ps(vTemp))&7)!=7) != 0);

}



inline bool __vectorcall XMVector3Greater
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 8591 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpgt_ps(V1,V2);
    return (((_mm_movemask_ps(vTemp)&7)==7) != 0);

}



inline uint32_t __vectorcall XMVector3GreaterR
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 8637 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpgt_ps(V1,V2);
    uint32_t CR = 0;
    int iTest = _mm_movemask_ps(vTemp)&7;
    if (iTest==7)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (!iTest)
    {
        CR = XM_CRMASK_CR6FALSE;
    }
    return CR;

}



inline bool __vectorcall XMVector3GreaterOrEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 8668 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpge_ps(V1,V2);
    return (((_mm_movemask_ps(vTemp)&7)==7) != 0);

}



inline uint32_t __vectorcall XMVector3GreaterOrEqualR
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 8715 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpge_ps(V1,V2);
    uint32_t CR = 0;
    int iTest = _mm_movemask_ps(vTemp)&7;
    if (iTest==7)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (!iTest)
    {
        CR = XM_CRMASK_CR6FALSE;
    }
    return CR;

}



inline bool __vectorcall XMVector3Less
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 8746 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmplt_ps(V1,V2);
    return (((_mm_movemask_ps(vTemp)&7)==7) != 0);

}



inline bool __vectorcall XMVector3LessOrEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 8767 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmple_ps(V1,V2);
    return (((_mm_movemask_ps(vTemp)&7)==7) != 0);

}



inline bool __vectorcall XMVector3InBounds
(
    FXMVECTOR V,
    FXMVECTOR Bounds
)
{
# 8799 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp1 = _mm_cmple_ps(V,Bounds);

    XMVECTOR vTemp2 = _mm_mul_ps(Bounds,g_XMNegativeOne);

    vTemp2 = _mm_cmple_ps(vTemp2,V);

    vTemp1 = _mm_and_ps(vTemp1,vTemp2);

    return (((_mm_movemask_ps(vTemp1)&0x7)==0x7) != 0);



}



inline bool __vectorcall XMVector3IsNaN
(
    FXMVECTOR V
)
{
# 8835 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTempNan = _mm_cmpneq_ps(V,V);

    return ((_mm_movemask_ps(vTempNan)&7) != 0);

}



inline bool __vectorcall XMVector3IsInfinite
(
    FXMVECTOR V
)
{
# 8863 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128 vTemp = _mm_and_ps(V,g_XMAbsMask);

    vTemp = _mm_cmpeq_ps(vTemp,g_XMInfinity);

    return ((_mm_movemask_ps(vTemp)&7) != 0);

}







inline XMVECTOR __vectorcall XMVector3Dot
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 8901 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vDot = _mm_mul_ps(V1,V2);

    XMVECTOR vTemp = _mm_shuffle_ps( vDot, vDot, (((2) << 6) | ((1) << 4) | ((2) << 2) | ((1))) );

    vDot = _mm_add_ss(vDot,vTemp);

    vTemp = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    vDot = _mm_add_ss(vDot,vTemp);

    return _mm_shuffle_ps( vDot, vDot, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

}



inline XMVECTOR __vectorcall XMVector3Cross
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 8949 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp1 = _mm_shuffle_ps( V1, V1, (((3) << 6) | ((0) << 4) | ((2) << 2) | ((1))) );

    XMVECTOR vTemp2 = _mm_shuffle_ps( V2, V2, (((3) << 6) | ((1) << 4) | ((0) << 2) | ((2))) );

    XMVECTOR vResult = _mm_mul_ps(vTemp1,vTemp2);

    vTemp1 = _mm_shuffle_ps( vTemp1, vTemp1, (((3) << 6) | ((0) << 4) | ((2) << 2) | ((1))) );

    vTemp2 = _mm_shuffle_ps( vTemp2, vTemp2, (((3) << 6) | ((1) << 4) | ((0) << 2) | ((2))) );

    vTemp1 = _mm_mul_ps(vTemp1,vTemp2);

    vResult = _mm_sub_ps(vResult,vTemp1);

    return _mm_and_ps(vResult,g_XMMask3);

}



inline XMVECTOR __vectorcall XMVector3LengthSq
(
    FXMVECTOR V
)
{
    return XMVector3Dot(V, V);
}



inline XMVECTOR __vectorcall XMVector3ReciprocalLengthEst
(
    FXMVECTOR V
)
{
# 9006 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((2) << 4) | ((1) << 2) | ((2))) );

    vLengthSq = _mm_add_ss(vLengthSq,vTemp);

    vTemp = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    vLengthSq = _mm_add_ss(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    vLengthSq = _mm_rsqrt_ps(vLengthSq);
    return vLengthSq;

}



inline XMVECTOR __vectorcall XMVector3ReciprocalLength
(
    FXMVECTOR V
)
{
# 9058 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vDot = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vDot, vDot, (((2) << 6) | ((1) << 4) | ((2) << 2) | ((1))) );

    vDot = _mm_add_ss(vDot,vTemp);

    vTemp = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    vDot = _mm_add_ss(vDot,vTemp);

    vDot = _mm_shuffle_ps( vDot, vDot, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    vDot = _mm_sqrt_ps(vDot);

    vDot = _mm_div_ps(g_XMOne,vDot);
    return vDot;

}



inline XMVECTOR __vectorcall XMVector3LengthEst
(
    FXMVECTOR V
)
{
# 9110 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((2) << 4) | ((1) << 2) | ((2))) );

    vLengthSq = _mm_add_ss(vLengthSq,vTemp);

    vTemp = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    vLengthSq = _mm_add_ss(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    vLengthSq = _mm_sqrt_ps(vLengthSq);
    return vLengthSq;

}



inline XMVECTOR __vectorcall XMVector3Length
(
    FXMVECTOR V
)
{
# 9166 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((2) << 4) | ((1) << 2) | ((2))) );

    vLengthSq = _mm_add_ss(vLengthSq,vTemp);

    vTemp = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    vLengthSq = _mm_add_ss(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    vLengthSq = _mm_sqrt_ps(vLengthSq);
    return vLengthSq;

}





inline XMVECTOR __vectorcall XMVector3NormalizeEst
(
    FXMVECTOR V
)
{
# 9213 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vDot = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vDot, vDot, (((2) << 6) | ((1) << 4) | ((2) << 2) | ((1))) );

    vDot = _mm_add_ss(vDot,vTemp);

    vTemp = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    vDot = _mm_add_ss(vDot,vTemp);

    vDot = _mm_shuffle_ps( vDot, vDot, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    vDot = _mm_rsqrt_ps(vDot);

    vDot = _mm_mul_ps(vDot,V);
    return vDot;

}



inline XMVECTOR __vectorcall XMVector3Normalize
(
    FXMVECTOR V
)
{
# 9281 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);
    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((2) << 6) | ((1) << 4) | ((2) << 2) | ((1))) );
    vLengthSq = _mm_add_ss(vLengthSq,vTemp);
    vTemp = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    vLengthSq = _mm_add_ss(vLengthSq,vTemp);
    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    XMVECTOR vResult = _mm_sqrt_ps(vLengthSq);

    XMVECTOR vZeroMask = _mm_setzero_ps();

    vZeroMask = _mm_cmpneq_ps(vZeroMask,vResult);


    vLengthSq = _mm_cmpneq_ps(vLengthSq,g_XMInfinity);

    vResult = _mm_div_ps(V,vResult);

    vResult = _mm_and_ps(vResult,vZeroMask);

    XMVECTOR vTemp1 = _mm_andnot_ps(vLengthSq,g_XMQNaN);
    XMVECTOR vTemp2 = _mm_and_ps(vResult,vLengthSq);
    vResult = _mm_or_ps(vTemp1,vTemp2);
    return vResult;

}



inline XMVECTOR __vectorcall XMVector3ClampLength
(
    FXMVECTOR V,
    float LengthMin,
    float LengthMax
)
{
    XMVECTOR ClampMax = XMVectorReplicate(LengthMax);
    XMVECTOR ClampMin = XMVectorReplicate(LengthMin);

    return XMVector3ClampLengthV(V, ClampMin, ClampMax);
}



inline XMVECTOR __vectorcall XMVector3ClampLengthV
(
    FXMVECTOR V,
    FXMVECTOR LengthMin,
    FXMVECTOR LengthMax
)
{
    (void)( (!!((XMVectorGetY(LengthMin) == XMVectorGetX(LengthMin)) && (XMVectorGetZ(LengthMin) == XMVectorGetX(LengthMin)))) || (_wassert(L"(XMVectorGetY(LengthMin) == XMVectorGetX(LengthMin)) && (XMVectorGetZ(LengthMin) == XMVectorGetX(LengthMin))", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(9332)), 0) );
    (void)( (!!((XMVectorGetY(LengthMax) == XMVectorGetX(LengthMax)) && (XMVectorGetZ(LengthMax) == XMVectorGetX(LengthMax)))) || (_wassert(L"(XMVectorGetY(LengthMax) == XMVectorGetX(LengthMax)) && (XMVectorGetZ(LengthMax) == XMVectorGetX(LengthMax))", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(9333)), 0) );
    (void)( (!!(XMVector3GreaterOrEqual(LengthMin, XMVectorZero()))) || (_wassert(L"XMVector3GreaterOrEqual(LengthMin, XMVectorZero())", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(9334)), 0) );
    (void)( (!!(XMVector3GreaterOrEqual(LengthMax, XMVectorZero()))) || (_wassert(L"XMVector3GreaterOrEqual(LengthMax, XMVectorZero())", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(9335)), 0) );
    (void)( (!!(XMVector3GreaterOrEqual(LengthMax, LengthMin))) || (_wassert(L"XMVector3GreaterOrEqual(LengthMax, LengthMin)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(9336)), 0) );

    XMVECTOR LengthSq = XMVector3LengthSq(V);

    const XMVECTOR Zero = XMVectorZero();

    XMVECTOR RcpLength = XMVectorReciprocalSqrt(LengthSq);

    XMVECTOR InfiniteLength = XMVectorEqualInt(LengthSq, g_XMInfinity.v);
    XMVECTOR ZeroLength = XMVectorEqual(LengthSq, Zero);

    XMVECTOR Normal = XMVectorMultiply(V, RcpLength);

    XMVECTOR Length = XMVectorMultiply(LengthSq, RcpLength);

    XMVECTOR Select = XMVectorEqualInt(InfiniteLength, ZeroLength);
    Length = XMVectorSelect(LengthSq, Length, Select);
    Normal = XMVectorSelect(LengthSq, Normal, Select);

    XMVECTOR ControlMax = XMVectorGreater(Length, LengthMax);
    XMVECTOR ControlMin = XMVectorLess(Length, LengthMin);

    XMVECTOR ClampLength = XMVectorSelect(Length, LengthMax, ControlMax);
    ClampLength = XMVectorSelect(ClampLength, LengthMin, ControlMin);

    XMVECTOR Result = XMVectorMultiply(Normal, ClampLength);


    XMVECTOR Control = XMVectorEqualInt(ControlMax, ControlMin);
    Result = XMVectorSelect(Result, V, Control);

    return Result;
}



inline XMVECTOR __vectorcall XMVector3Reflect
(
    FXMVECTOR Incident,
    FXMVECTOR Normal
)
{


    XMVECTOR Result = XMVector3Dot(Incident, Normal);
    Result = XMVectorAdd(Result, Result);
    Result = XMVectorNegativeMultiplySubtract(Result, Normal, Incident);

    return Result;
}



inline XMVECTOR __vectorcall XMVector3Refract
(
    FXMVECTOR Incident,
    FXMVECTOR Normal,
    float RefractionIndex
)
{
    XMVECTOR Index = XMVectorReplicate(RefractionIndex);
    return XMVector3RefractV(Incident, Normal, Index);
}



inline XMVECTOR __vectorcall XMVector3RefractV
(
    FXMVECTOR Incident,
    FXMVECTOR Normal,
    FXMVECTOR RefractionIndex
)
{
# 9478 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR IDotN = XMVector3Dot(Incident, Normal);

    XMVECTOR R = _mm_mul_ps(IDotN, IDotN);
    R = _mm_sub_ps(g_XMOne,R);
    R = _mm_mul_ps(R, RefractionIndex);
    R = _mm_mul_ps(R, RefractionIndex);
    R = _mm_sub_ps(g_XMOne,R);

    XMVECTOR vResult = _mm_cmple_ps(R,g_XMZero);
    if (_mm_movemask_ps(vResult)==0x0f)
    {

        vResult = g_XMZero;
    }
    else
    {

        R = _mm_sqrt_ps(R);
        vResult = _mm_mul_ps(RefractionIndex,IDotN);
        R = _mm_add_ps(R,vResult);

        vResult = _mm_mul_ps(RefractionIndex, Incident);
        R = _mm_mul_ps(R,Normal);
        vResult = _mm_sub_ps(vResult,R);
    }
    return vResult;

}



inline XMVECTOR __vectorcall XMVector3Orthogonal
(
    FXMVECTOR V
)
{
    XMVECTOR Zero = XMVectorZero();
    XMVECTOR Z = XMVectorSplatZ(V);
    XMVECTOR YZYY = XMVectorSwizzle<XM_SWIZZLE_Y, XM_SWIZZLE_Z, XM_SWIZZLE_Y, XM_SWIZZLE_Y>(V);

    XMVECTOR NegativeV = XMVectorSubtract(Zero, V);

    XMVECTOR ZIsNegative = XMVectorLess(Z, Zero);
    XMVECTOR YZYYIsNegative = XMVectorLess(YZYY, Zero);

    XMVECTOR S = XMVectorAdd(YZYY, Z);
    XMVECTOR D = XMVectorSubtract(YZYY, Z);

    XMVECTOR Select = XMVectorEqualInt(ZIsNegative, YZYYIsNegative);

    XMVECTOR R0 = XMVectorPermute<XM_PERMUTE_1X, XM_PERMUTE_0X, XM_PERMUTE_0X, XM_PERMUTE_0X>(NegativeV, S);
    XMVECTOR R1 = XMVectorPermute<XM_PERMUTE_1X, XM_PERMUTE_0X, XM_PERMUTE_0X, XM_PERMUTE_0X>(V, D);

    return XMVectorSelect(R1, R0, Select);
}



inline XMVECTOR __vectorcall XMVector3AngleBetweenNormalsEst
(
    FXMVECTOR N1,
    FXMVECTOR N2
)
{
    XMVECTOR Result = XMVector3Dot(N1, N2);
    Result = XMVectorClamp(Result, g_XMNegativeOne.v, g_XMOne.v);
    Result = XMVectorACosEst(Result);
    return Result;
}



inline XMVECTOR __vectorcall XMVector3AngleBetweenNormals
(
    FXMVECTOR N1,
    FXMVECTOR N2
)
{
    XMVECTOR Result = XMVector3Dot(N1, N2);
    Result = XMVectorClamp(Result, g_XMNegativeOne.v, g_XMOne.v);
    Result = XMVectorACos(Result);
    return Result;
}



inline XMVECTOR __vectorcall XMVector3AngleBetweenVectors
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
    XMVECTOR L1 = XMVector3ReciprocalLength(V1);
    XMVECTOR L2 = XMVector3ReciprocalLength(V2);

    XMVECTOR Dot = XMVector3Dot(V1, V2);

    L1 = XMVectorMultiply(L1, L2);

    XMVECTOR CosAngle = XMVectorMultiply(Dot, L1);
    CosAngle = XMVectorClamp(CosAngle, g_XMNegativeOne.v, g_XMOne.v);

    return XMVectorACos(CosAngle);
}



inline XMVECTOR __vectorcall XMVector3LinePointDistance
(
    FXMVECTOR LinePoint1,
    FXMVECTOR LinePoint2,
    FXMVECTOR Point
)
{







    XMVECTOR PointVector = XMVectorSubtract(Point, LinePoint1);
    XMVECTOR LineVector = XMVectorSubtract(LinePoint2, LinePoint1);

    XMVECTOR LengthSq = XMVector3LengthSq(LineVector);

    XMVECTOR PointProjectionScale = XMVector3Dot(PointVector, LineVector);
    PointProjectionScale = XMVectorDivide(PointProjectionScale, LengthSq);

    XMVECTOR DistanceVector = XMVectorMultiply(LineVector, PointProjectionScale);
    DistanceVector = XMVectorSubtract(PointVector, DistanceVector);

    return XMVector3Length(DistanceVector);
}




inline void __vectorcall XMVector3ComponentsFromNormal
(
    XMVECTOR* pParallel,
    XMVECTOR* pPerpendicular,
    FXMVECTOR V,
    FXMVECTOR Normal
)
{
    (void)( (!!(pParallel != nullptr)) || (_wassert(L"pParallel != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(9624)), 0) );
    (void)( (!!(pPerpendicular != nullptr)) || (_wassert(L"pPerpendicular != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(9625)), 0) );

    XMVECTOR Scale = XMVector3Dot(V, Normal);

    XMVECTOR Parallel = XMVectorMultiply(Normal, Scale);

    *pParallel = Parallel;
    *pPerpendicular = XMVectorSubtract(V, Parallel);
}




inline XMVECTOR __vectorcall XMVector3Rotate
(
    FXMVECTOR V,
    FXMVECTOR RotationQuaternion
)
{
    XMVECTOR A = XMVectorSelect(g_XMSelect1110.v, V, g_XMSelect1110.v);
    XMVECTOR Q = XMQuaternionConjugate(RotationQuaternion);
    XMVECTOR Result = XMQuaternionMultiply(Q, A);
    return XMQuaternionMultiply(Result, RotationQuaternion);
}




inline XMVECTOR __vectorcall XMVector3InverseRotate
(
    FXMVECTOR V,
    FXMVECTOR RotationQuaternion
)
{
    XMVECTOR A = XMVectorSelect(g_XMSelect1110.v, V, g_XMSelect1110.v);
    XMVECTOR Result = XMQuaternionMultiply(RotationQuaternion, A);
    XMVECTOR Q = XMQuaternionConjugate(RotationQuaternion);
    return XMQuaternionMultiply(Result, Q);
}



inline XMVECTOR __vectorcall XMVector3Transform
(
    FXMVECTOR V,
    FXMMATRIX M
)
{
# 9691 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    vResult = _mm_mul_ps(vResult,M.r[0]);
    XMVECTOR vTemp = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    vTemp = _mm_mul_ps(vTemp,M.r[1]);
    vResult = _mm_add_ps(vResult,vTemp);
    vTemp = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    vTemp = _mm_mul_ps(vTemp,M.r[2]);
    vResult = _mm_add_ps(vResult,vTemp);
    vResult = _mm_add_ps(vResult,M.r[3]);
    return vResult;

}




inline XMFLOAT4* __vectorcall XMVector3TransformStream
(
    XMFLOAT4* pOutputStream,
    size_t OutputStride,
    const XMFLOAT3* pInputStream,
    size_t InputStride,
    size_t VectorCount,
    FXMMATRIX M
)
{
    (void)( (!!(pOutputStream != nullptr)) || (_wassert(L"pOutputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(9717)), 0) );
    (void)( (!!(pInputStream != nullptr)) || (_wassert(L"pInputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(9718)), 0) );

    (void)( (!!(InputStride >= sizeof(XMFLOAT3))) || (_wassert(L"InputStride >= sizeof(XMFLOAT3)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(9720)), 0) );
                                                      ;

    (void)( (!!(OutputStride >= sizeof(XMFLOAT4))) || (_wassert(L"OutputStride >= sizeof(XMFLOAT4)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(9723)), 0) );
                                                       ;
# 9845 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    const uint8_t* pInputVector = (const uint8_t*)pInputStream;
    uint8_t* pOutputVector = (uint8_t*)pOutputStream;

    const XMVECTOR row0 = M.r[0];
    const XMVECTOR row1 = M.r[1];
    const XMVECTOR row2 = M.r[2];
    const XMVECTOR row3 = M.r[3];

    size_t i = 0;
    size_t four = VectorCount >> 2;
    if ( four > 0 )
    {
        if (InputStride == sizeof(XMFLOAT3))
        {
            if ( !((uintptr_t)pOutputStream & 0xF) && !(OutputStride & 0xF) )
            {

                for (size_t j = 0; j < four; ++j)
                {
                    __m128 V1 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                    __m128 L2 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+16) );
                    __m128 L3 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+32) );
                    pInputVector += sizeof(XMFLOAT3)*4;


                    XMVECTOR V3 = _mm_shuffle_ps(L2,L3,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2)))); XMVECTOR V2 = _mm_shuffle_ps(L2,V1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0)))); V2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) ); XMVECTOR V4 = _mm_castsi128_ps( _mm_srli_si128(_mm_castps_si128(L3),32/8) );;


                    XMVECTOR Z = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    XMVECTOR Y = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    XMVECTOR X = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    XMVECTOR vTemp = _mm_mul_ps( Z, row2 );
                    XMVECTOR vTemp2 = _mm_mul_ps( Y, row1 );
                    XMVECTOR vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );
                    _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, row2 );
                    vTemp2 = _mm_mul_ps( Y, row1 );
                    vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );
                    _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, row2 );
                    vTemp2 = _mm_mul_ps( Y, row1 );
                    vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );
                    _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V4, V4, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V4, V4, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V4, V4, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, row2 );
                    vTemp2 = _mm_mul_ps( Y, row1 );
                    vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );
                    _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                    pOutputVector += OutputStride;

                    i += 4;
                }
            }
            else
            {

                for (size_t j = 0; j < four; ++j)
                {
                    __m128 V1 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                    __m128 L2 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+16) );
                    __m128 L3 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+32) );
                    pInputVector += sizeof(XMFLOAT3)*4;


                    XMVECTOR V3 = _mm_shuffle_ps(L2,L3,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2)))); XMVECTOR V2 = _mm_shuffle_ps(L2,V1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0)))); V2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) ); XMVECTOR V4 = _mm_castsi128_ps( _mm_srli_si128(_mm_castps_si128(L3),32/8) );;


                    XMVECTOR Z = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    XMVECTOR Y = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    XMVECTOR X = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    XMVECTOR vTemp = _mm_mul_ps( Z, row2 );
                    XMVECTOR vTemp2 = _mm_mul_ps( Y, row1 );
                    XMVECTOR vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );
                    _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, row2 );
                    vTemp2 = _mm_mul_ps( Y, row1 );
                    vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );
                    _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, row2 );
                    vTemp2 = _mm_mul_ps( Y, row1 );
                    vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );
                    _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V4, V4, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V4, V4, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V4, V4, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, row2 );
                    vTemp2 = _mm_mul_ps( Y, row1 );
                    vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );
                    _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
                    pOutputVector += OutputStride;

                    i += 4;
                }
            }
        }
    }

    if ( !((uintptr_t)pOutputStream & 0xF) && !(OutputStride & 0xF) )
    {

        for (; i < VectorCount; ++i)
        {
#pragma prefast( suppress : 26019, "PREfast noise: Esp:1307" )
 XMVECTOR V = XMLoadFloat3(reinterpret_cast<const XMFLOAT3*>(pInputVector));
            pInputVector += InputStride;

            XMVECTOR Z = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
            XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
            XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

            XMVECTOR vTemp = _mm_mul_ps( Z, row2 );
            XMVECTOR vTemp2 = _mm_mul_ps( Y, row1 );
            XMVECTOR vTemp3 = _mm_mul_ps( X, row0 );
            vTemp = _mm_add_ps( vTemp, row3 );
            vTemp = _mm_add_ps( vTemp, vTemp2 );
            vTemp = _mm_add_ps( vTemp, vTemp3 );

            _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
            pOutputVector += OutputStride;
        }
    }
    else
    {

        for (; i < VectorCount; ++i)
        {
#pragma prefast( suppress : 26019, "PREfast noise: Esp:1307" )
 XMVECTOR V = XMLoadFloat3(reinterpret_cast<const XMFLOAT3*>(pInputVector));
            pInputVector += InputStride;

            XMVECTOR Z = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
            XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
            XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

            XMVECTOR vTemp = _mm_mul_ps( Z, row2 );
            XMVECTOR vTemp2 = _mm_mul_ps( Y, row1 );
            XMVECTOR vTemp3 = _mm_mul_ps( X, row0 );
            vTemp = _mm_add_ps( vTemp, row3 );
            vTemp = _mm_add_ps( vTemp, vTemp2 );
            vTemp = _mm_add_ps( vTemp, vTemp3 );

            _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), vTemp );
            pOutputVector += OutputStride;
        }
    }

    return pOutputStream;

}



inline XMVECTOR __vectorcall XMVector3TransformCoord
(
    FXMVECTOR V,
    FXMMATRIX M
)
{
    XMVECTOR Z = XMVectorSplatZ(V);
    XMVECTOR Y = XMVectorSplatY(V);
    XMVECTOR X = XMVectorSplatX(V);

    XMVECTOR Result = XMVectorMultiplyAdd(Z, M.r[2], M.r[3]);
    Result = XMVectorMultiplyAdd(Y, M.r[1], Result);
    Result = XMVectorMultiplyAdd(X, M.r[0], Result);

    XMVECTOR W = XMVectorSplatW(Result);
    return XMVectorDivide( Result, W );
}




inline XMFLOAT3* __vectorcall XMVector3TransformCoordStream
(
    XMFLOAT3* pOutputStream,
    size_t OutputStride,
    const XMFLOAT3* pInputStream,
    size_t InputStride,
    size_t VectorCount,
    FXMMATRIX M
)
{
    (void)( (!!(pOutputStream != nullptr)) || (_wassert(L"pOutputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(10092)), 0) );
    (void)( (!!(pInputStream != nullptr)) || (_wassert(L"pInputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(10093)), 0) );

    (void)( (!!(InputStride >= sizeof(XMFLOAT3))) || (_wassert(L"InputStride >= sizeof(XMFLOAT3)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(10095)), 0) );
                                                      ;

    (void)( (!!(OutputStride >= sizeof(XMFLOAT3))) || (_wassert(L"OutputStride >= sizeof(XMFLOAT3)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(10098)), 0) );
                                                       ;
# 10243 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    const uint8_t* pInputVector = (const uint8_t*)pInputStream;
    uint8_t* pOutputVector = (uint8_t*)pOutputStream;

    const XMVECTOR row0 = M.r[0];
    const XMVECTOR row1 = M.r[1];
    const XMVECTOR row2 = M.r[2];
    const XMVECTOR row3 = M.r[3];

    size_t i = 0;
    size_t four = VectorCount >> 2;
    if ( four > 0 )
    {
        if (InputStride == sizeof(XMFLOAT3))
        {
            if (OutputStride == sizeof(XMFLOAT3))
            {
                if ( !((uintptr_t)pOutputStream & 0xF) )
                {

                    for (size_t j = 0; j < four; ++j)
                    {
                        __m128 V1 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                        __m128 L2 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+16) );
                        __m128 L3 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+32) );
                        pInputVector += sizeof(XMFLOAT3)*4;


                        XMVECTOR V3 = _mm_shuffle_ps(L2,L3,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2)))); XMVECTOR V2 = _mm_shuffle_ps(L2,V1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0)))); V2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) ); XMVECTOR V4 = _mm_castsi128_ps( _mm_srli_si128(_mm_castps_si128(L3),32/8) );;


                        XMVECTOR Z = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        XMVECTOR Y = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        XMVECTOR X = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        XMVECTOR vTemp = _mm_mul_ps( Z, row2 );
                        XMVECTOR vTemp2 = _mm_mul_ps( Y, row1 );
                        XMVECTOR vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, row3 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                        V1 = _mm_div_ps( vTemp, W );


                        Z = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, row2 );
                        vTemp2 = _mm_mul_ps( Y, row1 );
                        vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, row3 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                        V2 = _mm_div_ps( vTemp, W );


                        Z = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, row2 );
                        vTemp2 = _mm_mul_ps( Y, row1 );
                        vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, row3 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                        V3 = _mm_div_ps( vTemp, W );


                        Z = _mm_shuffle_ps( V4, V4, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V4, V4, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V4, V4, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, row2 );
                        vTemp2 = _mm_mul_ps( Y, row1 );
                        vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, row3 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                        V4 = _mm_div_ps( vTemp, W );


                        vTemp = _mm_shuffle_ps(V2,V3,(((1) << 6) | ((0) << 4) | ((2) << 2) | ((1)))); V2 = _mm_shuffle_ps(V2,V1,(((2) << 6) | ((2) << 4) | ((0) << 2) | ((0)))); V1 = _mm_shuffle_ps(V1,V2,(((0) << 6) | ((2) << 4) | ((1) << 2) | ((0)))); V3 = _mm_shuffle_ps(V3,V4,(((0) << 6) | ((0) << 4) | ((2) << 2) | ((2)))); V3 = _mm_shuffle_ps(V3,V4,(((2) << 6) | ((1) << 4) | ((2) << 2) | ((0))));;
                        _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), V1 );
                        _mm_stream_ps( reinterpret_cast<float*>(pOutputVector+16), vTemp );
                        _mm_stream_ps( reinterpret_cast<float*>(pOutputVector+32), V3 );
                        pOutputVector += sizeof(XMFLOAT3)*4;
                        i += 4;
                    }
                }
                else
                {

                    for (size_t j = 0; j < four; ++j)
                    {
                        __m128 V1 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                        __m128 L2 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+16) );
                        __m128 L3 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+32) );
                        pInputVector += sizeof(XMFLOAT3)*4;


                        XMVECTOR V3 = _mm_shuffle_ps(L2,L3,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2)))); XMVECTOR V2 = _mm_shuffle_ps(L2,V1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0)))); V2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) ); XMVECTOR V4 = _mm_castsi128_ps( _mm_srli_si128(_mm_castps_si128(L3),32/8) );;


                        XMVECTOR Z = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        XMVECTOR Y = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        XMVECTOR X = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        XMVECTOR vTemp = _mm_mul_ps( Z, row2 );
                        XMVECTOR vTemp2 = _mm_mul_ps( Y, row1 );
                        XMVECTOR vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, row3 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                        V1 = _mm_div_ps( vTemp, W );


                        Z = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, row2 );
                        vTemp2 = _mm_mul_ps( Y, row1 );
                        vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, row3 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                        V2 = _mm_div_ps( vTemp, W );


                        Z = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, row2 );
                        vTemp2 = _mm_mul_ps( Y, row1 );
                        vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, row3 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                        V3 = _mm_div_ps( vTemp, W );


                        Z = _mm_shuffle_ps( V4, V4, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V4, V4, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V4, V4, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, row2 );
                        vTemp2 = _mm_mul_ps( Y, row1 );
                        vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, row3 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                        V4 = _mm_div_ps( vTemp, W );


                        vTemp = _mm_shuffle_ps(V2,V3,(((1) << 6) | ((0) << 4) | ((2) << 2) | ((1)))); V2 = _mm_shuffle_ps(V2,V1,(((2) << 6) | ((2) << 4) | ((0) << 2) | ((0)))); V1 = _mm_shuffle_ps(V1,V2,(((0) << 6) | ((2) << 4) | ((1) << 2) | ((0)))); V3 = _mm_shuffle_ps(V3,V4,(((0) << 6) | ((0) << 4) | ((2) << 2) | ((2)))); V3 = _mm_shuffle_ps(V3,V4,(((2) << 6) | ((1) << 4) | ((2) << 2) | ((0))));;
                        _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), V1 );
                        _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector+16), vTemp );
                        _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector+32), V3 );
                        pOutputVector += sizeof(XMFLOAT3)*4;
                        i += 4;
                    }
                }
            }
            else
            {

                for (size_t j = 0; j < four; ++j)
                {
                    __m128 V1 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                    __m128 L2 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+16) );
                    __m128 L3 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+32) );
                    pInputVector += sizeof(XMFLOAT3)*4;


                    XMVECTOR V3 = _mm_shuffle_ps(L2,L3,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2)))); XMVECTOR V2 = _mm_shuffle_ps(L2,V1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0)))); V2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) ); XMVECTOR V4 = _mm_castsi128_ps( _mm_srli_si128(_mm_castps_si128(L3),32/8) );;


                    XMVECTOR Z = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    XMVECTOR Y = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    XMVECTOR X = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    XMVECTOR vTemp = _mm_mul_ps( Z, row2 );
                    XMVECTOR vTemp2 = _mm_mul_ps( Y, row1 );
                    XMVECTOR vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

                    XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                    vTemp = _mm_div_ps( vTemp, W );
#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, row2 );
                    vTemp2 = _mm_mul_ps( Y, row1 );
                    vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

                    W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                    vTemp = _mm_div_ps( vTemp, W );
#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, row2 );
                    vTemp2 = _mm_mul_ps( Y, row1 );
                    vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

                    W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                    vTemp = _mm_div_ps( vTemp, W );
#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V4, V4, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V4, V4, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V4, V4, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, row2 );
                    vTemp2 = _mm_mul_ps( Y, row1 );
                    vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, row3 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

                    W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                    vTemp = _mm_div_ps( vTemp, W );
#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;

                    i += 4;
                }
            }
        }
    }

    for (; i < VectorCount; i++)
    {
#pragma prefast( suppress : 26019, "PREfast noise: Esp:1307" )
 XMVECTOR V = XMLoadFloat3(reinterpret_cast<const XMFLOAT3*>(pInputVector));
        pInputVector += InputStride;

        XMVECTOR Z = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
        XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
        XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

        XMVECTOR vTemp = _mm_mul_ps( Z, row2 );
        XMVECTOR vTemp2 = _mm_mul_ps( Y, row1 );
        XMVECTOR vTemp3 = _mm_mul_ps( X, row0 );
        vTemp = _mm_add_ps( vTemp, row3 );
        vTemp = _mm_add_ps( vTemp, vTemp2 );
        vTemp = _mm_add_ps( vTemp, vTemp3 );

        XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

        vTemp = _mm_div_ps( vTemp, W );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
        pOutputVector += OutputStride;
    }

    return pOutputStream;

}



inline XMVECTOR __vectorcall XMVector3TransformNormal
(
    FXMVECTOR V,
    FXMMATRIX M
)
{
# 10583 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    vResult = _mm_mul_ps(vResult,M.r[0]);
    XMVECTOR vTemp = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    vTemp = _mm_mul_ps(vTemp,M.r[1]);
    vResult = _mm_add_ps(vResult,vTemp);
    vTemp = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    vTemp = _mm_mul_ps(vTemp,M.r[2]);
    vResult = _mm_add_ps(vResult,vTemp);
    return vResult;

}




inline XMFLOAT3* __vectorcall XMVector3TransformNormalStream
(
    XMFLOAT3* pOutputStream,
    size_t OutputStride,
    const XMFLOAT3* pInputStream,
    size_t InputStride,
    size_t VectorCount,
    FXMMATRIX M
)
{
    (void)( (!!(pOutputStream != nullptr)) || (_wassert(L"pOutputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(10608)), 0) );
    (void)( (!!(pInputStream != nullptr)) || (_wassert(L"pInputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(10609)), 0) );

    (void)( (!!(InputStride >= sizeof(XMFLOAT3))) || (_wassert(L"InputStride >= sizeof(XMFLOAT3)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(10611)), 0) );
                                                      ;

    (void)( (!!(OutputStride >= sizeof(XMFLOAT3))) || (_wassert(L"OutputStride >= sizeof(XMFLOAT3)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(10614)), 0) );
                                                       ;
# 10729 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    const uint8_t* pInputVector = (const uint8_t*)pInputStream;
    uint8_t* pOutputVector = (uint8_t*)pOutputStream;

    const XMVECTOR row0 = M.r[0];
    const XMVECTOR row1 = M.r[1];
    const XMVECTOR row2 = M.r[2];

    size_t i = 0;
    size_t four = VectorCount >> 2;
    if ( four > 0 )
    {
        if (InputStride == sizeof(XMFLOAT3))
        {
            if (OutputStride == sizeof(XMFLOAT3))
            {
                if ( !((uintptr_t)pOutputStream & 0xF) )
                {

                    for (size_t j = 0; j < four; ++j)
                    {
                        __m128 V1 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                        __m128 L2 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+16) );
                        __m128 L3 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+32) );
                        pInputVector += sizeof(XMFLOAT3)*4;


                        XMVECTOR V3 = _mm_shuffle_ps(L2,L3,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2)))); XMVECTOR V2 = _mm_shuffle_ps(L2,V1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0)))); V2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) ); XMVECTOR V4 = _mm_castsi128_ps( _mm_srli_si128(_mm_castps_si128(L3),32/8) );;


                        XMVECTOR Z = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        XMVECTOR Y = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        XMVECTOR X = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        XMVECTOR vTemp = _mm_mul_ps( Z, row2 );
                        XMVECTOR vTemp2 = _mm_mul_ps( Y, row1 );
                        XMVECTOR vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        V1 = _mm_add_ps( vTemp, vTemp3 );


                        Z = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, row2 );
                        vTemp2 = _mm_mul_ps( Y, row1 );
                        vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        V2 = _mm_add_ps( vTemp, vTemp3 );


                        Z = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, row2 );
                        vTemp2 = _mm_mul_ps( Y, row1 );
                        vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        V3 = _mm_add_ps( vTemp, vTemp3 );


                        Z = _mm_shuffle_ps( V4, V4, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V4, V4, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V4, V4, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, row2 );
                        vTemp2 = _mm_mul_ps( Y, row1 );
                        vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        V4 = _mm_add_ps( vTemp, vTemp3 );


                        vTemp = _mm_shuffle_ps(V2,V3,(((1) << 6) | ((0) << 4) | ((2) << 2) | ((1)))); V2 = _mm_shuffle_ps(V2,V1,(((2) << 6) | ((2) << 4) | ((0) << 2) | ((0)))); V1 = _mm_shuffle_ps(V1,V2,(((0) << 6) | ((2) << 4) | ((1) << 2) | ((0)))); V3 = _mm_shuffle_ps(V3,V4,(((0) << 6) | ((0) << 4) | ((2) << 2) | ((2)))); V3 = _mm_shuffle_ps(V3,V4,(((2) << 6) | ((1) << 4) | ((2) << 2) | ((0))));;
                        _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), V1 );
                        _mm_stream_ps( reinterpret_cast<float*>(pOutputVector+16), vTemp );
                        _mm_stream_ps( reinterpret_cast<float*>(pOutputVector+32), V3 );
                        pOutputVector += sizeof(XMFLOAT3)*4;
                        i += 4;
                    }
                }
                else
                {

                    for (size_t j = 0; j < four; ++j)
                    {
                        __m128 V1 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                        __m128 L2 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+16) );
                        __m128 L3 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+32) );
                        pInputVector += sizeof(XMFLOAT3)*4;


                        XMVECTOR V3 = _mm_shuffle_ps(L2,L3,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2)))); XMVECTOR V2 = _mm_shuffle_ps(L2,V1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0)))); V2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) ); XMVECTOR V4 = _mm_castsi128_ps( _mm_srli_si128(_mm_castps_si128(L3),32/8) );;


                        XMVECTOR Z = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        XMVECTOR Y = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        XMVECTOR X = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        XMVECTOR vTemp = _mm_mul_ps( Z, row2 );
                        XMVECTOR vTemp2 = _mm_mul_ps( Y, row1 );
                        XMVECTOR vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        V1 = _mm_add_ps( vTemp, vTemp3 );


                        Z = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, row2 );
                        vTemp2 = _mm_mul_ps( Y, row1 );
                        vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        V2 = _mm_add_ps( vTemp, vTemp3 );


                        Z = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, row2 );
                        vTemp2 = _mm_mul_ps( Y, row1 );
                        vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        V3 = _mm_add_ps( vTemp, vTemp3 );


                        Z = _mm_shuffle_ps( V4, V4, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V4, V4, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V4, V4, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, row2 );
                        vTemp2 = _mm_mul_ps( Y, row1 );
                        vTemp3 = _mm_mul_ps( X, row0 );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        V4 = _mm_add_ps( vTemp, vTemp3 );


                        vTemp = _mm_shuffle_ps(V2,V3,(((1) << 6) | ((0) << 4) | ((2) << 2) | ((1)))); V2 = _mm_shuffle_ps(V2,V1,(((2) << 6) | ((2) << 4) | ((0) << 2) | ((0)))); V1 = _mm_shuffle_ps(V1,V2,(((0) << 6) | ((2) << 4) | ((1) << 2) | ((0)))); V3 = _mm_shuffle_ps(V3,V4,(((0) << 6) | ((0) << 4) | ((2) << 2) | ((2)))); V3 = _mm_shuffle_ps(V3,V4,(((2) << 6) | ((1) << 4) | ((2) << 2) | ((0))));;
                        _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), V1 );
                        _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector+16), vTemp );
                        _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector+32), V3 );
                        pOutputVector += sizeof(XMFLOAT3)*4;
                        i += 4;
                    }
                }
            }
            else
            {

                for (size_t j = 0; j < four; ++j)
                {
                    __m128 V1 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                    __m128 L2 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+16) );
                    __m128 L3 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+32) );
                    pInputVector += sizeof(XMFLOAT3)*4;


                    XMVECTOR V3 = _mm_shuffle_ps(L2,L3,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2)))); XMVECTOR V2 = _mm_shuffle_ps(L2,V1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0)))); V2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) ); XMVECTOR V4 = _mm_castsi128_ps( _mm_srli_si128(_mm_castps_si128(L3),32/8) );;


                    XMVECTOR Z = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    XMVECTOR Y = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    XMVECTOR X = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    XMVECTOR vTemp = _mm_mul_ps( Z, row2 );
                    XMVECTOR vTemp2 = _mm_mul_ps( Y, row1 );
                    XMVECTOR vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, row2 );
                    vTemp2 = _mm_mul_ps( Y, row1 );
                    vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, row2 );
                    vTemp2 = _mm_mul_ps( Y, row1 );
                    vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V4, V4, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V4, V4, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V4, V4, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, row2 );
                    vTemp2 = _mm_mul_ps( Y, row1 );
                    vTemp3 = _mm_mul_ps( X, row0 );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;

                    i += 4;
                }
            }
        }
    }

    for (; i < VectorCount; i++)
    {
#pragma prefast( suppress : 26019, "PREfast noise: Esp:1307" )
 XMVECTOR V = XMLoadFloat3(reinterpret_cast<const XMFLOAT3*>(pInputVector));
        pInputVector += InputStride;

        XMVECTOR Z = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
        XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
        XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

        XMVECTOR vTemp = _mm_mul_ps( Z, row2 );
        XMVECTOR vTemp2 = _mm_mul_ps( Y, row1 );
        XMVECTOR vTemp3 = _mm_mul_ps( X, row0 );
        vTemp = _mm_add_ps( vTemp, vTemp2 );
        vTemp = _mm_add_ps( vTemp, vTemp3 );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
        pOutputVector += OutputStride;
    }

    return pOutputStream;

}



inline XMVECTOR __vectorcall XMVector3Project
(
    FXMVECTOR V,
    float ViewportX,
    float ViewportY,
    float ViewportWidth,
    float ViewportHeight,
    float ViewportMinZ,
    float ViewportMaxZ,
    FXMMATRIX Projection,
    CXMMATRIX View,
    CXMMATRIX World
)
{
    const float HalfViewportWidth = ViewportWidth * 0.5f;
    const float HalfViewportHeight = ViewportHeight * 0.5f;

    XMVECTOR Scale = XMVectorSet(HalfViewportWidth, -HalfViewportHeight, ViewportMaxZ - ViewportMinZ, 0.0f);
    XMVECTOR Offset = XMVectorSet(ViewportX + HalfViewportWidth, ViewportY + HalfViewportHeight, ViewportMinZ, 0.0f);

    XMMATRIX Transform = XMMatrixMultiply(World, View);
    Transform = XMMatrixMultiply(Transform, Projection);

    XMVECTOR Result = XMVector3TransformCoord(V, Transform);

    Result = XMVectorMultiplyAdd(Result, Scale, Offset);

    return Result;
}




inline XMFLOAT3* __vectorcall XMVector3ProjectStream
(
    XMFLOAT3* pOutputStream,
    size_t OutputStride,
    const XMFLOAT3* pInputStream,
    size_t InputStride,
    size_t VectorCount,
    float ViewportX,
    float ViewportY,
    float ViewportWidth,
    float ViewportHeight,
    float ViewportMinZ,
    float ViewportMaxZ,
    FXMMATRIX Projection,
    CXMMATRIX View,
    CXMMATRIX World
)
{
    (void)( (!!(pOutputStream != nullptr)) || (_wassert(L"pOutputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(11034)), 0) );
    (void)( (!!(pInputStream != nullptr)) || (_wassert(L"pInputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(11035)), 0) );

    (void)( (!!(InputStride >= sizeof(XMFLOAT3))) || (_wassert(L"InputStride >= sizeof(XMFLOAT3)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(11037)), 0) );
                                                      ;

    (void)( (!!(OutputStride >= sizeof(XMFLOAT3))) || (_wassert(L"OutputStride >= sizeof(XMFLOAT3)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(11040)), 0) );
                                                       ;
# 11201 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    const float HalfViewportWidth = ViewportWidth * 0.5f;
    const float HalfViewportHeight = ViewportHeight * 0.5f;

    XMVECTOR Scale = XMVectorSet(HalfViewportWidth, -HalfViewportHeight, ViewportMaxZ - ViewportMinZ, 1.0f);
    XMVECTOR Offset = XMVectorSet(ViewportX + HalfViewportWidth, ViewportY + HalfViewportHeight, ViewportMinZ, 0.0f);

    XMMATRIX Transform = XMMatrixMultiply(World, View);
    Transform = XMMatrixMultiply(Transform, Projection);

    const uint8_t* pInputVector = (const uint8_t*)pInputStream;
    uint8_t* pOutputVector = (uint8_t*)pOutputStream;

    size_t i = 0;
    size_t four = VectorCount >> 2;
    if ( four > 0 )
    {
        if (InputStride == sizeof(XMFLOAT3))
        {
            if (OutputStride == sizeof(XMFLOAT3))
            {
                if ( !((uintptr_t)pOutputStream & 0xF) )
                {

                    for (size_t j = 0; j < four; ++j)
                    {
                        __m128 V1 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                        __m128 L2 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+16) );
                        __m128 L3 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+32) );
                        pInputVector += sizeof(XMFLOAT3)*4;


                        XMVECTOR V3 = _mm_shuffle_ps(L2,L3,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2)))); XMVECTOR V2 = _mm_shuffle_ps(L2,V1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0)))); V2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) ); XMVECTOR V4 = _mm_castsi128_ps( _mm_srli_si128(_mm_castps_si128(L3),32/8) );;


                        XMVECTOR Z = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        XMVECTOR Y = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        XMVECTOR X = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        XMVECTOR vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        XMVECTOR vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        XMVECTOR vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        vTemp = _mm_div_ps( vTemp, W );

                        vTemp = _mm_mul_ps( vTemp, Scale );
                        V1 = _mm_add_ps( vTemp, Offset );


                        Z = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        vTemp = _mm_div_ps( vTemp, W );

                        vTemp = _mm_mul_ps( vTemp, Scale );
                        V2 = _mm_add_ps( vTemp, Offset );


                        Z = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        vTemp = _mm_div_ps( vTemp, W );

                        vTemp = _mm_mul_ps( vTemp, Scale );
                        V3 = _mm_add_ps( vTemp, Offset );


                        Z = _mm_shuffle_ps( V4, V4, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V4, V4, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V4, V4, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        vTemp = _mm_div_ps( vTemp, W );

                        vTemp = _mm_mul_ps( vTemp, Scale );
                        V4 = _mm_add_ps( vTemp, Offset );


                        vTemp = _mm_shuffle_ps(V2,V3,(((1) << 6) | ((0) << 4) | ((2) << 2) | ((1)))); V2 = _mm_shuffle_ps(V2,V1,(((2) << 6) | ((2) << 4) | ((0) << 2) | ((0)))); V1 = _mm_shuffle_ps(V1,V2,(((0) << 6) | ((2) << 4) | ((1) << 2) | ((0)))); V3 = _mm_shuffle_ps(V3,V4,(((0) << 6) | ((0) << 4) | ((2) << 2) | ((2)))); V3 = _mm_shuffle_ps(V3,V4,(((2) << 6) | ((1) << 4) | ((2) << 2) | ((0))));;
                        _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), V1 );
                        _mm_stream_ps( reinterpret_cast<float*>(pOutputVector+16), vTemp );
                        _mm_stream_ps( reinterpret_cast<float*>(pOutputVector+32), V3 );
                        pOutputVector += sizeof(XMFLOAT3)*4;
                        i += 4;
                    }
                }
                else
                {

                    for (size_t j = 0; j < four; ++j)
                    {
                        __m128 V1 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                        __m128 L2 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+16) );
                        __m128 L3 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+32) );
                        pInputVector += sizeof(XMFLOAT3)*4;


                        XMVECTOR V3 = _mm_shuffle_ps(L2,L3,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2)))); XMVECTOR V2 = _mm_shuffle_ps(L2,V1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0)))); V2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) ); XMVECTOR V4 = _mm_castsi128_ps( _mm_srli_si128(_mm_castps_si128(L3),32/8) );;


                        XMVECTOR Z = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        XMVECTOR Y = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        XMVECTOR X = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        XMVECTOR vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        XMVECTOR vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        XMVECTOR vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        vTemp = _mm_div_ps( vTemp, W );

                        vTemp = _mm_mul_ps( vTemp, Scale );
                        V1 = _mm_add_ps( vTemp, Offset );


                        Z = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        vTemp = _mm_div_ps( vTemp, W );

                        vTemp = _mm_mul_ps( vTemp, Scale );
                        V2 = _mm_add_ps( vTemp, Offset );


                        Z = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        vTemp = _mm_div_ps( vTemp, W );

                        vTemp = _mm_mul_ps( vTemp, Scale );
                        V3 = _mm_add_ps( vTemp, Offset );


                        Z = _mm_shuffle_ps( V4, V4, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V4, V4, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V4, V4, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        vTemp = _mm_div_ps( vTemp, W );

                        vTemp = _mm_mul_ps( vTemp, Scale );
                        V4 = _mm_add_ps( vTemp, Offset );


                        vTemp = _mm_shuffle_ps(V2,V3,(((1) << 6) | ((0) << 4) | ((2) << 2) | ((1)))); V2 = _mm_shuffle_ps(V2,V1,(((2) << 6) | ((2) << 4) | ((0) << 2) | ((0)))); V1 = _mm_shuffle_ps(V1,V2,(((0) << 6) | ((2) << 4) | ((1) << 2) | ((0)))); V3 = _mm_shuffle_ps(V3,V4,(((0) << 6) | ((0) << 4) | ((2) << 2) | ((2)))); V3 = _mm_shuffle_ps(V3,V4,(((2) << 6) | ((1) << 4) | ((2) << 2) | ((0))));;
                        _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), V1 );
                        _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector+16), vTemp );
                        _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector+32), V3 );
                        pOutputVector += sizeof(XMFLOAT3)*4;
                        i += 4;
                    }
                }
            }
            else
            {

                for (size_t j = 0; j < four; ++j)
                {
                    __m128 V1 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                    __m128 L2 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+16) );
                    __m128 L3 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+32) );
                    pInputVector += sizeof(XMFLOAT3)*4;


                    XMVECTOR V3 = _mm_shuffle_ps(L2,L3,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2)))); XMVECTOR V2 = _mm_shuffle_ps(L2,V1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0)))); V2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) ); XMVECTOR V4 = _mm_castsi128_ps( _mm_srli_si128(_mm_castps_si128(L3),32/8) );;


                    XMVECTOR Z = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    XMVECTOR Y = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    XMVECTOR X = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    XMVECTOR vTemp = _mm_mul_ps( Z, Transform.r[2] );
                    XMVECTOR vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                    XMVECTOR vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                    vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

                    XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                    vTemp = _mm_div_ps( vTemp, W );

                    vTemp = _mm_mul_ps( vTemp, Scale );
                    vTemp = _mm_add_ps( vTemp, Offset );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, Transform.r[2] );
                    vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                    vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                    vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

                    W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                    vTemp = _mm_div_ps( vTemp, W );

                    vTemp = _mm_mul_ps( vTemp, Scale );
                    vTemp = _mm_add_ps( vTemp, Offset );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, Transform.r[2] );
                    vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                    vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                    vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

                    W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                    vTemp = _mm_div_ps( vTemp, W );

                    vTemp = _mm_mul_ps( vTemp, Scale );
                    vTemp = _mm_add_ps( vTemp, Offset );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;


                    Z = _mm_shuffle_ps( V4, V4, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V4, V4, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V4, V4, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, Transform.r[2] );
                    vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                    vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                    vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

                    W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                    vTemp = _mm_div_ps( vTemp, W );

                    vTemp = _mm_mul_ps( vTemp, Scale );
                    vTemp = _mm_add_ps( vTemp, Offset );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;

                    i += 4;
                }
            }
        }
    }

    for (; i < VectorCount; i++)
    {
#pragma prefast( suppress : 26019, "PREfast noise: Esp:1307" )
 XMVECTOR V = XMLoadFloat3(reinterpret_cast<const XMFLOAT3*>(pInputVector));
        pInputVector += InputStride;

        XMVECTOR Z = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
        XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
        XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

        XMVECTOR vTemp = _mm_mul_ps( Z, Transform.r[2] );
        XMVECTOR vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
        XMVECTOR vTemp3 = _mm_mul_ps( X, Transform.r[0] );
        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
        vTemp = _mm_add_ps( vTemp, vTemp2 );
        vTemp = _mm_add_ps( vTemp, vTemp3 );

        XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
        vTemp = _mm_div_ps( vTemp, W );

        vTemp = _mm_mul_ps( vTemp, Scale );
        vTemp = _mm_add_ps( vTemp, Offset );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
        pOutputVector += OutputStride;
    }

    return pOutputStream;

}



inline XMVECTOR __vectorcall XMVector3Unproject
(
    FXMVECTOR V,
    float ViewportX,
    float ViewportY,
    float ViewportWidth,
    float ViewportHeight,
    float ViewportMinZ,
    float ViewportMaxZ,
    FXMMATRIX Projection,
    CXMMATRIX View,
    CXMMATRIX World
)
{
    static const XMVECTORF32 D = { -1.0f, 1.0f, 0.0f, 0.0f };

    XMVECTOR Scale = XMVectorSet(ViewportWidth * 0.5f, -ViewportHeight * 0.5f, ViewportMaxZ - ViewportMinZ, 1.0f);
    Scale = XMVectorReciprocal(Scale);

    XMVECTOR Offset = XMVectorSet(-ViewportX, -ViewportY, -ViewportMinZ, 0.0f);
    Offset = XMVectorMultiplyAdd(Scale, Offset, D.v);

    XMMATRIX Transform = XMMatrixMultiply(World, View);
    Transform = XMMatrixMultiply(Transform, Projection);
    Transform = XMMatrixInverse(nullptr, Transform);

    XMVECTOR Result = XMVectorMultiplyAdd(V, Scale, Offset);

    return XMVector3TransformCoord(Result, Transform);
}




inline XMFLOAT3* __vectorcall XMVector3UnprojectStream
(
    XMFLOAT3* pOutputStream,
    size_t OutputStride,
    const XMFLOAT3* pInputStream,
    size_t InputStride,
    size_t VectorCount,
    float ViewportX,
    float ViewportY,
    float ViewportWidth,
    float ViewportHeight,
    float ViewportMinZ,
    float ViewportMaxZ,
    FXMMATRIX Projection,
    CXMMATRIX View,
    CXMMATRIX World)
{
    (void)( (!!(pOutputStream != nullptr)) || (_wassert(L"pOutputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(11602)), 0) );
    (void)( (!!(pInputStream != nullptr)) || (_wassert(L"pInputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(11603)), 0) );

    (void)( (!!(InputStride >= sizeof(XMFLOAT3))) || (_wassert(L"InputStride >= sizeof(XMFLOAT3)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(11605)), 0) );
                                                      ;

    (void)( (!!(OutputStride >= sizeof(XMFLOAT3))) || (_wassert(L"OutputStride >= sizeof(XMFLOAT3)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(11608)), 0) );
                                                       ;
# 11784 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    static const XMVECTORF32 D = { -1.0f, 1.0f, 0.0f, 0.0f };

    XMVECTOR Scale = XMVectorSet(ViewportWidth * 0.5f, -ViewportHeight * 0.5f, ViewportMaxZ - ViewportMinZ, 1.0f);
    Scale = XMVectorReciprocal(Scale);

    XMVECTOR Offset = XMVectorSet(-ViewportX, -ViewportY, -ViewportMinZ, 0.0f);
    Offset = _mm_mul_ps(Scale, Offset);
    Offset = _mm_add_ps(Offset, D);

    XMMATRIX Transform = XMMatrixMultiply(World, View);
    Transform = XMMatrixMultiply(Transform, Projection);
    Transform = XMMatrixInverse(nullptr, Transform);

    const uint8_t* pInputVector = (const uint8_t*)pInputStream;
    uint8_t* pOutputVector = (uint8_t*)pOutputStream;

    size_t i = 0;
    size_t four = VectorCount >> 2;
    if ( four > 0 )
    {
        if (InputStride == sizeof(XMFLOAT3))
        {
            if (OutputStride == sizeof(XMFLOAT3))
            {
                if ( !((uintptr_t)pOutputStream & 0xF) )
                {

                    for (size_t j = 0; j < four; ++j)
                    {
                        __m128 V1 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                        __m128 L2 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+16) );
                        __m128 L3 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+32) );
                        pInputVector += sizeof(XMFLOAT3)*4;


                        XMVECTOR V3 = _mm_shuffle_ps(L2,L3,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2)))); XMVECTOR V2 = _mm_shuffle_ps(L2,V1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0)))); V2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) ); XMVECTOR V4 = _mm_castsi128_ps( _mm_srli_si128(_mm_castps_si128(L3),32/8) );;


                        V1 = _mm_mul_ps( V1, Scale );
                        V1 = _mm_add_ps( V1, Offset );

                        XMVECTOR Z = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        XMVECTOR Y = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        XMVECTOR X = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        XMVECTOR vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        XMVECTOR vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        XMVECTOR vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        V1 = _mm_div_ps( vTemp, W );


                        V2 = _mm_mul_ps( V2, Scale );
                        V2 = _mm_add_ps( V2, Offset );

                        Z = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        V2 = _mm_div_ps( vTemp, W );


                        V3 = _mm_mul_ps( V3, Scale );
                        V3 = _mm_add_ps( V3, Offset );

                        Z = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        V3 = _mm_div_ps( vTemp, W );


                        V4 = _mm_mul_ps( V4, Scale );
                        V4 = _mm_add_ps( V4, Offset );

                        Z = _mm_shuffle_ps( V4, V4, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V4, V4, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V4, V4, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        V4 = _mm_div_ps( vTemp, W );


                        vTemp = _mm_shuffle_ps(V2,V3,(((1) << 6) | ((0) << 4) | ((2) << 2) | ((1)))); V2 = _mm_shuffle_ps(V2,V1,(((2) << 6) | ((2) << 4) | ((0) << 2) | ((0)))); V1 = _mm_shuffle_ps(V1,V2,(((0) << 6) | ((2) << 4) | ((1) << 2) | ((0)))); V3 = _mm_shuffle_ps(V3,V4,(((0) << 6) | ((0) << 4) | ((2) << 2) | ((2)))); V3 = _mm_shuffle_ps(V3,V4,(((2) << 6) | ((1) << 4) | ((2) << 2) | ((0))));;
                        _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), V1 );
                        _mm_stream_ps( reinterpret_cast<float*>(pOutputVector+16), vTemp );
                        _mm_stream_ps( reinterpret_cast<float*>(pOutputVector+32), V3 );
                        pOutputVector += sizeof(XMFLOAT3)*4;
                        i += 4;
                    }
                }
                else
                {

                    for (size_t j = 0; j < four; ++j)
                    {
                        __m128 V1 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                        __m128 L2 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+16) );
                        __m128 L3 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+32) );
                        pInputVector += sizeof(XMFLOAT3)*4;


                        XMVECTOR V3 = _mm_shuffle_ps(L2,L3,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2)))); XMVECTOR V2 = _mm_shuffle_ps(L2,V1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0)))); V2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) ); XMVECTOR V4 = _mm_castsi128_ps( _mm_srli_si128(_mm_castps_si128(L3),32/8) );;


                        V1 = _mm_mul_ps( V1, Scale );
                        V1 = _mm_add_ps( V1, Offset );

                        XMVECTOR Z = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        XMVECTOR Y = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        XMVECTOR X = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        XMVECTOR vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        XMVECTOR vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        XMVECTOR vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        V1 = _mm_div_ps( vTemp, W );


                        V2 = _mm_mul_ps( V2, Scale );
                        V2 = _mm_add_ps( V2, Offset );

                        Z = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        V2 = _mm_div_ps( vTemp, W );


                        V3 = _mm_mul_ps( V3, Scale );
                        V3 = _mm_add_ps( V3, Offset );

                        Z = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        V3 = _mm_div_ps( vTemp, W );


                        V4 = _mm_mul_ps( V4, Scale );
                        V4 = _mm_add_ps( V4, Offset );

                        Z = _mm_shuffle_ps( V4, V4, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                        Y = _mm_shuffle_ps( V4, V4, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                        X = _mm_shuffle_ps( V4, V4, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                        vTemp = _mm_mul_ps( Z, Transform.r[2] );
                        vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                        vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                        vTemp = _mm_add_ps( vTemp, vTemp2 );
                        vTemp = _mm_add_ps( vTemp, vTemp3 );

                        W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                        V4 = _mm_div_ps( vTemp, W );


                        vTemp = _mm_shuffle_ps(V2,V3,(((1) << 6) | ((0) << 4) | ((2) << 2) | ((1)))); V2 = _mm_shuffle_ps(V2,V1,(((2) << 6) | ((2) << 4) | ((0) << 2) | ((0)))); V1 = _mm_shuffle_ps(V1,V2,(((0) << 6) | ((2) << 4) | ((1) << 2) | ((0)))); V3 = _mm_shuffle_ps(V3,V4,(((0) << 6) | ((0) << 4) | ((2) << 2) | ((2)))); V3 = _mm_shuffle_ps(V3,V4,(((2) << 6) | ((1) << 4) | ((2) << 2) | ((0))));;
                        _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), V1 );
                        _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector+16), vTemp );
                        _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector+32), V3 );
                        pOutputVector += sizeof(XMFLOAT3)*4;
                        i += 4;
                    }
                }
            }
            else
            {

                for (size_t j = 0; j < four; ++j)
                {
                    __m128 V1 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                    __m128 L2 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+16) );
                    __m128 L3 = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector+32) );
                    pInputVector += sizeof(XMFLOAT3)*4;


                    XMVECTOR V3 = _mm_shuffle_ps(L2,L3,(((0) << 6) | ((0) << 4) | ((3) << 2) | ((2)))); XMVECTOR V2 = _mm_shuffle_ps(L2,V1,(((3) << 6) | ((3) << 4) | ((1) << 2) | ((0)))); V2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((0) << 2) | ((2))) ); XMVECTOR V4 = _mm_castsi128_ps( _mm_srli_si128(_mm_castps_si128(L3),32/8) );;


                    V1 = _mm_mul_ps( V1, Scale );
                    V1 = _mm_add_ps( V1, Offset );

                    XMVECTOR Z = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    XMVECTOR Y = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    XMVECTOR X = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    XMVECTOR vTemp = _mm_mul_ps( Z, Transform.r[2] );
                    XMVECTOR vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                    XMVECTOR vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                    vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

                    XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                    vTemp = _mm_div_ps( vTemp, W );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;


                    V2 = _mm_mul_ps( V2, Scale );
                    V2 = _mm_add_ps( V2, Offset );

                    Z = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V2, V2, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, Transform.r[2] );
                    vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                    vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                    vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

                    W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                    vTemp = _mm_div_ps( vTemp, W );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;


                    V3 = _mm_mul_ps( V3, Scale );
                    V3 = _mm_add_ps( V3, Offset );

                    Z = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, Transform.r[2] );
                    vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                    vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                    vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

                    W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                    vTemp = _mm_div_ps( vTemp, W );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;


                    V4 = _mm_mul_ps( V4, Scale );
                    V4 = _mm_add_ps( V4, Offset );

                    Z = _mm_shuffle_ps( V4, V4, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                    Y = _mm_shuffle_ps( V4, V4, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                    X = _mm_shuffle_ps( V4, V4, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

                    vTemp = _mm_mul_ps( Z, Transform.r[2] );
                    vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
                    vTemp3 = _mm_mul_ps( X, Transform.r[0] );
                    vTemp = _mm_add_ps( vTemp, Transform.r[3] );
                    vTemp = _mm_add_ps( vTemp, vTemp2 );
                    vTemp = _mm_add_ps( vTemp, vTemp3 );

                    W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
                    vTemp = _mm_div_ps( vTemp, W );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
                    pOutputVector += OutputStride;

                    i += 4;
                }
            }
        }
    }

    for (; i < VectorCount; i++)
    {
#pragma prefast( suppress : 26019, "PREfast noise: Esp:1307" )
 XMVECTOR V = XMLoadFloat3(reinterpret_cast<const XMFLOAT3*>(pInputVector));
        pInputVector += InputStride;

        V = _mm_mul_ps( V, Scale );
        V = _mm_add_ps( V, Offset );

        XMVECTOR Z = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
        XMVECTOR Y = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
        XMVECTOR X = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

        XMVECTOR vTemp = _mm_mul_ps( Z, Transform.r[2] );
        XMVECTOR vTemp2 = _mm_mul_ps( Y, Transform.r[1] );
        XMVECTOR vTemp3 = _mm_mul_ps( X, Transform.r[0] );
        vTemp = _mm_add_ps( vTemp, Transform.r[3] );
        vTemp = _mm_add_ps( vTemp, vTemp2 );
        vTemp = _mm_add_ps( vTemp, vTemp3 );

        XMVECTOR W = _mm_shuffle_ps( vTemp, vTemp, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
        vTemp = _mm_div_ps( vTemp, W );

#pragma prefast( suppress : 26015, "PREfast noise: Esp:1307" )
 XMStoreFloat3(reinterpret_cast<XMFLOAT3*>(pOutputVector), vTemp);
        pOutputVector += OutputStride;
    }

    return pOutputStream;

}
# 12148 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
inline bool __vectorcall XMVector4Equal
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 12162 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpeq_ps(V1,V2);
    return ((_mm_movemask_ps(vTemp)==0x0f) != 0);



}



inline uint32_t __vectorcall XMVector4EqualR
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 12214 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpeq_ps(V1,V2);
    int iTest = _mm_movemask_ps(vTemp);
    uint32_t CR = 0;
    if (iTest==0xf)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (iTest==0)
    {
        CR = XM_CRMASK_CR6FALSE;
    }
    return CR;

}



inline bool __vectorcall XMVector4EqualInt
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 12245 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i vTemp = _mm_cmpeq_epi32(_mm_castps_si128(V1),_mm_castps_si128(V2));
    return ((_mm_movemask_ps(_mm_castsi128_ps(vTemp))==0xf) != 0);



}



inline uint32_t __vectorcall XMVector4EqualIntR
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 12295 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i vTemp = _mm_cmpeq_epi32(_mm_castps_si128(V1),_mm_castps_si128(V2));
    int iTest = _mm_movemask_ps(_mm_castsi128_ps(vTemp));
    uint32_t CR = 0;
    if (iTest==0xf)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (iTest==0)
    {
        CR = XM_CRMASK_CR6FALSE;
    }
    return CR;

}

inline bool __vectorcall XMVector4NearEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2,
    FXMVECTOR Epsilon
)
{
# 12336 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vDelta = _mm_sub_ps(V1,V2);

    XMVECTOR vTemp = _mm_setzero_ps();
    vTemp = _mm_sub_ps(vTemp,vDelta);
    vTemp = _mm_max_ps(vTemp,vDelta);
    vTemp = _mm_cmple_ps(vTemp,Epsilon);
    return ((_mm_movemask_ps(vTemp)==0xf) != 0);

}



inline bool __vectorcall XMVector4NotEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 12362 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpneq_ps(V1,V2);
    return ((_mm_movemask_ps(vTemp)) != 0);



}



inline bool __vectorcall XMVector4NotEqualInt
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 12385 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    __m128i vTemp = _mm_cmpeq_epi32(_mm_castps_si128(V1),_mm_castps_si128(V2));
    return ((_mm_movemask_ps(_mm_castsi128_ps(vTemp))!=0xF) != 0);



}



inline bool __vectorcall XMVector4Greater
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 12408 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpgt_ps(V1,V2);
    return ((_mm_movemask_ps(vTemp)==0x0f) != 0);



}



inline uint32_t __vectorcall XMVector4GreaterR
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 12458 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    uint32_t CR = 0;
    XMVECTOR vTemp = _mm_cmpgt_ps(V1,V2);
    int iTest = _mm_movemask_ps(vTemp);
    if (iTest==0xf) {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (!iTest)
    {
        CR = XM_CRMASK_CR6FALSE;
    }
    return CR;

}



inline bool __vectorcall XMVector4GreaterOrEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 12488 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmpge_ps(V1,V2);
    return ((_mm_movemask_ps(vTemp)==0x0f) != 0);



}



inline uint32_t __vectorcall XMVector4GreaterOrEqualR
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 12538 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    uint32_t CR = 0;
    XMVECTOR vTemp = _mm_cmpge_ps(V1,V2);
    int iTest = _mm_movemask_ps(vTemp);
    if (iTest==0x0f)
    {
        CR = XM_CRMASK_CR6TRUE;
    }
    else if (!iTest)
    {
        CR = XM_CRMASK_CR6FALSE;
    }
    return CR;

}



inline bool __vectorcall XMVector4Less
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 12569 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmplt_ps(V1,V2);
    return ((_mm_movemask_ps(vTemp)==0x0f) != 0);



}



inline bool __vectorcall XMVector4LessOrEqual
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 12592 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_cmple_ps(V1,V2);
    return ((_mm_movemask_ps(vTemp)==0x0f) != 0);



}



inline bool __vectorcall XMVector4InBounds
(
    FXMVECTOR V,
    FXMVECTOR Bounds
)
{
# 12627 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp1 = _mm_cmple_ps(V,Bounds);

    XMVECTOR vTemp2 = _mm_mul_ps(Bounds,g_XMNegativeOne);

    vTemp2 = _mm_cmple_ps(vTemp2,V);

    vTemp1 = _mm_and_ps(vTemp1,vTemp2);

    return ((_mm_movemask_ps(vTemp1)==0x0f) != 0);



}



inline bool __vectorcall XMVector4IsNaN
(
    FXMVECTOR V
)
{
# 12662 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTempNan = _mm_cmpneq_ps(V,V);

    return (_mm_movemask_ps(vTempNan)!=0);

}



inline bool __vectorcall XMVector4IsInfinite
(
    FXMVECTOR V
)
{
# 12693 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp = _mm_and_ps(V,g_XMAbsMask);

    vTemp = _mm_cmpeq_ps(vTemp,g_XMInfinity);

    return (_mm_movemask_ps(vTemp) != 0);

}







inline XMVECTOR __vectorcall XMVector4Dot
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
# 12731 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTemp2 = V2;
    XMVECTOR vTemp = _mm_mul_ps(V1,vTemp2);
    vTemp2 = _mm_shuffle_ps(vTemp2,vTemp,(((1) << 6) | ((0) << 4) | ((0) << 2) | ((0))));
    vTemp2 = _mm_add_ps(vTemp2,vTemp);
    vTemp = _mm_shuffle_ps(vTemp,vTemp2,(((0) << 6) | ((3) << 4) | ((0) << 2) | ((0))));
    vTemp = _mm_add_ps(vTemp,vTemp2);
    return _mm_shuffle_ps( vTemp, vTemp, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

}



inline XMVECTOR __vectorcall XMVector4Cross
(
    FXMVECTOR V1,
    FXMVECTOR V2,
    FXMVECTOR V3
)
{
# 12847 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vResult = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((1) << 4) | ((3) << 2) | ((2))) );
    XMVECTOR vTemp3 = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((3) << 4) | ((2) << 2) | ((3))) );
    vResult = _mm_mul_ps(vResult,vTemp3);

    XMVECTOR vTemp2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((3) << 4) | ((2) << 2) | ((3))) );
    vTemp3 = _mm_shuffle_ps( vTemp3, vTemp3, (((1) << 6) | ((3) << 4) | ((0) << 2) | ((1))) );
    vTemp2 = _mm_mul_ps(vTemp2,vTemp3);
    vResult = _mm_sub_ps(vResult,vTemp2);

    XMVECTOR vTemp1 = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((1))) );
    vResult = _mm_mul_ps(vResult,vTemp1);


    vTemp2 = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((0) << 4) | ((3) << 2) | ((1))) );
    vTemp3 = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((3) << 4) | ((0) << 2) | ((3))) );
    vTemp3 = _mm_mul_ps(vTemp3,vTemp2);

    vTemp2 = _mm_shuffle_ps( vTemp2, vTemp2, (((2) << 6) | ((1) << 4) | ((2) << 2) | ((1))) );
    vTemp1 = _mm_shuffle_ps( V3, V3, (((2) << 6) | ((0) << 4) | ((3) << 2) | ((1))) );
    vTemp2 = _mm_mul_ps(vTemp2,vTemp1);
    vTemp3 = _mm_sub_ps(vTemp3,vTemp2);

    vTemp1 = _mm_shuffle_ps( V1, V1, (((1) << 6) | ((1) << 4) | ((2) << 2) | ((2))) );
    vTemp1 = _mm_mul_ps(vTemp1,vTemp3);
    vResult = _mm_sub_ps(vResult,vTemp1);


    vTemp2 = _mm_shuffle_ps( V2, V2, (((1) << 6) | ((0) << 4) | ((2) << 2) | ((1))) );
    vTemp3 = _mm_shuffle_ps( V3, V3, (((0) << 6) | ((1) << 4) | ((0) << 2) | ((2))) );
    vTemp3 = _mm_mul_ps(vTemp3,vTemp2);

    vTemp2 = _mm_shuffle_ps( vTemp2, vTemp2, (((2) << 6) | ((0) << 4) | ((2) << 2) | ((1))) );
    vTemp1 = _mm_shuffle_ps( V3, V3, (((1) << 6) | ((0) << 4) | ((2) << 2) | ((1))) );
    vTemp1 = _mm_mul_ps(vTemp1,vTemp2);
    vTemp3 = _mm_sub_ps(vTemp3,vTemp1);

    vTemp1 = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    vTemp3 = _mm_mul_ps(vTemp3,vTemp1);
    vResult = _mm_add_ps(vResult,vTemp3);
    return vResult;

}



inline XMVECTOR __vectorcall XMVector4LengthSq
(
    FXMVECTOR V
)
{
    return XMVector4Dot(V, V);
}



inline XMVECTOR __vectorcall XMVector4ReciprocalLengthEst
(
    FXMVECTOR V
)
{
# 12929 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))) );

    vLengthSq = _mm_add_ps(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    vTemp = _mm_shuffle_ps(vTemp,vLengthSq,(((3) << 6) | ((3) << 4) | ((0) << 2) | ((0))));

    vLengthSq = _mm_add_ps(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

    vLengthSq = _mm_rsqrt_ps(vLengthSq);
    return vLengthSq;

}



inline XMVECTOR __vectorcall XMVector4ReciprocalLength
(
    FXMVECTOR V
)
{
# 12983 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))) );

    vLengthSq = _mm_add_ps(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    vTemp = _mm_shuffle_ps(vTemp,vLengthSq,(((3) << 6) | ((3) << 4) | ((0) << 2) | ((0))));

    vLengthSq = _mm_add_ps(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

    vLengthSq = _mm_sqrt_ps(vLengthSq);

    vLengthSq = _mm_div_ps(g_XMOne,vLengthSq);
    return vLengthSq;

}



inline XMVECTOR __vectorcall XMVector4LengthEst
(
    FXMVECTOR V
)
{
# 13037 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))) );

    vLengthSq = _mm_add_ps(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    vTemp = _mm_shuffle_ps(vTemp,vLengthSq,(((3) << 6) | ((3) << 4) | ((0) << 2) | ((0))));

    vLengthSq = _mm_add_ps(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

    vLengthSq = _mm_sqrt_ps(vLengthSq);
    return vLengthSq;

}



inline XMVECTOR __vectorcall XMVector4Length
(
    FXMVECTOR V
)
{
# 13095 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))) );

    vLengthSq = _mm_add_ps(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    vTemp = _mm_shuffle_ps(vTemp,vLengthSq,(((3) << 6) | ((3) << 4) | ((0) << 2) | ((0))));

    vLengthSq = _mm_add_ps(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

    vLengthSq = _mm_sqrt_ps(vLengthSq);
    return vLengthSq;

}





inline XMVECTOR __vectorcall XMVector4NormalizeEst
(
    FXMVECTOR V
)
{
# 13144 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))) );

    vLengthSq = _mm_add_ps(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    vTemp = _mm_shuffle_ps(vTemp,vLengthSq,(((3) << 6) | ((3) << 4) | ((0) << 2) | ((0))));

    vLengthSq = _mm_add_ps(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

    XMVECTOR vResult = _mm_rsqrt_ps(vLengthSq);

    vResult = _mm_mul_ps(vResult,V);
    return vResult;

}



inline XMVECTOR __vectorcall XMVector4Normalize
(
    FXMVECTOR V
)
{
# 13214 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(V,V);

    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))) );

    vLengthSq = _mm_add_ps(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((1) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    vTemp = _mm_shuffle_ps(vTemp,vLengthSq,(((3) << 6) | ((3) << 4) | ((0) << 2) | ((0))));

    vLengthSq = _mm_add_ps(vLengthSq,vTemp);

    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

    XMVECTOR vResult = _mm_sqrt_ps(vLengthSq);

    XMVECTOR vZeroMask = _mm_setzero_ps();

    vZeroMask = _mm_cmpneq_ps(vZeroMask,vResult);


    vLengthSq = _mm_cmpneq_ps(vLengthSq,g_XMInfinity);

    vResult = _mm_div_ps(V,vResult);

    vResult = _mm_and_ps(vResult,vZeroMask);

    XMVECTOR vTemp1 = _mm_andnot_ps(vLengthSq,g_XMQNaN);
    XMVECTOR vTemp2 = _mm_and_ps(vResult,vLengthSq);
    vResult = _mm_or_ps(vTemp1,vTemp2);
    return vResult;

}



inline XMVECTOR __vectorcall XMVector4ClampLength
(
    FXMVECTOR V,
    float LengthMin,
    float LengthMax
)
{
    XMVECTOR ClampMax = XMVectorReplicate(LengthMax);
    XMVECTOR ClampMin = XMVectorReplicate(LengthMin);

    return XMVector4ClampLengthV(V, ClampMin, ClampMax);
}



inline XMVECTOR __vectorcall XMVector4ClampLengthV
(
    FXMVECTOR V,
    FXMVECTOR LengthMin,
    FXMVECTOR LengthMax
)
{
    (void)( (!!((XMVectorGetY(LengthMin) == XMVectorGetX(LengthMin)) && (XMVectorGetZ(LengthMin) == XMVectorGetX(LengthMin)) && (XMVectorGetW(LengthMin) == XMVectorGetX(LengthMin)))) || (_wassert(L"(XMVectorGetY(LengthMin) == XMVectorGetX(LengthMin)) && (XMVectorGetZ(LengthMin) == XMVectorGetX(LengthMin)) && (XMVectorGetW(LengthMin) == XMVectorGetX(LengthMin))", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(13272)), 0) );
    (void)( (!!((XMVectorGetY(LengthMax) == XMVectorGetX(LengthMax)) && (XMVectorGetZ(LengthMax) == XMVectorGetX(LengthMax)) && (XMVectorGetW(LengthMax) == XMVectorGetX(LengthMax)))) || (_wassert(L"(XMVectorGetY(LengthMax) == XMVectorGetX(LengthMax)) && (XMVectorGetZ(LengthMax) == XMVectorGetX(LengthMax)) && (XMVectorGetW(LengthMax) == XMVectorGetX(LengthMax))", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(13273)), 0) );
    (void)( (!!(XMVector4GreaterOrEqual(LengthMin, XMVectorZero()))) || (_wassert(L"XMVector4GreaterOrEqual(LengthMin, XMVectorZero())", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(13274)), 0) );
    (void)( (!!(XMVector4GreaterOrEqual(LengthMax, XMVectorZero()))) || (_wassert(L"XMVector4GreaterOrEqual(LengthMax, XMVectorZero())", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(13275)), 0) );
    (void)( (!!(XMVector4GreaterOrEqual(LengthMax, LengthMin))) || (_wassert(L"XMVector4GreaterOrEqual(LengthMax, LengthMin)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(13276)), 0) );

    XMVECTOR LengthSq = XMVector4LengthSq(V);

    const XMVECTOR Zero = XMVectorZero();

    XMVECTOR RcpLength = XMVectorReciprocalSqrt(LengthSq);

    XMVECTOR InfiniteLength = XMVectorEqualInt(LengthSq, g_XMInfinity.v);
    XMVECTOR ZeroLength = XMVectorEqual(LengthSq, Zero);

    XMVECTOR Normal = XMVectorMultiply(V, RcpLength);

    XMVECTOR Length = XMVectorMultiply(LengthSq, RcpLength);

    XMVECTOR Select = XMVectorEqualInt(InfiniteLength, ZeroLength);
    Length = XMVectorSelect(LengthSq, Length, Select);
    Normal = XMVectorSelect(LengthSq, Normal, Select);

    XMVECTOR ControlMax = XMVectorGreater(Length, LengthMax);
    XMVECTOR ControlMin = XMVectorLess(Length, LengthMin);

    XMVECTOR ClampLength = XMVectorSelect(Length, LengthMax, ControlMax);
    ClampLength = XMVectorSelect(ClampLength, LengthMin, ControlMin);

    XMVECTOR Result = XMVectorMultiply(Normal, ClampLength);


    XMVECTOR Control = XMVectorEqualInt(ControlMax, ControlMin);
    Result = XMVectorSelect(Result, V, Control);

    return Result;
}



inline XMVECTOR __vectorcall XMVector4Reflect
(
    FXMVECTOR Incident,
    FXMVECTOR Normal
)
{


    XMVECTOR Result = XMVector4Dot(Incident, Normal);
    Result = XMVectorAdd(Result, Result);
    Result = XMVectorNegativeMultiplySubtract(Result, Normal, Incident);

    return Result;
}



inline XMVECTOR __vectorcall XMVector4Refract
(
    FXMVECTOR Incident,
    FXMVECTOR Normal,
    float RefractionIndex
)
{
    XMVECTOR Index = XMVectorReplicate(RefractionIndex);
    return XMVector4RefractV(Incident, Normal, Index);
}



inline XMVECTOR __vectorcall XMVector4RefractV
(
    FXMVECTOR Incident,
    FXMVECTOR Normal,
    FXMVECTOR RefractionIndex
)
{
# 13420 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR IDotN = XMVector4Dot(Incident,Normal);


    XMVECTOR R = _mm_mul_ps(IDotN,IDotN);
    R = _mm_sub_ps(g_XMOne,R);
    R = _mm_mul_ps(R, RefractionIndex);
    R = _mm_mul_ps(R, RefractionIndex);
    R = _mm_sub_ps(g_XMOne,R);

    XMVECTOR vResult = _mm_cmple_ps(R,g_XMZero);
    if (_mm_movemask_ps(vResult)==0x0f)
    {

        vResult = g_XMZero;
    }
    else
    {

        R = _mm_sqrt_ps(R);
        vResult = _mm_mul_ps(RefractionIndex, IDotN);
        R = _mm_add_ps(R,vResult);

        vResult = _mm_mul_ps(RefractionIndex, Incident);
        R = _mm_mul_ps(R,Normal);
        vResult = _mm_sub_ps(vResult,R);
    }
    return vResult;

}



inline XMVECTOR __vectorcall XMVector4Orthogonal
(
    FXMVECTOR V
)
{
# 13472 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    static const XMVECTORF32 FlipZW = {1.0f,1.0f,-1.0f,-1.0f};
    XMVECTOR vResult = _mm_shuffle_ps( V, V, (((1) << 6) | ((0) << 4) | ((3) << 2) | ((2))) );
    vResult = _mm_mul_ps(vResult,FlipZW);
    return vResult;

}



inline XMVECTOR __vectorcall XMVector4AngleBetweenNormalsEst
(
    FXMVECTOR N1,
    FXMVECTOR N2
)
{
    XMVECTOR Result = XMVector4Dot(N1, N2);
    Result = XMVectorClamp(Result, g_XMNegativeOne.v, g_XMOne.v);
    Result = XMVectorACosEst(Result);
    return Result;
}



inline XMVECTOR __vectorcall XMVector4AngleBetweenNormals
(
    FXMVECTOR N1,
    FXMVECTOR N2
)
{
    XMVECTOR Result = XMVector4Dot(N1, N2);
    Result = XMVectorClamp(Result, g_XMNegativeOne.v, g_XMOne.v);
    Result = XMVectorACos(Result);
    return Result;
}



inline XMVECTOR __vectorcall XMVector4AngleBetweenVectors
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
    XMVECTOR L1 = XMVector4ReciprocalLength(V1);
    XMVECTOR L2 = XMVector4ReciprocalLength(V2);

    XMVECTOR Dot = XMVector4Dot(V1, V2);

    L1 = XMVectorMultiply(L1, L2);

    XMVECTOR CosAngle = XMVectorMultiply(Dot, L1);
    CosAngle = XMVectorClamp(CosAngle, g_XMNegativeOne.v, g_XMOne.v);

    return XMVectorACos(CosAngle);
}



inline XMVECTOR __vectorcall XMVector4Transform
(
    FXMVECTOR V,
    FXMMATRIX M
)
{
# 13558 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    XMVECTOR vTempX = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    XMVECTOR vTempY = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    XMVECTOR vTempZ = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    XMVECTOR vTempW = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

    vTempX = _mm_mul_ps(vTempX,M.r[0]);
    vTempY = _mm_mul_ps(vTempY,M.r[1]);
    vTempZ = _mm_mul_ps(vTempZ,M.r[2]);
    vTempW = _mm_mul_ps(vTempW,M.r[3]);

    vTempX = _mm_add_ps(vTempX,vTempY);
    vTempZ = _mm_add_ps(vTempZ,vTempW);
    vTempX = _mm_add_ps(vTempX,vTempZ);
    return vTempX;

}



inline XMFLOAT4* __vectorcall XMVector4TransformStream
(
    XMFLOAT4* pOutputStream,
    size_t OutputStride,
    const XMFLOAT4* pInputStream,
    size_t InputStride,
    size_t VectorCount,
    FXMMATRIX M
)
{
    (void)( (!!(pOutputStream != nullptr)) || (_wassert(L"pOutputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(13587)), 0) );
    (void)( (!!(pInputStream != nullptr)) || (_wassert(L"pInputStream != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(13588)), 0) );

    (void)( (!!(InputStride >= sizeof(XMFLOAT4))) || (_wassert(L"InputStride >= sizeof(XMFLOAT4)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(13590)), 0) );
                                                      ;

    (void)( (!!(OutputStride >= sizeof(XMFLOAT4))) || (_wassert(L"OutputStride >= sizeof(XMFLOAT4)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl", (unsigned)(13593)), 0) );
                                                       ;
# 13727 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
    const uint8_t* pInputVector = (const uint8_t*)pInputStream;
    uint8_t* pOutputVector = (uint8_t*)pOutputStream;

    const XMVECTOR row0 = M.r[0];
    const XMVECTOR row1 = M.r[1];
    const XMVECTOR row2 = M.r[2];
    const XMVECTOR row3 = M.r[3];

    if ( !((uintptr_t)pOutputStream & 0xF) && !(OutputStride & 0xF) )
    {
        if ( !((uintptr_t)pInputStream & 0xF) && !(InputStride & 0xF) )
        {

            for (size_t i = 0; i < VectorCount; i++)
            {
                __m128 V = _mm_load_ps( reinterpret_cast<const float*>(pInputVector) );
                pInputVector += InputStride;

                XMVECTOR vTempX = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
                XMVECTOR vTempY = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                XMVECTOR vTempZ = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                XMVECTOR vTempW = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                vTempX = _mm_mul_ps(vTempX,row0);
                vTempY = _mm_mul_ps(vTempY,row1);
                vTempZ = _mm_mul_ps(vTempZ,row2);
                vTempW = _mm_mul_ps(vTempW,row3);

                vTempX = _mm_add_ps(vTempX,vTempY);
                vTempZ = _mm_add_ps(vTempZ,vTempW);
                vTempX = _mm_add_ps(vTempX,vTempZ);

                _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), vTempX );
                pOutputVector += OutputStride;
            }
        }
        else
        {

            for (size_t i = 0; i < VectorCount; i++)
            {
                __m128 V = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                pInputVector += InputStride;

                XMVECTOR vTempX = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
                XMVECTOR vTempY = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                XMVECTOR vTempZ = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                XMVECTOR vTempW = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                vTempX = _mm_mul_ps(vTempX,row0);
                vTempY = _mm_mul_ps(vTempY,row1);
                vTempZ = _mm_mul_ps(vTempZ,row2);
                vTempW = _mm_mul_ps(vTempW,row3);

                vTempX = _mm_add_ps(vTempX,vTempY);
                vTempZ = _mm_add_ps(vTempZ,vTempW);
                vTempX = _mm_add_ps(vTempX,vTempZ);

                _mm_stream_ps( reinterpret_cast<float*>(pOutputVector), vTempX );
                pOutputVector += OutputStride;
            }
        }
    }
    else
    {
        if ( !((uintptr_t)pInputStream & 0xF) && !(InputStride & 0xF) )
        {

            for (size_t i = 0; i < VectorCount; i++)
            {
                __m128 V = _mm_load_ps( reinterpret_cast<const float*>(pInputVector) );
                pInputVector += InputStride;

                XMVECTOR vTempX = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
                XMVECTOR vTempY = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                XMVECTOR vTempZ = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                XMVECTOR vTempW = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                vTempX = _mm_mul_ps(vTempX,row0);
                vTempY = _mm_mul_ps(vTempY,row1);
                vTempZ = _mm_mul_ps(vTempZ,row2);
                vTempW = _mm_mul_ps(vTempW,row3);

                vTempX = _mm_add_ps(vTempX,vTempY);
                vTempZ = _mm_add_ps(vTempZ,vTempW);
                vTempX = _mm_add_ps(vTempX,vTempZ);

                _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), vTempX );
                pOutputVector += OutputStride;
            }
        }
        else
        {

            for (size_t i = 0; i < VectorCount; i++)
            {
                __m128 V = _mm_loadu_ps( reinterpret_cast<const float*>(pInputVector) );
                pInputVector += InputStride;

                XMVECTOR vTempX = _mm_shuffle_ps( V, V, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
                XMVECTOR vTempY = _mm_shuffle_ps( V, V, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
                XMVECTOR vTempZ = _mm_shuffle_ps( V, V, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
                XMVECTOR vTempW = _mm_shuffle_ps( V, V, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

                vTempX = _mm_mul_ps(vTempX,row0);
                vTempY = _mm_mul_ps(vTempY,row1);
                vTempZ = _mm_mul_ps(vTempZ,row2);
                vTempW = _mm_mul_ps(vTempW,row3);

                vTempX = _mm_add_ps(vTempX,vTempY);
                vTempZ = _mm_add_ps(vTempZ,vTempW);
                vTempX = _mm_add_ps(vTempX,vTempZ);

                _mm_storeu_ps( reinterpret_cast<float*>(pOutputVector), vTempX );
                pOutputVector += OutputStride;
            }
        }
    }

    return pOutputStream;

}
# 13858 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathVector.inl"
inline XMVECTOR __vectorcall operator+ (FXMVECTOR V)
{
    return V;
}



inline XMVECTOR __vectorcall operator- (FXMVECTOR V)
{
    return XMVectorNegate(V);
}



inline XMVECTOR& __vectorcall operator+=
(
    XMVECTOR& V1,
    FXMVECTOR V2
)
{
    V1 = XMVectorAdd(V1, V2);
    return V1;
}



inline XMVECTOR& __vectorcall operator-=
(
    XMVECTOR& V1,
    FXMVECTOR V2
)
{
    V1 = XMVectorSubtract(V1, V2);
    return V1;
}



inline XMVECTOR& __vectorcall operator*=
(
    XMVECTOR& V1,
    FXMVECTOR V2
)
{
    V1 = XMVectorMultiply(V1, V2);
    return V1;
}



inline XMVECTOR& __vectorcall operator/=
(
    XMVECTOR& V1,
    FXMVECTOR V2
)
{
    V1 = XMVectorDivide(V1,V2);
    return V1;
}



inline XMVECTOR& operator*=
(
    XMVECTOR& V,
    const float S
)
{
    V = XMVectorScale(V, S);
    return V;
}



inline XMVECTOR& operator/=
(
    XMVECTOR& V,
    const float S
)
{
    XMVECTOR vS = XMVectorReplicate( S );
    V = XMVectorDivide(V, vS);
    return V;
}



inline XMVECTOR __vectorcall operator+
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
    return XMVectorAdd(V1, V2);
}



inline XMVECTOR __vectorcall operator-
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
    return XMVectorSubtract(V1, V2);
}



inline XMVECTOR __vectorcall operator*
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
    return XMVectorMultiply(V1, V2);
}



inline XMVECTOR __vectorcall operator/
(
    FXMVECTOR V1,
    FXMVECTOR V2
)
{
    return XMVectorDivide(V1,V2);
}



inline XMVECTOR __vectorcall operator*
(
    FXMVECTOR V,
    const float S
)
{
    return XMVectorScale(V, S);
}



inline XMVECTOR __vectorcall operator/
(
    FXMVECTOR V,
    const float S
)
{
    XMVECTOR vS = XMVectorReplicate( S );
    return XMVectorDivide(V, vS);
}



inline XMVECTOR __vectorcall operator*
(
    float S,
    FXMVECTOR V
)
{
    return XMVectorScale(V, S);
}
# 1884 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl" 1
# 29 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
inline bool __vectorcall XMMatrixIsNaN
(
    FXMMATRIX M
)
{
# 72 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMVECTOR vX = M.r[0];
    XMVECTOR vY = M.r[1];
    XMVECTOR vZ = M.r[2];
    XMVECTOR vW = M.r[3];

    vX = _mm_cmpneq_ps(vX,vX);
    vY = _mm_cmpneq_ps(vY,vY);
    vZ = _mm_cmpneq_ps(vZ,vZ);
    vW = _mm_cmpneq_ps(vW,vW);

    vX = _mm_or_ps(vX,vZ);
    vY = _mm_or_ps(vY,vW);
    vX = _mm_or_ps(vX,vY);

    return (_mm_movemask_ps(vX)!=0);


}




inline bool __vectorcall XMMatrixIsInfinite
(
    FXMMATRIX M
)
{
# 136 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMVECTOR vTemp1 = _mm_and_ps(M.r[0],g_XMAbsMask);
    XMVECTOR vTemp2 = _mm_and_ps(M.r[1],g_XMAbsMask);
    XMVECTOR vTemp3 = _mm_and_ps(M.r[2],g_XMAbsMask);
    XMVECTOR vTemp4 = _mm_and_ps(M.r[3],g_XMAbsMask);

    vTemp1 = _mm_cmpeq_ps(vTemp1,g_XMInfinity);
    vTemp2 = _mm_cmpeq_ps(vTemp2,g_XMInfinity);
    vTemp3 = _mm_cmpeq_ps(vTemp3,g_XMInfinity);
    vTemp4 = _mm_cmpeq_ps(vTemp4,g_XMInfinity);

    vTemp1 = _mm_or_ps(vTemp1,vTemp2);
    vTemp3 = _mm_or_ps(vTemp3,vTemp4);
    vTemp1 = _mm_or_ps(vTemp1,vTemp3);

    return (_mm_movemask_ps(vTemp1)!=0);

}




inline bool __vectorcall XMMatrixIsIdentity
(
    FXMMATRIX M
)
{
# 204 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMVECTOR vTemp1 = _mm_cmpeq_ps(M.r[0],g_XMIdentityR0);
    XMVECTOR vTemp2 = _mm_cmpeq_ps(M.r[1],g_XMIdentityR1);
    XMVECTOR vTemp3 = _mm_cmpeq_ps(M.r[2],g_XMIdentityR2);
    XMVECTOR vTemp4 = _mm_cmpeq_ps(M.r[3],g_XMIdentityR3);
    vTemp1 = _mm_and_ps(vTemp1,vTemp2);
    vTemp3 = _mm_and_ps(vTemp3,vTemp4);
    vTemp1 = _mm_and_ps(vTemp1,vTemp3);
    return (_mm_movemask_ps(vTemp1)==0x0f);

}







inline XMMATRIX __vectorcall XMMatrixMultiply
(
    FXMMATRIX M1,
    CXMMATRIX M2
)
{
# 299 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMMATRIX mResult;

    XMVECTOR vW = M1.r[0];

    XMVECTOR vX = _mm_shuffle_ps( vW, vW, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    XMVECTOR vY = _mm_shuffle_ps( vW, vW, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    XMVECTOR vZ = _mm_shuffle_ps( vW, vW, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    vW = _mm_shuffle_ps( vW, vW, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

    vX = _mm_mul_ps(vX,M2.r[0]);
    vY = _mm_mul_ps(vY,M2.r[1]);
    vZ = _mm_mul_ps(vZ,M2.r[2]);
    vW = _mm_mul_ps(vW,M2.r[3]);

    vX = _mm_add_ps(vX,vZ);
    vY = _mm_add_ps(vY,vW);
    vX = _mm_add_ps(vX,vY);
    mResult.r[0] = vX;

    vW = M1.r[1];
    vX = _mm_shuffle_ps( vW, vW, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    vY = _mm_shuffle_ps( vW, vW, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    vZ = _mm_shuffle_ps( vW, vW, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    vW = _mm_shuffle_ps( vW, vW, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    vX = _mm_mul_ps(vX,M2.r[0]);
    vY = _mm_mul_ps(vY,M2.r[1]);
    vZ = _mm_mul_ps(vZ,M2.r[2]);
    vW = _mm_mul_ps(vW,M2.r[3]);
    vX = _mm_add_ps(vX,vZ);
    vY = _mm_add_ps(vY,vW);
    vX = _mm_add_ps(vX,vY);
    mResult.r[1] = vX;
    vW = M1.r[2];
    vX = _mm_shuffle_ps( vW, vW, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    vY = _mm_shuffle_ps( vW, vW, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    vZ = _mm_shuffle_ps( vW, vW, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    vW = _mm_shuffle_ps( vW, vW, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    vX = _mm_mul_ps(vX,M2.r[0]);
    vY = _mm_mul_ps(vY,M2.r[1]);
    vZ = _mm_mul_ps(vZ,M2.r[2]);
    vW = _mm_mul_ps(vW,M2.r[3]);
    vX = _mm_add_ps(vX,vZ);
    vY = _mm_add_ps(vY,vW);
    vX = _mm_add_ps(vX,vY);
    mResult.r[2] = vX;
    vW = M1.r[3];
    vX = _mm_shuffle_ps( vW, vW, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    vY = _mm_shuffle_ps( vW, vW, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    vZ = _mm_shuffle_ps( vW, vW, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    vW = _mm_shuffle_ps( vW, vW, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    vX = _mm_mul_ps(vX,M2.r[0]);
    vY = _mm_mul_ps(vY,M2.r[1]);
    vZ = _mm_mul_ps(vZ,M2.r[2]);
    vW = _mm_mul_ps(vW,M2.r[3]);
    vX = _mm_add_ps(vX,vZ);
    vY = _mm_add_ps(vY,vW);
    vX = _mm_add_ps(vX,vY);
    mResult.r[3] = vX;
    return mResult;

}



inline XMMATRIX __vectorcall XMMatrixMultiplyTranspose
(
    FXMMATRIX M1,
    CXMMATRIX M2
)
{
# 454 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMVECTOR vW = M1.r[0];

    XMVECTOR vX = _mm_shuffle_ps( vW, vW, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    XMVECTOR vY = _mm_shuffle_ps( vW, vW, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    XMVECTOR vZ = _mm_shuffle_ps( vW, vW, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    vW = _mm_shuffle_ps( vW, vW, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );

    vX = _mm_mul_ps(vX,M2.r[0]);
    vY = _mm_mul_ps(vY,M2.r[1]);
    vZ = _mm_mul_ps(vZ,M2.r[2]);
    vW = _mm_mul_ps(vW,M2.r[3]);

    vX = _mm_add_ps(vX,vZ);
    vY = _mm_add_ps(vY,vW);
    vX = _mm_add_ps(vX,vY);
    __m128 r0 = vX;

    vW = M1.r[1];
    vX = _mm_shuffle_ps( vW, vW, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    vY = _mm_shuffle_ps( vW, vW, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    vZ = _mm_shuffle_ps( vW, vW, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    vW = _mm_shuffle_ps( vW, vW, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    vX = _mm_mul_ps(vX,M2.r[0]);
    vY = _mm_mul_ps(vY,M2.r[1]);
    vZ = _mm_mul_ps(vZ,M2.r[2]);
    vW = _mm_mul_ps(vW,M2.r[3]);
    vX = _mm_add_ps(vX,vZ);
    vY = _mm_add_ps(vY,vW);
    vX = _mm_add_ps(vX,vY);
    __m128 r1 = vX;
    vW = M1.r[2];
    vX = _mm_shuffle_ps( vW, vW, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    vY = _mm_shuffle_ps( vW, vW, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    vZ = _mm_shuffle_ps( vW, vW, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    vW = _mm_shuffle_ps( vW, vW, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    vX = _mm_mul_ps(vX,M2.r[0]);
    vY = _mm_mul_ps(vY,M2.r[1]);
    vZ = _mm_mul_ps(vZ,M2.r[2]);
    vW = _mm_mul_ps(vW,M2.r[3]);
    vX = _mm_add_ps(vX,vZ);
    vY = _mm_add_ps(vY,vW);
    vX = _mm_add_ps(vX,vY);
    __m128 r2 = vX;
    vW = M1.r[3];
    vX = _mm_shuffle_ps( vW, vW, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    vY = _mm_shuffle_ps( vW, vW, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    vZ = _mm_shuffle_ps( vW, vW, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );
    vW = _mm_shuffle_ps( vW, vW, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    vX = _mm_mul_ps(vX,M2.r[0]);
    vY = _mm_mul_ps(vY,M2.r[1]);
    vZ = _mm_mul_ps(vZ,M2.r[2]);
    vW = _mm_mul_ps(vW,M2.r[3]);
    vX = _mm_add_ps(vX,vZ);
    vY = _mm_add_ps(vY,vW);
    vX = _mm_add_ps(vX,vY);
    __m128 r3 = vX;


    XMVECTOR vTemp1 = _mm_shuffle_ps(r0,r1,(((1) << 6) | ((0) << 4) | ((1) << 2) | ((0))));

    XMVECTOR vTemp3 = _mm_shuffle_ps(r0,r1,(((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))));

    XMVECTOR vTemp2 = _mm_shuffle_ps(r2,r3,(((1) << 6) | ((0) << 4) | ((1) << 2) | ((0))));

    XMVECTOR vTemp4 = _mm_shuffle_ps(r2,r3,(((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))));

    XMMATRIX mResult;

    mResult.r[0] = _mm_shuffle_ps(vTemp1, vTemp2,(((2) << 6) | ((0) << 4) | ((2) << 2) | ((0))));

    mResult.r[1] = _mm_shuffle_ps(vTemp1, vTemp2,(((3) << 6) | ((1) << 4) | ((3) << 2) | ((1))));

    mResult.r[2] = _mm_shuffle_ps(vTemp3, vTemp4,(((2) << 6) | ((0) << 4) | ((2) << 2) | ((0))));

    mResult.r[3] = _mm_shuffle_ps(vTemp3, vTemp4,(((3) << 6) | ((1) << 4) | ((3) << 2) | ((1))));
    return mResult;

}



inline XMMATRIX __vectorcall XMMatrixTranspose
(
    FXMMATRIX M
)
{
# 577 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMVECTOR vTemp1 = _mm_shuffle_ps(M.r[0],M.r[1],(((1) << 6) | ((0) << 4) | ((1) << 2) | ((0))));

    XMVECTOR vTemp3 = _mm_shuffle_ps(M.r[0],M.r[1],(((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))));

    XMVECTOR vTemp2 = _mm_shuffle_ps(M.r[2],M.r[3],(((1) << 6) | ((0) << 4) | ((1) << 2) | ((0))));

    XMVECTOR vTemp4 = _mm_shuffle_ps(M.r[2],M.r[3],(((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))));
    XMMATRIX mResult;


    mResult.r[0] = _mm_shuffle_ps(vTemp1, vTemp2,(((2) << 6) | ((0) << 4) | ((2) << 2) | ((0))));

    mResult.r[1] = _mm_shuffle_ps(vTemp1, vTemp2,(((3) << 6) | ((1) << 4) | ((3) << 2) | ((1))));

    mResult.r[2] = _mm_shuffle_ps(vTemp3, vTemp4,(((2) << 6) | ((0) << 4) | ((2) << 2) | ((0))));

    mResult.r[3] = _mm_shuffle_ps(vTemp3, vTemp4,(((3) << 6) | ((1) << 4) | ((3) << 2) | ((1))));
    return mResult;

}




inline XMMATRIX __vectorcall XMMatrixInverse
(
    XMVECTOR* pDeterminant,
    FXMMATRIX M
)
{
# 701 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMMATRIX MT = XMMatrixTranspose(M);
    XMVECTOR V00 = _mm_shuffle_ps( MT.r[2], MT.r[2], (((1) << 6) | ((1) << 4) | ((0) << 2) | ((0))) );
    XMVECTOR V10 = _mm_shuffle_ps( MT.r[3], MT.r[3], (((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))) );
    XMVECTOR V01 = _mm_shuffle_ps( MT.r[0], MT.r[0], (((1) << 6) | ((1) << 4) | ((0) << 2) | ((0))) );
    XMVECTOR V11 = _mm_shuffle_ps( MT.r[1], MT.r[1], (((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))) );
    XMVECTOR V02 = _mm_shuffle_ps(MT.r[2], MT.r[0],(((2) << 6) | ((0) << 4) | ((2) << 2) | ((0))));
    XMVECTOR V12 = _mm_shuffle_ps(MT.r[3], MT.r[1],(((3) << 6) | ((1) << 4) | ((3) << 2) | ((1))));

    XMVECTOR D0 = _mm_mul_ps(V00,V10);
    XMVECTOR D1 = _mm_mul_ps(V01,V11);
    XMVECTOR D2 = _mm_mul_ps(V02,V12);

    V00 = _mm_shuffle_ps( MT.r[2], MT.r[2], (((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))) );
    V10 = _mm_shuffle_ps( MT.r[3], MT.r[3], (((1) << 6) | ((1) << 4) | ((0) << 2) | ((0))) );
    V01 = _mm_shuffle_ps( MT.r[0], MT.r[0], (((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))) );
    V11 = _mm_shuffle_ps( MT.r[1], MT.r[1], (((1) << 6) | ((1) << 4) | ((0) << 2) | ((0))) );
    V02 = _mm_shuffle_ps(MT.r[2],MT.r[0],(((3) << 6) | ((1) << 4) | ((3) << 2) | ((1))));
    V12 = _mm_shuffle_ps(MT.r[3],MT.r[1],(((2) << 6) | ((0) << 4) | ((2) << 2) | ((0))));

    V00 = _mm_mul_ps(V00,V10);
    V01 = _mm_mul_ps(V01,V11);
    V02 = _mm_mul_ps(V02,V12);
    D0 = _mm_sub_ps(D0,V00);
    D1 = _mm_sub_ps(D1,V01);
    D2 = _mm_sub_ps(D2,V02);

    V11 = _mm_shuffle_ps(D0,D2,(((1) << 6) | ((1) << 4) | ((3) << 2) | ((1))));
    V00 = _mm_shuffle_ps( MT.r[1], MT.r[1], (((1) << 6) | ((0) << 4) | ((2) << 2) | ((1))) );
    V10 = _mm_shuffle_ps(V11,D0,(((0) << 6) | ((3) << 4) | ((0) << 2) | ((2))));
    V01 = _mm_shuffle_ps( MT.r[0], MT.r[0], (((0) << 6) | ((1) << 4) | ((0) << 2) | ((2))) );
    V11 = _mm_shuffle_ps(V11,D0,(((2) << 6) | ((1) << 4) | ((2) << 2) | ((1))));

    XMVECTOR V13 = _mm_shuffle_ps(D1,D2,(((3) << 6) | ((3) << 4) | ((3) << 2) | ((1))));
    V02 = _mm_shuffle_ps( MT.r[3], MT.r[3], (((1) << 6) | ((0) << 4) | ((2) << 2) | ((1))) );
    V12 = _mm_shuffle_ps(V13,D1,(((0) << 6) | ((3) << 4) | ((0) << 2) | ((2))));
    XMVECTOR V03 = _mm_shuffle_ps( MT.r[2], MT.r[2], (((0) << 6) | ((1) << 4) | ((0) << 2) | ((2))) );
    V13 = _mm_shuffle_ps(V13,D1,(((2) << 6) | ((1) << 4) | ((2) << 2) | ((1))));

    XMVECTOR C0 = _mm_mul_ps(V00,V10);
    XMVECTOR C2 = _mm_mul_ps(V01,V11);
    XMVECTOR C4 = _mm_mul_ps(V02,V12);
    XMVECTOR C6 = _mm_mul_ps(V03,V13);


    V11 = _mm_shuffle_ps(D0,D2,(((0) << 6) | ((0) << 4) | ((1) << 2) | ((0))));
    V00 = _mm_shuffle_ps( MT.r[1], MT.r[1], (((2) << 6) | ((1) << 4) | ((3) << 2) | ((2))) );
    V10 = _mm_shuffle_ps(D0,V11,(((2) << 6) | ((1) << 4) | ((0) << 2) | ((3))));
    V01 = _mm_shuffle_ps( MT.r[0], MT.r[0], (((1) << 6) | ((3) << 4) | ((2) << 2) | ((3))) );
    V11 = _mm_shuffle_ps(D0,V11,(((0) << 6) | ((2) << 4) | ((1) << 2) | ((2))));

    V13 = _mm_shuffle_ps(D1,D2,(((2) << 6) | ((2) << 4) | ((1) << 2) | ((0))));
    V02 = _mm_shuffle_ps( MT.r[3], MT.r[3], (((2) << 6) | ((1) << 4) | ((3) << 2) | ((2))) );
    V12 = _mm_shuffle_ps(D1,V13,(((2) << 6) | ((1) << 4) | ((0) << 2) | ((3))));
    V03 = _mm_shuffle_ps( MT.r[2], MT.r[2], (((1) << 6) | ((3) << 4) | ((2) << 2) | ((3))) );
    V13 = _mm_shuffle_ps(D1,V13,(((0) << 6) | ((2) << 4) | ((1) << 2) | ((2))));

    V00 = _mm_mul_ps(V00,V10);
    V01 = _mm_mul_ps(V01,V11);
    V02 = _mm_mul_ps(V02,V12);
    V03 = _mm_mul_ps(V03,V13);
    C0 = _mm_sub_ps(C0,V00);
    C2 = _mm_sub_ps(C2,V01);
    C4 = _mm_sub_ps(C4,V02);
    C6 = _mm_sub_ps(C6,V03);

    V00 = _mm_shuffle_ps( MT.r[1], MT.r[1], (((0) << 6) | ((3) << 4) | ((0) << 2) | ((3))) );

    V10 = _mm_shuffle_ps(D0,D2,(((1) << 6) | ((0) << 4) | ((2) << 2) | ((2))));
    V10 = _mm_shuffle_ps( V10, V10, (((0) << 6) | ((2) << 4) | ((3) << 2) | ((0))) );
    V01 = _mm_shuffle_ps( MT.r[0], MT.r[0], (((2) << 6) | ((0) << 4) | ((3) << 2) | ((1))) );

    V11 = _mm_shuffle_ps(D0,D2,(((1) << 6) | ((0) << 4) | ((3) << 2) | ((0))));
    V11 = _mm_shuffle_ps( V11, V11, (((2) << 6) | ((1) << 4) | ((0) << 2) | ((3))) );
    V02 = _mm_shuffle_ps( MT.r[3], MT.r[3], (((0) << 6) | ((3) << 4) | ((0) << 2) | ((3))) );

    V12 = _mm_shuffle_ps(D1,D2,(((3) << 6) | ((2) << 4) | ((2) << 2) | ((2))));
    V12 = _mm_shuffle_ps( V12, V12, (((0) << 6) | ((2) << 4) | ((3) << 2) | ((0))) );
    V03 = _mm_shuffle_ps( MT.r[2], MT.r[2], (((2) << 6) | ((0) << 4) | ((3) << 2) | ((1))) );

    V13 = _mm_shuffle_ps(D1,D2,(((3) << 6) | ((2) << 4) | ((3) << 2) | ((0))));
    V13 = _mm_shuffle_ps( V13, V13, (((2) << 6) | ((1) << 4) | ((0) << 2) | ((3))) );

    V00 = _mm_mul_ps(V00,V10);
    V01 = _mm_mul_ps(V01,V11);
    V02 = _mm_mul_ps(V02,V12);
    V03 = _mm_mul_ps(V03,V13);
    XMVECTOR C1 = _mm_sub_ps(C0,V00);
    C0 = _mm_add_ps(C0,V00);
    XMVECTOR C3 = _mm_add_ps(C2,V01);
    C2 = _mm_sub_ps(C2,V01);
    XMVECTOR C5 = _mm_sub_ps(C4,V02);
    C4 = _mm_add_ps(C4,V02);
    XMVECTOR C7 = _mm_add_ps(C6,V03);
    C6 = _mm_sub_ps(C6,V03);

    C0 = _mm_shuffle_ps(C0,C1,(((3) << 6) | ((1) << 4) | ((2) << 2) | ((0))));
    C2 = _mm_shuffle_ps(C2,C3,(((3) << 6) | ((1) << 4) | ((2) << 2) | ((0))));
    C4 = _mm_shuffle_ps(C4,C5,(((3) << 6) | ((1) << 4) | ((2) << 2) | ((0))));
    C6 = _mm_shuffle_ps(C6,C7,(((3) << 6) | ((1) << 4) | ((2) << 2) | ((0))));
    C0 = _mm_shuffle_ps( C0, C0, (((3) << 6) | ((1) << 4) | ((2) << 2) | ((0))) );
    C2 = _mm_shuffle_ps( C2, C2, (((3) << 6) | ((1) << 4) | ((2) << 2) | ((0))) );
    C4 = _mm_shuffle_ps( C4, C4, (((3) << 6) | ((1) << 4) | ((2) << 2) | ((0))) );
    C6 = _mm_shuffle_ps( C6, C6, (((3) << 6) | ((1) << 4) | ((2) << 2) | ((0))) );

    XMVECTOR vTemp = XMVector4Dot(C0,MT.r[0]);
    if (pDeterminant != nullptr)
        *pDeterminant = vTemp;
    vTemp = _mm_div_ps(g_XMOne,vTemp);
    XMMATRIX mResult;
    mResult.r[0] = _mm_mul_ps(C0,vTemp);
    mResult.r[1] = _mm_mul_ps(C2,vTemp);
    mResult.r[2] = _mm_mul_ps(C4,vTemp);
    mResult.r[3] = _mm_mul_ps(C6,vTemp);
    return mResult;

}



inline XMVECTOR __vectorcall XMMatrixDeterminant
(
    FXMMATRIX M
)
{
    static const XMVECTORF32 Sign = {1.0f, -1.0f, 1.0f, -1.0f};

    XMVECTOR V0 = XMVectorSwizzle<XM_SWIZZLE_Y, XM_SWIZZLE_X, XM_SWIZZLE_X, XM_SWIZZLE_X>(M.r[2]);
    XMVECTOR V1 = XMVectorSwizzle<XM_SWIZZLE_Z, XM_SWIZZLE_Z, XM_SWIZZLE_Y, XM_SWIZZLE_Y>(M.r[3]);
    XMVECTOR V2 = XMVectorSwizzle<XM_SWIZZLE_Y, XM_SWIZZLE_X, XM_SWIZZLE_X, XM_SWIZZLE_X>(M.r[2]);
    XMVECTOR V3 = XMVectorSwizzle<XM_SWIZZLE_W, XM_SWIZZLE_W, XM_SWIZZLE_W, XM_SWIZZLE_Z>(M.r[3]);
    XMVECTOR V4 = XMVectorSwizzle<XM_SWIZZLE_Z, XM_SWIZZLE_Z, XM_SWIZZLE_Y, XM_SWIZZLE_Y>(M.r[2]);
    XMVECTOR V5 = XMVectorSwizzle<XM_SWIZZLE_W, XM_SWIZZLE_W, XM_SWIZZLE_W, XM_SWIZZLE_Z>(M.r[3]);

    XMVECTOR P0 = XMVectorMultiply(V0, V1);
    XMVECTOR P1 = XMVectorMultiply(V2, V3);
    XMVECTOR P2 = XMVectorMultiply(V4, V5);

    V0 = XMVectorSwizzle<XM_SWIZZLE_Z, XM_SWIZZLE_Z, XM_SWIZZLE_Y, XM_SWIZZLE_Y>(M.r[2]);
    V1 = XMVectorSwizzle<XM_SWIZZLE_Y, XM_SWIZZLE_X, XM_SWIZZLE_X, XM_SWIZZLE_X>(M.r[3]);
    V2 = XMVectorSwizzle<XM_SWIZZLE_W, XM_SWIZZLE_W, XM_SWIZZLE_W, XM_SWIZZLE_Z>(M.r[2]);
    V3 = XMVectorSwizzle<XM_SWIZZLE_Y, XM_SWIZZLE_X, XM_SWIZZLE_X, XM_SWIZZLE_X>(M.r[3]);
    V4 = XMVectorSwizzle<XM_SWIZZLE_W, XM_SWIZZLE_W, XM_SWIZZLE_W, XM_SWIZZLE_Z>(M.r[2]);
    V5 = XMVectorSwizzle<XM_SWIZZLE_Z, XM_SWIZZLE_Z, XM_SWIZZLE_Y, XM_SWIZZLE_Y>(M.r[3]);

    P0 = XMVectorNegativeMultiplySubtract(V0, V1, P0);
    P1 = XMVectorNegativeMultiplySubtract(V2, V3, P1);
    P2 = XMVectorNegativeMultiplySubtract(V4, V5, P2);

    V0 = XMVectorSwizzle<XM_SWIZZLE_W, XM_SWIZZLE_W, XM_SWIZZLE_W, XM_SWIZZLE_Z>(M.r[1]);
    V1 = XMVectorSwizzle<XM_SWIZZLE_Z, XM_SWIZZLE_Z, XM_SWIZZLE_Y, XM_SWIZZLE_Y>(M.r[1]);
    V2 = XMVectorSwizzle<XM_SWIZZLE_Y, XM_SWIZZLE_X, XM_SWIZZLE_X, XM_SWIZZLE_X>(M.r[1]);

    XMVECTOR S = XMVectorMultiply(M.r[0], Sign.v);
    XMVECTOR R = XMVectorMultiply(V0, P0);
    R = XMVectorNegativeMultiplySubtract(V1, P1, R);
    R = XMVectorMultiplyAdd(V2, P2, R);

    return XMVector4Dot(S, R);
}
# 914 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
inline bool __vectorcall XMMatrixDecompose
(
    XMVECTOR *outScale,
    XMVECTOR *outRotQuat,
    XMVECTOR *outTrans,
    FXMMATRIX M
)
{
    static const XMVECTOR *pvCanonicalBasis[3] = {
        &g_XMIdentityR0.v,
        &g_XMIdentityR1.v,
        &g_XMIdentityR2.v
    };

    (void)( (!!(outScale != nullptr)) || (_wassert(L"outScale != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(928)), 0) );
    (void)( (!!(outRotQuat != nullptr)) || (_wassert(L"outRotQuat != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(929)), 0) );
    (void)( (!!(outTrans != nullptr)) || (_wassert(L"outTrans != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(930)), 0) );


    outTrans[0] = M.r[3];

    XMVECTOR *ppvBasis[3];
    XMMATRIX matTemp;
    ppvBasis[0] = &matTemp.r[0];
    ppvBasis[1] = &matTemp.r[1];
    ppvBasis[2] = &matTemp.r[2];

    matTemp.r[0] = M.r[0];
    matTemp.r[1] = M.r[1];
    matTemp.r[2] = M.r[2];
    matTemp.r[3] = g_XMIdentityR3.v;

    float *pfScales = (float *)outScale;

    size_t a, b, c;
    XMVectorGetXPtr(&pfScales[0],XMVector3Length(ppvBasis[0][0]));
    XMVectorGetXPtr(&pfScales[1],XMVector3Length(ppvBasis[1][0]));
    XMVectorGetXPtr(&pfScales[2],XMVector3Length(ppvBasis[2][0]));
    pfScales[3] = 0.f;

    if((pfScales[0]) < (pfScales[1])) { if((pfScales[1]) < (pfScales[2])) { (a) = 2; (b) = 1; (c) = 0; } else { (a) = 1; if((pfScales[0]) < (pfScales[2])) { (b) = 2; (c) = 0; } else { (b) = 0; (c) = 2; } } } else { if((pfScales[0]) < (pfScales[2])) { (a) = 2; (b) = 0; (c) = 1; } else { (a) = 0; if((pfScales[1]) < (pfScales[2])) { (b) = 2; (c) = 1; } else { (b) = 1; (c) = 2; } } }

    if(pfScales[a] < 0.0001f)
    {
        ppvBasis[a][0] = pvCanonicalBasis[a][0];
    }
    ppvBasis[a][0] = XMVector3Normalize(ppvBasis[a][0]);

    if(pfScales[b] < 0.0001f)
    {
        size_t aa, bb, cc;
        float fAbsX, fAbsY, fAbsZ;

        fAbsX = fabsf(XMVectorGetX(ppvBasis[a][0]));
        fAbsY = fabsf(XMVectorGetY(ppvBasis[a][0]));
        fAbsZ = fabsf(XMVectorGetZ(ppvBasis[a][0]));

        if((fAbsX) < (fAbsY)) { if((fAbsY) < (fAbsZ)) { (aa) = 2; (bb) = 1; (cc) = 0; } else { (aa) = 1; if((fAbsX) < (fAbsZ)) { (bb) = 2; (cc) = 0; } else { (bb) = 0; (cc) = 2; } } } else { if((fAbsX) < (fAbsZ)) { (aa) = 2; (bb) = 0; (cc) = 1; } else { (aa) = 0; if((fAbsY) < (fAbsZ)) { (bb) = 2; (cc) = 1; } else { (bb) = 1; (cc) = 2; } } }

        ppvBasis[b][0] = XMVector3Cross(ppvBasis[a][0],pvCanonicalBasis[cc][0]);
    }

    ppvBasis[b][0] = XMVector3Normalize(ppvBasis[b][0]);

    if(pfScales[c] < 0.0001f)
    {
        ppvBasis[c][0] = XMVector3Cross(ppvBasis[a][0],ppvBasis[b][0]);
    }

    ppvBasis[c][0] = XMVector3Normalize(ppvBasis[c][0]);

    float fDet = XMVectorGetX(XMMatrixDeterminant(matTemp));


    if(fDet < 0.0f)
    {

        pfScales[a] = -pfScales[a];
        ppvBasis[a][0] = XMVectorNegate(ppvBasis[a][0]);

        fDet = -fDet;
    }

    fDet -= 1.0f;
    fDet *= fDet;

    if(0.0001f < fDet)
    {

        return false;
    }


    outRotQuat[0] = XMQuaternionRotationMatrix(matTemp);
    return true;
}
# 1020 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
inline XMMATRIX __vectorcall XMMatrixIdentity()
{
    XMMATRIX M;
    M.r[0] = g_XMIdentityR0.v;
    M.r[1] = g_XMIdentityR1.v;
    M.r[2] = g_XMIdentityR2.v;
    M.r[3] = g_XMIdentityR3.v;
    return M;
}



inline XMMATRIX __vectorcall XMMatrixSet
(
    float m00, float m01, float m02, float m03,
    float m10, float m11, float m12, float m13,
    float m20, float m21, float m22, float m23,
    float m30, float m31, float m32, float m33
)
{
    XMMATRIX M;






    M.r[0] = XMVectorSet(m00, m01, m02, m03);
    M.r[1] = XMVectorSet(m10, m11, m12, m13);
    M.r[2] = XMVectorSet(m20, m21, m22, m23);
    M.r[3] = XMVectorSet(m30, m31, m32, m33);

    return M;
}



inline XMMATRIX __vectorcall XMMatrixTranslation
(
    float OffsetX,
    float OffsetY,
    float OffsetZ
)
{
# 1089 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMMATRIX M;
    M.r[0] = g_XMIdentityR0.v;
    M.r[1] = g_XMIdentityR1.v;
    M.r[2] = g_XMIdentityR2.v;
    M.r[3] = XMVectorSet(OffsetX, OffsetY, OffsetZ, 1.f );
    return M;

}




inline XMMATRIX __vectorcall XMMatrixTranslationFromVector
(
    FXMVECTOR Offset
)
{
# 1131 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMMATRIX M;
    M.r[0] = g_XMIdentityR0.v;
    M.r[1] = g_XMIdentityR1.v;
    M.r[2] = g_XMIdentityR2.v;
    M.r[3] = XMVectorSelect( g_XMIdentityR3.v, Offset, g_XMSelect1110.v );
    return M;

}



inline XMMATRIX __vectorcall XMMatrixScaling
(
    float ScaleX,
    float ScaleY,
    float ScaleZ
)
{
# 1182 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMMATRIX M;
    M.r[0] = _mm_set_ps( 0, 0, 0, ScaleX );
    M.r[1] = _mm_set_ps( 0, 0, ScaleY, 0 );
    M.r[2] = _mm_set_ps( 0, ScaleZ, 0, 0 );
    M.r[3] = g_XMIdentityR3.v;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixScalingFromVector
(
    FXMVECTOR Scale
)
{
# 1230 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMMATRIX M;
    M.r[0] = _mm_and_ps(Scale,g_XMMaskX);
    M.r[1] = _mm_and_ps(Scale,g_XMMaskY);
    M.r[2] = _mm_and_ps(Scale,g_XMMaskZ);
    M.r[3] = g_XMIdentityR3.v;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixRotationX
(
    float Angle
)
{
# 1294 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    float SinAngle;
    float CosAngle;
    XMScalarSinCos(&SinAngle, &CosAngle, Angle);

    XMVECTOR vSin = _mm_set_ss(SinAngle);
    XMVECTOR vCos = _mm_set_ss(CosAngle);

    vCos = _mm_shuffle_ps(vCos,vSin,(((3) << 6) | ((0) << 4) | ((0) << 2) | ((3))));
    XMMATRIX M;
    M.r[0] = g_XMIdentityR0;
    M.r[1] = vCos;

    vCos = _mm_shuffle_ps( vCos, vCos, (((3) << 6) | ((1) << 4) | ((2) << 2) | ((0))) );

    vCos = _mm_mul_ps(vCos,g_XMNegateY);
    M.r[2] = vCos;
    M.r[3] = g_XMIdentityR3;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixRotationY
(
    float Angle
)
{
# 1370 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    float SinAngle;
    float CosAngle;
    XMScalarSinCos(&SinAngle, &CosAngle, Angle);

    XMVECTOR vSin = _mm_set_ss(SinAngle);
    XMVECTOR vCos = _mm_set_ss(CosAngle);

    vSin = _mm_shuffle_ps(vSin,vCos,(((3) << 6) | ((0) << 4) | ((3) << 2) | ((0))));
    XMMATRIX M;
    M.r[2] = vSin;
    M.r[1] = g_XMIdentityR1;

    vSin = _mm_shuffle_ps( vSin, vSin, (((3) << 6) | ((0) << 4) | ((1) << 2) | ((2))) );

    vSin = _mm_mul_ps(vSin,g_XMNegateZ);
    M.r[0] = vSin;
    M.r[3] = g_XMIdentityR3;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixRotationZ
(
    float Angle
)
{
# 1446 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    float SinAngle;
    float CosAngle;
    XMScalarSinCos(&SinAngle, &CosAngle, Angle);

    XMVECTOR vSin = _mm_set_ss(SinAngle);
    XMVECTOR vCos = _mm_set_ss(CosAngle);

    vCos = _mm_unpacklo_ps(vCos,vSin);
    XMMATRIX M;
    M.r[0] = vCos;

    vCos = _mm_shuffle_ps( vCos, vCos, (((3) << 6) | ((2) << 4) | ((0) << 2) | ((1))) );

    vCos = _mm_mul_ps(vCos,g_XMNegateX);
    M.r[1] = vCos;
    M.r[2] = g_XMIdentityR2;
    M.r[3] = g_XMIdentityR3;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixRotationRollPitchYaw
(
    float Pitch,
    float Yaw,
    float Roll
)
{
    XMVECTOR Angles = XMVectorSet(Pitch, Yaw, Roll, 0.0f);
    return XMMatrixRotationRollPitchYawFromVector(Angles);
}



inline XMMATRIX __vectorcall XMMatrixRotationRollPitchYawFromVector
(
    FXMVECTOR Angles
)
{
    XMVECTOR Q = XMQuaternionRotationRollPitchYawFromVector(Angles);
    return XMMatrixRotationQuaternion(Q);
}



inline XMMATRIX __vectorcall XMMatrixRotationNormal
(
    FXMVECTOR NormalAxis,
    float Angle
)
{
# 1535 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    float fSinAngle;
    float fCosAngle;
    XMScalarSinCos(&fSinAngle, &fCosAngle, Angle);

    XMVECTOR C2 = _mm_set_ps1(1.0f - fCosAngle);
    XMVECTOR C1 = _mm_set_ps1(fCosAngle);
    XMVECTOR C0 = _mm_set_ps1(fSinAngle);

    XMVECTOR N0 = _mm_shuffle_ps( NormalAxis, NormalAxis, (((3) << 6) | ((0) << 4) | ((2) << 2) | ((1))) );
    XMVECTOR N1 = _mm_shuffle_ps( NormalAxis, NormalAxis, (((3) << 6) | ((1) << 4) | ((0) << 2) | ((2))) );

    XMVECTOR V0 = _mm_mul_ps(C2, N0);
    V0 = _mm_mul_ps(V0, N1);

    XMVECTOR R0 = _mm_mul_ps(C2, NormalAxis);
    R0 = _mm_mul_ps(R0, NormalAxis);
    R0 = _mm_add_ps(R0, C1);

    XMVECTOR R1 = _mm_mul_ps(C0, NormalAxis);
    R1 = _mm_add_ps(R1, V0);
    XMVECTOR R2 = _mm_mul_ps(C0, NormalAxis);
    R2 = _mm_sub_ps(V0,R2);

    V0 = _mm_and_ps(R0,g_XMMask3);
    XMVECTOR V1 = _mm_shuffle_ps(R1,R2,(((2) << 6) | ((1) << 4) | ((2) << 2) | ((0))));
    V1 = _mm_shuffle_ps( V1, V1, (((0) << 6) | ((3) << 4) | ((2) << 2) | ((1))) );
    XMVECTOR V2 = _mm_shuffle_ps(R1,R2,(((0) << 6) | ((0) << 4) | ((1) << 2) | ((1))));
    V2 = _mm_shuffle_ps( V2, V2, (((2) << 6) | ((0) << 4) | ((2) << 2) | ((0))) );

    R2 = _mm_shuffle_ps(V0,V1,(((1) << 6) | ((0) << 4) | ((3) << 2) | ((0))));
    R2 = _mm_shuffle_ps( R2, R2, (((1) << 6) | ((3) << 4) | ((2) << 2) | ((0))) );

    XMMATRIX M;
    M.r[0] = R2;

    R2 = _mm_shuffle_ps(V0,V1,(((3) << 6) | ((2) << 4) | ((3) << 2) | ((1))));
    R2 = _mm_shuffle_ps( R2, R2, (((1) << 6) | ((3) << 4) | ((0) << 2) | ((2))) );
    M.r[1] = R2;

    V2 = _mm_shuffle_ps(V2,V0,(((3) << 6) | ((2) << 4) | ((1) << 2) | ((0))));
    M.r[2] = V2;
    M.r[3] = g_XMIdentityR3.v;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixRotationAxis
(
    FXMVECTOR Axis,
    float Angle
)
{
    (void)( (!!(!XMVector3Equal(Axis, XMVectorZero()))) || (_wassert(L"!XMVector3Equal(Axis, XMVectorZero())", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(1589)), 0) );
    (void)( (!!(!XMVector3IsInfinite(Axis))) || (_wassert(L"!XMVector3IsInfinite(Axis)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(1590)), 0) );

    XMVECTOR Normal = XMVector3Normalize(Axis);
    return XMMatrixRotationNormal(Normal, Angle);
}



inline XMMATRIX __vectorcall XMMatrixRotationQuaternion
(
    FXMVECTOR Quaternion
)
{
# 1637 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    static const XMVECTORF32 Constant1110 = {1.0f, 1.0f, 1.0f, 0.0f};

    XMVECTOR Q0 = _mm_add_ps(Quaternion,Quaternion);
    XMVECTOR Q1 = _mm_mul_ps(Quaternion,Q0);

    XMVECTOR V0 = _mm_shuffle_ps( Q1, Q1, (((3) << 6) | ((0) << 4) | ((0) << 2) | ((1))) );
    V0 = _mm_and_ps(V0,g_XMMask3);
    XMVECTOR V1 = _mm_shuffle_ps( Q1, Q1, (((3) << 6) | ((1) << 4) | ((2) << 2) | ((2))) );
    V1 = _mm_and_ps(V1,g_XMMask3);
    XMVECTOR R0 = _mm_sub_ps(Constant1110,V0);
    R0 = _mm_sub_ps(R0, V1);

    V0 = _mm_shuffle_ps( Quaternion, Quaternion, (((3) << 6) | ((1) << 4) | ((0) << 2) | ((0))) );
    V1 = _mm_shuffle_ps( Q0, Q0, (((3) << 6) | ((2) << 4) | ((1) << 2) | ((2))) );
    V0 = _mm_mul_ps(V0, V1);

    V1 = _mm_shuffle_ps( Quaternion, Quaternion, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    XMVECTOR V2 = _mm_shuffle_ps( Q0, Q0, (((3) << 6) | ((0) << 4) | ((2) << 2) | ((1))) );
    V1 = _mm_mul_ps(V1, V2);

    XMVECTOR R1 = _mm_add_ps(V0, V1);
    XMVECTOR R2 = _mm_sub_ps(V0, V1);

    V0 = _mm_shuffle_ps(R1,R2,(((1) << 6) | ((0) << 4) | ((2) << 2) | ((1))));
    V0 = _mm_shuffle_ps( V0, V0, (((1) << 6) | ((3) << 4) | ((2) << 2) | ((0))) );
    V1 = _mm_shuffle_ps(R1,R2,(((2) << 6) | ((2) << 4) | ((0) << 2) | ((0))));
    V1 = _mm_shuffle_ps( V1, V1, (((2) << 6) | ((0) << 4) | ((2) << 2) | ((0))) );

    Q1 = _mm_shuffle_ps(R0,V0,(((1) << 6) | ((0) << 4) | ((3) << 2) | ((0))));
    Q1 = _mm_shuffle_ps( Q1, Q1, (((1) << 6) | ((3) << 4) | ((2) << 2) | ((0))) );

    XMMATRIX M;
    M.r[0] = Q1;

    Q1 = _mm_shuffle_ps(R0,V0,(((3) << 6) | ((2) << 4) | ((3) << 2) | ((1))));
    Q1 = _mm_shuffle_ps( Q1, Q1, (((1) << 6) | ((3) << 4) | ((0) << 2) | ((2))) );
    M.r[1] = Q1;

    Q1 = _mm_shuffle_ps(V1,R0,(((3) << 6) | ((2) << 4) | ((1) << 2) | ((0))));
    M.r[2] = Q1;
    M.r[3] = g_XMIdentityR3;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixTransformation2D
(
    FXMVECTOR ScalingOrigin,
    float ScalingOrientation,
    FXMVECTOR Scaling,
    FXMVECTOR RotationOrigin,
    float Rotation,
    GXMVECTOR Translation
)
{



    XMVECTOR VScalingOrigin = XMVectorSelect(g_XMSelect1100.v, ScalingOrigin, g_XMSelect1100.v);
    XMVECTOR NegScalingOrigin = XMVectorNegate(VScalingOrigin);

    XMMATRIX MScalingOriginI = XMMatrixTranslationFromVector(NegScalingOrigin);
    XMMATRIX MScalingOrientation = XMMatrixRotationZ(ScalingOrientation);
    XMMATRIX MScalingOrientationT = XMMatrixTranspose(MScalingOrientation);
    XMVECTOR VScaling = XMVectorSelect(g_XMOne.v, Scaling, g_XMSelect1100.v);
    XMMATRIX MScaling = XMMatrixScalingFromVector(VScaling);
    XMVECTOR VRotationOrigin = XMVectorSelect(g_XMSelect1100.v, RotationOrigin, g_XMSelect1100.v);
    XMMATRIX MRotation = XMMatrixRotationZ(Rotation);
    XMVECTOR VTranslation = XMVectorSelect(g_XMSelect1100.v, Translation,g_XMSelect1100.v);

    XMMATRIX M = XMMatrixMultiply(MScalingOriginI, MScalingOrientationT);
    M = XMMatrixMultiply(M, MScaling);
    M = XMMatrixMultiply(M, MScalingOrientation);
    M.r[3] = XMVectorAdd(M.r[3], VScalingOrigin);
    M.r[3] = XMVectorSubtract(M.r[3], VRotationOrigin);
    M = XMMatrixMultiply(M, MRotation);
    M.r[3] = XMVectorAdd(M.r[3], VRotationOrigin);
    M.r[3] = XMVectorAdd(M.r[3], VTranslation);

    return M;
}



inline XMMATRIX __vectorcall XMMatrixTransformation
(
    FXMVECTOR ScalingOrigin,
    FXMVECTOR ScalingOrientationQuaternion,
    FXMVECTOR Scaling,
    GXMVECTOR RotationOrigin,
    HXMVECTOR RotationQuaternion,
    HXMVECTOR Translation
)
{



    XMVECTOR VScalingOrigin = XMVectorSelect(g_XMSelect1110.v, ScalingOrigin, g_XMSelect1110.v);
    XMVECTOR NegScalingOrigin = XMVectorNegate(ScalingOrigin);

    XMMATRIX MScalingOriginI = XMMatrixTranslationFromVector(NegScalingOrigin);
    XMMATRIX MScalingOrientation = XMMatrixRotationQuaternion(ScalingOrientationQuaternion);
    XMMATRIX MScalingOrientationT = XMMatrixTranspose(MScalingOrientation);
    XMMATRIX MScaling = XMMatrixScalingFromVector(Scaling);
    XMVECTOR VRotationOrigin = XMVectorSelect(g_XMSelect1110.v, RotationOrigin, g_XMSelect1110.v);
    XMMATRIX MRotation = XMMatrixRotationQuaternion(RotationQuaternion);
    XMVECTOR VTranslation = XMVectorSelect(g_XMSelect1110.v, Translation, g_XMSelect1110.v);

    XMMATRIX M;
    M = XMMatrixMultiply(MScalingOriginI, MScalingOrientationT);
    M = XMMatrixMultiply(M, MScaling);
    M = XMMatrixMultiply(M, MScalingOrientation);
    M.r[3] = XMVectorAdd(M.r[3], VScalingOrigin);
    M.r[3] = XMVectorSubtract(M.r[3], VRotationOrigin);
    M = XMMatrixMultiply(M, MRotation);
    M.r[3] = XMVectorAdd(M.r[3], VRotationOrigin);
    M.r[3] = XMVectorAdd(M.r[3], VTranslation);
    return M;
}



inline XMMATRIX __vectorcall XMMatrixAffineTransformation2D
(
    FXMVECTOR Scaling,
    FXMVECTOR RotationOrigin,
    float Rotation,
    FXMVECTOR Translation
)
{


    XMVECTOR VScaling = XMVectorSelect(g_XMOne.v, Scaling, g_XMSelect1100.v);
    XMMATRIX MScaling = XMMatrixScalingFromVector(VScaling);
    XMVECTOR VRotationOrigin = XMVectorSelect(g_XMSelect1100.v, RotationOrigin, g_XMSelect1100.v);
    XMMATRIX MRotation = XMMatrixRotationZ(Rotation);
    XMVECTOR VTranslation = XMVectorSelect(g_XMSelect1100.v, Translation,g_XMSelect1100.v);

    XMMATRIX M;
    M = MScaling;
    M.r[3] = XMVectorSubtract(M.r[3], VRotationOrigin);
    M = XMMatrixMultiply(M, MRotation);
    M.r[3] = XMVectorAdd(M.r[3], VRotationOrigin);
    M.r[3] = XMVectorAdd(M.r[3], VTranslation);
    return M;
}



inline XMMATRIX __vectorcall XMMatrixAffineTransformation
(
    FXMVECTOR Scaling,
    FXMVECTOR RotationOrigin,
    FXMVECTOR RotationQuaternion,
    GXMVECTOR Translation
)
{


    XMMATRIX MScaling = XMMatrixScalingFromVector(Scaling);
    XMVECTOR VRotationOrigin = XMVectorSelect(g_XMSelect1110.v, RotationOrigin,g_XMSelect1110.v);
    XMMATRIX MRotation = XMMatrixRotationQuaternion(RotationQuaternion);
    XMVECTOR VTranslation = XMVectorSelect(g_XMSelect1110.v, Translation,g_XMSelect1110.v);

    XMMATRIX M;
    M = MScaling;
    M.r[3] = XMVectorSubtract(M.r[3], VRotationOrigin);
    M = XMMatrixMultiply(M, MRotation);
    M.r[3] = XMVectorAdd(M.r[3], VRotationOrigin);
    M.r[3] = XMVectorAdd(M.r[3], VTranslation);
    return M;
}



inline XMMATRIX __vectorcall XMMatrixReflect
(
    FXMVECTOR ReflectionPlane
)
{
    (void)( (!!(!XMVector3Equal(ReflectionPlane, XMVectorZero()))) || (_wassert(L"!XMVector3Equal(ReflectionPlane, XMVectorZero())", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(1819)), 0) );
    (void)( (!!(!XMPlaneIsInfinite(ReflectionPlane))) || (_wassert(L"!XMPlaneIsInfinite(ReflectionPlane)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(1820)), 0) );

    static const XMVECTORF32 NegativeTwo = {-2.0f, -2.0f, -2.0f, 0.0f};

    XMVECTOR P = XMPlaneNormalize(ReflectionPlane);
    XMVECTOR S = XMVectorMultiply(P, NegativeTwo);

    XMVECTOR A = XMVectorSplatX(P);
    XMVECTOR B = XMVectorSplatY(P);
    XMVECTOR C = XMVectorSplatZ(P);
    XMVECTOR D = XMVectorSplatW(P);

    XMMATRIX M;
    M.r[0] = XMVectorMultiplyAdd(A, S, g_XMIdentityR0.v);
    M.r[1] = XMVectorMultiplyAdd(B, S, g_XMIdentityR1.v);
    M.r[2] = XMVectorMultiplyAdd(C, S, g_XMIdentityR2.v);
    M.r[3] = XMVectorMultiplyAdd(D, S, g_XMIdentityR3.v);
    return M;
}



inline XMMATRIX __vectorcall XMMatrixShadow
(
    FXMVECTOR ShadowPlane,
    FXMVECTOR LightPosition
)
{
    static const XMVECTORU32 Select0001 = {XM_SELECT_0, XM_SELECT_0, XM_SELECT_0, XM_SELECT_1};

    (void)( (!!(!XMVector3Equal(ShadowPlane, XMVectorZero()))) || (_wassert(L"!XMVector3Equal(ShadowPlane, XMVectorZero())", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(1850)), 0) );
    (void)( (!!(!XMPlaneIsInfinite(ShadowPlane))) || (_wassert(L"!XMPlaneIsInfinite(ShadowPlane)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(1851)), 0) );

    XMVECTOR P = XMPlaneNormalize(ShadowPlane);
    XMVECTOR Dot = XMPlaneDot(P, LightPosition);
    P = XMVectorNegate(P);
    XMVECTOR D = XMVectorSplatW(P);
    XMVECTOR C = XMVectorSplatZ(P);
    XMVECTOR B = XMVectorSplatY(P);
    XMVECTOR A = XMVectorSplatX(P);
    Dot = XMVectorSelect(Select0001.v, Dot, Select0001.v);

    XMMATRIX M;
    M.r[3] = XMVectorMultiplyAdd(D, LightPosition, Dot);
    Dot = XMVectorRotateLeft(Dot, 1);
    M.r[2] = XMVectorMultiplyAdd(C, LightPosition, Dot);
    Dot = XMVectorRotateLeft(Dot, 1);
    M.r[1] = XMVectorMultiplyAdd(B, LightPosition, Dot);
    Dot = XMVectorRotateLeft(Dot, 1);
    M.r[0] = XMVectorMultiplyAdd(A, LightPosition, Dot);
    return M;
}





inline XMMATRIX __vectorcall XMMatrixLookAtLH
(
    FXMVECTOR EyePosition,
    FXMVECTOR FocusPosition,
    FXMVECTOR UpDirection
)
{
    XMVECTOR EyeDirection = XMVectorSubtract(FocusPosition, EyePosition);
    return XMMatrixLookToLH(EyePosition, EyeDirection, UpDirection);
}



inline XMMATRIX __vectorcall XMMatrixLookAtRH
(
    FXMVECTOR EyePosition,
    FXMVECTOR FocusPosition,
    FXMVECTOR UpDirection
)
{
    XMVECTOR NegEyeDirection = XMVectorSubtract(EyePosition, FocusPosition);
    return XMMatrixLookToLH(EyePosition, NegEyeDirection, UpDirection);
}



inline XMMATRIX __vectorcall XMMatrixLookToLH
(
    FXMVECTOR EyePosition,
    FXMVECTOR EyeDirection,
    FXMVECTOR UpDirection
)
{
    (void)( (!!(!XMVector3Equal(EyeDirection, XMVectorZero()))) || (_wassert(L"!XMVector3Equal(EyeDirection, XMVectorZero())", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(1910)), 0) );
    (void)( (!!(!XMVector3IsInfinite(EyeDirection))) || (_wassert(L"!XMVector3IsInfinite(EyeDirection)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(1911)), 0) );
    (void)( (!!(!XMVector3Equal(UpDirection, XMVectorZero()))) || (_wassert(L"!XMVector3Equal(UpDirection, XMVectorZero())", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(1912)), 0) );
    (void)( (!!(!XMVector3IsInfinite(UpDirection))) || (_wassert(L"!XMVector3IsInfinite(UpDirection)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(1913)), 0) );

    XMVECTOR R2 = XMVector3Normalize(EyeDirection);

    XMVECTOR R0 = XMVector3Cross(UpDirection, R2);
    R0 = XMVector3Normalize(R0);

    XMVECTOR R1 = XMVector3Cross(R2, R0);

    XMVECTOR NegEyePosition = XMVectorNegate(EyePosition);

    XMVECTOR D0 = XMVector3Dot(R0, NegEyePosition);
    XMVECTOR D1 = XMVector3Dot(R1, NegEyePosition);
    XMVECTOR D2 = XMVector3Dot(R2, NegEyePosition);

    XMMATRIX M;
    M.r[0] = XMVectorSelect(D0, R0, g_XMSelect1110.v);
    M.r[1] = XMVectorSelect(D1, R1, g_XMSelect1110.v);
    M.r[2] = XMVectorSelect(D2, R2, g_XMSelect1110.v);
    M.r[3] = g_XMIdentityR3.v;

    M = XMMatrixTranspose(M);

    return M;
}



inline XMMATRIX __vectorcall XMMatrixLookToRH
(
    FXMVECTOR EyePosition,
    FXMVECTOR EyeDirection,
    FXMVECTOR UpDirection
)
{
    XMVECTOR NegEyeDirection = XMVectorNegate(EyeDirection);
    return XMMatrixLookToLH(EyePosition, NegEyeDirection, UpDirection);
}



#pragma prefast(push)
#pragma prefast(disable:28931, "PREfast noise: Esp:1266")

inline XMMATRIX __vectorcall XMMatrixPerspectiveLH
(
    float ViewWidth,
    float ViewHeight,
    float NearZ,
    float FarZ
)
{
    (void)( (!!(!XMScalarNearEqual(ViewWidth, 0.0f, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewWidth, 0.0f, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(1965)), 0) );
    (void)( (!!(!XMScalarNearEqual(ViewHeight, 0.0f, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewHeight, 0.0f, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(1966)), 0) );
    (void)( (!!(!XMScalarNearEqual(FarZ, NearZ, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(FarZ, NearZ, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(1967)), 0) );
# 2007 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMMATRIX M;
    float TwoNearZ = NearZ + NearZ;
    float fRange = FarZ / (FarZ - NearZ);

    XMVECTOR rMem = {
        TwoNearZ / ViewWidth,
        TwoNearZ / ViewHeight,
        fRange,
        -fRange * NearZ
    };

    XMVECTOR vValues = rMem;
    XMVECTOR vTemp = _mm_setzero_ps();

    vTemp = _mm_move_ss(vTemp,vValues);

    M.r[0] = vTemp;

    vTemp = vValues;
    vTemp = _mm_and_ps(vTemp,g_XMMaskY);
    M.r[1] = vTemp;

    vValues = _mm_shuffle_ps(vValues,g_XMIdentityR3,(((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))));

    vTemp = _mm_setzero_ps();
    vTemp = _mm_shuffle_ps(vTemp,vValues,(((3) << 6) | ((0) << 4) | ((0) << 2) | ((0))));
    M.r[2] = vTemp;

    vTemp = _mm_shuffle_ps(vTemp,vValues,(((2) << 6) | ((1) << 4) | ((0) << 2) | ((0))));
    M.r[3] = vTemp;

    return M;

}



inline XMMATRIX __vectorcall XMMatrixPerspectiveRH
(
    float ViewWidth,
    float ViewHeight,
    float NearZ,
    float FarZ
)
{
    (void)( (!!(!XMScalarNearEqual(ViewWidth, 0.0f, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewWidth, 0.0f, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2052)), 0) );
    (void)( (!!(!XMScalarNearEqual(ViewHeight, 0.0f, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewHeight, 0.0f, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2053)), 0) );
    (void)( (!!(!XMScalarNearEqual(FarZ, NearZ, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(FarZ, NearZ, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2054)), 0) );
# 2095 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMMATRIX M;
    float TwoNearZ = NearZ + NearZ;
    float fRange = FarZ / (NearZ-FarZ);

    XMVECTOR rMem = {
        TwoNearZ / ViewWidth,
        TwoNearZ / ViewHeight,
        fRange,
        fRange * NearZ
    };

    XMVECTOR vValues = rMem;
    XMVECTOR vTemp = _mm_setzero_ps();

    vTemp = _mm_move_ss(vTemp,vValues);

    M.r[0] = vTemp;

    vTemp = vValues;
    vTemp = _mm_and_ps(vTemp,g_XMMaskY);
    M.r[1] = vTemp;

    vValues = _mm_shuffle_ps(vValues,g_XMNegIdentityR3,(((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))));

    vTemp = _mm_setzero_ps();
    vTemp = _mm_shuffle_ps(vTemp,vValues,(((3) << 6) | ((0) << 4) | ((0) << 2) | ((0))));
    M.r[2] = vTemp;

    vTemp = _mm_shuffle_ps(vTemp,vValues,(((2) << 6) | ((1) << 4) | ((0) << 2) | ((0))));
    M.r[3] = vTemp;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixPerspectiveFovLH
(
    float FovAngleY,
    float AspectHByW,
    float NearZ,
    float FarZ
)
{
    (void)( (!!(!XMScalarNearEqual(FovAngleY, 0.0f, 0.00001f * 2.0f))) || (_wassert(L"!XMScalarNearEqual(FovAngleY, 0.0f, 0.00001f * 2.0f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2139)), 0) );
    (void)( (!!(!XMScalarNearEqual(AspectHByW, 0.0f, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(AspectHByW, 0.0f, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2140)), 0) );
    (void)( (!!(!XMScalarNearEqual(FarZ, NearZ, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(FarZ, NearZ, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2141)), 0) );
# 2192 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    float SinFov;
    float CosFov;
    XMScalarSinCos(&SinFov, &CosFov, 0.5f * FovAngleY);

    float fRange = FarZ / (FarZ-NearZ);

    float Height = CosFov / SinFov;
    XMVECTOR rMem = {
        Height / AspectHByW,
        Height,
        fRange,
        -fRange * NearZ
    };

    XMVECTOR vValues = rMem;
    XMVECTOR vTemp = _mm_setzero_ps();

    vTemp = _mm_move_ss(vTemp,vValues);

    XMMATRIX M;
    M.r[0] = vTemp;

    vTemp = vValues;
    vTemp = _mm_and_ps(vTemp,g_XMMaskY);
    M.r[1] = vTemp;

    vTemp = _mm_setzero_ps();
    vValues = _mm_shuffle_ps(vValues,g_XMIdentityR3,(((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))));

    vTemp = _mm_shuffle_ps(vTemp,vValues,(((3) << 6) | ((0) << 4) | ((0) << 2) | ((0))));
    M.r[2] = vTemp;

    vTemp = _mm_shuffle_ps(vTemp,vValues,(((2) << 6) | ((1) << 4) | ((0) << 2) | ((0))));
    M.r[3] = vTemp;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixPerspectiveFovRH
(
    float FovAngleY,
    float AspectHByW,
    float NearZ,
    float FarZ
)
{
    (void)( (!!(!XMScalarNearEqual(FovAngleY, 0.0f, 0.00001f * 2.0f))) || (_wassert(L"!XMScalarNearEqual(FovAngleY, 0.0f, 0.00001f * 2.0f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2240)), 0) );
    (void)( (!!(!XMScalarNearEqual(AspectHByW, 0.0f, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(AspectHByW, 0.0f, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2241)), 0) );
    (void)( (!!(!XMScalarNearEqual(FarZ, NearZ, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(FarZ, NearZ, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2242)), 0) );
# 2292 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    float SinFov;
    float CosFov;
    XMScalarSinCos(&SinFov, &CosFov, 0.5f * FovAngleY);
    float fRange = FarZ / (NearZ-FarZ);

    float Height = CosFov / SinFov;
    XMVECTOR rMem = {
        Height / AspectHByW,
        Height,
        fRange,
        fRange * NearZ
    };

    XMVECTOR vValues = rMem;
    XMVECTOR vTemp = _mm_setzero_ps();

    vTemp = _mm_move_ss(vTemp,vValues);

    XMMATRIX M;
    M.r[0] = vTemp;

    vTemp = vValues;
    vTemp = _mm_and_ps(vTemp,g_XMMaskY);
    M.r[1] = vTemp;

    vTemp = _mm_setzero_ps();
    vValues = _mm_shuffle_ps(vValues,g_XMNegIdentityR3,(((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))));

    vTemp = _mm_shuffle_ps(vTemp,vValues,(((3) << 6) | ((0) << 4) | ((0) << 2) | ((0))));
    M.r[2] = vTemp;

    vTemp = _mm_shuffle_ps(vTemp,vValues,(((2) << 6) | ((1) << 4) | ((0) << 2) | ((0))));
    M.r[3] = vTemp;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixPerspectiveOffCenterLH
(
    float ViewLeft,
    float ViewRight,
    float ViewBottom,
    float ViewTop,
    float NearZ,
    float FarZ
)
{
    (void)( (!!(!XMScalarNearEqual(ViewRight, ViewLeft, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewRight, ViewLeft, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2341)), 0) );
    (void)( (!!(!XMScalarNearEqual(ViewTop, ViewBottom, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewTop, ViewBottom, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2342)), 0) );
    (void)( (!!(!XMScalarNearEqual(FarZ, NearZ, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(FarZ, NearZ, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2343)), 0) );
# 2391 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMMATRIX M;
    float TwoNearZ = NearZ+NearZ;
    float ReciprocalWidth = 1.0f / (ViewRight - ViewLeft);
    float ReciprocalHeight = 1.0f / (ViewTop - ViewBottom);
    float fRange = FarZ / (FarZ-NearZ);

    XMVECTOR rMem = {
        TwoNearZ*ReciprocalWidth,
        TwoNearZ*ReciprocalHeight,
        -fRange * NearZ,
        0
    };

    XMVECTOR vValues = rMem;
    XMVECTOR vTemp = _mm_setzero_ps();

    vTemp = _mm_move_ss(vTemp,vValues);

    M.r[0] = vTemp;

    vTemp = vValues;
    vTemp = _mm_and_ps(vTemp,g_XMMaskY);
    M.r[1] = vTemp;

    M.r[2] = XMVectorSet( -(ViewLeft + ViewRight) * ReciprocalWidth,
                          -(ViewTop + ViewBottom) * ReciprocalHeight,
                          fRange,
                          1.0f );

    vValues = _mm_and_ps(vValues,g_XMMaskZ);
    M.r[3] = vValues;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixPerspectiveOffCenterRH
(
    float ViewLeft,
    float ViewRight,
    float ViewBottom,
    float ViewTop,
    float NearZ,
    float FarZ
)
{
    (void)( (!!(!XMScalarNearEqual(ViewRight, ViewLeft, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewRight, ViewLeft, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2438)), 0) );
    (void)( (!!(!XMScalarNearEqual(ViewTop, ViewBottom, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewTop, ViewBottom, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2439)), 0) );
    (void)( (!!(!XMScalarNearEqual(FarZ, NearZ, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(FarZ, NearZ, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2440)), 0) );
# 2488 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMMATRIX M;
    float TwoNearZ = NearZ+NearZ;
    float ReciprocalWidth = 1.0f / (ViewRight - ViewLeft);
    float ReciprocalHeight = 1.0f / (ViewTop - ViewBottom);
    float fRange = FarZ / (NearZ-FarZ);

    XMVECTOR rMem = {
        TwoNearZ*ReciprocalWidth,
        TwoNearZ*ReciprocalHeight,
        fRange * NearZ,
        0
    };

    XMVECTOR vValues = rMem;
    XMVECTOR vTemp = _mm_setzero_ps();

    vTemp = _mm_move_ss(vTemp,vValues);

    M.r[0] = vTemp;

    vTemp = vValues;
    vTemp = _mm_and_ps(vTemp,g_XMMaskY);
    M.r[1] = vTemp;

    M.r[2] = XMVectorSet( (ViewLeft + ViewRight) * ReciprocalWidth,
                          (ViewTop + ViewBottom) * ReciprocalHeight,
                          fRange,
                          -1.0f );

    vValues = _mm_and_ps(vValues,g_XMMaskZ);
    M.r[3] = vValues;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixOrthographicLH
(
    float ViewWidth,
    float ViewHeight,
    float NearZ,
    float FarZ
)
{
    (void)( (!!(!XMScalarNearEqual(ViewWidth, 0.0f, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewWidth, 0.0f, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2533)), 0) );
    (void)( (!!(!XMScalarNearEqual(ViewHeight, 0.0f, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewHeight, 0.0f, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2534)), 0) );
    (void)( (!!(!XMScalarNearEqual(FarZ, NearZ, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(FarZ, NearZ, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2535)), 0) );
# 2574 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMMATRIX M;
    float fRange = 1.0f / (FarZ-NearZ);

    XMVECTOR rMem = {
        2.0f / ViewWidth,
        2.0f / ViewHeight,
        fRange,
        -fRange * NearZ
    };

    XMVECTOR vValues = rMem;
    XMVECTOR vTemp = _mm_setzero_ps();

    vTemp = _mm_move_ss(vTemp,vValues);

    M.r[0] = vTemp;

    vTemp = vValues;
    vTemp = _mm_and_ps(vTemp,g_XMMaskY);
    M.r[1] = vTemp;

    vTemp = _mm_setzero_ps();
    vValues = _mm_shuffle_ps(vValues,g_XMIdentityR3,(((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))));

    vTemp = _mm_shuffle_ps(vTemp,vValues,(((2) << 6) | ((0) << 4) | ((0) << 2) | ((0))));
    M.r[2] = vTemp;

    vTemp = _mm_shuffle_ps(vTemp,vValues,(((3) << 6) | ((1) << 4) | ((0) << 2) | ((0))));
    M.r[3] = vTemp;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixOrthographicRH
(
    float ViewWidth,
    float ViewHeight,
    float NearZ,
    float FarZ
)
{
    (void)( (!!(!XMScalarNearEqual(ViewWidth, 0.0f, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewWidth, 0.0f, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2617)), 0) );
    (void)( (!!(!XMScalarNearEqual(ViewHeight, 0.0f, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewHeight, 0.0f, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2618)), 0) );
    (void)( (!!(!XMScalarNearEqual(FarZ, NearZ, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(FarZ, NearZ, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2619)), 0) );
# 2658 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMMATRIX M;
    float fRange = 1.0f / (NearZ-FarZ);

    XMVECTOR rMem = {
        2.0f / ViewWidth,
        2.0f / ViewHeight,
        fRange,
        fRange * NearZ
    };

    XMVECTOR vValues = rMem;
    XMVECTOR vTemp = _mm_setzero_ps();

    vTemp = _mm_move_ss(vTemp,vValues);

    M.r[0] = vTemp;

    vTemp = vValues;
    vTemp = _mm_and_ps(vTemp,g_XMMaskY);
    M.r[1] = vTemp;

    vTemp = _mm_setzero_ps();
    vValues = _mm_shuffle_ps(vValues,g_XMIdentityR3,(((3) << 6) | ((2) << 4) | ((3) << 2) | ((2))));

    vTemp = _mm_shuffle_ps(vTemp,vValues,(((2) << 6) | ((0) << 4) | ((0) << 2) | ((0))));
    M.r[2] = vTemp;

    vTemp = _mm_shuffle_ps(vTemp,vValues,(((3) << 6) | ((1) << 4) | ((0) << 2) | ((0))));
    M.r[3] = vTemp;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixOrthographicOffCenterLH
(
    float ViewLeft,
    float ViewRight,
    float ViewBottom,
    float ViewTop,
    float NearZ,
    float FarZ
)
{
    (void)( (!!(!XMScalarNearEqual(ViewRight, ViewLeft, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewRight, ViewLeft, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2703)), 0) );
    (void)( (!!(!XMScalarNearEqual(ViewTop, ViewBottom, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewTop, ViewBottom, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2704)), 0) );
    (void)( (!!(!XMScalarNearEqual(FarZ, NearZ, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(FarZ, NearZ, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2705)), 0) );
# 2750 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMMATRIX M;
    float fReciprocalWidth = 1.0f / (ViewRight - ViewLeft);
    float fReciprocalHeight = 1.0f / (ViewTop - ViewBottom);
    float fRange = 1.0f / (FarZ-NearZ);

    XMVECTOR rMem = {
        fReciprocalWidth,
        fReciprocalHeight,
        fRange,
        1.0f
    };
    XMVECTOR rMem2 = {
        -(ViewLeft + ViewRight),
        -(ViewTop + ViewBottom),
        -NearZ,
        1.0f
    };

    XMVECTOR vValues = rMem;
    XMVECTOR vTemp = _mm_setzero_ps();

    vTemp = _mm_move_ss(vTemp,vValues);

    vTemp = _mm_add_ss(vTemp,vTemp);
    M.r[0] = vTemp;

    vTemp = vValues;
    vTemp = _mm_and_ps(vTemp,g_XMMaskY);
    vTemp = _mm_add_ps(vTemp,vTemp);
    M.r[1] = vTemp;

    vTemp = vValues;
    vTemp = _mm_and_ps(vTemp,g_XMMaskZ);
    M.r[2] = vTemp;

    vValues = _mm_mul_ps(vValues,rMem2);
    M.r[3] = vValues;
    return M;

}



inline XMMATRIX __vectorcall XMMatrixOrthographicOffCenterRH
(
    float ViewLeft,
    float ViewRight,
    float ViewBottom,
    float ViewTop,
    float NearZ,
    float FarZ
)
{
    (void)( (!!(!XMScalarNearEqual(ViewRight, ViewLeft, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewRight, ViewLeft, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2803)), 0) );
    (void)( (!!(!XMScalarNearEqual(ViewTop, ViewBottom, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(ViewTop, ViewBottom, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2804)), 0) );
    (void)( (!!(!XMScalarNearEqual(FarZ, NearZ, 0.00001f))) || (_wassert(L"!XMScalarNearEqual(FarZ, NearZ, 0.00001f)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2805)), 0) );
# 2850 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    XMMATRIX M;
    float fReciprocalWidth = 1.0f / (ViewRight - ViewLeft);
    float fReciprocalHeight = 1.0f / (ViewTop - ViewBottom);
    float fRange = 1.0f / (NearZ-FarZ);

    XMVECTOR rMem = {
        fReciprocalWidth,
        fReciprocalHeight,
        fRange,
        1.0f
    };
    XMVECTOR rMem2 = {
        -(ViewLeft + ViewRight),
        -(ViewTop + ViewBottom),
        NearZ,
        1.0f
    };

    XMVECTOR vValues = rMem;
    XMVECTOR vTemp = _mm_setzero_ps();

    vTemp = _mm_move_ss(vTemp,vValues);

    vTemp = _mm_add_ss(vTemp,vTemp);
    M.r[0] = vTemp;

    vTemp = vValues;
    vTemp = _mm_and_ps(vTemp,g_XMMaskY);
    vTemp = _mm_add_ps(vTemp,vTemp);
    M.r[1] = vTemp;

    vTemp = vValues;
    vTemp = _mm_and_ps(vTemp,g_XMMaskZ);
    M.r[2] = vTemp;

    vValues = _mm_mul_ps(vValues,rMem2);
    M.r[3] = vValues;
    return M;

}

#pragma prefast(pop)
# 2901 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
inline XMMATRIX::XMMATRIX
(
    float m00, float m01, float m02, float m03,
    float m10, float m11, float m12, float m13,
    float m20, float m21, float m22, float m23,
    float m30, float m31, float m32, float m33
)
{
    r[0] = XMVectorSet(m00, m01, m02, m03);
    r[1] = XMVectorSet(m10, m11, m12, m13);
    r[2] = XMVectorSet(m20, m21, m22, m23);
    r[3] = XMVectorSet(m30, m31, m32, m33);
}



inline XMMATRIX::XMMATRIX
(
    const float* pArray
)
{
    (void)( (!!(pArray != nullptr)) || (_wassert(L"pArray != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(2922)), 0) );
    r[0] = XMLoadFloat4((const XMFLOAT4*)pArray);
    r[1] = XMLoadFloat4((const XMFLOAT4*)(pArray + 4));
    r[2] = XMLoadFloat4((const XMFLOAT4*)(pArray + 8));
    r[3] = XMLoadFloat4((const XMFLOAT4*)(pArray + 12));
}



inline XMMATRIX XMMATRIX::operator- () const
{
    XMMATRIX R;
    R.r[0] = XMVectorNegate( r[0] );
    R.r[1] = XMVectorNegate( r[1] );
    R.r[2] = XMVectorNegate( r[2] );
    R.r[3] = XMVectorNegate( r[3] );
    return R;
}



inline XMMATRIX& __vectorcall XMMATRIX::operator+= (FXMMATRIX M)
{
    r[0] = XMVectorAdd( r[0], M.r[0] );
    r[1] = XMVectorAdd( r[1], M.r[1] );
    r[2] = XMVectorAdd( r[2], M.r[2] );
    r[3] = XMVectorAdd( r[3], M.r[3] );
    return *this;
}



inline XMMATRIX& __vectorcall XMMATRIX::operator-= (FXMMATRIX M)
{
    r[0] = XMVectorSubtract( r[0], M.r[0] );
    r[1] = XMVectorSubtract( r[1], M.r[1] );
    r[2] = XMVectorSubtract( r[2], M.r[2] );
    r[3] = XMVectorSubtract( r[3], M.r[3] );
    return *this;
}



inline XMMATRIX& __vectorcall XMMATRIX::operator*=(FXMMATRIX M)
{
    *this = XMMatrixMultiply( *this, M );
    return *this;
}



inline XMMATRIX& XMMATRIX::operator*= (float S)
{
    r[0] = XMVectorScale( r[0], S );
    r[1] = XMVectorScale( r[1], S );
    r[2] = XMVectorScale( r[2], S );
    r[3] = XMVectorScale( r[3], S );
    return *this;
}



inline XMMATRIX& XMMATRIX::operator/= (float S)
{
# 3008 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    __m128 vS = _mm_set_ps1( S );
    r[0] = _mm_div_ps( r[0], vS );
    r[1] = _mm_div_ps( r[1], vS );
    r[2] = _mm_div_ps( r[2], vS );
    r[3] = _mm_div_ps( r[3], vS );
    return *this;

}



inline XMMATRIX __vectorcall XMMATRIX::operator+ (FXMMATRIX M) const
{
    XMMATRIX R;
    R.r[0] = XMVectorAdd( r[0], M.r[0] );
    R.r[1] = XMVectorAdd( r[1], M.r[1] );
    R.r[2] = XMVectorAdd( r[2], M.r[2] );
    R.r[3] = XMVectorAdd( r[3], M.r[3] );
    return R;
}



inline XMMATRIX __vectorcall XMMATRIX::operator- (FXMMATRIX M) const
{
    XMMATRIX R;
    R.r[0] = XMVectorSubtract( r[0], M.r[0] );
    R.r[1] = XMVectorSubtract( r[1], M.r[1] );
    R.r[2] = XMVectorSubtract( r[2], M.r[2] );
    R.r[3] = XMVectorSubtract( r[3], M.r[3] );
    return R;
}



inline XMMATRIX __vectorcall XMMATRIX::operator*(FXMMATRIX M) const
{
    return XMMatrixMultiply(*this, M);
}



inline XMMATRIX XMMATRIX::operator* (float S) const
{
    XMMATRIX R;
    R.r[0] = XMVectorScale( r[0], S );
    R.r[1] = XMVectorScale( r[1], S );
    R.r[2] = XMVectorScale( r[2], S );
    R.r[3] = XMVectorScale( r[3], S );
    return R;
}



inline XMMATRIX XMMATRIX::operator/ (float S) const
{
# 3088 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
    __m128 vS = _mm_set_ps1( S );
    XMMATRIX R;
    R.r[0] = _mm_div_ps( r[0], vS );
    R.r[1] = _mm_div_ps( r[1], vS );
    R.r[2] = _mm_div_ps( r[2], vS );
    R.r[3] = _mm_div_ps( r[3], vS );
    return R;

}



inline XMMATRIX __vectorcall operator*
(
    float S,
    FXMMATRIX M
)
{
    XMMATRIX R;
    R.r[0] = XMVectorScale( M.r[0], S );
    R.r[1] = XMVectorScale( M.r[1], S );
    R.r[2] = XMVectorScale( M.r[2], S );
    R.r[3] = XMVectorScale( M.r[3], S );
    return R;
}
# 3122 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
inline XMFLOAT3X3::XMFLOAT3X3
(
    float m00, float m01, float m02,
    float m10, float m11, float m12,
    float m20, float m21, float m22
)
{
    m[0][0] = m00;
    m[0][1] = m01;
    m[0][2] = m02;

    m[1][0] = m10;
    m[1][1] = m11;
    m[1][2] = m12;

    m[2][0] = m20;
    m[2][1] = m21;
    m[2][2] = m22;
}



inline XMFLOAT3X3::XMFLOAT3X3
(
    const float* pArray
)
{
    (void)( (!!(pArray != nullptr)) || (_wassert(L"pArray != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(3149)), 0) );
    for (size_t Row = 0; Row < 3; Row++)
    {
        for (size_t Column = 0; Column < 3; Column++)
        {
            m[Row][Column] = pArray[Row * 3 + Column];
        }
    }
}



inline XMFLOAT3X3& XMFLOAT3X3::operator=
(
    const XMFLOAT3X3& Float3x3
)
{
    _11 = Float3x3._11;
    _12 = Float3x3._12;
    _13 = Float3x3._13;
    _21 = Float3x3._21;
    _22 = Float3x3._22;
    _23 = Float3x3._23;
    _31 = Float3x3._31;
    _32 = Float3x3._32;
    _33 = Float3x3._33;

    return *this;
}
# 3187 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
inline XMFLOAT4X3::XMFLOAT4X3
(
    float m00, float m01, float m02,
    float m10, float m11, float m12,
    float m20, float m21, float m22,
    float m30, float m31, float m32
)
{
    m[0][0] = m00;
    m[0][1] = m01;
    m[0][2] = m02;

    m[1][0] = m10;
    m[1][1] = m11;
    m[1][2] = m12;

    m[2][0] = m20;
    m[2][1] = m21;
    m[2][2] = m22;

    m[3][0] = m30;
    m[3][1] = m31;
    m[3][2] = m32;
}



inline XMFLOAT4X3::XMFLOAT4X3
(
    const float* pArray
)
{
    (void)( (!!(pArray != nullptr)) || (_wassert(L"pArray != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(3219)), 0) );

    m[0][0] = pArray[0];
    m[0][1] = pArray[1];
    m[0][2] = pArray[2];

    m[1][0] = pArray[3];
    m[1][1] = pArray[4];
    m[1][2] = pArray[5];

    m[2][0] = pArray[6];
    m[2][1] = pArray[7];
    m[2][2] = pArray[8];

    m[3][0] = pArray[9];
    m[3][1] = pArray[10];
    m[3][2] = pArray[11];
}



inline XMFLOAT4X3& XMFLOAT4X3::operator=
(
    const XMFLOAT4X3& Float4x3
)
{
    XMVECTOR V1 = XMLoadFloat4((const XMFLOAT4*)&Float4x3._11);
    XMVECTOR V2 = XMLoadFloat4((const XMFLOAT4*)&Float4x3._22);
    XMVECTOR V3 = XMLoadFloat4((const XMFLOAT4*)&Float4x3._33);

    XMStoreFloat4((XMFLOAT4*)&_11, V1);
    XMStoreFloat4((XMFLOAT4*)&_22, V2);
    XMStoreFloat4((XMFLOAT4*)&_33, V3);

    return *this;
}



inline XMFLOAT4X3A& XMFLOAT4X3A::operator=
(
    const XMFLOAT4X3A& Float4x3
)
{
    XMVECTOR V1 = XMLoadFloat4A((const XMFLOAT4A*)&Float4x3._11);
    XMVECTOR V2 = XMLoadFloat4A((const XMFLOAT4A*)&Float4x3._22);
    XMVECTOR V3 = XMLoadFloat4A((const XMFLOAT4A*)&Float4x3._33);

    XMStoreFloat4A((XMFLOAT4A*)&_11, V1);
    XMStoreFloat4A((XMFLOAT4A*)&_22, V2);
    XMStoreFloat4A((XMFLOAT4A*)&_33, V3);

    return *this;
}
# 3282 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl"
inline XMFLOAT4X4::XMFLOAT4X4
(
    float m00, float m01, float m02, float m03,
    float m10, float m11, float m12, float m13,
    float m20, float m21, float m22, float m23,
    float m30, float m31, float m32, float m33
)
{
    m[0][0] = m00;
    m[0][1] = m01;
    m[0][2] = m02;
    m[0][3] = m03;

    m[1][0] = m10;
    m[1][1] = m11;
    m[1][2] = m12;
    m[1][3] = m13;

    m[2][0] = m20;
    m[2][1] = m21;
    m[2][2] = m22;
    m[2][3] = m23;

    m[3][0] = m30;
    m[3][1] = m31;
    m[3][2] = m32;
    m[3][3] = m33;
}



inline XMFLOAT4X4::XMFLOAT4X4
(
    const float* pArray
)
{
    (void)( (!!(pArray != nullptr)) || (_wassert(L"pArray != nullptr", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMatrix.inl", (unsigned)(3318)), 0) );

    m[0][0] = pArray[0];
    m[0][1] = pArray[1];
    m[0][2] = pArray[2];
    m[0][3] = pArray[3];

    m[1][0] = pArray[4];
    m[1][1] = pArray[5];
    m[1][2] = pArray[6];
    m[1][3] = pArray[7];

    m[2][0] = pArray[8];
    m[2][1] = pArray[9];
    m[2][2] = pArray[10];
    m[2][3] = pArray[11];

    m[3][0] = pArray[12];
    m[3][1] = pArray[13];
    m[3][2] = pArray[14];
    m[3][3] = pArray[15];
}



inline XMFLOAT4X4& XMFLOAT4X4::operator=
(
    const XMFLOAT4X4& Float4x4
)
{
    XMVECTOR V1 = XMLoadFloat4((const XMFLOAT4*)&Float4x4._11);
    XMVECTOR V2 = XMLoadFloat4((const XMFLOAT4*)&Float4x4._21);
    XMVECTOR V3 = XMLoadFloat4((const XMFLOAT4*)&Float4x4._31);
    XMVECTOR V4 = XMLoadFloat4((const XMFLOAT4*)&Float4x4._41);

    XMStoreFloat4((XMFLOAT4*)&_11, V1);
    XMStoreFloat4((XMFLOAT4*)&_21, V2);
    XMStoreFloat4((XMFLOAT4*)&_31, V3);
    XMStoreFloat4((XMFLOAT4*)&_41, V4);

    return *this;
}



inline XMFLOAT4X4A& XMFLOAT4X4A::operator=
(
    const XMFLOAT4X4A& Float4x4
)
{
    XMVECTOR V1 = XMLoadFloat4A((const XMFLOAT4A*)&Float4x4._11);
    XMVECTOR V2 = XMLoadFloat4A((const XMFLOAT4A*)&Float4x4._21);
    XMVECTOR V3 = XMLoadFloat4A((const XMFLOAT4A*)&Float4x4._31);
    XMVECTOR V4 = XMLoadFloat4A((const XMFLOAT4A*)&Float4x4._41);

    XMStoreFloat4A((XMFLOAT4A*)&_11, V1);
    XMStoreFloat4A((XMFLOAT4A*)&_21, V2);
    XMStoreFloat4A((XMFLOAT4A*)&_31, V3);
    XMStoreFloat4A((XMFLOAT4A*)&_41, V4);

    return *this;
}
# 1885 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl" 1
# 28 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
inline bool __vectorcall XMQuaternionEqual
(
    FXMVECTOR Q1,
    FXMVECTOR Q2
)
{
    return XMVector4Equal(Q1, Q2);
}



inline bool __vectorcall XMQuaternionNotEqual
(
    FXMVECTOR Q1,
    FXMVECTOR Q2
)
{
    return XMVector4NotEqual(Q1, Q2);
}



inline bool __vectorcall XMQuaternionIsNaN
(
    FXMVECTOR Q
)
{
    return XMVector4IsNaN(Q);
}



inline bool __vectorcall XMQuaternionIsInfinite
(
    FXMVECTOR Q
)
{
    return XMVector4IsInfinite(Q);
}



inline bool __vectorcall XMQuaternionIsIdentity
(
    FXMVECTOR Q
)
{
    return XMVector4Equal(Q, g_XMIdentityR3.v);
}







inline XMVECTOR __vectorcall XMQuaternionDot
(
    FXMVECTOR Q1,
    FXMVECTOR Q2
)
{
    return XMVector4Dot(Q1, Q2);
}



inline XMVECTOR __vectorcall XMQuaternionMultiply
(
    FXMVECTOR Q1,
    FXMVECTOR Q2
)
{
# 146 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
    static const XMVECTORF32 ControlWZYX = { 1.0f,-1.0f, 1.0f,-1.0f};
    static const XMVECTORF32 ControlZWXY = { 1.0f, 1.0f,-1.0f,-1.0f};
    static const XMVECTORF32 ControlYXWZ = {-1.0f, 1.0f, 1.0f,-1.0f};

    XMVECTOR Q2X = Q2;
    XMVECTOR Q2Y = Q2;
    XMVECTOR Q2Z = Q2;
    XMVECTOR vResult = Q2;

    vResult = _mm_shuffle_ps( vResult, vResult, (((3) << 6) | ((3) << 4) | ((3) << 2) | ((3))) );
    Q2X = _mm_shuffle_ps( Q2X, Q2X, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );
    Q2Y = _mm_shuffle_ps( Q2Y, Q2Y, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    Q2Z = _mm_shuffle_ps( Q2Z, Q2Z, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );

    vResult = _mm_mul_ps(vResult,Q1);
    XMVECTOR Q1Shuffle = Q1;

    Q1Shuffle = _mm_shuffle_ps( Q1Shuffle, Q1Shuffle, (((0) << 6) | ((1) << 4) | ((2) << 2) | ((3))) );

    Q2X = _mm_mul_ps(Q2X,Q1Shuffle);
    Q1Shuffle = _mm_shuffle_ps( Q1Shuffle, Q1Shuffle, (((2) << 6) | ((3) << 4) | ((0) << 2) | ((1))) );

    Q2X = _mm_mul_ps(Q2X,ControlWZYX);

    Q2Y = _mm_mul_ps(Q2Y,Q1Shuffle);
    Q1Shuffle = _mm_shuffle_ps( Q1Shuffle, Q1Shuffle, (((0) << 6) | ((1) << 4) | ((2) << 2) | ((3))) );

    Q2Y = _mm_mul_ps(Q2Y,ControlZWXY);

    Q2Z = _mm_mul_ps(Q2Z,Q1Shuffle);
    vResult = _mm_add_ps(vResult,Q2X);

    Q2Z = _mm_mul_ps(Q2Z,ControlYXWZ);
    Q2Y = _mm_add_ps(Q2Y,Q2Z);
    vResult = _mm_add_ps(vResult,Q2Y);
    return vResult;

}



inline XMVECTOR __vectorcall XMQuaternionLengthSq
(
    FXMVECTOR Q
)
{
    return XMVector4LengthSq(Q);
}



inline XMVECTOR __vectorcall XMQuaternionReciprocalLength
(
    FXMVECTOR Q
)
{
    return XMVector4ReciprocalLength(Q);
}



inline XMVECTOR __vectorcall XMQuaternionLength
(
    FXMVECTOR Q
)
{
    return XMVector4Length(Q);
}



inline XMVECTOR __vectorcall XMQuaternionNormalizeEst
(
    FXMVECTOR Q
)
{
    return XMVector4NormalizeEst(Q);
}



inline XMVECTOR __vectorcall XMQuaternionNormalize
(
    FXMVECTOR Q
)
{
    return XMVector4Normalize(Q);
}



inline XMVECTOR __vectorcall XMQuaternionConjugate
(
    FXMVECTOR Q
)
{
# 254 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
    static const XMVECTORF32 NegativeOne3 = {-1.0f,-1.0f,-1.0f,1.0f};
    return _mm_mul_ps(Q,NegativeOne3);

}



inline XMVECTOR __vectorcall XMQuaternionInverse
(
    FXMVECTOR Q
)
{
    const XMVECTOR Zero = XMVectorZero();

    XMVECTOR L = XMVector4LengthSq(Q);
    XMVECTOR Conjugate = XMQuaternionConjugate(Q);

    XMVECTOR Control = XMVectorLessOrEqual(L, g_XMEpsilon.v);

    XMVECTOR Result = XMVectorDivide(Conjugate, L);

    Result = XMVectorSelect(Result, Zero, Control);

    return Result;
}



inline XMVECTOR __vectorcall XMQuaternionLn
(
    FXMVECTOR Q
)
{
    static const XMVECTORF32 OneMinusEpsilon = {1.0f - 0.00001f, 1.0f - 0.00001f, 1.0f - 0.00001f, 1.0f - 0.00001f};

    XMVECTOR QW = XMVectorSplatW(Q);
    XMVECTOR Q0 = XMVectorSelect(g_XMSelect1110.v, Q, g_XMSelect1110.v);

    XMVECTOR ControlW = XMVectorInBounds(QW, OneMinusEpsilon.v);

    XMVECTOR Theta = XMVectorACos(QW);
    XMVECTOR SinTheta = XMVectorSin(Theta);

    XMVECTOR S = XMVectorDivide(Theta,SinTheta);

    XMVECTOR Result = XMVectorMultiply(Q0, S);
    Result = XMVectorSelect(Q0, Result, ControlW);

    return Result;
}



inline XMVECTOR __vectorcall XMQuaternionExp
(
    FXMVECTOR Q
)
{
    XMVECTOR Theta = XMVector3Length(Q);

    XMVECTOR SinTheta, CosTheta;
    XMVectorSinCos(&SinTheta, &CosTheta, Theta);

    XMVECTOR S = XMVectorDivide(SinTheta, Theta);

    XMVECTOR Result = XMVectorMultiply(Q, S);

    const XMVECTOR Zero = XMVectorZero();
    XMVECTOR Control = XMVectorNearEqual(Theta, Zero, g_XMEpsilon.v);
    Result = XMVectorSelect(Result, Q, Control);

    Result = XMVectorSelect(CosTheta, Result, g_XMSelect1110.v);

    return Result;
}



inline XMVECTOR __vectorcall XMQuaternionSlerp
(
    FXMVECTOR Q0,
    FXMVECTOR Q1,
    float t
)
{
    XMVECTOR T = XMVectorReplicate(t);
    return XMQuaternionSlerpV(Q0, Q1, T);
}



inline XMVECTOR __vectorcall XMQuaternionSlerpV
(
    FXMVECTOR Q0,
    FXMVECTOR Q1,
    FXMVECTOR T
)
{
    (void)( (!!((XMVectorGetY(T) == XMVectorGetX(T)) && (XMVectorGetZ(T) == XMVectorGetX(T)) && (XMVectorGetW(T) == XMVectorGetX(T)))) || (_wassert(L"(XMVectorGetY(T) == XMVectorGetX(T)) && (XMVectorGetZ(T) == XMVectorGetX(T)) && (XMVectorGetW(T) == XMVectorGetX(T))", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(352)), 0) );
# 400 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
    static const XMVECTORF32 OneMinusEpsilon = {1.0f - 0.00001f, 1.0f - 0.00001f, 1.0f - 0.00001f, 1.0f - 0.00001f};
    static const XMVECTORU32 SignMask2 = {0x80000000,0x00000000,0x00000000,0x00000000};
    static const XMVECTORU32 MaskXY = {0xFFFFFFFF,0xFFFFFFFF,0x00000000,0x00000000};

    XMVECTOR CosOmega = XMQuaternionDot(Q0, Q1);

    const XMVECTOR Zero = XMVectorZero();
    XMVECTOR Control = XMVectorLess(CosOmega, Zero);
    XMVECTOR Sign = XMVectorSelect(g_XMOne, g_XMNegativeOne, Control);

    CosOmega = _mm_mul_ps(CosOmega, Sign);

    Control = XMVectorLess(CosOmega, OneMinusEpsilon);

    XMVECTOR SinOmega = _mm_mul_ps(CosOmega,CosOmega);
    SinOmega = _mm_sub_ps(g_XMOne,SinOmega);
    SinOmega = _mm_sqrt_ps(SinOmega);

    XMVECTOR Omega = XMVectorATan2(SinOmega, CosOmega);

    XMVECTOR V01 = _mm_shuffle_ps( T, T, (((2) << 6) | ((3) << 4) | ((0) << 2) | ((1))) );
    V01 = _mm_and_ps(V01,MaskXY);
    V01 = _mm_xor_ps(V01,SignMask2);
    V01 = _mm_add_ps(g_XMIdentityR0, V01);

    XMVECTOR S0 = _mm_mul_ps(V01, Omega);
    S0 = XMVectorSin(S0);
    S0 = _mm_div_ps(S0, SinOmega);

    S0 = XMVectorSelect(V01, S0, Control);

    XMVECTOR S1 = XMVectorSplatY(S0);
    S0 = XMVectorSplatX(S0);

    S1 = _mm_mul_ps(S1, Sign);
    XMVECTOR Result = _mm_mul_ps(Q0, S0);
    S1 = _mm_mul_ps(S1, Q1);
    Result = _mm_add_ps(Result,S1);
    return Result;

}



inline XMVECTOR __vectorcall XMQuaternionSquad
(
    FXMVECTOR Q0,
    FXMVECTOR Q1,
    FXMVECTOR Q2,
    GXMVECTOR Q3,
    float t
)
{
    XMVECTOR T = XMVectorReplicate(t);
    return XMQuaternionSquadV(Q0, Q1, Q2, Q3, T);
}



inline XMVECTOR __vectorcall XMQuaternionSquadV
(
    FXMVECTOR Q0,
    FXMVECTOR Q1,
    FXMVECTOR Q2,
    GXMVECTOR Q3,
    HXMVECTOR T
)
{
    (void)( (!!((XMVectorGetY(T) == XMVectorGetX(T)) && (XMVectorGetZ(T) == XMVectorGetX(T)) && (XMVectorGetW(T) == XMVectorGetX(T)))) || (_wassert(L"(XMVectorGetY(T) == XMVectorGetX(T)) && (XMVectorGetZ(T) == XMVectorGetX(T)) && (XMVectorGetW(T) == XMVectorGetX(T))", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(468)), 0) );

    XMVECTOR TP = T;
    const XMVECTOR Two = XMVectorSplatConstant(2, 0);

    XMVECTOR Q03 = XMQuaternionSlerpV(Q0, Q3, T);
    XMVECTOR Q12 = XMQuaternionSlerpV(Q1, Q2, T);

    TP = XMVectorNegativeMultiplySubtract(TP, TP, TP);
    TP = XMVectorMultiply(TP, Two);

    XMVECTOR Result = XMQuaternionSlerpV(Q03, Q12, TP);

    return Result;
}



inline void __vectorcall XMQuaternionSquadSetup
(
    XMVECTOR* pA,
    XMVECTOR* pB,
    XMVECTOR* pC,
    FXMVECTOR Q0,
    FXMVECTOR Q1,
    FXMVECTOR Q2,
    GXMVECTOR Q3
)
{
    (void)( (!!(pA)) || (_wassert(L"pA", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(497)), 0) );
    (void)( (!!(pB)) || (_wassert(L"pB", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(498)), 0) );
    (void)( (!!(pC)) || (_wassert(L"pC", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(499)), 0) );

    XMVECTOR LS12 = XMQuaternionLengthSq(XMVectorAdd(Q1, Q2));
    XMVECTOR LD12 = XMQuaternionLengthSq(XMVectorSubtract(Q1, Q2));
    XMVECTOR SQ2 = XMVectorNegate(Q2);

    XMVECTOR Control1 = XMVectorLess(LS12, LD12);
    SQ2 = XMVectorSelect(Q2, SQ2, Control1);

    XMVECTOR LS01 = XMQuaternionLengthSq(XMVectorAdd(Q0, Q1));
    XMVECTOR LD01 = XMQuaternionLengthSq(XMVectorSubtract(Q0, Q1));
    XMVECTOR SQ0 = XMVectorNegate(Q0);

    XMVECTOR LS23 = XMQuaternionLengthSq(XMVectorAdd(SQ2, Q3));
    XMVECTOR LD23 = XMQuaternionLengthSq(XMVectorSubtract(SQ2, Q3));
    XMVECTOR SQ3 = XMVectorNegate(Q3);

    XMVECTOR Control0 = XMVectorLess(LS01, LD01);
    XMVECTOR Control2 = XMVectorLess(LS23, LD23);

    SQ0 = XMVectorSelect(Q0, SQ0, Control0);
    SQ3 = XMVectorSelect(Q3, SQ3, Control2);

    XMVECTOR InvQ1 = XMQuaternionInverse(Q1);
    XMVECTOR InvQ2 = XMQuaternionInverse(SQ2);

    XMVECTOR LnQ0 = XMQuaternionLn(XMQuaternionMultiply(InvQ1, SQ0));
    XMVECTOR LnQ2 = XMQuaternionLn(XMQuaternionMultiply(InvQ1, SQ2));
    XMVECTOR LnQ1 = XMQuaternionLn(XMQuaternionMultiply(InvQ2, Q1));
    XMVECTOR LnQ3 = XMQuaternionLn(XMQuaternionMultiply(InvQ2, SQ3));

    const XMVECTOR NegativeOneQuarter = XMVectorSplatConstant(-1, 2);

    XMVECTOR ExpQ02 = XMVectorMultiply(XMVectorAdd(LnQ0, LnQ2), NegativeOneQuarter);
    XMVECTOR ExpQ13 = XMVectorMultiply(XMVectorAdd(LnQ1, LnQ3), NegativeOneQuarter);
    ExpQ02 = XMQuaternionExp(ExpQ02);
    ExpQ13 = XMQuaternionExp(ExpQ13);

    *pA = XMQuaternionMultiply(Q1, ExpQ02);
    *pB = XMQuaternionMultiply(SQ2, ExpQ13);
    *pC = SQ2;
}



inline XMVECTOR __vectorcall XMQuaternionBaryCentric
(
    FXMVECTOR Q0,
    FXMVECTOR Q1,
    FXMVECTOR Q2,
    float f,
    float g
)
{
    float s = f + g;

    XMVECTOR Result;
    if ((s < 0.00001f) && (s > -0.00001f))
    {
        Result = Q0;
    }
    else
    {
        XMVECTOR Q01 = XMQuaternionSlerp(Q0, Q1, s);
        XMVECTOR Q02 = XMQuaternionSlerp(Q0, Q2, s);

        Result = XMQuaternionSlerp(Q01, Q02, g / s);
    }

    return Result;
}



inline XMVECTOR __vectorcall XMQuaternionBaryCentricV
(
    FXMVECTOR Q0,
    FXMVECTOR Q1,
    FXMVECTOR Q2,
    GXMVECTOR F,
    HXMVECTOR G
)
{
    (void)( (!!((XMVectorGetY(F) == XMVectorGetX(F)) && (XMVectorGetZ(F) == XMVectorGetX(F)) && (XMVectorGetW(F) == XMVectorGetX(F)))) || (_wassert(L"(XMVectorGetY(F) == XMVectorGetX(F)) && (XMVectorGetZ(F) == XMVectorGetX(F)) && (XMVectorGetW(F) == XMVectorGetX(F))", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(582)), 0) );
    (void)( (!!((XMVectorGetY(G) == XMVectorGetX(G)) && (XMVectorGetZ(G) == XMVectorGetX(G)) && (XMVectorGetW(G) == XMVectorGetX(G)))) || (_wassert(L"(XMVectorGetY(G) == XMVectorGetX(G)) && (XMVectorGetZ(G) == XMVectorGetX(G)) && (XMVectorGetW(G) == XMVectorGetX(G))", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(583)), 0) );

    const XMVECTOR Epsilon = XMVectorSplatConstant(1, 16);

    XMVECTOR S = XMVectorAdd(F, G);

    XMVECTOR Result;
    if (XMVector4InBounds(S, Epsilon))
    {
        Result = Q0;
    }
    else
    {
        XMVECTOR Q01 = XMQuaternionSlerpV(Q0, Q1, S);
        XMVECTOR Q02 = XMQuaternionSlerpV(Q0, Q2, S);
        XMVECTOR GS = XMVectorReciprocal(S);
        GS = XMVectorMultiply(G, GS);

        Result = XMQuaternionSlerpV(Q01, Q02, GS);
    }

    return Result;
}







inline XMVECTOR __vectorcall XMQuaternionIdentity()
{
    return g_XMIdentityR3.v;
}



inline XMVECTOR __vectorcall XMQuaternionRotationRollPitchYaw
(
    float Pitch,
    float Yaw,
    float Roll
)
{
    XMVECTOR Angles = XMVectorSet(Pitch, Yaw, Roll, 0.0f);
    XMVECTOR Q = XMQuaternionRotationRollPitchYawFromVector(Angles);
    return Q;
}



inline XMVECTOR __vectorcall XMQuaternionRotationRollPitchYawFromVector
(
    FXMVECTOR Angles
)
{
    static const XMVECTORF32 Sign = {1.0f, -1.0f, -1.0f, 1.0f};

    XMVECTOR HalfAngles = XMVectorMultiply(Angles, g_XMOneHalf.v);

    XMVECTOR SinAngles, CosAngles;
    XMVectorSinCos(&SinAngles, &CosAngles, HalfAngles);

    XMVECTOR P0 = XMVectorPermute<XM_PERMUTE_0X, XM_PERMUTE_1X, XM_PERMUTE_1X, XM_PERMUTE_1X>(SinAngles, CosAngles);
    XMVECTOR Y0 = XMVectorPermute<XM_PERMUTE_1Y, XM_PERMUTE_0Y, XM_PERMUTE_1Y, XM_PERMUTE_1Y>(SinAngles, CosAngles);
    XMVECTOR R0 = XMVectorPermute<XM_PERMUTE_1Z, XM_PERMUTE_1Z, XM_PERMUTE_0Z, XM_PERMUTE_1Z>(SinAngles, CosAngles);
    XMVECTOR P1 = XMVectorPermute<XM_PERMUTE_0X, XM_PERMUTE_1X, XM_PERMUTE_1X, XM_PERMUTE_1X>(CosAngles, SinAngles);
    XMVECTOR Y1 = XMVectorPermute<XM_PERMUTE_1Y, XM_PERMUTE_0Y, XM_PERMUTE_1Y, XM_PERMUTE_1Y>(CosAngles, SinAngles);
    XMVECTOR R1 = XMVectorPermute<XM_PERMUTE_1Z, XM_PERMUTE_1Z, XM_PERMUTE_0Z, XM_PERMUTE_1Z>(CosAngles, SinAngles);

    XMVECTOR Q1 = XMVectorMultiply(P1, Sign.v);
    XMVECTOR Q0 = XMVectorMultiply(P0, Y0);
    Q1 = XMVectorMultiply(Q1, Y1);
    Q0 = XMVectorMultiply(Q0, R0);
    XMVECTOR Q = XMVectorMultiplyAdd(Q1, R1, Q0);

    return Q;
}



inline XMVECTOR __vectorcall XMQuaternionRotationNormal
(
    FXMVECTOR NormalAxis,
    float Angle
)
{
# 680 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
    XMVECTOR N = _mm_and_ps(NormalAxis,g_XMMask3);
    N = _mm_or_ps(N,g_XMIdentityR3);
    XMVECTOR Scale = _mm_set_ps1(0.5f * Angle);
    XMVECTOR vSine;
    XMVECTOR vCosine;
    XMVectorSinCos(&vSine,&vCosine,Scale);
    Scale = _mm_and_ps(vSine,g_XMMask3);
    vCosine = _mm_and_ps(vCosine,g_XMMaskW);
    Scale = _mm_or_ps(Scale,vCosine);
    N = _mm_mul_ps(N,Scale);
    return N;

}



inline XMVECTOR __vectorcall XMQuaternionRotationAxis
(
    FXMVECTOR Axis,
    float Angle
)
{
    (void)( (!!(!XMVector3Equal(Axis, XMVectorZero()))) || (_wassert(L"!XMVector3Equal(Axis, XMVectorZero())", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(702)), 0) );
    (void)( (!!(!XMVector3IsInfinite(Axis))) || (_wassert(L"!XMVector3IsInfinite(Axis)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(703)), 0) );

    XMVECTOR Normal = XMVector3Normalize(Axis);
    XMVECTOR Q = XMQuaternionRotationNormal(Normal, Angle);
    return Q;
}



inline XMVECTOR __vectorcall XMQuaternionRotationMatrix
(
    FXMMATRIX M
)
{
# 857 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
    static const XMVECTORF32 XMPMMP = {+1.0f, -1.0f, -1.0f, +1.0f};
    static const XMVECTORF32 XMMPMP = {-1.0f, +1.0f, -1.0f, +1.0f};
    static const XMVECTORF32 XMMMPP = {-1.0f, -1.0f, +1.0f, +1.0f};

    XMVECTOR r0 = M.r[0];
    XMVECTOR r1 = M.r[1];
    XMVECTOR r2 = M.r[2];


    XMVECTOR r00 = _mm_shuffle_ps( r0, r0, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    XMVECTOR r11 = _mm_shuffle_ps( r1, r1, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    XMVECTOR r22 = _mm_shuffle_ps( r2, r2, (((2) << 6) | ((2) << 4) | ((2) << 2) | ((2))) );



    XMVECTOR r11mr00 = _mm_sub_ps(r11, r00);
    XMVECTOR x2gey2 = _mm_cmple_ps(r11mr00, g_XMZero);



    XMVECTOR r11pr00 = _mm_add_ps(r11, r00);
    XMVECTOR z2gew2 = _mm_cmple_ps(r11pr00, g_XMZero);


    XMVECTOR x2py2gez2pw2 = _mm_cmple_ps(r22, g_XMZero);


    XMVECTOR t0 = _mm_mul_ps(XMPMMP, r00);


    XMVECTOR t1 = _mm_mul_ps(XMMPMP, r11);


    XMVECTOR t2 = _mm_mul_ps(XMMMPP, r22);


    XMVECTOR x2y2z2w2 = _mm_add_ps(t0, t1);
    x2y2z2w2 = _mm_add_ps(t2, x2y2z2w2);
    x2y2z2w2 = _mm_add_ps(x2y2z2w2, g_XMOne);


    t0 = _mm_shuffle_ps(r0, r1, (((1) << 6) | ((2) << 4) | ((2) << 2) | ((1))));

    t1 = _mm_shuffle_ps(r1, r2, (((1) << 6) | ((0) << 4) | ((0) << 2) | ((0))));

    t1 = _mm_shuffle_ps( t1, t1, (((1) << 6) | ((3) << 4) | ((2) << 2) | ((0))) );

    XMVECTOR xyxzyz = _mm_add_ps(t0, t1);


    t0 = _mm_shuffle_ps(r2, r1, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((1))));

    t1 = _mm_shuffle_ps(r1, r0, (((1) << 6) | ((2) << 4) | ((2) << 2) | ((2))));

    t1 = _mm_shuffle_ps( t1, t1, (((1) << 6) | ((3) << 4) | ((2) << 2) | ((0))) );

    XMVECTOR xwywzw = _mm_sub_ps(t0, t1);
    xwywzw = _mm_mul_ps(XMMPMP, xwywzw);


    t0 = _mm_shuffle_ps(x2y2z2w2, xyxzyz, (((0) << 6) | ((0) << 4) | ((1) << 2) | ((0))));

    t1 = _mm_shuffle_ps(x2y2z2w2, xwywzw, (((0) << 6) | ((2) << 4) | ((3) << 2) | ((2))));

    t2 = _mm_shuffle_ps(xyxzyz, xwywzw, (((1) << 6) | ((0) << 4) | ((2) << 2) | ((1))));


    XMVECTOR tensor0 = _mm_shuffle_ps(t0, t2, (((2) << 6) | ((0) << 4) | ((2) << 2) | ((0))));

    XMVECTOR tensor1 = _mm_shuffle_ps(t0, t2, (((3) << 6) | ((1) << 4) | ((1) << 2) | ((2))));

    XMVECTOR tensor2 = _mm_shuffle_ps(t2, t1, (((2) << 6) | ((0) << 4) | ((1) << 2) | ((0))));

    XMVECTOR tensor3 = _mm_shuffle_ps(t2, t1, (((1) << 6) | ((2) << 4) | ((3) << 2) | ((2))));



    t0 = _mm_and_ps(x2gey2, tensor0);
    t1 = _mm_andnot_ps(x2gey2, tensor1);
    t0 = _mm_or_ps(t0, t1);
    t1 = _mm_and_ps(z2gew2, tensor2);
    t2 = _mm_andnot_ps(z2gew2, tensor3);
    t1 = _mm_or_ps(t1, t2);
    t0 = _mm_and_ps(x2py2gez2pw2, t0);
    t1 = _mm_andnot_ps(x2py2gez2pw2, t1);
    t2 = _mm_or_ps(t0, t1);




    t0 = XMVector4Length(t2);
    return _mm_div_ps(t2, t0);

}







inline void __vectorcall XMQuaternionToAxisAngle
(
    XMVECTOR* pAxis,
    float* pAngle,
    FXMVECTOR Q
)
{
    (void)( (!!(pAxis)) || (_wassert(L"pAxis", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(967)), 0) );
    (void)( (!!(pAngle)) || (_wassert(L"pAngle", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(968)), 0) );

    *pAxis = Q;

    *pAngle = 2.0f * XMScalarACos(XMVectorGetW(Q));
}
# 987 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
inline bool __vectorcall XMPlaneEqual
(
    FXMVECTOR P1,
    FXMVECTOR P2
)
{
    return XMVector4Equal(P1, P2);
}



inline bool __vectorcall XMPlaneNearEqual
(
    FXMVECTOR P1,
    FXMVECTOR P2,
    FXMVECTOR Epsilon
)
{
    XMVECTOR NP1 = XMPlaneNormalize(P1);
    XMVECTOR NP2 = XMPlaneNormalize(P2);
    return XMVector4NearEqual(NP1, NP2, Epsilon);
}



inline bool __vectorcall XMPlaneNotEqual
(
    FXMVECTOR P1,
    FXMVECTOR P2
)
{
    return XMVector4NotEqual(P1, P2);
}



inline bool __vectorcall XMPlaneIsNaN
(
    FXMVECTOR P
)
{
    return XMVector4IsNaN(P);
}



inline bool __vectorcall XMPlaneIsInfinite
(
    FXMVECTOR P
)
{
    return XMVector4IsInfinite(P);
}







inline XMVECTOR __vectorcall XMPlaneDot
(
    FXMVECTOR P,
    FXMVECTOR V
)
{
    return XMVector4Dot(P, V);
}



inline XMVECTOR __vectorcall XMPlaneDotCoord
(
    FXMVECTOR P,
    FXMVECTOR V
)
{


    XMVECTOR V3 = XMVectorSelect(g_XMOne.v, V, g_XMSelect1110.v);
    XMVECTOR Result = XMVector4Dot(P, V3);
    return Result;
}



inline XMVECTOR __vectorcall XMPlaneDotNormal
(
    FXMVECTOR P,
    FXMVECTOR V
)
{
    return XMVector3Dot(P, V);
}





inline XMVECTOR __vectorcall XMPlaneNormalizeEst
(
    FXMVECTOR P
)
{







    XMVECTOR vDot = _mm_mul_ps(P,P);

    XMVECTOR vTemp = _mm_shuffle_ps( vDot, vDot, (((2) << 6) | ((1) << 4) | ((2) << 2) | ((1))) );

    vDot = _mm_add_ss(vDot,vTemp);

    vTemp = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );

    vDot = _mm_add_ss(vDot,vTemp);

    vDot = _mm_shuffle_ps( vDot, vDot, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    vDot = _mm_rsqrt_ps(vDot);

    vDot = _mm_mul_ps(vDot,P);
    return vDot;

}



inline XMVECTOR __vectorcall XMPlaneNormalize
(
    FXMVECTOR P
)
{
# 1144 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
    XMVECTOR vLengthSq = _mm_mul_ps(P,P);
    XMVECTOR vTemp = _mm_shuffle_ps( vLengthSq, vLengthSq, (((2) << 6) | ((1) << 4) | ((2) << 2) | ((1))) );
    vLengthSq = _mm_add_ss(vLengthSq,vTemp);
    vTemp = _mm_shuffle_ps( vTemp, vTemp, (((1) << 6) | ((1) << 4) | ((1) << 2) | ((1))) );
    vLengthSq = _mm_add_ss(vLengthSq,vTemp);
    vLengthSq = _mm_shuffle_ps( vLengthSq, vLengthSq, (((0) << 6) | ((0) << 4) | ((0) << 2) | ((0))) );

    XMVECTOR vResult = _mm_sqrt_ps(vLengthSq);


    vLengthSq = _mm_cmpneq_ps(vLengthSq,g_XMInfinity);

    vResult = _mm_div_ps(P,vResult);

    vResult = _mm_and_ps(vResult,vLengthSq);
    return vResult;

}



inline XMVECTOR __vectorcall XMPlaneIntersectLine
(
    FXMVECTOR P,
    FXMVECTOR LinePoint1,
    FXMVECTOR LinePoint2
)
{
    XMVECTOR V1 = XMVector3Dot(P, LinePoint1);
    XMVECTOR V2 = XMVector3Dot(P, LinePoint2);
    XMVECTOR D = XMVectorSubtract(V1, V2);

    XMVECTOR VT = XMPlaneDotCoord(P, LinePoint1);
    VT = XMVectorDivide(VT, D);

    XMVECTOR Point = XMVectorSubtract(LinePoint2, LinePoint1);
    Point = XMVectorMultiplyAdd(Point, VT, LinePoint1);

    const XMVECTOR Zero = XMVectorZero();
    XMVECTOR Control = XMVectorNearEqual(D, Zero, g_XMEpsilon.v);

    return XMVectorSelect(Point, g_XMQNaN.v, Control);
}



inline void __vectorcall XMPlaneIntersectPlane
(
    XMVECTOR* pLinePoint1,
    XMVECTOR* pLinePoint2,
    FXMVECTOR P1,
    FXMVECTOR P2
)
{
    (void)( (!!(pLinePoint1)) || (_wassert(L"pLinePoint1", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(1198)), 0) );
    (void)( (!!(pLinePoint2)) || (_wassert(L"pLinePoint2", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(1199)), 0) );

    XMVECTOR V1 = XMVector3Cross(P2, P1);

    XMVECTOR LengthSq = XMVector3LengthSq(V1);

    XMVECTOR V2 = XMVector3Cross(P2, V1);

    XMVECTOR P1W = XMVectorSplatW(P1);
    XMVECTOR Point = XMVectorMultiply(V2, P1W);

    XMVECTOR V3 = XMVector3Cross(V1, P1);

    XMVECTOR P2W = XMVectorSplatW(P2);
    Point = XMVectorMultiplyAdd(V3, P2W, Point);

    XMVECTOR LinePoint1 = XMVectorDivide(Point, LengthSq);

    XMVECTOR LinePoint2 = XMVectorAdd(LinePoint1, V1);

    XMVECTOR Control = XMVectorLessOrEqual(LengthSq, g_XMEpsilon.v);
    *pLinePoint1 = XMVectorSelect(LinePoint1,g_XMQNaN.v, Control);
    *pLinePoint2 = XMVectorSelect(LinePoint2,g_XMQNaN.v, Control);
}



inline XMVECTOR __vectorcall XMPlaneTransform
(
    FXMVECTOR P,
    FXMMATRIX M
)
{
    XMVECTOR W = XMVectorSplatW(P);
    XMVECTOR Z = XMVectorSplatZ(P);
    XMVECTOR Y = XMVectorSplatY(P);
    XMVECTOR X = XMVectorSplatX(P);

    XMVECTOR Result = XMVectorMultiply(W, M.r[3]);
    Result = XMVectorMultiplyAdd(Z, M.r[2], Result);
    Result = XMVectorMultiplyAdd(Y, M.r[1], Result);
    Result = XMVectorMultiplyAdd(X, M.r[0], Result);
    return Result;
}



inline XMFLOAT4* __vectorcall XMPlaneTransformStream
(
    XMFLOAT4* pOutputStream,
    size_t OutputStride,
    const XMFLOAT4* pInputStream,
    size_t InputStride,
    size_t PlaneCount,
    FXMMATRIX M
)
{
    return XMVector4TransformStream(pOutputStream,
                                    OutputStride,
                                    pInputStream,
                                    InputStride,
                                    PlaneCount,
                                    M);
}







inline XMVECTOR __vectorcall XMPlaneFromPointNormal
(
    FXMVECTOR Point,
    FXMVECTOR Normal
)
{
    XMVECTOR W = XMVector3Dot(Point, Normal);
    W = XMVectorNegate(W);
    return XMVectorSelect(W, Normal, g_XMSelect1110.v);
}



inline XMVECTOR __vectorcall XMPlaneFromPoints
(
    FXMVECTOR Point1,
    FXMVECTOR Point2,
    FXMVECTOR Point3
)
{
    XMVECTOR V21 = XMVectorSubtract(Point1, Point2);
    XMVECTOR V31 = XMVectorSubtract(Point1, Point3);

    XMVECTOR N = XMVector3Cross(V21, V31);
    N = XMVector3Normalize(N);

    XMVECTOR D = XMPlaneDotNormal(N, Point1);
    D = XMVectorNegate(D);

    XMVECTOR Result = XMVectorSelect(D, N, g_XMSelect1110.v);

    return Result;
}
# 1316 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
inline bool __vectorcall XMColorEqual
(
    FXMVECTOR C1,
    FXMVECTOR C2
)
{
    return XMVector4Equal(C1, C2);
}



inline bool __vectorcall XMColorNotEqual
(
    FXMVECTOR C1,
    FXMVECTOR C2
)
{
    return XMVector4NotEqual(C1, C2);
}



inline bool __vectorcall XMColorGreater
(
    FXMVECTOR C1,
    FXMVECTOR C2
)
{
    return XMVector4Greater(C1, C2);
}



inline bool __vectorcall XMColorGreaterOrEqual
(
    FXMVECTOR C1,
    FXMVECTOR C2
)
{
    return XMVector4GreaterOrEqual(C1, C2);
}



inline bool __vectorcall XMColorLess
(
    FXMVECTOR C1,
    FXMVECTOR C2
)
{
    return XMVector4Less(C1, C2);
}



inline bool __vectorcall XMColorLessOrEqual
(
    FXMVECTOR C1,
    FXMVECTOR C2
)
{
    return XMVector4LessOrEqual(C1, C2);
}



inline bool __vectorcall XMColorIsNaN
(
    FXMVECTOR C
)
{
    return XMVector4IsNaN(C);
}



inline bool __vectorcall XMColorIsInfinite
(
    FXMVECTOR C
)
{
    return XMVector4IsInfinite(C);
}







inline XMVECTOR __vectorcall XMColorNegative
(
    FXMVECTOR vColor
)
{
# 1424 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
    XMVECTOR vTemp = _mm_xor_ps(vColor,g_XMNegate3);

    return _mm_add_ps(vTemp,g_XMOne3);

}



inline XMVECTOR __vectorcall XMColorModulate
(
    FXMVECTOR C1,
    FXMVECTOR C2
)
{
    return XMVectorMultiply(C1, C2);
}



inline XMVECTOR __vectorcall XMColorAdjustSaturation
(
    FXMVECTOR vColor,
    float fSaturation
)
{
# 1469 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
    static const XMVECTORF32 gvLuminance = {0.2125f, 0.7154f, 0.0721f, 0.0f};
    XMVECTOR vLuminance = XMVector3Dot( vColor, gvLuminance );

    XMVECTOR vSaturation = _mm_set_ps1(fSaturation);

    XMVECTOR vResult = _mm_sub_ps(vColor,vLuminance);
    vResult = _mm_mul_ps(vResult,vSaturation);
    vResult = _mm_add_ps(vResult,vLuminance);

    vLuminance = _mm_shuffle_ps(vResult,vColor,(((3) << 6) | ((2) << 4) | ((2) << 2) | ((2))));
    vResult = _mm_shuffle_ps(vResult,vLuminance,(((3) << 6) | ((0) << 4) | ((1) << 2) | ((0))));
    return vResult;

}



inline XMVECTOR __vectorcall XMColorAdjustContrast
(
    FXMVECTOR vColor,
    float fContrast
)
{
# 1507 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
    XMVECTOR vScale = _mm_set_ps1(fContrast);
    XMVECTOR vResult = _mm_sub_ps(vColor,g_XMOneHalf);
    vResult = _mm_mul_ps(vResult,vScale);
    vResult = _mm_add_ps(vResult,g_XMOneHalf);

    vScale = _mm_shuffle_ps(vResult,vColor,(((3) << 6) | ((2) << 4) | ((2) << 2) | ((2))));
    vResult = _mm_shuffle_ps(vResult,vScale,(((3) << 6) | ((0) << 4) | ((1) << 2) | ((0))));
    return vResult;

}



inline XMVECTOR __vectorcall XMColorRGBToHSL( FXMVECTOR rgb )
{
    XMVECTOR r = XMVectorSplatX( rgb );
    XMVECTOR g = XMVectorSplatY( rgb );
    XMVECTOR b = XMVectorSplatZ( rgb );

    XMVECTOR min = XMVectorMin( r, XMVectorMin( g, b ) );
    XMVECTOR max = XMVectorMax( r, XMVectorMax( g, b ) );

    XMVECTOR l = XMVectorMultiply( XMVectorAdd( min, max ), g_XMOneHalf );

    XMVECTOR d = XMVectorSubtract( max, min );

    XMVECTOR la = XMVectorSelect( rgb, l, g_XMSelect1110 );

    if ( XMVector3Less( d, g_XMEpsilon ) )
    {

        return XMVectorSelect( la, g_XMZero, g_XMSelect1100 );
    }
    else
    {
        XMVECTOR s, h;

        XMVECTOR d2 = XMVectorAdd( min, max );

        if ( XMVector3Greater( l, g_XMOneHalf ) )
        {

            s = XMVectorDivide( d, XMVectorSubtract( g_XMTwo, d2 ) );
        }
        else
        {

            s = XMVectorDivide( d, d2 );
        }

        if ( XMVector3Equal( r, max ) )
        {

            h = XMVectorDivide( XMVectorSubtract( g, b ), d );
        }
        else if ( XMVector3Equal( g, max ) )
        {

            h = XMVectorDivide( XMVectorSubtract( b, r ), d );
            h = XMVectorAdd( h, g_XMTwo );
        }
        else
        {

            h = XMVectorDivide( XMVectorSubtract( r, g ), d );
            h = XMVectorAdd( h, g_XMFour );
        }

        h = XMVectorDivide( h, g_XMSix );

        if ( XMVector3Less( h, g_XMZero ) )
            h = XMVectorAdd( h, g_XMOne );

        XMVECTOR lha = XMVectorSelect( la, h, g_XMSelect1100 );
        return XMVectorSelect( s, lha, g_XMSelect1011 );
    }
}



namespace Internal
{

inline XMVECTOR __vectorcall XMColorHue2Clr( FXMVECTOR p, FXMVECTOR q, FXMVECTOR h )
{
    static const XMVECTORF32 oneSixth = { 1.0f/6.0f, 1.0f/6.0f, 1.0f/6.0f, 1.0f/6.0f };
    static const XMVECTORF32 twoThirds = { 2.0f/3.0f, 2.0f/3.0f, 2.0f/3.0f, 2.0f/3.0f };

    XMVECTOR t = h;

    if ( XMVector3Less( t, g_XMZero ) )
        t = XMVectorAdd( t, g_XMOne );

    if ( XMVector3Greater( t, g_XMOne ) )
        t = XMVectorSubtract( t, g_XMOne );

    if ( XMVector3Less( t, oneSixth ) )
    {

        XMVECTOR t1 = XMVectorSubtract( q, p );
        XMVECTOR t2 = XMVectorMultiply( g_XMSix, t );
        return XMVectorMultiplyAdd( t1, t2, p );
    }

    if ( XMVector3Less( t, g_XMOneHalf ) )
        return q;

    if ( XMVector3Less( t, twoThirds ) )
    {

        XMVECTOR t1 = XMVectorSubtract( q, p );
        XMVECTOR t2 = XMVectorMultiply( g_XMSix, XMVectorSubtract( twoThirds, t ) );
        return XMVectorMultiplyAdd( t1, t2, p );
    }

    return p;
}

};

inline XMVECTOR __vectorcall XMColorHSLToRGB( FXMVECTOR hsl )
{
    static const XMVECTORF32 oneThird = { 1.0f/3.0f, 1.0f/3.0f, 1.0f/3.0f, 1.0f/3.0f };

    XMVECTOR s = XMVectorSplatY( hsl );
    XMVECTOR l = XMVectorSplatZ( hsl );

    if ( XMVector3NearEqual( s, g_XMZero, g_XMEpsilon ) )
    {

        return XMVectorSelect( hsl, l, g_XMSelect1110 );
    }
    else
    {
        XMVECTOR h = XMVectorSplatX( hsl );

        XMVECTOR q;
        if ( XMVector3Less( l, g_XMOneHalf ) )
        {
            q = XMVectorMultiply( l, XMVectorAdd ( g_XMOne, s ) );
        }
        else
        {
            q = XMVectorSubtract( XMVectorAdd( l, s ), XMVectorMultiply( l, s ) );
        }

        XMVECTOR p = XMVectorSubtract( XMVectorMultiply( g_XMTwo, l ), q );

        XMVECTOR r = DirectX::Internal::XMColorHue2Clr( p, q, XMVectorAdd( h, oneThird ) );
        XMVECTOR g = DirectX::Internal::XMColorHue2Clr( p, q, h );
        XMVECTOR b = DirectX::Internal::XMColorHue2Clr( p, q, XMVectorSubtract( h, oneThird ) );

        XMVECTOR rg = XMVectorSelect( g, r, g_XMSelect1000 );
        XMVECTOR ba = XMVectorSelect( hsl, b, g_XMSelect1110 );

        return XMVectorSelect( ba, rg, g_XMSelect1100 );
    }
}



inline XMVECTOR __vectorcall XMColorRGBToHSV( FXMVECTOR rgb )
{
    XMVECTOR r = XMVectorSplatX( rgb );
    XMVECTOR g = XMVectorSplatY( rgb );
    XMVECTOR b = XMVectorSplatZ( rgb );

    XMVECTOR min = XMVectorMin( r, XMVectorMin( g, b ) );
    XMVECTOR v = XMVectorMax( r, XMVectorMax( g, b ) );

    XMVECTOR d = XMVectorSubtract( v, min );

    XMVECTOR s = ( XMVector3NearEqual( v, g_XMZero, g_XMEpsilon ) ) ? g_XMZero : XMVectorDivide( d, v );

    if ( XMVector3Less( d, g_XMEpsilon ) )
    {

        XMVECTOR hv = XMVectorSelect( v, g_XMZero, g_XMSelect1000 );
        XMVECTOR hva = XMVectorSelect( rgb, hv, g_XMSelect1110 );
        return XMVectorSelect( s, hva, g_XMSelect1011 );
    }
    else
    {
        XMVECTOR h;

        if ( XMVector3Equal( r, v ) )
        {

            h = XMVectorDivide( XMVectorSubtract( g, b ), d );

            if ( XMVector3Less( g, b ) )
                h = XMVectorAdd( h, g_XMSix );
        }
        else if ( XMVector3Equal( g, v ) )
        {

            h = XMVectorDivide( XMVectorSubtract( b, r ), d );
            h = XMVectorAdd( h, g_XMTwo );
        }
        else
        {

            h = XMVectorDivide( XMVectorSubtract( r, g ), d );
            h = XMVectorAdd( h, g_XMFour );
        }

        h = XMVectorDivide( h, g_XMSix );

        XMVECTOR hv = XMVectorSelect( v, h, g_XMSelect1000 );
        XMVECTOR hva = XMVectorSelect( rgb, hv, g_XMSelect1110 );
        return XMVectorSelect( s, hva, g_XMSelect1011 );
    }
}



inline XMVECTOR __vectorcall XMColorHSVToRGB( FXMVECTOR hsv )
{
    XMVECTOR h = XMVectorSplatX( hsv );
    XMVECTOR s = XMVectorSplatY( hsv );
    XMVECTOR v = XMVectorSplatZ( hsv );

    XMVECTOR h6 = XMVectorMultiply( h, g_XMSix );

    XMVECTOR i = XMVectorFloor( h6 );
    XMVECTOR f = XMVectorSubtract( h6, i );


    XMVECTOR p = XMVectorMultiply( v, XMVectorSubtract( g_XMOne, s ) );


    XMVECTOR q = XMVectorMultiply( v, XMVectorSubtract( g_XMOne, XMVectorMultiply( f, s ) ) );


    XMVECTOR t = XMVectorMultiply( v, XMVectorSubtract( g_XMOne, XMVectorMultiply( XMVectorSubtract( g_XMOne, f ), s ) ) );

    int ii = static_cast<int>( XMVectorGetX( XMVectorMod( i, g_XMSix ) ) );

    XMVECTOR _rgb;

    switch (ii)
    {
    case 0:
        {
            XMVECTOR vt = XMVectorSelect( t, v, g_XMSelect1000 );
            _rgb = XMVectorSelect( p, vt, g_XMSelect1100 );
        }
        break;
    case 1:
        {
            XMVECTOR qv = XMVectorSelect( v, q, g_XMSelect1000 );
            _rgb = XMVectorSelect( p, qv, g_XMSelect1100 );
        }
        break;
    case 2:
        {
            XMVECTOR pv = XMVectorSelect( v, p, g_XMSelect1000 );
            _rgb = XMVectorSelect( t, pv, g_XMSelect1100 );
        }
        break;
    case 3:
        {
            XMVECTOR pq = XMVectorSelect( q, p, g_XMSelect1000 );
            _rgb = XMVectorSelect( v, pq, g_XMSelect1100 );
        }
        break;
    case 4:
        {
            XMVECTOR tp = XMVectorSelect( p, t, g_XMSelect1000 );
            _rgb = XMVectorSelect( v, tp, g_XMSelect1100 );
        }
        break;
    default:
        {
            XMVECTOR vp = XMVectorSelect( p, v, g_XMSelect1000 );
            _rgb = XMVectorSelect( q, vp, g_XMSelect1100 );
        }
        break;
    }

    return XMVectorSelect( hsv, _rgb, g_XMSelect1110 );
}



inline XMVECTOR __vectorcall XMColorRGBToYUV( FXMVECTOR rgb )
{
    static const XMVECTORF32 Scale0 = { 0.299f, -0.147f, 0.615f, 0.0f };
    static const XMVECTORF32 Scale1 = { 0.587f, -0.289f, -0.515f, 0.0f };
    static const XMVECTORF32 Scale2 = { 0.114f, 0.436f, -0.100f, 0.0f };

    XMMATRIX M( Scale0, Scale1, Scale2, g_XMZero );
    XMVECTOR clr = XMVector3Transform( rgb, M );

    return XMVectorSelect( rgb, clr, g_XMSelect1110 );
}



inline XMVECTOR __vectorcall XMColorYUVToRGB( FXMVECTOR yuv )
{
    static const XMVECTORF32 Scale1 = { 0.0f, -0.395f, 2.032f, 0.0f };
    static const XMVECTORF32 Scale2 = { 1.140f, -0.581f, 0.0f, 0.0f };

    XMMATRIX M( g_XMOne, Scale1, Scale2, g_XMZero );
    XMVECTOR clr = XMVector3Transform( yuv, M );

    return XMVectorSelect( yuv, clr, g_XMSelect1110 );
}



inline XMVECTOR __vectorcall XMColorRGBToYUV_HD( FXMVECTOR rgb )
{
    static const XMVECTORF32 Scale0 = { 0.2126f, -0.0997f, 0.6150f, 0.0f };
    static const XMVECTORF32 Scale1 = { 0.7152f, -0.3354f, -0.5586f, 0.0f };
    static const XMVECTORF32 Scale2 = { 0.0722f, 0.4351f, -0.0564f, 0.0f };

    XMMATRIX M( Scale0, Scale1, Scale2, g_XMZero );
    XMVECTOR clr = XMVector3Transform( rgb, M );

    return XMVectorSelect( rgb, clr, g_XMSelect1110 );
}



inline XMVECTOR __vectorcall XMColorYUVToRGB_HD( FXMVECTOR yuv )
{
    static const XMVECTORF32 Scale1 = { 0.0f, -0.2153f, 2.1324f, 0.0f };
    static const XMVECTORF32 Scale2 = { 1.2803f, -0.3806f, 0.0f, 0.0f };

    XMMATRIX M( g_XMOne, Scale1, Scale2, g_XMZero );
    XMVECTOR clr = XMVector3Transform( yuv, M );

    return XMVectorSelect( yuv, clr, g_XMSelect1110 );
}



inline XMVECTOR __vectorcall XMColorRGBToXYZ( FXMVECTOR rgb )
{
    static const XMVECTORF32 Scale0 = { 0.4887180f, 0.1762044f, 0.0000000f, 0.0f };
    static const XMVECTORF32 Scale1 = { 0.3106803f, 0.8129847f, 0.0102048f, 0.0f };
    static const XMVECTORF32 Scale2 = { 0.2006017f, 0.0108109f, 0.9897952f, 0.0f };
    static const XMVECTORF32 Scale = { 1.f/0.17697f, 1.f/0.17697f, 1.f/0.17697f, 0.0f };

    XMMATRIX M( Scale0, Scale1, Scale2, g_XMZero );
    XMVECTOR clr = XMVectorMultiply( XMVector3Transform( rgb, M ), Scale );

    return XMVectorSelect( rgb, clr, g_XMSelect1110 );
}

inline XMVECTOR __vectorcall XMColorXYZToRGB( FXMVECTOR xyz )
{
    static const XMVECTORF32 Scale0 = { 2.3706743f, -0.5138850f, 0.0052982f, 0.0f };
    static const XMVECTORF32 Scale1 = { -0.9000405f, 1.4253036f, -0.0146949f, 0.0f };
    static const XMVECTORF32 Scale2 = { -0.4706338f, 0.0885814f, 1.0093968f, 0.0f };
    static const XMVECTORF32 Scale = { 0.17697f, 0.17697f, 0.17697f, 0.0f };

    XMMATRIX M( Scale0, Scale1, Scale2, g_XMZero );
    XMVECTOR clr = XMVector3Transform( XMVectorMultiply( xyz, Scale ), M );

    return XMVectorSelect( xyz, clr, g_XMSelect1110 );
}



inline XMVECTOR __vectorcall XMColorXYZToSRGB( FXMVECTOR xyz )
{
    static const XMVECTORF32 Scale0 = { 3.2406f, -0.9689f, 0.0557f, 0.0f };
    static const XMVECTORF32 Scale1 = { -1.5372f, 1.8758f, -0.2040f, 0.0f };
    static const XMVECTORF32 Scale2 = { -0.4986f, 0.0415f, 1.0570f, 0.0f };
    static const XMVECTORF32 Cutoff = { 0.0031308f, 0.0031308f, 0.0031308f, 0.0f };
    static const XMVECTORF32 Exp = { 1.0f/2.4f, 1.0f/2.4f, 1.0f/2.4f, 1.0f };

    XMMATRIX M( Scale0, Scale1, Scale2, g_XMZero );
    XMVECTOR lclr = XMVector3Transform( xyz, M );

    XMVECTOR sel = XMVectorGreater( lclr, Cutoff );


    XMVECTOR smallC = XMVectorMultiply( lclr, g_XMsrgbScale );


    XMVECTOR largeC = XMVectorSubtract( XMVectorMultiply( g_XMsrgbA1, XMVectorPow( lclr, Exp ) ), g_XMsrgbA );

    XMVECTOR clr = XMVectorSelect( smallC, largeC, sel );

    return XMVectorSelect( xyz, clr, g_XMSelect1110 );
}



inline XMVECTOR __vectorcall XMColorSRGBToXYZ( FXMVECTOR srgb )
{
    static const XMVECTORF32 Scale0 = { 0.4124f, 0.2126f, 0.0193f, 0.0f };
    static const XMVECTORF32 Scale1 = { 0.3576f, 0.7152f, 0.1192f, 0.0f };
    static const XMVECTORF32 Scale2 = { 0.1805f, 0.0722f, 0.9505f, 0.0f };
    static const XMVECTORF32 Cutoff = { 0.04045f, 0.04045f, 0.04045f, 0.0f };
    static const XMVECTORF32 Exp = { 2.4f, 2.4f, 2.4f, 1.0f };

    XMVECTOR sel = XMVectorGreater( srgb, Cutoff );


    XMVECTOR smallC = XMVectorDivide( srgb, g_XMsrgbScale );


    XMVECTOR largeC = XMVectorPow( XMVectorDivide( XMVectorAdd( srgb, g_XMsrgbA ), g_XMsrgbA1 ), Exp );

    XMVECTOR lclr = XMVectorSelect( smallC, largeC, sel );

    XMMATRIX M( Scale0, Scale1, Scale2, g_XMZero );
    XMVECTOR clr = XMVector3Transform( lclr, M );

    return XMVectorSelect( srgb, clr, g_XMSelect1110 );
}



inline XMVECTOR __vectorcall XMColorRGBToSRGB( FXMVECTOR rgb )
{
    static const XMVECTORF32 Cutoff = { 0.0031308f, 0.0031308f, 0.0031308f, 1.f };
    static const XMVECTORF32 Linear = { 12.92f, 12.92f, 12.92f, 1.f };
    static const XMVECTORF32 Scale = { 1.055f, 1.055f, 1.055f, 1.f };
    static const XMVECTORF32 Bias = { 0.055f, 0.055f, 0.055f, 0.f };
    static const XMVECTORF32 InvGamma = { 1.0f/2.4f, 1.0f/2.4f, 1.0f/2.4f, 1.f };

    XMVECTOR V = XMVectorSaturate(rgb);
    XMVECTOR V0 = XMVectorMultiply( V, Linear );
    XMVECTOR V1 = Scale * XMVectorPow( V, InvGamma ) - Bias;
    XMVECTOR select = XMVectorLess( V, Cutoff );
    V = XMVectorSelect( V1, V0, select );
    return XMVectorSelect( rgb, V, g_XMSelect1110 );
}



inline XMVECTOR __vectorcall XMColorSRGBToRGB( FXMVECTOR srgb )
{
    static const XMVECTORF32 Cutoff = { 0.04045f, 0.04045f, 0.04045f, 1.f };
    static const XMVECTORF32 ILinear = { 1.f/12.92f, 1.f/12.92f, 1.f/12.92f, 1.f };
    static const XMVECTORF32 Scale = { 1.f/1.055f, 1.f/1.055f, 1.f/1.055f, 1.f };
    static const XMVECTORF32 Bias = { 0.055f, 0.055f, 0.055f, 0.f };
    static const XMVECTORF32 Gamma = { 2.4f, 2.4f, 2.4f, 1.f };

    XMVECTOR V = XMVectorSaturate(srgb);
    XMVECTOR V0 = XMVectorMultiply( V, ILinear );
    XMVECTOR V1 = XMVectorPow( (V + Bias) * Scale, Gamma );
    XMVECTOR select = XMVectorGreater( V, Cutoff );
    V = XMVectorSelect( V0, V1, select );
    return XMVectorSelect( srgb, V, g_XMSelect1110 );
}
# 1968 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
inline bool XMVerifyCPUSupport()
{



    return true;
# 1992 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
}



inline XMVECTOR __vectorcall XMFresnelTerm
(
    FXMVECTOR CosIncidentAngle,
    FXMVECTOR RefractionIndex
)
{
    (void)( (!!(!XMVector4IsInfinite(CosIncidentAngle))) || (_wassert(L"!XMVector4IsInfinite(CosIncidentAngle)", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(2002)), 0) );
# 2039 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl"
    XMVECTOR G = _mm_mul_ps(RefractionIndex,RefractionIndex);
    XMVECTOR vTemp = _mm_mul_ps(CosIncidentAngle,CosIncidentAngle);
    G = _mm_sub_ps(G,g_XMOne);
    vTemp = _mm_add_ps(vTemp,G);


    G = _mm_setzero_ps();
    G = _mm_sub_ps(G,vTemp);
    G = _mm_max_ps(G,vTemp);

    G = _mm_sqrt_ps(G);


    XMVECTOR GAddC = _mm_add_ps(G,CosIncidentAngle);
    XMVECTOR GSubC = _mm_sub_ps(G,CosIncidentAngle);

    XMVECTOR vResult = _mm_mul_ps(GSubC,GSubC);
    vTemp = _mm_mul_ps(GAddC,GAddC);
    vResult = _mm_mul_ps(vResult,g_XMOneHalf);
    vResult = _mm_div_ps(vResult,vTemp);

    GAddC = _mm_mul_ps(GAddC,CosIncidentAngle);
    GSubC = _mm_mul_ps(GSubC,CosIncidentAngle);
    GAddC = _mm_sub_ps(GAddC,g_XMOne);
    GSubC = _mm_add_ps(GSubC,g_XMOne);
    GAddC = _mm_mul_ps(GAddC,GAddC);
    GSubC = _mm_mul_ps(GSubC,GSubC);
    GAddC = _mm_div_ps(GAddC,GSubC);
    GAddC = _mm_add_ps(GAddC,g_XMOne);

    vResult = _mm_mul_ps(vResult,GAddC);

    vResult = _mm_max_ps(vResult,g_XMZero);
    vResult = _mm_min_ps(vResult,g_XMOne);
    return vResult;

}



inline bool XMScalarNearEqual
(
    float S1,
    float S2,
    float Epsilon
)
{
    float Delta = S1 - S2;
    return (fabsf(Delta) <= Epsilon);
}



inline float XMScalarModAngle
(
    float Angle
)
{




    Angle = Angle + XM_PI;

    float fTemp = fabsf(Angle);
    fTemp = fTemp - (XM_2PI * (float)((int32_t)(fTemp/XM_2PI)));

    fTemp = fTemp - XM_PI;

    if (Angle<0.0f) {
        fTemp = -fTemp;
    }
    return fTemp;
}



inline float XMScalarSin
(
    float Value
)
{

    float quotient = XM_1DIV2PI*Value;
    if (Value >= 0.0f)
    {
        quotient = (float)((int)(quotient + 0.5f));
    }
    else
    {
        quotient = (float)((int)(quotient - 0.5f));
    }
    float y = Value - XM_2PI*quotient;


    if (y > XM_PIDIV2)
    {
        y = XM_PI - y;
    }
    else if (y < -XM_PIDIV2)
    {
        y = -XM_PI - y;
    }


    float y2 = y * y;
    return ( ( ( ( (-2.3889859e-08f * y2 + 2.7525562e-06f) * y2 - 0.00019840874f ) * y2 + 0.0083333310f ) * y2 - 0.16666667f ) * y2 + 1.0f ) * y;
}



inline float XMScalarSinEst
(
    float Value
)
{

    float quotient = XM_1DIV2PI*Value;
    if (Value >= 0.0f)
    {
        quotient = (float)((int)(quotient + 0.5f));
    }
    else
    {
        quotient = (float)((int)(quotient - 0.5f));
    }
    float y = Value - XM_2PI*quotient;


    if (y > XM_PIDIV2)
    {
        y = XM_PI - y;
    }
    else if (y < -XM_PIDIV2)
    {
        y = -XM_PI - y;
    }


    float y2 = y * y;
    return ( ( ( -0.00018524670f * y2 + 0.0083139502f ) * y2 - 0.16665852f ) * y2 + 1.0f ) * y;
}



inline float XMScalarCos
(
    float Value
)
{

    float quotient = XM_1DIV2PI*Value;
    if (Value >= 0.0f)
    {
        quotient = (float)((int)(quotient + 0.5f));
    }
    else
    {
        quotient = (float)((int)(quotient - 0.5f));
    }
    float y = Value - XM_2PI*quotient;


    float sign;
    if (y > XM_PIDIV2)
    {
        y = XM_PI - y;
        sign = -1.0f;
    }
    else if (y < -XM_PIDIV2)
    {
        y = -XM_PI - y;
        sign = -1.0f;
    }
    else
    {
        sign = +1.0f;
    }


    float y2 = y*y;
    float p = ( ( ( ( -2.6051615e-07f * y2 + 2.4760495e-05f ) * y2 - 0.0013888378f ) * y2 + 0.041666638f ) * y2 - 0.5f ) * y2 + 1.0f;
    return sign*p;
}



inline float XMScalarCosEst
(
    float Value
)
{

    float quotient = XM_1DIV2PI*Value;
    if (Value >= 0.0f)
    {
        quotient = (float)((int)(quotient + 0.5f));
    }
    else
    {
        quotient = (float)((int)(quotient - 0.5f));
    }
    float y = Value - XM_2PI*quotient;


    float sign;
    if (y > XM_PIDIV2)
    {
        y = XM_PI - y;
        sign = -1.0f;
    }
    else if (y < -XM_PIDIV2)
    {
        y = -XM_PI - y;
        sign = -1.0f;
    }
    else
    {
        sign = +1.0f;
    }


    float y2 = y * y;
    float p = ( ( -0.0012712436f * y2 + 0.041493919f ) * y2 - 0.49992746f ) * y2 + 1.0f;
    return sign*p;
}




inline void XMScalarSinCos
(
    float* pSin,
    float* pCos,
    float Value
)
{
    (void)( (!!(pSin)) || (_wassert(L"pSin", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(2276)), 0) );
    (void)( (!!(pCos)) || (_wassert(L"pCos", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(2277)), 0) );


    float quotient = XM_1DIV2PI*Value;
    if (Value >= 0.0f)
    {
        quotient = (float)((int)(quotient + 0.5f));
    }
    else
    {
        quotient = (float)((int)(quotient - 0.5f));
    }
    float y = Value - XM_2PI*quotient;


    float sign;
    if (y > XM_PIDIV2)
    {
        y = XM_PI - y;
        sign = -1.0f;
    }
    else if (y < -XM_PIDIV2)
    {
        y = -XM_PI - y;
        sign = -1.0f;
    }
    else
    {
        sign = +1.0f;
    }

    float y2 = y * y;


    *pSin = ( ( ( ( (-2.3889859e-08f * y2 + 2.7525562e-06f) * y2 - 0.00019840874f ) * y2 + 0.0083333310f ) * y2 - 0.16666667f ) * y2 + 1.0f ) * y;


    float p = ( ( ( ( -2.6051615e-07f * y2 + 2.4760495e-05f ) * y2 - 0.0013888378f ) * y2 + 0.041666638f ) * y2 - 0.5f ) * y2 + 1.0f;
    *pCos = sign*p;
}




inline void XMScalarSinCosEst
(
    float* pSin,
    float* pCos,
    float Value
)
{
    (void)( (!!(pSin)) || (_wassert(L"pSin", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(2328)), 0) );
    (void)( (!!(pCos)) || (_wassert(L"pCos", L"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um/DirectXMathMisc.inl", (unsigned)(2329)), 0) );


    float quotient = XM_1DIV2PI*Value;
    if (Value >= 0.0f)
    {
        quotient = (float)((int)(quotient + 0.5f));
    }
    else
    {
        quotient = (float)((int)(quotient - 0.5f));
    }
    float y = Value - XM_2PI*quotient;


    float sign;
    if (y > XM_PIDIV2)
    {
        y = XM_PI - y;
        sign = -1.0f;
    }
    else if (y < -XM_PIDIV2)
    {
        y = -XM_PI - y;
        sign = -1.0f;
    }
    else
    {
        sign = +1.0f;
    }

    float y2 = y * y;


    *pSin = ( ( ( -0.00018524670f * y2 + 0.0083139502f ) * y2 - 0.16665852f ) * y2 + 1.0f ) * y;


    float p = ( ( -0.0012712436f * y2 + 0.041493919f ) * y2 - 0.49992746f ) * y2 + 1.0f;
    *pCos = sign*p;
}



inline float XMScalarASin
(
    float Value
)
{

    bool nonnegative = (Value >= 0.0f);
    float x = fabsf(Value);
    float omx = 1.0f - x;
    if (omx < 0.0f)
    {
        omx = 0.0f;
    }
    float root = sqrtf(omx);


    float result = ( ( ( ( ( ( -0.0012624911f * x + 0.0066700901f ) * x - 0.0170881256f ) * x + 0.0308918810f ) * x - 0.0501743046f ) * x + 0.0889789874f ) * x - 0.2145988016f ) * x + 1.5707963050f;
    result *= root;


    return (nonnegative ? XM_PIDIV2 - result : result - XM_PIDIV2);
}



inline float XMScalarASinEst
(
    float Value
)
{

    bool nonnegative = (Value >= 0.0f);
    float x = fabsf(Value);
    float omx = 1.0f - x;
    if (omx < 0.0f)
    {
        omx = 0.0f;
    }
    float root = sqrtf(omx);


    float result = ((-0.0187293f*x+0.0742610f)*x-0.2121144f)*x+1.5707288f;
    result *= root;


    return (nonnegative ? XM_PIDIV2 - result : result - XM_PIDIV2);
}



inline float XMScalarACos
(
    float Value
)
{

    bool nonnegative = (Value >= 0.0f);
    float x = fabsf(Value);
    float omx = 1.0f - x;
    if (omx < 0.0f)
    {
        omx = 0.0f;
    }
    float root = sqrtf(omx);


    float result = ( ( ( ( ( ( -0.0012624911f * x + 0.0066700901f ) * x - 0.0170881256f ) * x + 0.0308918810f ) * x - 0.0501743046f ) * x + 0.0889789874f ) * x - 0.2145988016f ) * x + 1.5707963050f;
    result *= root;


    return (nonnegative ? result : XM_PI - result);
}



inline float XMScalarACosEst
(
    float Value
)
{

    bool nonnegative = (Value >= 0.0f);
    float x = fabsf(Value);
    float omx = 1.0f - x;
    if (omx < 0.0f)
    {
        omx = 0.0f;
    }
    float root = sqrtf(omx);


    float result = ( ( -0.0187293f * x + 0.0742610f ) * x - 0.2121144f ) * x + 1.5707288f;
    result *= root;


    return (nonnegative ? result : XM_PI - result);
}
# 1886 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\directxmath.h" 2


#pragma prefast(pop)
#pragma warning(pop)

};
# 8 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/DeviceClass.h" 2

using namespace DirectX;

#pragma comment(lib, "d3d11.lib")
#pragma comment(lib, "dxgi.lib")
#pragma comment(lib, "d3dcompiler.lib")



class CDeviceClass
{
public:
 CDeviceClass();
 ~CDeviceClass();

 bool InitDeviceAndSwapChain(HWND hWnd, HINSTANCE hInst, int width, int height);
 void Begin();

 void UpdateViewPort(int w, int h);

 ID3D11Device* GetDevice() { return dev; }
 ID3D11DeviceContext* GetDevCon() { return devcon; }
 IDXGISwapChain* GetSwapChain() { return swapchain; }

 void SetBackBufferRenderTarget();

 void AlphaBlendingOn();
 void AlphaBlendingOff();

 void TurnZBufferOn();
 void TurnZBufferOff();

 void TurnCullingOn();
 void TurnCullingOff();
 void TurnCullingFront();

 void GetVideoCardInfo(char*, int&);
 void Release();
 void SetFullScreen();

 void ResolveSubRC(ID3D11Resource &srcRes, UINT srcSubRes);

 XMMATRIX GetProjectionMatrix() { return this->projectionMatrix; }
 XMMATRIX GetOrthoMatrix() { return this->orthoMatrix; }
 XMMATRIX projectionMatrix, orthoMatrix;
 HWND _mainWindow;

private:
 HWND mainWindow;

 ID3D11Resource *dstbbResource;
 HINSTANCE _hInst;

 IDXGISwapChain *swapchain;
 ID3D11Device *dev;
 ID3D11DeviceContext *devcon;
 ID3D11RenderTargetView *backbuffer;
 ID3D11Texture2D *pBackBuffer;

 ID3D11RenderTargetView* m_renderTargetView;

 ID3D11Texture2D* m_depthStencilBuffer;

 ID3D11DepthStencilState* m_depthStencilState;
 ID3D11DepthStencilView* m_depthStencilView;
 ID3D11DepthStencilState* m_depthDisabledStencilState;

 ID3D11RasterizerState* m_rasterState;
 ID3D11RasterizerState* m_rasterStateNoCulling;
 ID3D11RasterizerState* m_rasterStateCullFront;


 ID3D11BlendState* m_alphaEnableBlendingState;
 ID3D11BlendState* m_alphaDisableBlendingState;

 IDXGIFactory* factory;
 IDXGIAdapter* adapter;
 IDXGIOutput* adapterOutput;
 DXGI_MODE_DESC* displayModeList;
 DXGI_ADAPTER_DESC adapterDesc;
 D3D11_VIEWPORT viewport;


private:


 int sampleCount = 1;
 int sampleQuality = 0;
 int m_videoCardMemory;
 char m_videoCardDescription[128];
 bool enableAA_ = false;
 bool Initialized = false;

 static void OutputErrorMessageD(ID3D10Blob * errorMessage, HWND hWnd, WCHAR * shaderFilename);

public:
 bool fullscreen = false;
 bool vSyncEnabled = true;
 std::string GetGPU();

 ID3D11Texture2D *GetBackBufferTexture() { return pBackBuffer; }
 void SetAntiAliasing(int samplecount);

 ID3D11DepthStencilView* GetDepthStencilView() { return m_depthStencilView; }
 void ResetViewPort();

 static ID3D10Blob *CompileShader(WCHAR* fileName, ShaderCompilation sc, LPCSTR entrypoint);

};
# 6 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/TerrainShader.h" 2

# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
#pragma warning(disable: 4127)

extern __declspec(dllimport) FILE *__cdecl _Fiopen(
 const char *,
 ios_base::openmode, int);
extern __declspec(dllimport) FILE *__cdecl _Fiopen(
 const wchar_t *,
 ios_base::openmode, int);


extern __declspec(dllimport) FILE *__cdecl _Fiopen(
 const unsigned short *,
 ios_base::openmode, int);



template<class _Elem> inline
 bool _Fgetc(_Elem& _Ch, FILE *_File)
 {
 return (fread(&_Ch, sizeof (_Elem), 1, _File) == 1);
 }

template<> inline bool _Fgetc(char& _Byte, FILE *_File)
 {
 int _Meta;
 if ((_Meta = fgetc(_File)) == (-1))
  return (false);
 else
  {
  _Byte = (char)_Meta;
  return (true);
  }
 }

template<> inline bool _Fgetc(wchar_t& _Wchar, FILE *_File)
 {
 wint_t _Meta;
 if ((_Meta = :: fgetwc(_File)) == ((wint_t)(0xFFFF)))
  return (false);
 else
  {
  _Wchar = (wchar_t)_Meta;
  return (true);
  }
 }


template<> inline bool _Fgetc(unsigned short& _Wchar, FILE *_File)
 {
 wint_t _Meta;
 if ((_Meta = :: fgetwc(_File)) == ((wint_t)(0xFFFF)))
  return (false);
 else
  {
  _Wchar = (unsigned short)_Meta;
  return (true);
  }
 }



template<class _Elem> inline
 bool _Fputc(_Elem _Ch, FILE *_File)
 {
 return (fwrite(&_Ch, 1, sizeof (_Elem), _File) == sizeof (_Elem));
 }

template<> inline bool _Fputc(char _Byte, FILE *_File)
 {
 return (fputc(_Byte, _File) != (-1));
 }

template<> inline bool _Fputc(wchar_t _Wchar, FILE *_File)
 {
 return (:: fputwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
 }


template<> inline bool _Fputc(unsigned short _Wchar, FILE *_File)
 {
 return (:: fputwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
 }



template<class _Elem> inline
 bool _Ungetc(const _Elem& _Ch, FILE *_File)
 {
 return (false);
 }

template<> inline bool _Ungetc(const char& _Byte, FILE *_File)
 {
 return (ungetc((unsigned char)_Byte, _File) != (-1));
 }

template<> inline bool _Ungetc(const signed char& _Byte, FILE *_File)
 {
 return (ungetc((unsigned char)_Byte, _File) != (-1));
 }

template<> inline bool _Ungetc(const unsigned char& _Byte, FILE *_File)
 {
 return (ungetc(_Byte, _File) != (-1));
 }

template<> inline bool _Ungetc(const wchar_t& _Wchar, FILE *_File)
 {
 return (:: ungetwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
 }


template<> inline bool _Ungetc(const unsigned short& _Wchar, FILE *_File)
 {
 return (:: ungetwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
 }



template<class _Elem,
 class _Traits>
 class basic_filebuf
  : public basic_streambuf<_Elem, _Traits>
 {
public:
 typedef basic_filebuf<_Elem, _Traits> _Myt;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef typename _Traits::state_type _Myst;
 typedef codecvt<_Elem, char, typename _Traits::state_type> _Cvt;

 basic_filebuf(FILE *_File = 0)
  : _Mysb()
  {
  _Init(_File, _Newfl);
  }

 virtual ~basic_filebuf() noexcept
  {
  if (_Myfile != 0)
   _Reset_back();
  if (_Closef)
   close();
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 basic_filebuf(_Uninitialized)
  : _Mysb(_Noinit)
  {
  }

 basic_filebuf(_Myt&& _Right)
  {
  _Init(_Right._Myfile, _Newfl);
  _Init((FILE *)0, _Closefl);
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   close();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {

   FILE *_Myfile_sav = _Myfile;
   const _Cvt *_Pcvt_sav = _Pcvt;
   typename _Traits::state_type _State_sav = _State;
   bool _Wrotesome_sav = _Wrotesome;
   bool _Closef_sav = _Closef;
   bool _Set_eback_sav = _Mysb::eback() == &_Mychar;
   bool _Set_eback_live = _Mysb::gptr() == &_Mychar;

   _Elem *_Pfirst0 = _Mysb::pbase();
   _Elem *_Pnext0 = _Mysb::pptr();
   _Elem *_Pend = _Mysb::epptr();
   _Elem *_Gfirst0 = _Mysb::eback();
   _Elem *_Gnext0 = _Mysb::gptr();
   _Elem *_Gend = _Mysb::egptr();


   _Init(_Right._Myfile, _Right._Myfile != 0 ? _Openfl : _Newfl);
   _Mysb::setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   if (_Right.eback() != &_Right._Mychar)
    _Mysb::setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   else if (_Right.gptr() != &_Right._Mychar)
    _Mysb::setg(&_Mychar, &_Mychar + 1, &_Mychar + 1);
   else
    _Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

   _Pcvt = _Right._Pcvt;
   _State = _Right._State;
   _Wrotesome = _Right._Wrotesome;
   _Closef = _Right._Closef;


   _Right._Init(_Myfile_sav, _Myfile_sav != 0 ? _Openfl : _Newfl);
   _Right.setp(_Pfirst0, _Pnext0, _Pend);
   if (!_Set_eback_sav)
    _Right.setg(_Gfirst0, _Gnext0, _Gend);
   else if (!_Set_eback_live)
    _Right.setg(&_Right._Mychar, &_Right._Mychar + 1,
     &_Right._Mychar + 1);
   else
    _Right.setg(&_Right._Mychar, &_Right._Mychar,
     &_Right._Mychar + 1);

   _Right._Pcvt = _Pcvt_sav;
   _Right._State = _State_sav;
   _Right._Wrotesome = _Wrotesome_sav;
   _Right._Closef = _Closef_sav;


   ::std:: swap(_Set_eback, _Right._Set_eback);
   ::std:: swap(_Set_egptr, _Right._Set_egptr);

   ::std:: swap(_Mychar, _Right._Mychar);
   ::std:: swap(_Mysb::_Plocale, _Right._Plocale);
   }
  }

 basic_filebuf(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 enum _Initfl
  {
  _Newfl, _Openfl, _Closefl};

 bool is_open() const
  {
  return (_Myfile != 0);
  }

 _Myt *open(const char *_Filename,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  FILE *_File;
  if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
   return (0);

  _Init(_File, _Openfl);
  _Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
  return (this);
  }

 _Myt *open(const string& _Str,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  return (open(_Str.c_str(), _Mode, _Prot));
  }


 _Myt *open(const char *_Filename, ios_base::open_mode _Mode)
  {
  return (open(_Filename, (ios_base::openmode)_Mode));
  }


 _Myt *open(const wchar_t *_Filename,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  FILE *_File;
  if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
   return (0);

  _Init(_File, _Openfl);
  _Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
  return (this);
  }

 _Myt *open(const wstring& _Str,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  return (open(_Str.c_str(), _Mode, _Prot));
  }


 _Myt *open(const wchar_t *_Filename,
  ios_base::open_mode _Mode)
  {
  return (open(_Filename, (ios_base::openmode)_Mode));
  }



 _Myt *open(const unsigned short *_Filename,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  FILE *_File;
  if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
   return (0);

  _Init(_File, _Openfl);
  _Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
  return (this);
  }


 _Myt *open(const unsigned short *_Filename,
  ios_base::open_mode _Mode)
  {
  return (open(_Filename, (ios_base::openmode)_Mode));
  }



 _Myt *close()
  {
  _Myt *_Ans = this;
  if (_Myfile == 0)
   _Ans = 0;
  else
   {
   if (!_Endwrite())
    _Ans = 0;
   if (fclose(_Myfile) != 0)
    _Ans = 0;
   }
  _Init(0, _Closefl);
  return (_Ans);
  }

 virtual void _Lock()
  {
  if (_Myfile)
   :: _lock_file(_Myfile);
  }

 virtual void _Unlock()
  {
  if (_Myfile)
   :: _unlock_file(_Myfile);
  }

protected:
 virtual int_type overflow(int_type _Meta =
  _Traits::eof())
  {
  if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   return (_Traits::not_eof(_Meta));
  else if (_Mysb::pptr() != 0
   && _Mysb::pptr() < _Mysb::epptr())
   {
   *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
   return (_Meta);
   }
  else if (_Myfile == 0)
   return (_Traits::eof());
  _Reset_back();
  if (_Pcvt == 0)
   return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
    ? _Meta : _Traits::eof());
  else
   {
   const int _STRING_INC = 8;
   const _Elem _Ch = _Traits::to_char_type(_Meta);
   const _Elem *_Src;
   char *_Dest;

   string _Str(_STRING_INC, '\0');
   for (; ; )
    switch (_Pcvt->out(_State,
     &_Ch, &_Ch + 1, _Src,
     &*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
    {
    case codecvt_base::partial:
    case codecvt_base::ok:
     {
     size_t _Count = _Dest - &*_Str.begin();
     if (0 < _Count && _Count !=
      fwrite(&*_Str.begin(), 1, _Count, _Myfile))
      return (_Traits::eof());

     _Wrotesome = true;
     if (_Src != &_Ch)
      return (_Meta);

     if (0 < _Count)
      ;
     else if (_Str.size() < 4 * _STRING_INC)
      _Str.append(_STRING_INC, '\0');
     else
      return (_Traits::eof());
     break;
     }

    case codecvt_base::noconv:
     return (_Fputc(_Ch, _Myfile) ? _Meta
      : _Traits::eof());

    default:
     return (_Traits::eof());
    }
   }
 }

 virtual int_type pbackfail(int_type _Meta =
  _Traits::eof())
  {
  if (_Mysb::gptr() != 0
   && _Mysb::eback() < _Mysb::gptr()
   && (_Traits::eq_int_type(_Traits::eof(), _Meta)
   || _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
    _Meta)))
   {
   _Mysb::_Gndec();
   return (_Traits::not_eof(_Meta));
   }
  else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))
   return (_Traits::eof());
  else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))
   return (_Meta);
  else if (_Mysb::gptr() != &_Mychar)
   {
   _Mychar = _Traits::to_char_type(_Meta);
   _Set_back();
   return (_Meta);
   }
  else
   return (_Traits::eof());
 }

 virtual int_type underflow()
  {
  int_type _Meta;
  if (_Mysb::gptr() != 0
   && _Mysb::gptr() < _Mysb::egptr())
   return (_Traits::to_int_type(*_Mysb::gptr()));
  else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
   return (_Meta);
  else
   {
   pbackfail(_Meta);
   return (_Meta);
   }
  }

 virtual int_type uflow()
  {
  if (_Mysb::gptr() != 0
   && _Mysb::gptr() < _Mysb::egptr())
   return (_Traits::to_int_type(
    *_Mysb::_Gninc()));
  else if (_Myfile == 0)
   return (_Traits::eof());
  _Reset_back();
  if (_Pcvt == 0)
   {
   _Elem _Ch = 0;
   return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)
    : _Traits::eof());
   }
  else
   {
   string _Str;

   for (; ; )
    {
    _Elem _Ch, *_Dest;
    const char *_Src;
    int _Nleft;
    int _Meta = fgetc(_Myfile);

    if (_Meta == (-1))
     return (_Traits::eof());

    _Str.append(1, (char)_Meta);
    switch (_Pcvt->in(_State,
     &*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
     &_Ch, &_Ch + 1, _Dest))
     {
    case codecvt_base::partial:
    case codecvt_base::ok:
     if (_Dest != &_Ch)
      {
      _Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);
      for (; 0 < _Nleft; )
       ungetc(_Src[--_Nleft], _Myfile);
      return (_Traits::to_int_type(_Ch));
      }
     else
      _Str.erase((size_t)0,
       (size_t)(_Src - &*_Str.begin()));
     break;

    case codecvt_base::noconv:
     if (_Str.size() < sizeof (_Elem))
      break;

     ::memcpy_s((&_Ch), (sizeof (_Elem)), (&*_Str.begin()), (sizeof (_Elem)));


     return (_Traits::to_int_type(_Ch));

    default:
     return (_Traits::eof());
     }
    }
   }
  }

 virtual pos_type seekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode =
   (ios_base::openmode)(ios_base::in | ios_base::out))
  {
  fpos_t _Fileposition;

  if (_Mysb::gptr() == &_Mychar
   && _Way == ios_base::cur
   && _Pcvt == 0)
   _Off -= (off_type)sizeof (_Elem);

  if (_Myfile == 0 || !_Endwrite()
   || ((_Off != 0 || _Way != ios_base::cur)
    && _fseeki64(_Myfile, _Off, _Way) != 0)
   || fgetpos(_Myfile, &_Fileposition) != 0)
   return (pos_type(_BADOFF));

  _Reset_back();
  return (pos_type(_State, _Fileposition));

  }

 virtual pos_type seekpos(pos_type _Pos,
  ios_base::openmode =
   (ios_base::openmode)(ios_base::in | ios_base::out))
  {
  fpos_t _Fileposition = _Pos.seekpos();
  off_type _Off = (off_type)_Pos - (off_type)((long long)(_Fileposition));

  if (_Myfile == 0 || !_Endwrite()
   || fsetpos(_Myfile, &_Fileposition) != 0
   || (_Off != 0 && _fseeki64(_Myfile, _Off, 1) != 0)
   || fgetpos(_Myfile, &_Fileposition) != 0)
   return (pos_type(_BADOFF));

  _State = _Pos.state();

  _Reset_back();
  return (pos_type(_State, _Fileposition));

  }

 virtual _Mysb * setbuf(_Elem *_Buffer, streamsize _Count)
  {
  if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,
   _Buffer == 0 && _Count == 0 ? 0x0004 : 0x0000,
   (size_t)_Count * sizeof (_Elem)) != 0)
   return (0);
  else
   {
   _Init(_Myfile, _Openfl);
   return (this);
   }
  }

 virtual int sync()
  {
  return (_Myfile == 0
   || _Traits::eq_int_type(_Traits::eof(), overflow())
   || 0 <= fflush(_Myfile) ? 0 : -1);
  }

 virtual void imbue(const locale& _Loc)
  {
  _Initcvt(&use_facet< _Cvt >(_Loc));
  }

 void _Init(FILE *_File, _Initfl _Which)
  {
                          static _Myst _Stinit;

  _Closef = _Which == _Openfl;
  _Wrotesome = false;

  _Mysb::_Init();






#pragma warning(push)
#pragma warning(disable: 6240)
 if (_File != 0 && sizeof (_Elem) == 1)
#pragma warning(pop)

 {
   _Elem **_Pb = 0;
   _Elem **_Pn = 0;
   int *_Nr = 0;

   ::_get_stream_buffer_pointers(
    _File,
    reinterpret_cast<char***>(&_Pb),
    reinterpret_cast<char***>(&_Pn),
    &_Nr);
   int *_Nw = _Nr;

   _Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);
   }

  _Myfile = _File;
  _State = _Stinit;
  _Pcvt = 0;
  }

 bool _Endwrite()
  {
  if (_Pcvt == 0 || !_Wrotesome)
   return (true);
  else
   {
   const int _STRING_INC = 8;
   char *_Dest;
   if (_Traits::eq_int_type(_Traits::eof(), overflow()))
    return (false);

   string _Str(_STRING_INC, '\0');
   for (; ; )
    switch (_Pcvt->unshift(_State,
     &*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
    {
    case codecvt_base::ok:
     _Wrotesome = false;

    case codecvt_base::partial:
     {
     size_t _Count = _Dest - &*_Str.begin();
     if (0 < _Count && _Count !=
      fwrite(&*_Str.begin(), 1, _Count, _Myfile))
      return (false);
     if (!_Wrotesome)
      return (true);
     if (_Count == 0)
      _Str.append(_STRING_INC, '\0');
     break;
     }

    case codecvt_base::noconv:
     return (true);

    default:
     return (false);
    }
   }
  }

 void _Initcvt(const _Cvt *_Newpcvt)
  {
  if (_Newpcvt->always_noconv())
   _Pcvt = 0;
  else
   {
   _Pcvt = _Newpcvt;
   _Mysb::_Init();
   }
  }

private:
 const _Cvt *_Pcvt;
 _Elem _Mychar;
 bool _Wrotesome;
 typename _Traits::state_type _State;
 bool _Closef;
 FILE *_Myfile;

 void _Reset_back()
  {
  if (_Mysb::eback() == &_Mychar)
   _Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);
  }

 void _Set_back()
  {
  if (_Mysb::eback() != &_Mychar)
   {
   _Set_eback = _Mysb::eback();
   _Set_egptr = _Mysb::egptr();
   }
  _Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);
  }

 _Elem *_Set_eback;
 _Elem *_Set_egptr;
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_filebuf<_Elem, _Traits>& _Left,
  basic_filebuf<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits>
 class basic_ifstream
  : public basic_istream<_Elem, _Traits>
 {
public:
 typedef basic_ifstream<_Elem, _Traits> _Myt;
 typedef basic_istream<_Elem, _Traits> _Mybase;
 typedef basic_filebuf<_Elem, _Traits> _Myfb;
 typedef basic_ios<_Elem, _Traits> _Myios;

 basic_ifstream()
  : _Mybase(&_Filebuffer)
  {
  }

 explicit basic_ifstream(const char *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ifstream(const string& _Str,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ifstream(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ifstream(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_ifstream(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_ifstream(FILE *_File)
  : _Mybase(&_Filebuffer),
   _Filebuffer(_File)
  {
  }

 basic_ifstream(_Myt&& _Right)
  : _Mybase(&_Filebuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Filebuffer.close();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Filebuffer.swap(_Right._Filebuffer);
   }
  }

 basic_ifstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 void open(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }


 void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }



 void open(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }


 void open(const unsigned short *_Filename,
  ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }



 virtual ~basic_ifstream() noexcept
  {
  }

 _Myfb *rdbuf() const
  {
  return ((_Myfb *)&_Filebuffer);
  }

 bool is_open() const
  {
  return (_Filebuffer.is_open());
  }

 void open(const char *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const string& _Str,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }


 void open(const char *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }


 void close()
  {
  if (_Filebuffer.close() == 0)
   _Myios::setstate(ios_base::failbit);
  }

private:
 _Myfb _Filebuffer;
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_ifstream<_Elem, _Traits>& _Left,
  basic_ifstream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits>
 class basic_ofstream
  : public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_ofstream<_Elem, _Traits> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Mybase;
 typedef basic_filebuf<_Elem, _Traits> _Myfb;
 typedef basic_ios<_Elem, _Traits> _Myios;

 basic_ofstream()
  : _Mybase(&_Filebuffer)
  {
  }

 explicit basic_ofstream(const char *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ofstream(const string& _Str,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ofstream(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ofstream(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_ofstream(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_ofstream(FILE *_File)
  : _Mybase(&_Filebuffer),
   _Filebuffer(_File)
  {
  }

 basic_ofstream(_Myt&& _Right)
  : _Mybase(&_Filebuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Filebuffer.close();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Filebuffer.swap(_Right._Filebuffer);
   }
  }

 basic_ofstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 void open(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }


 void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }



 void open(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }


 void open(const unsigned short *_Filename,
  ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }



 virtual ~basic_ofstream() noexcept
  {
  }

 _Myfb *rdbuf() const
  {
  return ((_Myfb *)&_Filebuffer);
  }

 bool is_open() const
  {
  return (_Filebuffer.is_open());
  }

 void open(const char *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const string& _Str,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }


 void open(const char *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }


 void close()
  {
  if (_Filebuffer.close() == 0)
   _Myios::setstate(ios_base::failbit);
  }

private:
 _Myfb _Filebuffer;
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_ofstream<_Elem, _Traits>& _Left,
  basic_ofstream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits>
 class basic_fstream
  : public basic_iostream<_Elem, _Traits>
 {
public:
 typedef basic_fstream<_Elem, _Traits> _Myt;
 typedef basic_iostream<_Elem, _Traits> _Mybase;
 typedef basic_filebuf<_Elem, _Traits> _Myfb;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 basic_fstream()
  : _Mybase(&_Filebuffer)
  {
  }

 explicit basic_fstream(const char *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_fstream(const string& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_fstream(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_fstream(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_fstream(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_fstream(FILE *_File)
  : _Mybase(&_Filebuffer),
   _Filebuffer(_File)
  {
  }

 basic_fstream(_Myt&& _Right)
  : _Mybase(&_Filebuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Filebuffer.close();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Filebuffer.swap(_Right._Filebuffer);
   }
  }

 basic_fstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 void open(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }


 void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }



 void open(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }


 void open(const unsigned short *_Filename,
  ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }



 virtual ~basic_fstream() noexcept
  {
  }

 _Myfb *rdbuf() const
  {
  return ((_Myfb *)&_Filebuffer);
  }

 bool is_open() const
  {
  return (_Filebuffer.is_open());
  }

 void open(const char *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const string& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }


 void open(const char *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }


 void close()
  {
  if (_Filebuffer.close() == 0)
   _Myios::setstate(ios_base::failbit);
 }

private:
 _Myfb _Filebuffer;
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_fstream<_Elem, _Traits>& _Left,
  basic_fstream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 7 "D:\\Graphics-programming\\D3D_Template\\D3D_Template/TerrainShader.h" 2


class CTerrainShader
{
private:
 struct MatrixBufferType
 {
  XMMATRIX world;
  XMMATRIX view;
  XMMATRIX projection;
 };

 struct LightBufferType
 {
  XMFLOAT4 diffuseColor;
  XMFLOAT3 lightDirection;
  float padding;
 };

public:
 CTerrainShader();
 CTerrainShader(const CTerrainShader&);
 ~CTerrainShader();

 bool Initialize(ID3D11Device*, HWND);
 void Shutdown();
 bool Render(ID3D11DeviceContext*, int, XMMATRIX&, XMMATRIX&, XMMATRIX&, ID3D11ShaderResourceView*, ID3D11ShaderResourceView*,
  XMFLOAT3, XMFLOAT4);

private:
 bool InitializeShader(ID3D11Device*, HWND, WCHAR*, WCHAR*);
 void ShutdownShader();
 void OutputShaderErrorMessage(ID3D10Blob*, HWND, WCHAR*);

 bool SetShaderParameters(ID3D11DeviceContext*, XMMATRIX&, XMMATRIX&, XMMATRIX&, ID3D11ShaderResourceView*, ID3D11ShaderResourceView*,
  XMFLOAT3, XMFLOAT4);
 void RenderShader(ID3D11DeviceContext*, int);

private:
 ID3D11VertexShader* m_vertexShader;
 ID3D11PixelShader* m_pixelShader;
 ID3D11InputLayout* m_layout;
 ID3D11Buffer* m_matrixBuffer;
 ID3D11SamplerState* m_sampleState;
 ID3D11Buffer* m_lightBuffer;
};
# 2 "d:\\graphics-programming\\d3d_template\\d3d_template\\terrainshader.cpp" 2



using namespace std;


CTerrainShader::CTerrainShader()
{
 m_vertexShader = 0;
 m_pixelShader = 0;
 m_layout = 0;
 m_matrixBuffer = 0;
 m_sampleState = 0;
 m_lightBuffer = 0;
}


CTerrainShader::CTerrainShader(const CTerrainShader& other)
{
}


CTerrainShader::~CTerrainShader()
{
}


bool CTerrainShader::Initialize(ID3D11Device* device, HWND hwnd)
{
 bool result;



 result = InitializeShader(device, hwnd, L"TerrainVS.hlsl", L"TerrainPS.hlsl");
 if (!result)
 {
  return false;
 }

 return true;
}


void CTerrainShader::Shutdown()
{

 ShutdownShader();

 return;
}


bool CTerrainShader::Render(ID3D11DeviceContext* deviceContext, int indexCount, XMMATRIX& worldMatrix, XMMATRIX& viewMatrix,
 XMMATRIX& projectionMatrix, ID3D11ShaderResourceView* texture, ID3D11ShaderResourceView* normalMap,
 XMFLOAT3 lightDirection, XMFLOAT4 diffuseColor)
{
 bool result;



 result = SetShaderParameters(deviceContext, worldMatrix, viewMatrix, projectionMatrix, texture, normalMap, lightDirection, diffuseColor);
 if (!result)
 {
  return false;
 }


 RenderShader(deviceContext, indexCount);

 return true;
}


bool CTerrainShader::InitializeShader(ID3D11Device* device, HWND hwnd, WCHAR* vsFilename, WCHAR* psFilename)
{
 HRESULT result;
 ID3D10Blob* errorMessage;
 ID3D10Blob* vertexShaderBuffer;
 ID3D10Blob* pixelShaderBuffer;
 D3D11_INPUT_ELEMENT_DESC polygonLayout[6];
 unsigned int numElements;
 D3D11_BUFFER_DESC matrixBufferDesc;
 D3D11_SAMPLER_DESC samplerDesc;
 D3D11_BUFFER_DESC lightBufferDesc;



 errorMessage = 0;
 vertexShaderBuffer = 0;
 pixelShaderBuffer = 0;


 result = D3DCompileFromFile(vsFilename, 0, 0, "TerrainVertexShader", "vs_5_0", (1 << 11), 0,
  &vertexShaderBuffer, &errorMessage);
 if ((((HRESULT)(result)) < 0))
 {

  if (errorMessage)
  {
   OutputShaderErrorMessage(errorMessage, hwnd, vsFilename);
  }

  else
  {
   MessageBoxW(hwnd, vsFilename, L"Missing Shader File", 0x00000000L);
  }

  return false;
 }


 result = D3DCompileFromFile(psFilename, 0, 0, "TerrainPixelShader1", "ps_5_0", (1 << 11), 0,
  &pixelShaderBuffer, &errorMessage);
 if ((((HRESULT)(result)) < 0))
 {

  if (errorMessage)
  {
   OutputShaderErrorMessage(errorMessage, hwnd, psFilename);
  }

  else
  {
   MessageBoxW(hwnd, psFilename, L"Missing Shader File", 0x00000000L);
  }

  return false;
 }


 result = device->CreateVertexShader(vertexShaderBuffer->GetBufferPointer(), vertexShaderBuffer->GetBufferSize(), 0, &m_vertexShader);
 if ((((HRESULT)(result)) < 0))
 {
  return false;
 }


 result = device->CreatePixelShader(pixelShaderBuffer->GetBufferPointer(), pixelShaderBuffer->GetBufferSize(), 0, &m_pixelShader);
 if ((((HRESULT)(result)) < 0))
 {
  return false;
 }


 polygonLayout[0].SemanticName = "POSITION";
 polygonLayout[0].SemanticIndex = 0;
 polygonLayout[0].Format = DXGI_FORMAT_R32G32B32_FLOAT;
 polygonLayout[0].InputSlot = 0;
 polygonLayout[0].AlignedByteOffset = 0;
 polygonLayout[0].InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
 polygonLayout[0].InstanceDataStepRate = 0;

 polygonLayout[1].SemanticName = "TEXCOORD";
 polygonLayout[1].SemanticIndex = 0;
 polygonLayout[1].Format = DXGI_FORMAT_R32G32_FLOAT;
 polygonLayout[1].InputSlot = 0;
 polygonLayout[1].AlignedByteOffset = ( 0xffffffff );
 polygonLayout[1].InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
 polygonLayout[1].InstanceDataStepRate = 0;

 polygonLayout[2].SemanticName = "NORMAL";
 polygonLayout[2].SemanticIndex = 0;
 polygonLayout[2].Format = DXGI_FORMAT_R32G32B32_FLOAT;
 polygonLayout[2].InputSlot = 0;
 polygonLayout[2].AlignedByteOffset = ( 0xffffffff );
 polygonLayout[2].InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
 polygonLayout[2].InstanceDataStepRate = 0;

 polygonLayout[3].SemanticName = "TANGENT";
 polygonLayout[3].SemanticIndex = 0;
 polygonLayout[3].Format = DXGI_FORMAT_R32G32B32_FLOAT;
 polygonLayout[3].InputSlot = 0;
 polygonLayout[3].AlignedByteOffset = ( 0xffffffff );
 polygonLayout[3].InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
 polygonLayout[3].InstanceDataStepRate = 0;

 polygonLayout[4].SemanticName = "BINORMAL";
 polygonLayout[4].SemanticIndex = 0;
 polygonLayout[4].Format = DXGI_FORMAT_R32G32B32_FLOAT;
 polygonLayout[4].InputSlot = 0;
 polygonLayout[4].AlignedByteOffset = ( 0xffffffff );
 polygonLayout[4].InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
 polygonLayout[4].InstanceDataStepRate = 0;

 polygonLayout[5].SemanticName = "COLOR";
 polygonLayout[5].SemanticIndex = 0;
 polygonLayout[5].Format = DXGI_FORMAT_R32G32B32_FLOAT;
 polygonLayout[5].InputSlot = 0;
 polygonLayout[5].AlignedByteOffset = ( 0xffffffff );
 polygonLayout[5].InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
 polygonLayout[5].InstanceDataStepRate = 0;


 numElements = sizeof(polygonLayout) / sizeof(polygonLayout[0]);


 result = device->CreateInputLayout(polygonLayout, numElements, vertexShaderBuffer->GetBufferPointer(),
  vertexShaderBuffer->GetBufferSize(), &m_layout);
 if ((((HRESULT)(result)) < 0))
 {
  return false;
 }


 vertexShaderBuffer->Release();
 vertexShaderBuffer = 0;

 pixelShaderBuffer->Release();
 pixelShaderBuffer = 0;


 matrixBufferDesc.Usage = D3D11_USAGE_DYNAMIC;
 matrixBufferDesc.ByteWidth = sizeof(MatrixBufferType);
 matrixBufferDesc.BindFlags = D3D11_BIND_CONSTANT_BUFFER;
 matrixBufferDesc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
 matrixBufferDesc.MiscFlags = 0;
 matrixBufferDesc.StructureByteStride = 0;


 result = device->CreateBuffer(&matrixBufferDesc, 0, &m_matrixBuffer);
 if ((((HRESULT)(result)) < 0))
 {
  return false;
 }


 samplerDesc.Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;
 samplerDesc.AddressU = D3D11_TEXTURE_ADDRESS_CLAMP;
 samplerDesc.AddressV = D3D11_TEXTURE_ADDRESS_CLAMP;
 samplerDesc.AddressW = D3D11_TEXTURE_ADDRESS_CLAMP;
 samplerDesc.MipLODBias = 0.0f;
 samplerDesc.MaxAnisotropy = 1;
 samplerDesc.ComparisonFunc = D3D11_COMPARISON_ALWAYS;
 samplerDesc.BorderColor[0] = 0;
 samplerDesc.BorderColor[1] = 0;
 samplerDesc.BorderColor[2] = 0;
 samplerDesc.BorderColor[3] = 0;
 samplerDesc.MinLOD = 0;
 samplerDesc.MaxLOD = ( 3.402823466e+38f );


 result = device->CreateSamplerState(&samplerDesc, &m_sampleState);
 if ((((HRESULT)(result)) < 0))
 {
  return false;
 }


 lightBufferDesc.Usage = D3D11_USAGE_DYNAMIC;
 lightBufferDesc.ByteWidth = sizeof(LightBufferType);
 lightBufferDesc.BindFlags = D3D11_BIND_CONSTANT_BUFFER;
 lightBufferDesc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
 lightBufferDesc.MiscFlags = 0;
 lightBufferDesc.StructureByteStride = 0;


 result = device->CreateBuffer(&lightBufferDesc, 0, &m_lightBuffer);
 if ((((HRESULT)(result)) < 0))
 {
  return false;
 }

 return true;
}


void CTerrainShader::ShutdownShader()
{

 if (m_lightBuffer)
 {
  m_lightBuffer->Release();
  m_lightBuffer = 0;
 }


 if (m_sampleState)
 {
  m_sampleState->Release();
  m_sampleState = 0;
 }


 if (m_matrixBuffer)
 {
  m_matrixBuffer->Release();
  m_matrixBuffer = 0;
 }


 if (m_layout)
 {
  m_layout->Release();
  m_layout = 0;
 }


 if (m_pixelShader)
 {
  m_pixelShader->Release();
  m_pixelShader = 0;
 }


 if (m_vertexShader)
 {
  m_vertexShader->Release();
  m_vertexShader = 0;
 }

 return;
}


void CTerrainShader::OutputShaderErrorMessage(ID3D10Blob* errorMessage, HWND hwnd, WCHAR* shaderFilename)
{
 char* compileErrors;
 unsigned long long bufferSize, i;
 ofstream fout;



 compileErrors = (char*)(errorMessage->GetBufferPointer());


 bufferSize = errorMessage->GetBufferSize();


 fout.open("shader-error.txt");


 for (i = 0; i<bufferSize; i++)
 {
  fout << compileErrors[i];
 }


 fout.close();


 errorMessage->Release();
 errorMessage = 0;


 MessageBoxW(hwnd, L"Error compiling shader.  Check shader-error.txt for message.", shaderFilename, 0x00000000L);

 return;
}


bool CTerrainShader::SetShaderParameters(ID3D11DeviceContext* deviceContext, XMMATRIX& worldMatrix, XMMATRIX& viewMatrix,
 XMMATRIX& projectionMatrix, ID3D11ShaderResourceView* texture, ID3D11ShaderResourceView* normalMap,
 XMFLOAT3 lightDirection, XMFLOAT4 diffuseColor)
{
 HRESULT result;
 D3D11_MAPPED_SUBRESOURCE mappedResource;
 MatrixBufferType* dataPtr;
 unsigned int bufferNumber;
 LightBufferType* dataPtr2;



 worldMatrix = XMMatrixTranspose(worldMatrix);
 viewMatrix = XMMatrixTranspose(viewMatrix);
 projectionMatrix = XMMatrixTranspose(projectionMatrix);


 result = deviceContext->Map(m_matrixBuffer, 0, D3D11_MAP_WRITE_DISCARD, 0, &mappedResource);
 if ((((HRESULT)(result)) < 0))
 {
  return false;
 }


 dataPtr = (MatrixBufferType*)mappedResource.pData;


 dataPtr->world = worldMatrix;
 dataPtr->view = viewMatrix;
 dataPtr->projection = projectionMatrix;


 deviceContext->Unmap(m_matrixBuffer, 0);


 bufferNumber = 0;


 deviceContext->VSSetConstantBuffers(bufferNumber, 1, &m_matrixBuffer);


 deviceContext->PSSetShaderResources(0, 1, &texture);
 deviceContext->PSSetShaderResources(1, 1, &normalMap);


 result = deviceContext->Map(m_lightBuffer, 0, D3D11_MAP_WRITE_DISCARD, 0, &mappedResource);
 if ((((HRESULT)(result)) < 0))
 {
  return false;
 }


 dataPtr2 = (LightBufferType*)mappedResource.pData;


 dataPtr2->diffuseColor = diffuseColor;
 dataPtr2->lightDirection = lightDirection;
 dataPtr2->padding = 0.0f;


 deviceContext->Unmap(m_lightBuffer, 0);


 bufferNumber = 0;


 deviceContext->PSSetConstantBuffers(bufferNumber, 1, &m_lightBuffer);

 return true;
}


void CTerrainShader::RenderShader(ID3D11DeviceContext* deviceContext, int indexCount)
{

 deviceContext->IASetInputLayout(m_layout);


 deviceContext->VSSetShader(m_vertexShader, 0, 0);
 deviceContext->PSSetShader(m_pixelShader, 0, 0);


 deviceContext->PSSetSamplers(0, 1, &m_sampleState);


 deviceContext->DrawIndexed(indexCount, 0, 0);

 return;
}
